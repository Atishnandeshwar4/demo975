IF EXISTS (SELECT TOP 1 1 FROM Sys.Tables WHERE Name = 'ZnodeMultifront')
BEGIN 
IF EXISTS (SELECT TOP 1 1 FROM ZnodeMultifront where BuildVersion =   975 and VersionName = 'Znode_Multifront_9_7_5_GA' )
BEGIN
PRINT 'Script is already executed....'
 SET NOEXEC ON 
END 
END
ELSE 
BEGIN 
  SET NOEXEC ON
END 
INSERT INTO [dbo].[ZnodeMultifront] ( [VersionName], [Descriptions], [MajorVersion], [MinorVersion], [LowerVersion], [BuildVersion], [PatchIndex], [CreatedBy], 
[CreatedDate], [ModifiedBy], [ModifiedDate]) 
VALUES ( N'Znode_Multifront_9_7_5_GA', N'Upgrade GA Release by 975',9,7,5,975,0,2, GETDATE(),2, GETDATE())
GO 
SET ANSI_NULLS ON

GO

insert into ZnodeGlobalAttribute
(AttributeTypeId, AttributeCode, IsRequired, IsLocalizable, IsActive, DisplayOrder,HelpDescription,CreatedBy, CreatedDate, ModifiedBy,ModifiedDate, IsSystemDefined, GlobalEntityId)
select (select top 1 AttributeTypeId from ZnodeAttributeType where AttributeTypeName ='Yes/No' ),'EnableTradeCentric',0,1,1,2,
'When this setting is checked and saved, Znode can be accessed through the TradeCentric.',2,getdate(),2,getdate(),0, 
(select top 1 GlobalEntityId from znodeGlobalEntity where EntityName ='Store')
where not exists  (select AttributeCode from  ZnodeGlobalAttribute where AttributeCode ='EnableTradeCentric')

insert into ZnodeGlobalAttributeLocale(LocaleId,GlobalAttributeId,AttributeName,Description,CreatedBy,
CreatedDate,ModifiedBy,ModifiedDate)
select 1,(select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode='EnableTradeCentric'),
'Enable TradeCentric',NULL,2,GETDATE(),2,GETDATE()
where not exists (select * from ZnodeGlobalAttributeLocale 
where GlobalAttributeId=(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode='EnableTradeCentric') and LocaleId = 1)

insert into ZnodeGlobalAttributeGroup(GroupCode,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsSystemDefined,GlobalEntityId)
select 'TradeCentric',null,2,getdate(),2,getdate(),0,1
where not exists(select * from ZnodeGlobalAttributeGroup where GroupCode = 'TradeCentric')

insert into ZnodeGlobalAttributeGroupLocale(LocaleId,GlobalAttributeGroupId,AttributeGroupName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select 1,GlobalAttributeGroupId,'TradeCentric',null,2,getdate(),2,getdate()
from ZnodeGlobalAttributeGroup a
where GroupCode = 'TradeCentric'
and not exists(select * from ZnodeGlobalAttributeGroupLocale b where b.GlobalAttributeGroupId= a.GlobalAttributeGroupId and b.LocaleId = 1)

insert into ZnodeGlobalAttributeGroupMapper (GlobalAttributeGroupId,GlobalAttributeId,AttributeDisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'TradeCentric'),
(select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'EnableTradeCentric'),null,2,getdate(),2,getdate()
where not exists(select * from ZnodeGlobalAttributeGroupMapper 
where GlobalAttributeGroupId = (select top 1 GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'TradeCentric')
and GlobalAttributeId = (select top 1 GlobalAttributeId from ZnodeGlobalAttribute where AttributeCode = 'EnableTradeCentric'))
	 
insert into ZnodeGlobalGroupEntityMapper(GlobalAttributeGroupId,GlobalEntityId,AttributeGroupDisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
select (select top 1 GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'TradeCentric'),
(select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store'),1, 2,getdate(),2,GETDATE()
where not exists(select * from ZnodeGlobalGroupEntityMapper where GlobalAttributeGroupId=(select top 1 GlobalAttributeGroupId from ZnodeGlobalAttributeGroup where GroupCode = 'TradeCentric')
and GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store'))

INSERT INTO ZnodeGlobalFamilyGroupMapper (GlobalAttributeFamilyId, GlobalAttributeGroupId, AttributeGroupDisplayOrder,CreatedBy, CreatedDate, ModifiedBy, ModifiedDate)
SELECT
(SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store'),
(SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'TradeCentric' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store')), 9r,
2, getdate(), 2, getdate()
WHERE NOT EXISTS(select * from ZnodeGlobalFamilyGroupMapper where
GlobalAttributeFamilyId = (SELECT top 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily WHERE FamilyCode = 'Store') and
GlobalAttributeGroupId = (SELECT top 1 GlobalAttributeGroupId FROM ZnodeGlobalAttributeGroup WHERE GroupCode = 'TradeCentric' AND GlobalEntityId = (select top 1 GlobalEntityId from ZnodeGlobalEntity where EntityName = 'Store'))
)

GO

DELETE FROM ZnodeActionMenu
WHERE ActionId = (SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Order' AND ActionName= 'CheckoutReceipt')
AND MenuId = (SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName='OMS' AND ParentMenuId IS NULL)

GO

UPDATE ZnodeAttributeInputValidationRule 
SET ValidationName=UPPER(ValidationName) WHERE ValidationName='Url'
AND ValidationName != UPPER(ValidationName) COLLATE Latin1_General_CS_AS

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetOmsGroupOrderListExpandDetail')
	DROP PROC Znode_GetOmsGroupOrderListExpandDetail
GO

CREATE PROCEDURE [dbo].[Znode_GetOmsGroupOrderListExpandDetail]  
( @WhereClause NVARCHAR(MAx),  
  @Rows        INT            = 10,  
  @PageNo      INT            = 1,  
  @Order_BY    VARCHAR(1000)  = '',  
  @UserId      INT = 0 ,  
  @IsFromAdmin int =0  ,
  @Expands    NVARCHAR(2000) = '' 
  )  
AS  
  /*  
     Summary : This procedure is used to get the oms order detils  
      Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables  
  Unit Testing:  
 
     EXEC _Znode_GetOmsGroupOrderListExpandDetail 'orderstate like ''%submitted%'' ',@Order_BY = '', @UserId = 0 ,@Rows = 50,@IsFromAdmin=1 , @PageNo = 1,@Expands = 'ZnodeOmsOrderShipment,ZnodeOmsOrderLineItems,Znodeomsorderlinepersonalize'  
*/  

BEGIN  
	BEGIN TRY  
		SET NOCOUNT ON;  
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order',@RowsCount INT = 0   
			--SET @Rows = 10 
  
		CREATE TABLE #TBL_OrderList  (OmsOrderId INT,OrderNumber VARCHAR(200),PortalId INT,StoreName NVARCHAR(MAX),CurrencyCode VARCHAR(100),OrderState NVARCHAR(150),ShippingId INT ,  
		PaymentTypeId INT,PaymentSettingId INT,PaymentStatus NVARCHAR(MAX),PaymentType VARCHAR(100),ShippingStatus BIT ,OrderDate DATETIME,UserId INT,UserName VARCHAR(300),PaymentTransactionToken NVARCHAR(600),Total NUMERIC(28,6),  
		OrderItem NVARCHAR(1000),OmsOrderDetailsId INT, ItemCount INT,PODocumentPath NVARCHAR(600),IsInRMA BIT,CreatedByName NVARCHAr(150),ModifiedByName NVARCHAR(150),RowId INT,CountNo INT,Email NVARCHAR(150),PhoneNumber NVARCHAR(150),  
		SubTotal NUMERIC(28,6),TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6),BillingPostalCode NVARCHAR(200),ShippingPostalCode NVARCHAR(200),OrderModifiedDate datetime, PaymentDisplayName nvarchar(1200), ExternalId nvarchar(1000)  
		,BillingAddress NVARCHAR(max),ShippingCode nvarchar (max),CreditCardExpMonth	int,CreditCardExpYear	int,CardType	varchar(50),CreditCardNumber varchar(10),Custom1 NVARCHAR(500),Custom2 NVARCHAR(500),Custom3 NVARCHAR(500),Custom4 NVARCHAR(500),Custom5 NVARCHAR(500),PurchaseOrderNumber NVARCHAR(500) , PaymentExternalId nvarchar(1000) 
		,ID int Identity (1,1) Primary Key)  
  
  
		CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
		insert into #Portal
		select PortalId,StoreName
		from ZnodePortal
		--SET  @Rows = 10
     SET @SQL = '  
  
     SELECT Zoo.OmsOrderId,Zoo.OrderNumber, Zp.PortalId,Zp.StoreName ,ZODD.CurrencyCode,case when ZOS.IsShowToCustomer=0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.  
     PaymentTypeId,ZODD.PaymentSettingId,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(ZODD.FirstName,'''')  
      +'' ''+ISNULL(ZODD.LastName,'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.Total ,ZODD.OmsOrderDetailsId,ZODD.PoDocument PODocumentPath,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,  
      ZODD.ModifiedDate AS OrderModifiedDate, ZODD.PaymentDisplayName,isnull(Zoo.ExternalId,0) ExternalId  
       ,BillingFirstName ,BillingLastName ,BillingCompanyName   
    ,BillingStreet1  ,BillingStreet2 ,BillingCity ,BillingStateCode   
    ,BillingCountry ,BillingPhoneNumber ,BillingEmailId,zs.ShippingCode,ZODD.CreditCardExpMonth
	,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.Custom1, ZODD.Custom2, ZODD.Custom3, ZODD.Custom4, ZODD.Custom5,
	ZODD.PurchaseOrderNumber,ZODD.PaymentExternalId
     INTO #TempOrderData   
     FROM ZnodeOmsOrder ZOO  with (nolock) 
     INNER JOIN ZnodeOmsOrderDetails ZODD with (nolock)  ON ( ZOO.OmsOrderId = ZODD.OmsOrderId )  
     INNER JOIN #Portal ZP ON (ZP.PortalId = ZODD.portalId )  
     LEFT JOIN ZnodePaymentType ZPS with (nolock)  ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )  
     LEFT JOIN ZnodeOmsOrderStateShowToCustomer ZOSC with (nolock) ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)  
     LEFT JOIN ZnodeOmsOrderState ZOS with (nolock) ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)  
     LEFT JOIN ZnodeOmsPaymentState ZOPS with (nolock) ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId) 
     LEFT JOIN ZnodeShipping ZS with (nolock) ON (ZS.ShippingId = ZODD.ShippingId)  

     WHERE  ZODD.IsActive = 1 AND (ZODD.UserId ='+ CAST(@UserId AS VARCHAR(50))+'  OR '+ CAST(@UserId AS VARCHAR(50))+' =0  )
  
    ;with Cte_PagingData AS   
    (  
    SELECT *,'+dbo.Fn_GetPagingRowId(@Order_BY,'OmsOrderId DESC,OmsOrderDetailsId DESC')+',Count(*)Over() CountNo   
    FROM #TempOrderData  a   
    WHERE 1= 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'   
    )   
     
    SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,  
      PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId  
      ,UserName,PaymentTransactionToken,Total,OmsOrderDetailsId, PODocumentPath,RowId,CountNo,SubTotal,TaxCost,ShippingCost, BillingPostalCode
      ,OrderModifiedDate,PaymentDisplayName ,ExternalId,(SELECT BillingFirstName FirstName ,BillingLastName LastName ,BillingCompanyName   
    ,BillingStreet1 Address1  ,BillingStreet2 Address2 ,BillingCity CityName ,BillingStateCode StateName  ,BillingPostalCode PostalCode
    ,BillingCountry CountryName,BillingPhoneNumber PhoneNumber ,BillingEmailId EmailAddress  FOR JSON PATH,WITHOUT_ARRAY_WRAPPER ) BillingAddress, ShippingCode
	,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber, Custom1, Custom2, Custom3, Custom4, Custom5, PurchaseOrderNumber,PaymentExternalId
    FROM Cte_PagingData   
    '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)  
    
	INSERT INTO #TBL_OrderList(OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,  
	PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId
	,UserName,PaymentTransactionToken,Total,OmsOrderDetailsId,PODocumentPath,RowId,CountNo,SubTotal,TaxCost,ShippingCost, BillingPostalCode
	,OrderModifiedDate,PaymentDisplayName ,ExternalId,BillingAddress,ShippingCode
	,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,Custom1,Custom2,Custom3,Custom4,Custom5,PurchaseOrderNumber,PaymentExternalId)
	EXEC(@SQL)  

	SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM #TBL_OrderList),0)  
   
	SELECT *   
	INTO #ZnodeOmsOrderLineItems   
	FROM ZnodeOmsOrderLineItems a with (nolock)   
	WHERE EXISTS (SELECT TOP 1 1  FROM #TBL_OrderList ty WHERE ty.OmsOrderDetailsId = a.OmsOrderDetailsId )   
	AND (EXISTS (SELECT TOP 1 1 FROM dbo.Split(@Expands, ',') TH WHERE TH.Item = 'ZnodeOmsOrderLineItems' ) 
	OR @Expands = '' ) 

	SELECT  OmsOrderShipmentId ,ShipToFirstName FirstName, ShipToLastName LastName,ShipToCountry CountryName,ShipToStateCode StateName
			, ShipToCity CityName,ShipToPostalCode PostalCode,ShipToPhoneNumber PhoneNumber,ShipToEmailId EmailAddress , 
			ShipToStreet1 Address1,ShipToStreet2 Address2
	INTO   #ZnodeOmsOrderShipment  
	FROM ZnodeOmsOrderShipment a with (nolock)   
	WHERE EXISTS (SELECT TOP 1 1  FROM #ZnodeOmsOrderLineItems TY WHERE TY.OmsOrderShipmentId = a.OmsOrderShipmentId)   
	AND (EXISTS (SELECT TOP 1 1 FROM dbo.Split(@Expands, ',') TH WHERE TH.Item = 'ZnodeOmsOrderShipment')    
  		OR @Expands = '' ) 

	SELECT DISTINCT  h.OmsOrderDetailsId , (SELECT TOP 1  (SELECT DISTINCT  a.OmsOrderShipmentId ,a.FirstName, a.LastName,a.CountryName,a.StateName
			, a.CityName,a.PostalCode,a.PhoneNumber,a.EmailAddress , 
			a.Address1,a.Address2 FOR JSON PATH,WITHOUT_ARRAY_WRAPPER ) ShippingAddress
			FROM #ZnodeOmsOrderShipment a  
			INNER JOIN  #ZnodeOmsOrderLineItems b ON(b.OmsOrderShipmentId = a.OmsOrderShipmentId)
			WHERE h.OmsOrderDetailsId = b.OmsOrderDetailsId)  ShippingAddress
	INTO #ZnodeOmsOrderShipmentOuter
	FROM  #TBL_OrderList H 

   SELECT AttributeCode,AttributeValue,AttributeValueCode ,OmsOrderLineItemsId  
   INTO #ZnodeOmsOrderAttribute  
   FROM ZnodeOmsOrderAttribute a   with (nolock) 
   WHERE EXISTS (SELECT TOP 1  1  FROM #ZnodeOmsOrderLineItems TY WHERE TY.OmsOrderLineItemsId = a.OmsOrderLineItemsId)   

        
   SELECT (SELECT  OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,  
   PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,  
   OrderItem,OmsOrderDetailsId, ItemCount, PODocumentPath,IsInRMA ,SubTotal
   ,TaxCost,ShippingCost,ShippingPostalCode,OrderModifiedDate,PaymentDisplayName,ExternalId,ShippingCode
   ,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,Custom1,Custom2,Custom3,Custom4,Custom5,PurchaseOrderNumber,PaymentExternalId
    ,(SELECT r.*,(SELECT aa.* ,(SELECT *  
       FROM #ZnodeOmsOrderShipment a   
       WHERE a.OmsOrderShipmentId = aa.OmsOrderShipmentId   
       FOR JSON PATH ) ShippingAddress ,(SELECT AttributeCode,AttributeValue,AttributeValueCode  
       FROM #ZnodeOmsOrderAttribute o  
       WHERE o.OmsOrderLineItemsId =aa.OmsOrderLineItemsId   
       FOR JSON PATH ) Attributes   
       FROM #ZnodeOmsOrderLineItems aa   
       WHERE aa.ParentOmsOrderLineItemsId = r.OmsOrderLineItemsId   
	   AND aa.OrderLineItemRelationshipTypeId IS NOT NULL  
	   ORDER BY aa.OmsOrderLineItemsId 
       FOR JSON PATH ) OrderLineItemCollection,(SELECT *  
       FROM #ZnodeOmsOrderShipment a   
       WHERE a.OmsOrderShipmentId = r.OmsOrderShipmentId   
       FOR JSON PATH ) ShippingAddress  
       ,(SELECT AttributeCode,AttributeValue,AttributeValueCode  
       FROM #ZnodeOmsOrderAttribute o  
       WHERE o.OmsOrderLineItemsId = r.OmsOrderLineItemsId   
       FOR JSON PATH ) Attributes  
    FROM #ZnodeOmsOrderLineItems r   
    WHERE r.OmsOrderDetailsId = p.OmsOrderDetailsId 
	AND r.OrderLineItemRelationshipTypeId IS NULL 
	ORDER BY r.OmsOrderLineItemsId 
    FOR JSON PATH) OrderLineItems,(SELECT JSON_QUERY(BillingAddress)
               ) BillingAddress ,(SELECT JSON_QUERY(ShippingAddress)
              FROM #ZnodeOmsOrderShipmentOuter INO
			  WHERE INO.OmsOrderDetailsId = p.OmsOrderDetailsId  ) ShippingAddress  FOR JSON PATH ,WITHOUT_ARRAY_WRAPPER) OrderJSON  ,@RowsCount RowsCount  
   FROM #TBL_OrderList p  
            
	END TRY  
    BEGIN CATCH  
             DECLARE @Status BIT ;  
       SET @Status = 0;  
       DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),  
    @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',  
    @Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');  
                    
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
      
             EXEC Znode_InsertProcedureErrorLog  
    @ProcedureName = 'Znode_GetOmsOrderDetail',  
    @ErrorInProcedure = 'Znode_GetOmsOrderDetail',  
    @ErrorMessage = @ErrorMessage,  
    @ErrorLine = @ErrorLine,  
    @ErrorCall = @ErrorCall;  
    END CATCH;  
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetOrderByPagingProduct')
	DROP PROC Znode_GetOrderByPagingProduct
GO

CREATE PROCEDURE [dbo].[Znode_GetOrderByPagingProduct]
(
 @Order_by  Nvarchar(max)
 ,@Rows     INT =10 
 ,@PageNo   INT =1 
 ,@PimProductId TransferId Readonly 
 ,@AttributeCode VARCHAR(max)= ''
 ,@localeId INT  
 ,@PimCategoryHierarchyId INT  = 0
 ,@PortalId INT = 0 
 ,@PimCategoryId INT=NULL
)
AS 
BEGIN 
 SET NOCOUNT ON 
 SET @AttributeCode = CASE WHEN @AttributeCode = '' OR  @AttributeCode IS NULL THEN REPLACE(REPLACE (@Order_by , ' DESC',''),' ASC','')

  ELSE @AttributeCode END 
 DECLARE @StartId INT =  CASE WHEN @PageNo = 1 OR @PageNo = 0 THEN 1 ELSE ((@PageNo-1)*@Rows)+1 END 
 DECLARE @EndId INT = CASE WHEN @PageNo = 0 THEN @Rows ELSE @PageNo*@Rows END
 ,@DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleID()   
 
 DECLARE @AttributeTypeName NVARCHAR(2000)= ''

 SELECT TOP 1 @AttributeTypeName = AttributeTypeName 
 FROM ZnodePimAttribute ZPA 
 INNER JOIN ZnodeAttributeType ZTY ON (ZTY.AttributeTypeId = ZPA.AttributeTypeId)
 WHERE ZPA.AttributeCode = @AttributeCode

 if object_id('tempdb..#PimProductId') is not null
	drop table #PimProductId

 SELECT * INTO #PimProductId FROM @PimProductId
 
 --CREATE INDEX Idx_#PimProductId_IND ON #PimProductId(id) 

 IF  @Order_by = '' 
 BEGIN 
  
  create table #Cte_getDataOrder( PimProductId INT, RowId INT Identity )

  INSERT INTO #Cte_getDataOrder (PimProductId)
  SELECT Id  
  FROM #PimProductId TBLP
  INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)

  SELECT PimProductId ,RowId
  FROM #Cte_getDataOrder CTE
  WHERE RowId BETWEEN @StartId AND @EndId
  order by RowId

 END 

  IF @PimCategoryHierarchyId <> 0 AND  @Order_by LIKE 'DisplayOrder%'
 BEGIN 
	create table #Cte_getData( PimProductId INT, RowId INT Identity )
	if @Order_by LIKE  '% DESC'
		INSERT INTO #Cte_getData (PimProductId)
		SELECT TBLP.Id
	    FROM #PimProductId TBLP
	    LEFT JOIN ZnodePimCategoryProduct ZPP ON TBLP.Id= ZPP.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ( ZPP.PimCategoryId = ZPCH.PimCategoryId AND ZPCH.PimCategoryHierarchyId= @PimCategoryHierarchyId )
	    group by TBLP.Id, ZPP.DisplayOrder
		ORDER BY ZPP.DisplayOrder DESC
	else
		INSERT INTO #Cte_getData (PimProductId)
		SELECT TBLP.Id
	    FROM #PimProductId TBLP
	    LEFT JOIN ZnodePimCategoryProduct ZPP ON TBLP.Id= ZPP.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ( ZPP.PimCategoryId = ZPCH.PimCategoryId AND ZPCH.PimCategoryHierarchyId= @PimCategoryHierarchyId )
	    group by TBLP.Id, ZPP.DisplayOrder
		ORDER BY ZPP.DisplayOrder ASC

	SELECT PimProductId ,RowId
	FROM #Cte_getData CTE
	WHERE RowId BETWEEN @StartId AND @EndId
	order by RowId
	
 END 
 ELSE 
  IF @PimCategoryHierarchyId <> 0 AND  @Order_by LIKE 'Price%'
 BEGIN 
         DECLARE @tbl_ProductPricingSkuOrderBy TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
						TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000),CultureCode varchar(2000), ExternalId NVARCHAR(2000))	
	     DECLARE @SKUS VARCHAR(max) 
				,@userId INT = 0,@Date DATETIME  = dbo.FN_getDate() 

				SELECT @SKUS = COALESCE(@SKUS+',' ,'') + SKU
				FROM ZnodePublishProductDetail a 
				INNER JOIN ZnodePublishProduct b ON ( a.PublishProductId =b.PublishProductId ) 
				INNER JOIN ZnodePimCategoryProduct f ON (f.PimProductId = b.PimProductId )
				INNER JOIN ZnodePimCategoryHierarchy g ON (g.PimCategoryHierarchyId= @PimCategoryHierarchyId)
				INNER JOIN ZnodePortalCatalog c ON (c.PublishCatalogId = b.PublishCatalogId)
				WHERE c.PortalId = @PortalId 
				AND EXISTS (SELECT TOP 1  1 FROM #PimProductId R WHERE b.PimProductId = R.Id)
				AND a.LocaleId =dbo.Fn_GetDefaultLocaleId()

			DECLARE @Id TransferId 

			INSERT INTO @tbl_ProductPricingSkuOrderBy		
			SELECT * FROM [dbo].[FN_GetPublishProductPricingBySku]( @SKUS,  @PortalId ,@Date, @userid,@Id)
		
		CREATE TABLE #Cte_getDataPrice ( PimProductId INT, RowId INT Identity )

		IF @Order_by LIKE  '% DESC'
			INSERT INTO #Cte_getDataPrice ( PimProductId )
			SELECT Id 
		    FROM #PimProductId TBLP
		    LEFT JOIN View_LoadManageProductInternal ZPP ON (TBLP.Id= ZPP.PimProductId AND ZPP.AttributeCode= 'SKU' )
		    LEFT JOIN @tbl_ProductPricingSkuOrderBy b ON (b.SKU = ZPP.AttributeValue) 
			ORDER BY ISNULL(b.RetailPrice,0) DESC
		ELSE
			INSERT INTO #Cte_getDataPrice ( PimProductId )
			SELECT Id 
		    FROM #PimProductId TBLP
		    LEFT JOIN View_LoadManageProductInternal ZPP ON (TBLP.Id= ZPP.PimProductId AND ZPP.AttributeCode= 'SKU' )
		    LEFT JOIN @tbl_ProductPricingSkuOrderBy b ON (b.SKU = ZPP.AttributeValue) 
			ORDER BY ISNULL(b.RetailPrice,0) ASC

	  SELECT PimProductId ,RowId
	  FROM #Cte_getDataPrice CTE
	  WHERE RowId BETWEEN @StartId AND @EndId
	  order by RowId 

 END 
 ELSE  
 IF  ( @Order_by LIKE 'PimProductId%'  OR @Order_by LIKE 'DisplayOrder%' ) AND @PimCategoryHierarchyId = 0 
 BEGIN 
	CREATE TABLE #Cte_PimProductId ( PimProductId INT, RowId INT Identity )
	IF @Order_by LIKE  '% DESC'
		insert into #Cte_PimProductId ( PimProductId ) 
		SELECT Id
	    FROM #PimProductId TBLP
	    INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
		LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId) AND ZPCP.PimCategoryId=@PimCategoryId
		ORDER BY CASE WHEN @Order_by LIKE 'PimProductId%' THEN ZPP.PimProductId ELSE ZPCP.DisplayOrder END DESC
		--order by ZPP.PimProductId DESC
	else 
		insert into #Cte_PimProductId ( PimProductId ) 
		SELECT Id
	    FROM #PimProductId TBLP
	    INNER JOIN ZnodePimProduct ZPP ON (TBLP.Id= ZPP.PimProductId)
		LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId) AND ZPCP.PimCategoryId=@PimCategoryId
		ORDER BY CASE WHEN @Order_by LIKE 'PimProductId%' THEN ZPP.PimProductId ELSE ZPCP.DisplayOrder END ASC
		--order by ZPP.PimProductId ASC

	SELECT PimProductId ,RowId
    FROM #Cte_PimProductId CTE
    WHERE RowId BETWEEN @StartId AND @EndId

 END 
 ELSE IF  @Order_by LIKE  'ModifiedDate%' 
 BEGIN 
	CREATE TABLE #Cte_GetDataModifiedDate ( PimProductId INT, RowId INT Identity )
	IF @Order_by LIKE  '% DESC'
	    insert into #Cte_GetDataModifiedDate ( PimProductId )
		SELECT Id 
	    FROM  #PimProductId TBLP
	    INNER JOIN ZnodePimAttributeValue ZPAV ON (TBLP.Id = ZPAV.PimProductId)
	    INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
	    WHERE ZPA.AttributeCode = CASE WHEN @AttributeCode = '' OR @AttributeCode = 'ModifiedDate'  THEN 'SKU' ELSE @AttributeCode END
	    ORDER BY ZPAV.ModifiedDate DESC,ZPAV.PimProductId
	else
		insert into #Cte_GetDataModifiedDate ( PimProductId )
		SELECT Id 
	    FROM  #PimProductId TBLP
	    INNER JOIN ZnodePimAttributeValue ZPAV ON (TBLP.Id = ZPAV.PimProductId)
	    INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId) 
	    WHERE ZPA.AttributeCode = CASE WHEN @AttributeCode = '' OR @AttributeCode = 'ModifiedDate'  THEN 'SKU' ELSE @AttributeCode END
	    ORDER BY ZPAV.ModifiedDate ASC,ZPAV.PimProductId

		SELECT PimProductId ,RowId
	   FROM #Cte_GetDataModifiedDate CTE
	   WHERE RowId BETWEEN @StartId AND @EndId
	   ORDER BY RowId

 END
  ELSE IF  @Order_by LIKE  'PublishStatus%' 
 BEGIN 
  
	SELECT TBLP.Id ,CASE WHEN ZPP.IsProductPublish  IS NULL THEN 'Not Published' 
				WHEN ZPP.IsProductPublish = 0 THEN 'Draft'
				ELSE  'Published' END PublishStatus 
    into #Cte_GetData3
    FROM  #PimProductId TBLP
    INNER JOIN ZnodePimProduct ZPP oN (ZPP.PimProductId = TBLP.Id)

	CREATE TABLE #Cte_OrderPublishStatus ( PimProductId INT, RowId INT Identity )

	IF @Order_by LIKE  '% DESC'
		INSERT INTO #Cte_OrderPublishStatus ( PimProductId )
		SELECT Id 
	    FROM  #Cte_GetData3
		Order by PublishStatus DESC , Id
	ELSE
		INSERT INTO #Cte_OrderPublishStatus ( PimProductId )
		SELECT Id 
	    FROM  #Cte_GetData3
		Order by PublishStatus ASC , Id
		

	SELECT PimProductId ,RowId
    FROM #Cte_OrderPublishStatus CTE
    WHERE RowId BETWEEN @StartId AND @EndId
    Order by RowId

 END
 ELSE IF  @Order_by LIKE  'AttributeFamily%' 
 BEGIN 
	;With Cte_attributeValue AS 
    (
		 SELECT ZPAF.PimAttributeFamilyId,FamilyCode,AttributeFamilyName ,ZPFL.LocaleId
		 FROM ZnodePimAttributeFamily ZPAF
		 INNER JOIN ZnodePimFamilyLocale ZPFL ON (ZPFL.PimAttributeFamilyId = ZPAF.PimAttributeFamilyId) 
		 WHERE ZPFL.LocaleId IN (@DefaultLocaleId,@LocaleId)
	 ) 
   , Cte_AttributeValueAttribute AS 
    (
	   SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	   FROM Cte_attributeValue RTY 
	   WHERE LocaleId = @LocaleId
     )
   , Cte_AttributeValueTht AS (
      SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_AttributeValueAttribute
	  UNION ALL 
	  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
	  FROM Cte_attributeValue TYY  
	  WHERE NOT EXISTS (SELECT TOP 1 1 FROM Cte_AttributeValueAttribute THE WHERE THE.PimAttributeFamilyId = TYY.PimAttributeFamilyId )
	  AND TYY.LocaleId = @DefaultLocaleId
	  )
  
  SELECT PimAttributeFamilyId,FamilyCode,AttributeFamilyName
  INTO #TBL_FamilyLocale
  FROM Cte_AttributeValueTht 

  CREATE TABLE #Cte_AttributeFamily ( PimProductId INT, RowId INT Identity )

	IF @Order_by LIKE  '% DESC'
		INSERT INTO #Cte_AttributeFamily ( PimProductId )
		SELECT  TBLAV.PimProductId 
	    FROM ZnodePimProduct TBLAV 
	    INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
	    Order by THY.AttributeFamilyName DESC ,TBLAV.PimProductId
	ELSE
		INSERT INTO #Cte_AttributeFamily ( PimProductId )
		SELECT  TBLAV.PimProductId 
	    FROM ZnodePimProduct TBLAV 
	    INNER JOIN #TBL_FamilyLocale THY ON (THY.PimAttributeFamilyId = TBLAV.PimAttributeFamilyId )
	    Order by THY.AttributeFamilyName ASC ,TBLAV.PimProductId

	SELECT PimProductId ,RowId
    FROM #Cte_AttributeFamily CTE
    WHERE RowId BETWEEN @StartId AND @EndId
    order by RowId
 
 END
 ELSE IF @AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
 BEGIN 
  IF @DefaultLocaleId = @LocaleID 
  BEGIN 

  CREATE TABLE #Cte_AttributeTypeName ( PimProductId int, RowId Int Identity)
	IF  @Order_by LIKE  '% DESC'
	BEGIN
		INSERT INTO #Cte_AttributeTypeName(PimProductId)
		SELECT ZPAV.PimProductId 
		FROM dbo.ZnodePimAttribute ZPA
		INNER JOIN dbo.ZnodePimAttributeValue ZPAV ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN dbo.ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
		INNER JOIN dbo.ZnodeAttributeType ZTA ON (ZTA.AttributeTypeId = ZPA.AttributeTypeId)
		inner join #PimProductId P ON P.Id = ZPAV.PimProductId
		WHERE ZPA.IsCategory =0 
		AND IsShowOnGrid =1 
		and ZTA.AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
		--and exists(select * from #PimProductId P where P.Id = ZPAV.PimProductId )
		and AttributeCode = @AttributeCode AND LocaleId = @LocaleID
		Order by ZPAVL.AttributeValue DESC ,ZPAV.PimProductId
						
	END
	Else
	BEGIN

		INSERT INTO #Cte_AttributeTypeName(PimProductId)
		SELECT ZPAV.PimProductId 
		FROM dbo.ZnodePimAttribute ZPA
		INNER JOIN dbo.ZnodePimAttributeValue ZPAV ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN dbo.ZnodePimAttributeValueLocale ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
		INNER JOIN dbo.ZnodeAttributeType ZTA ON (ZTA.AttributeTypeId = ZPA.AttributeTypeId)
		inner join #PimProductId P ON P.Id = ZPAV.PimProductId
		WHERE ZPA.IsCategory =0 
		AND IsShowOnGrid =1 
		and ZTA.AttributeTypeName IN ('Text','Number','Datetime','Yes/No')
		--and exists(select * from #PimProductId P where P.Id = ZPAV.PimProductId )
		and AttributeCode = @AttributeCode AND LocaleId = @LocaleID
		Order by ZPAVL.AttributeValue ASC ,ZPAV.PimProductId

	END
	create index Idx_#Cte_AttributeTypeName_RowId ON #Cte_AttributeTypeName(RowId)
	SELECT PimProductId ,RowId
	FROM #Cte_AttributeTypeName CTE
	WHERE RowId >= @StartId AND RowId <= @EndId
	order by RowId


  END 
  ELSE 
  BEGIN 

	 SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By TBLAV.ID,ZPAVL.AttributeCode ORDER BY TBLAV.ID,ZPAVL.AttributeCode  ) RowIdIn
	 into #Cte_AttributeDetails
	 FROM #PimProductId   TBLAV 
	 INNER JOIN View_PimProducttextValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	 WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	 AND AttributeCode = @AttributeCode
	 --) 
	 --,Cte_DataLocale AS 
	 --(
	 CREATE TABLE #Cte_DataLocale (PimProductId INT, RowId INT Identity )

	 IF @Order_by LIKE  '% DESC'
		 insert into #Cte_DataLocale (PimProductId)
		 SELECT  TBLAV.PimProductId 
		 FROM #Cte_AttributeDetails TBLAV 
		 WHERE LocaleId = CASE WHEN RowIdIn =2 THEN @localeId ELSE @DefaultLocaleId END
		 order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId 
	else
	     insert into #Cte_DataLocale (PimProductId)
		 SELECT  TBLAV.PimProductId 
		 FROM #Cte_AttributeDetails TBLAV 
		 WHERE LocaleId = CASE WHEN RowIdIn =2 THEN @localeId ELSE @DefaultLocaleId END
		 order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId

	 SELECT PimProductId ,RowId
	 FROM #Cte_DataLocale 
	 WHERE RowId BETWEEN @StartId AND @EndId
	 order by RowId

  END 
 END
 ELSE IF @AttributeTypeName IN ('Simple Select','Multi Select') 
  BEGIN 
 DECLARE @PimAttributeId TransferId 

 INSERT INTO @PimAttributeId 
 SELECT PimAttributeId
 FROM  ZnodePimAttribute 
 WHERE AttributeCode = @AttributeCode  
 CREATE TABLE #TBL_AttributeDefaultValue ( PimAttributeId INT ,
              AttributeDefaultValueCode VARCHAR(max),IsEditable INT,AttributeDefaultValue NVARCHAR(max),DisplayOrder INT,PimAttributeDefaultValueId INT  ) 
 
			 -- here collect the both locale data 
             SELECT   VIPDV.PimAttributeId,VIPDV.AttributeDefaultValueCode,VIPDV.IsEditable,VIPDVL.AttributeDefaultValue,VIPDVL.LocaleId,VIPDV.PimAttributeDefaultValueId,VIPDV.DisplayOrder
             
			 INTO #Cte_DefaultValueLocale
			 FROM [dbo].[ZnodePimAttributeDefaultValue] VIPDV
			 INNER JOIN [dbo].[ZnodePimAttributeDefaultValueLocale] VIPDVL ON (VIPDVL.PimAttributeDefaultValueId = VIPDV.PimAttributeDefaultValueId) 
             WHERE VIPDVL.LocaleId IN(@DefaultLocaleId, @LocaleId) 
             AND EXISTS
             (
                SELECT TOP 1 1
                FROM @PimAttributeId SP
                WHERE SP.id = VIPDV.PimAttributeId
             )

			 -- filter for first locale
             ;with Cte_DefaultValueFirstLocale
             AS (SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @LocaleId	 
                ),

			 -- get data for second locale if not exists for firts locale 
             Cte_DefaultValueSecondLocale
             AS (SELECT CTDVFL.PimAttributeId,CTDVFL.AttributeDefaultValueCode,CTDVFL.IsEditable,CTDVFL.AttributeDefaultValue,CTDVFL.PimAttributeDefaultValueId,CTDVFL.DisplayOrder
                 FROM Cte_DefaultValueFirstLocale CTDVFL
                 UNION ALL
                 SELECT CTDVL.PimAttributeId,CTDVL.AttributeDefaultValueCode,CTDVL.IsEditable,CTDVL.AttributeDefaultValue,CTDVL.PimAttributeDefaultValueId,CTDVL.DisplayOrder
                 FROM #Cte_DefaultValueLocale CTDVL
                 WHERE LocaleId = @DefaultLocaleId 
                 AND NOT EXISTS
                  (
                      SELECT TOP 1 1
                      FROM Cte_DefaultValueFirstLocale CTDVFL
                      WHERE CTDVFL.PimAttributeDefaultValueId = CTDVL.PimAttributeDefaultValueId
                  ))

                 

    
 INSERT INTO #TBL_AttributeDefaultValue(PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId)
  SELECT PimAttributeId,AttributeDefaultValueCode,IsEditable,AttributeDefaultValue,DisplayOrder,PimAttributeDefaultValueId
                  FROM Cte_DefaultValueSecondLocale;


  IF @DefaultLocaleId = @LocaleID 
  BEGIN
	  SELECT  PimProductId ,AttributeDefaultValue as AttributeValue
	  INTO #Cte_AttributeValue
	  FROM #PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId
	  inner join #TBL_AttributeDefaultValue TTR  ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
	  WHERE AttributeCode = @AttributeCode AND ZPAVL.LocaleId = @LocaleID

	  create table #CTe_GetDataIn (PimProductId int, RowId int identity)

	 IF @Order_by LIKE  '% DESC'
		 insert into #CTe_GetDataIn (PimProductId)
		 SELECT PimProductId
		 FROM  #Cte_AttributeValue  VPP
		 order by  VPP.AttributeValue DESC ,VPP.PimProductId
	else
		insert into #CTe_GetDataIn (PimProductId)
		SELECT PimProductId
		FROM  #Cte_AttributeValue  VPP
		order by  VPP.AttributeValue asc ,VPP.PimProductId

	 SELECT PimProductId ,RowId
	 FROM #CTe_GetDataIn 
	 WHERE RowId BETWEEN @StartId AND @EndId 
	 order by RowId

   END 
   ELSE 
   BEGIN
    SELECT ZPAV.PimAttributeValueId,ZPAVL.PimAttributeDefaultValueId , ZPAVL.LocaleId ,COUNT(*)Over(Partition By ZPAV.PimAttributeValueId ,ZPAV.PimProductId ORDER BY ZPAV.PimAttributeValueId ,ZPAV.PimProductId  ) RowId
			   INTO #temp_Table 
			   FROM #PimProductId TBLP  
	           INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
			   INNER JOIN ZnodePimProductAttributeDefaultValue ZPAVL ON (ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId)
			   WHERE (ZPAVL.LocaleId = @localeId  OR ZPAVL.LocaleId = @DefaultlocaleId )

	  SELECT  PimProductId ,SUBSTRING((SELECT ','+AttributeDefaultValue FROM #TBL_AttributeDefaultValue TTR 
				INNER JOIN #temp_Table  ZPAVL ON (TTR.PimAttributeDefaultValueId = ZPAVL.PimAttributeDefaultValueId )
				WHERE ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId  
				AND ZPAVL.LocaleId = CASE WHEN ZPAVL.RowId = 2 THEN @LocaleId  ELSE @DefaultLocaleId  END  
				FOR XML PATH('') ),2,4000) AttributeValue
	  INTO #Cte_AttributeValue1
	  FROM #PimProductId TBLP  
	  INNER JOIN ZnodePimAttributeValue ZPAV  ON (TBLP.ID = ZPAV.PimProductId )
	  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
	  WHERE AttributeCode = @AttributeCode

	  create table #CTe_GetDataIn1 (PimProductId int, RowId int identity)

	  IF  @Order_by LIKE  '% DESC'
		INSERT INTO #CTe_GetDataIn1 ( PimProductId )
		SELECT PimProductId  
	    FROM  #Cte_AttributeValue  VPP
		ORDER BY VPP.AttributeValue DESC ,VPP.PimProductId
	 ELSE
		INSERT INTO #CTe_GetDataIn1 ( PimProductId )
		SELECT PimProductId  
	    FROM  #Cte_AttributeValue  VPP
		ORDER BY VPP.AttributeValue ASC ,VPP.PimProductId

	 SELECT PimProductId ,RowId
	 FROM #CTe_GetDataIn1 
	 WHERE RowId BETWEEN @StartId AND @EndId 
	 order by RowId

   END 
    DROP TABLE #TBL_AttributeDefaultValue
  END 
  ELSE IF @AttributeTypeName IN ('Text Area') 
  BEGIN 
   IF @DefaultLocaleId = @LocaleID 
   BEGIN 
		create table #CTe_TextArea (PimProductId int, RowId int identity)

		IF @Order_by LIKE  '% DESC'
			INSERT INTO #CTe_TextArea ( PimProductId )
			SELECT VPP.PimProductId  
			FROM #PimProductId TBLP 
			INNER JOIN View_PimProductTextAreaValue VPP ON (TBLP.Id = VPP.PimProductId ) 
			WHERE AttributeCode = @AttributeCode  AND LocaleId = @LocaleID
			Order by VPP.AttributeValue DESC ,VPP.PimProductId
		ELSE
			INSERT INTO #CTe_TextArea ( PimProductId )
			SELECT VPP.PimProductId  
			FROM #PimProductId TBLP 
			INNER JOIN View_PimProductTextAreaValue VPP ON (TBLP.Id = VPP.PimProductId ) 
			WHERE AttributeCode = @AttributeCode  AND LocaleId = @LocaleID
			Order by VPP.AttributeValue ASC ,VPP.PimProductId

	  SELECT PimProductId ,RowId
	  FROM #CTe_TextArea CTE
	  WHERE RowId BETWEEN @StartId AND @EndId
	  order by RowId

   END 
   ELSE 
   BEGIN 

		SELECT TBLAV.ID PimProductId,ZPAVL.AttributeCode,ZPAVL.AttributeValue,ZPAVL.LocaleId,COUNT(*)Over(Partition By ZPAVL.PimProductId,ZPAVL.AttributeCode ORDER BY ZPAVL.PimProductId,ZPAVL.AttributeCode  ) RowIdIn
	    INTO #Cte_AttributeDetails1
		FROM #PimProductId   TBLAV 
	    INNER JOIN View_PimProductTextAreaValue ZPAVL ON (ZPAVL.PimProductId = TBLAV.id )
	    WHERE (LocaleId = @DefaultLocaleId OR LocaleId = @LocaleId  )
	    AND AttributeCode = @AttributeCode

		create table #CTe_TextArea1 (PimProductId int, RowId int identity)

		IF @Order_by LIKE  '% DESC'
			INSERT INTO #CTe_TextArea1 ( PimProductId )
			SELECT  TBLAV.PimProductId 
  			FROM #Cte_AttributeDetails1 TBLAV 
			WHERE LocaleId = CASE WHEN RowIdIn = 2 THEN @localeId ELSE @DefaultLocaleId END  
			Order by TBLAV.AttributeValue DESC ,TBLAV.PimProductId
		ELSE
			INSERT INTO #CTe_TextArea1 ( PimProductId )
			SELECT  TBLAV.PimProductId 
  			FROM #Cte_AttributeDetails1 TBLAV 
			WHERE LocaleId = CASE WHEN RowIdIn = 2 THEN @localeId ELSE @DefaultLocaleId END  
			Order by TBLAV.AttributeValue ASC ,TBLAV.PimProductId

		SELECT PimProductId ,RowId
		FROM #CTe_TextArea1 
		WHERE RowId BETWEEN @StartId AND @EndId
		order by RowId 

	 if object_id('tempdb..#PimProductId') is not null
		drop table #PimProductId
   END 
END 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPimCategoryProductList')
	DROP PROC Znode_GetPimCategoryProductList
GO

CREATE PROCEDURE [dbo].[Znode_GetPimCategoryProductList]
(   
	@WhereClause   XML,
    @Rows          INT           = 100,
    @PageNo        INT           = 1,
    @Order_BY      VARCHAR(1000) = '',
    @RowsCount     INT OUT,
    @LocaleId      INT           = 1,
    @PimCategoryId INT,
    @IsAssociated  BIT           = 0,
	@AttributeCode VARCHAR(max) = ''
)
AS
/*
     Summary :- This Procedure is used to get the product list for category products
				The result is fetched order by DisplayOrder or status as per requirement in both asc and desc

     Unit Testing
	 begin tran
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'
	 rollback tran
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;

			  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX),
			  DisplayOrder INT
             );
			 DECLARE @TransferPimProductId TransferId
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @TBL_FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @OrderByDisplay INT= 0;
             DECLARE @DefaultAttributeFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();

			 DECLARE @TBL_ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT
             );

             DECLARE @PimProductId TransferId ,--VARCHAR(MAX)= '',
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(MAX);

			 DECLARE @PimProductIds TransferId

             IF @Order_BY LIKE '%DisplayOrder%'
                 BEGIN
                     SET @OrderByDisplay = 1;
                 END;
             ELSE
             IF @Order_BY LIKE '%Status%'
                 BEGIN
                     SET @OrderByDisplay = 2;
                 END;
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

            INSERT INTO @TransferPimProductId
			SELECT PimProductId
			FROM ZnodePimCategoryProduct ZCP
            WHERE ZCP.PimCategoryId = @PimCategoryId
			ORDER BY CASE WHEN @Order_By LIKE '% DESC%'
            THEN
			CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
				WHEN @OrderByDisplay = 2
					THEN ZCP.Status
				 ELSE 1 END
				 ELSE 1 END DESC,
            CASE WHEN @Order_By LIKE '% ASC%'
				THEN
					CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
						WHEN @OrderByDisplay = 2
							THEN ZCP.Status
							 ELSE 1 END
							  ELSE 1 END
	         IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId  )
			 BEGIN
			   INSERT INTO @TransferPimProductId
			   SELECT '0'
			   SET @IsAssociated = 0
             END


   DECLARE @SQL NVARcHAR(max)= ''
		 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF   @IsCallForAttribute=1
		--BEGIN
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1
					 WHEN @IsAssociated = 1 THEN 0 END
		--END
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN

	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId

      INSERT INTO @TAB
	  EXEC (@SQL)

	 END

	
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,@PimCategoryId=@PimCategoryId

	 END
	 ELSE
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,@PimCategoryId=@PimCategoryId
	 END

			 INSERT INTO @TBL_ProductIdTable(PimProductId,RowId)
			 SELECT ID ,RowId FROM @TBL_MainList SP

			 INSERT INTO @PimProductIds ( Id )
			 SELECT Id FROM @TBL_MainList SP

             UPDATE @TBL_ProductIdTable SET PimCategoryId = @PimCategoryId;
             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
 
             INSERT INTO @TBL_AttributeDetails(PimProductId, AttributeValue,AttributeCode,PimAttributeId)
			 EXEC Znode_GetProductsAttributeValue @PimProductIds,@PimAttributeId,@LocaleId;
             
	
			   DROP TABLE IF EXISTS #Cte_ProductMedia
			 
			   SELECT TBA.PimProductId , TBA.PimAttributeId
			   , SUBSTRING( ( SELECT ','+ISNULL(CASE WHEN ZMC.CDNURL = '' THEN NULL ELSE ZMC.CDNURL END,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH  
			  
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue
			   FROM  @TBL_AttributeDetails AS TBAI
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) MediaIds
			    
			   INTO #Cte_ProductMedia
			   
			   FROM @TBL_AttributeDetails AS TBA
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId )
			   
			   
			
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV
			  INNER JOIN #Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;


			 INSERT INTO @TBL_FamilyDetails(PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @LocaleId);

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @DefaultLocaleId) WHERE TFD.FamilyName IS NULL OR TFD.FamilyName = '';


             SELECT  zpp.[PimProductId] AS [Productid],zpp.[PimProductId],ZPCP.[PimCategoryId],TBFD.FamilyName,Piv.[ProductName],Piv.[SKU],Piv.[ProductType],Piv.[Assortment],
				CASE WHEN PP.IsActive IS NULL THEN CAST(0 AS BIT) ELSE CAST(PP.IsActive AS BIT) END AS [Status],
				piv.[ProductImage] [ImagePath],ZPCP.DisplayOrder

			 FROM @TBL_ProductIdTable AS zpp
			 LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
             INNER JOIN (SELECT PimProductId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails) TB
			  PIVOT(MAX([AttributeValue])
			 FOR [AttributeCode] IN([ProductName],[IsActive],[ProductImage],[SKU],[ProductType],[Assortment])) AS Piv ON(Piv.[PimProductId] = zpp.[PimProductId])
             LEFT JOIN @TBL_FamilyDetails TBFD ON(TBFD.PimProductId = zpp.[PimProductId])
			 LEFT JOIN ZnodePimProduct PP ON PP.PimProductId = Zpp.PimProductId
             ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
			 WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,
             CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
             WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;

		IF EXISTS (SELECT Top 1 1 FROM @TAb )
		BEGIN
			SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb)
		END
		ELSE
		BEGIN
			SELECT @RowsCount=(SELECT COUNT(1) FROM @ProductListIdRTR)
		END

    END TRY
    BEGIN CATCH
	SELECT ERROR_MESSAGE()
    DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimCategoryProductList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPimCategoryProductList',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

UPDATE PAL
SET PAL.AttributeName='Status'
FROM ZnodePimAttributeLocale PAL
INNER JOIN ZnodePimAttribute PA ON PAL.PimAttributeId=PA.PimAttributeId
WHERE PA.AttributeCode='IsActive' AND PA.IsCategory=0 --AND PAL.LocaleId=1

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishProductPricingBySku')
	DROP PROC Znode_GetPublishProductPricingBySku
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishProductPricingBySku]
(   
    @SKU              VARCHAR(MAX),
    @PortalId         INT,
    @currentUtcDate   VARCHAR(100), -- this date is required for the user date r
    @UserId           INT          = 0, -- userid is optional
	@ProfileId        INT          = 0, 
	@OmsOrderId		  INT        = 0,
	@IsFetchPriceFromOrder  BIT          = 0,
    @PublishProductId TransferId READONLY,
	@IsDebug          BIT          = 0
)
AS 
/* 
--Summary: Retrive Price of product FROM pricelist
--Input Parameters:
--UserId, SKU(Comma separated multiple), PortalId
--Conditions :
--1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.
--Unit Testing : 
--EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';
--2. If There is no any PriceList having given sku associated to profile  then check for  
--PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
--Unit Testing : 
--EXEC Znode_GetPublishProductPricingBySku_2 @SKU = 'apple,apr234' , @PortalId = 34 , @currentUtcDate = '2016-09-17 00:00:00.000';
--3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
--4. If There is no any PriceList having given sku associated to user  then check for  
--PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
--5. If There is no any PriceList having given sku associated to account  then check for  
--PriceList associated Profile having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
--6. If There is no any PriceList having given sku associated to Profile  then check for  
--PriceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
--7. If in each case Precedence is same then get PriceList according to higher PriceListId ActivationDate and ExpirationDate for PriceList and SKU also.
--8. Also get the Tier Price, Tier Quantity of given sku.
--Unit Testing   
--Exec Znode_GetPublishProductPricingBySku  @SKU = 'Levi''s T-Shirt & Jeans - Bundle Product',@PortalId = 1, @currentUtcDate = '2016-07-31 00:00:00.000'
*/
    
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             CREATE TABLE #Tlb_SKU 
             (
				SKU        VARCHAR(100),
				SequenceNo INT IDENTITY
             );

			 CREATE INDEX Idx_#Tlb_SKU ON #Tlb_SKU(SKU)
			  
			 DECLARE @DefaultLocaleId INT = dbo.FN_GETDEFAULTLocaleId()

			 IF @SKU = '' 
			 BEGIN 
				INSERT INTO #Tlb_SKU(SKU)
				SELECT a.SKU
				FROM ZnodePublishProductEntity a with (nolock) 
				INNER JOIN @PublishProductId b ON (b.Id = a.ZnodeProductId )
				WHERE LocaleId = @DefaultLocaleId

			 END 
			 ELSE 
			 BEGIN
				INSERT INTO #Tlb_SKU(SKU)
				SELECT Item FROM Dbo.split(@SKU, ',');
			 END 

		-- DECLARE #TLB_SKUPRICELIST TABLE
		CREATE TABLE #TLB_SKUPRICELIST
		(
			SKU VARCHAR(100),
			RetailPrice NUMERIC(28, 6),
			SalesPrice NUMERIC(28, 6),
			PriceListId INT,
			TierPrice NUMERIC(28, 6),
			TierQuantity NUMERIC(28, 6),
			ExternalId NVARCHAR(2000),
			Custom1 NVARCHAR(MAX),
			Custom2 NVARCHAR(MAX),
			Custom3 NVARCHAR(MAX)
        );
        DECLARE @PriceListId INT, @PriceRoundOff INT;
        SELECT @PriceRoundOff = CONVERT( INT, FeatureValues)
        FROM ZnodeGlobalSetting
        WHERE FeatureName = 'PriceRoundOff';
		
        --Retrive portal wise pricelist  
		CREATE TABLE #Tbl_PortalWisePriceList  
		(
			PriceListId    INT,
			ActivationDate DATETIME,
			ExpirationDate DATETIME NULL,
			Precedence     INT,
			SKU NVARCHAR(300)
        );
        --Retrive price for respective pricelist   
        CREATE TABLE #Tbl_PriceListWisePriceData 
        (
			PriceListId INT,
			SKU VARCHAR(300),
			SalesPrice NUMERIC(28, 6),
			RetailPrice NUMERIC(28, 6),
			UomId INT,
			UnitSize NUMERIC(28, 6),
			ActivationDate DATETIME,
			ExpirationDate DATETIME NULL,
			TierPrice NUMERIC(28, 6),
			TierQuantity NUMERIC(28, 6),
			TierUomId INT,
			TierUnitSize NUMERIC(28, 6), 
			ExternalId NVARCHAR(2000),
			Custom1 NVARCHAR(MAX),
			Custom2 NVARCHAR(MAX),
			Custom3 NVARCHAR(MAX)
        );
			
	CREATE TABLE #Tbl_SKUWisePriceList(PriceListId INT, SKU NVARCHAR(300))

			INSERT INTO #Tbl_SKUWisePriceList(PriceListId,SKU) 
			SELECT  PriceListId,SKU from ZnodePrice ZP where exists(Select SKU from #Tlb_SKU SKU where SKU.SKU = ZP.SKU )
			Union
			SELECT PriceListId,SKU  from ZnodePriceTier ZPT where exists(Select SKU from #Tlb_SKU SKU where SKU.SKU = ZPT.SKU )
			 
	--1. If userId is null then check for PriceList having sku associated to profile which is associated to Portal having  PortalId and  having higher Precedence and valid ActivationDate and ExpirationDate for PriceList  and SKU also.
    IF @UserId = 0
    BEGIN
		INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
		SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
		FROM ZnodePriceList AS a 
		INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId 
		INNER JOIN ZnodePortalProfile AS c ON b.PortalProfileId = c.PortalProfileID AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId 
		INNER JOIN #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
		WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId
		ORDER BY b.Precedence;
		
			 
		--2. If There is no any PriceList having given sku associated to profile  then check for PriceList associated portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
		IF EXISTS (SELECT top 1 1  FROM #Tbl_SKUWisePriceList tspl WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
					WHERE tspl.SKU = tpwl.SKU))
		BEGIN
			INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
			SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
			FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId
			INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
			INNER JOIN #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
			AND NOT EXISTS (SELECT TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
			WHERE @CurrentUtcDate BETWEEN a.ActivationDate 
			AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId
			ORDER BY b.Precedence
			;				
		END;
    END;
    --3. If userId is not null then check for PriceList having sku associated to User having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
    ELSE
    BEGIN
				 
		INSERT INTO #Tbl_PortalWisePriceList (PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
		SELECT a.PriceListId, ActivationDate,ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
		FROM ZnodePriceList AS a 
		INNER JOIN ZnodePriceListUser AS b ON a.PriceListId = b.PriceListId
		INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId  
		INNER JOIN #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
				AND NOT EXISTS (SELECT TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
		WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.UserID = @UserId
		ORDER BY b.Precedence ;

		--4. If There is no any PriceList having given sku associated to user  then check for PriceList associated Account having UserId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
		IF EXISTS (SELECT top 1 1  FROM #Tbl_SKUWisePriceList tspl WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))
						BEGIN
							INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
								   SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), c.Precedence,tsw.SKU
								   FROM ZnodePriceList AS a INNER JOIN ZnodePriceListAccount AS c ON a.PriceListId = c.PriceListId
										INNER JOIN ZnodeUser AS d ON c.Accountid = d.Accountid INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId   
										AND zupu.PortalId = @PortalId
										inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
										AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
								   WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND d.UserID = @UserId
									ORDER BY c.Precedence
							--Delete from #Tbl_SKUWisePriceList where PriceListId in (Select PriceListId from  #Tbl_PortalWisePriceList )
						 END;
                     -- 5. If There is no any PriceList having given sku associated to account  then check for PriceList associated Profile having PortalId and having higher   Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
				IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl 
				where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				WHERE tspl.SKU = tpwl.SKU))

                         BEGIN
                             INSERT INTO #Tbl_PortalWisePriceList(PriceListId,ActivationDate,ExpirationDate,Precedence,SKU)
                                    SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
                                    FROM ZnodePriceList AS a
                                         INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId 
										 INNER JOIN ZnodePortalProfile AS c ON b.PortalProfileId = c.PortalProfileId  AND c.PortalId = @PortalId                                          
                                         INNER JOIN ZnodePortalunit zupu ON a.CultureId = zupu.CultureId AND zupu.PortalId = @PortalId 
										 inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
										 AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
                                    WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) 
									AND EXISTS (SELECT TOP 1 1 FROM dbo.ZnodeUserProfile zup WHERE c.ProfileId = zup.ProfileId AND (IsDefault = 1 OR   @ProfileId <> 0)
									AND (( zup.UserId = @UserId OR  @ProfileId <> 0) AND (ZUP.ProfileId = @ProfileId OR @ProfileId = 0 )));  
					     END;
                   ---6. If There is no any PriceList having given sku associated to Profile  then check for priceList associated Portal having PortalId and having higher Precedence ActivationDate and ExpirationDate for PriceList and SKU also.
						IF Exists (Select top 1 1 FROM #Tbl_SKUWisePriceList tspl 
						WHERE NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl WHERE tspl.SKU = tpwl.SKU))

                         BEGIN
							INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
							SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
							FROM ZnodePriceList AS a INNER JOIN ZnodePriceListPortal AS b ON a.PriceListId = b.PriceListId
								INNER JOIN ZnodePortalunit AS zupu ON a.CultureId = zupu.CultureId AND  zupu.PortalId = b.PortalId    
								inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
								AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
								WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND b.PortalId = @PortalId
							    ORDER BY b.Precedence;
						 END;
						 
				--IF Exists (Select top 1 1  FROM #Tbl_SKUWisePriceList tspl where NOT Exists (SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList tpwl
				--WHERE tspl.SKU = tpwl.SKU))
				--BEGIN
				
				--	INSERT INTO #Tbl_PortalWisePriceList( PriceListId, ActivationDate, ExpirationDate, Precedence,SKU )
				--	SELECT a.PriceListId, ActivationDate, ISNULL(ExpirationDate, @GetDate), b.Precedence,tsw.SKU
				--	FROM ZnodePriceList AS a INNER JOIN ZnodePriceListProfile AS b ON a.PriceListId = b.PriceListId INNER JOIN ZnodePortalProfile AS c
				--	ON b.ProfileId = c.ProfileId AND  c.IsDefaultAnonymousProfile = 1 INNER JOIN ZnodePortalunit AS zupu ON a.CurrencyId = zupu.CurrencyId
				--	inner join #Tbl_SKUWisePriceList tsw  ON a.PriceListId = tsw.PriceListId
				--	AND NOT EXISTS (Select TOP 1 1 FROM  #Tbl_PortalWisePriceList tpwl WHERE tpwl.SKU = tsw.SKU )
				--	WHERE @CurrentUtcDate BETWEEN a.ActivationDate AND ISNULL(a.ExpirationDate, @GetDate) AND c.PortalId = @PortalId;
				--END

                 END;
			
             SET @PriceListId = 0;
             -- Check Activation date and expiry date 
			
			 If (@OmsOrderId>0  and  @IsFetchPriceFromOrder=1)
			   begin 
			      EXEC Znode_GetOrderPricList @OmsOrderId=@OmsOrderId,@SKU=@SKU,@PublishProductId=@PublishProductId;
		       end


             else 
			 begin
				 IF EXISTS( SELECT TOP 1 1 FROM #Tbl_PortalWisePriceList)
					 begin
						 -- Declare  @d datetime
						 -- SET @d = @GetDate
						 -- Select ISNULL(ActivationDate,@d)  , ISNULL( ExpirationDate,@GetDate ),b.Precedence,* from ZnodePriceList  a inner join ZnodePriceListPortal b on a.PriceListId = b.PriceListId where @d between ISNULL(ActivationDate,@d) 
						 -- and ISNULL(ExpirationDate,@GetDate ) --and a.PriceListId <>  80
						 -- Order by ISNULL(ActivationDate,@d)  , ISNULL( ExpirationDate,@GetDate ) ,  b.Precedence DESC 
						 --	Retrive pricelist wise price

					   --SET @PriceListId =( SELECT TOP 1 PriceListId FROM #Tbl_PortalWisePriceList ORDER BY Precedence  );

					   INSERT INTO #Tbl_PriceListWisePriceData( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize , ExternalId ,Custom1,Custom2,Custom3)
					   SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, ZP.ExternalId,
					   ZPT.Custom1,ZPT.Custom2,ZPT.Custom3
					   FROM [ZnodePrice] AS ZP
					   INNER JOIN #Tlb_SKU AS TSKU ON (ZP.SKU = TSKU.SKU )
					   LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND ZP.PriceListId = ZPT.PriceListId
					   INNER JOIN #Tbl_PortalWisePriceList PWPL ON PWPL.SKU = ZP.SKU AND ZP.PriceListId = PWPL.PriceListId

					   -- Check Activation date and expiry date 
						INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3 )
						   SELECT DISTINCT  PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
						   FROM #Tbl_PriceListWisePriceData
						   WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);
					   
			INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
			SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
			FROM #Tbl_PriceListWisePriceData
			WHERE SKU NOT IN(SELECT SKU FROM #TLB_SKUPRICELIST) and ActivationDate is null 
				
        END;
        -- Retrive data as per precedance FROM ZnodePriceListPortal table  
					
        ELSE
        BEGIN
			--SET @PriceListId =( SELECT TOP 1 PriceListId FROM #Tbl_PortalWisePriceList ORDER BY Precedence  );

			--Retrive pricelist wise price  
			INSERT INTO #Tbl_PriceListWisePriceData( PriceListId, SKU, SalesPrice, RetailPrice, UomId, UnitSize, ActivationDate, ExpirationDate, TierPrice, TierQuantity, TierUomId, TierUnitSize, ExternalId ,Custom1,Custom2,Custom3)
			SELECT ZP.PriceListId, ZP.SKU, ZP.SalesPrice, ZP.RetailPrice, ZP.UomId, ZP.UnitSize, ISNULL(ZP.ActivationDate, @CurrentUtcDate), 
				ISNULL(ZP.ExpirationDate, @GetDate), ZPT.Price, ZPT.Quantity, ZPT.UomId, ZPT.UnitSize, zp.ExternalId,Custom1,Custom2,Custom3
			FROM [ZnodePrice] AS ZP 
			INNER JOIN #Tlb_SKU AS TSKU ON ZP.SKU = TSKU.SKU 
			LEFT OUTER JOIN ZnodePriceTier AS ZPT ON ZP.SKU = ZPT.SKU AND ZP.PriceListId = ZPT.PriceListId 
			INNER JOIN #Tbl_PortalWisePriceList PWPL ON PWPL.SKU = ZP.SKU AND ZP.PriceListId = PWPL.PriceListId

				-- Check Activation date and expiry date 
			INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
			SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
			FROM #Tbl_PriceListWisePriceData WHERE @currentUtcDate BETWEEN ActivationDate AND ISNULL(ExpirationDate, @GetDate);
					
			INSERT INTO #TLB_SKUPRICELIST( PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId ,Custom1,Custom2,Custom3)
			SELECT PriceListId, SKU, RetailPrice, SalesPrice, TierPrice, TierQuantity, ExternalId,Custom1,Custom2,Custom3
			FROM #Tbl_PriceListWisePriceData
			WHERE SKU NOT IN ( SELECT SKU FROM #TLB_SKUPRICELIST) and ActivationDate is null;

        END;
        SELECT SKU,
            ROUND(RetailPrice, @PriceRoundOff) AS RetailPrice,
            ROUND(SalesPrice, @PriceRoundOff) AS SalesPrice,
            ROUND(TierPrice, @PriceRoundOff) AS TierPrice,
            ROUND(TierQuantity, @PriceRoundOff) AS TierQuantity,
			ZCC.CurrencyCode  AS CurrencyCode,    
            ZC.Symbol AS CurrencySuffix,  ZC.CultureCode,
			TSPL.ExternalId,
			Custom1,Custom2,Custom3
        FROM #TLB_SKUPRICELIST AS TSPL
        INNER JOIN ZnodePriceList AS ZPL ON TSPL.PriceListId = ZPL.PriceListId
        INNER JOIN ZnodeCulture AS ZC ON ZPL.CultureId = ZC.CultureId    
		LEFT JOIN ZnodeCurrency AS ZCC ON ZC.CurrencyId = ZCC.CurrencyId   
		ORDER BY TierQuantity ASC;
END
END TRY
BEGIN CATCH
    DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishProductPricingBySku @SKU = '+@SKU+',@PortalId = '+CAST(@PortalId AS VARCHAR(10))+',@currentUtcDate = '+@currentUtcDate+',@UserId='+CAST(@UserId AS VARCHAR(100))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPublishProductPricingBySku',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetInventoryBySkus')
	DROP PROC Znode_GetInventoryBySkus
GO

CREATE PROCEDURE [dbo].[Znode_GetInventoryBySkus]
( 
	@SKUs     NVARCHAR(MAX),
	@PortalId VARCHAR(2000)
)
AS 
  /* 
    Summary: This procedure is used to get inventory details of sku portal wise    		   
    Unit Testing   
     EXEC Znode_GetInventoryBySkus_r @SKUs='ap1234,LI001',@PortalId=1
 
   */ 
BEGIN
BEGIN TRY
SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	CREATE TABLE #TBL_SKUs (SKU NVARCHAR(MAX));
	CREATE TABLE #TBL_PortalIds (PortalId INT);
			 
	INSERT INTO #TBL_SKUs 
	SELECT item
	FROM dbo.split(@SKUs, ',');

	INSERT INTO #TBL_PortalIds
	SELECT item
	FROM dbo.split(@PortalId, ',');

	CREATE TABLE #TLB_SKUSumInventory 
	(
		SKU          VARCHAR(600),
		Quantity     NUMERIC(28, 6),
		ReOrderLevel NUMERIC(28, 6),
		PortalId     INT
	);
			 
	CREATE TABLE #TBL_AllwareHouseToportal 
	(
		WarehouseId       INT,
		PortalId          INT,
		PortalWarehouseId INT,
		Id INT, ----For PortalWareHouse = 1 and AlternatePortalWarehouse = 2
		IsDefaultWarehouse BIT,
		DefaultWarehouse INT
	);

	INSERT INTO #TBL_AllwareHouseToportal(WarehouseId,PortalId,PortalWarehouseId,Id,IsDefaultWarehouse, DefaultWarehouse)
	SELECT zpw.WarehouseId,zp.PortalId,zpw.PortalWarehouseId, 1 as Id ,1 as IsDefaultWarehouse, zpw.WarehouseId as DefaultWarehouse
	FROM [dbo].ZnodePortal AS zp
	INNER JOIN [ZnodePortalWarehouse] AS zpw ON(zpw.PortalId = zp.PortalId)
	WHERE EXISTS
	(
		SELECT TOP 1 1
		FROM #TBL_PortalIds AS tp
		WHERE tp.PortalId = zp.PortalId
	);

	INSERT INTO #TBL_AllwareHouseToportal(WarehouseId,PortalId,PortalWarehouseId,Id, IsDefaultWarehouse, DefaultWarehouse)
	SELECT zpaw.WarehouseId,a.PortalId,zpaw.PortalWarehouseId, 2 as Id, 0 as IsDefaultWarehouse, null
	FROM [dbo].[ZnodePortalAlternateWarehouse] AS zpaw
	INNER JOIN #TBL_AllwareHouseToportal AS a ON(zpaw.PortalWarehouseId = a.PortalWarehouseId);

	UPDATE a SET a.DefaultWarehouse = b.DefaultWarehouse
	FROM #TBL_AllwareHouseToportal a
	INNER JOIN #TBL_AllwareHouseToportal b on a.PortalWarehouseId = b.PortalWarehouseId
	WHERE b.IsDefaultWarehouse = 1

	SELECT a.SKU, (SELECT  COUNT (1) FROM ZnodePimDownloadableProductKey RT WHERE RT.PimDownloadableProductId = a.PimDownloadableProductId
	AND RT.IsUsed = 0 ) Quantity
	INTO #Temp_DownloadableProduct
	FROM ZnodePimDownloadableProduct a 
	WHERE EXISTS (SELECT TOP 1 1 FROM #TBL_SKUs R WHERE R.SKU = a.SKU  )

	-- Added temp table for optimization
	CREATE TABLE #ZnodeInventory (Sku NVARCHAR(300), Quantity NUMERIC(28,6), ReOrderLevel NUMERIC(28,6), WarehouseId INT)
    INSERT INTO #ZnodeInventory
    select Sku, Quantity, ReOrderLevel, WarehouseId
    FROM [dbo].[ZnodeInventory]
    WHERE Sku IN (SELECT Sku FROM #TBL_SKUs);
			  
	SELECT TY.SKU,CASE WHEN T.SKU IS NOT NULL  THEN SUM(ISNULL(T.Quantity, 0))  ELSE SUM(ISNULL( zi.Quantity, 0)) END   AS Quantity,
		SUM(ISNULL(Zi.ReOrderLevel, 0)) AS ReOrderLevel,zpw.PortalId, ZW.WarehouseName, ZW.WarehouseCode, 
		CAST(ZI1.Quantity AS varchar) as DefaultInventoryCount
	FROM #TBL_AllwareHouseToportal AS zpw
	CROSS APPLY #TBL_SKUs  TY 
	LEFT JOIN #ZnodeInventory AS ZI ON (  ZI.SKU=TY.SKU )--(SELECT ''+ZI.SKU FOR XML PATH ('')) = TY.SKU )
	LEFT JOIN #ZnodeInventory AS ZI1 ON (  ZI1 .SKU=TY.SKU and zpw.DefaultWarehouse = ZI1.WarehouseId )
	LEFT JOIN ZnodeWarehouse ZW on zpw.DefaultWarehouse = ZW.WarehouseId
	LEFT JOIN  #Temp_DownloadableProduct T ON (T.SKU = TY.SKU )
	WHERE zpw.Id = 1 AND Zi.WarehouseId is null
	GROUP BY TY.SKU,T.SKU, zpw.PortalId, ZW.WarehouseName, ZW.WarehouseCode, ZI1.Quantity
	UNION ALL	
	SELECT TY.SKU,CASE WHEN T.SKU IS NOT NULL  THEN SUM(ISNULL(T.Quantity, 0))  ELSE SUM(ISNULL( zi.Quantity, 0)) END   AS Quantity,
	SUM(ISNULL(Zi.ReOrderLevel, 0)) AS ReOrderLevel,zpw.PortalId, ZW.WarehouseName, ZW.WarehouseCode, CAST(ZI1.Quantity AS varchar) as DefaultInventoryCount
	FROM #TBL_AllwareHouseToportal AS zpw
	CROSS APPLY #TBL_SKUs  TY 
	LEFT JOIN #ZnodeInventory AS ZI ON (  ISNULL(Zi.WarehouseId,-1) = CASE WHEN ISNULL(Zi.WarehouseId,-1) = -1 THEN -1 ELSE  zpw.WarehouseId END  AND   ZI.SKU=TY.SKU )--(SELECT ''+ZI.SKU FOR XML PATH ('')) = TY.SKU )
	LEFT JOIN #ZnodeInventory AS ZI1 ON (  ZI1 .SKU=TY.SKU and zpw.DefaultWarehouse = ZI1.WarehouseId )
	LEFT JOIN ZnodeWarehouse ZW on zpw.DefaultWarehouse = ZW.WarehouseId
	LEFT JOIN  #Temp_DownloadableProduct T ON (T.SKU = TY.SKU )
	WHERE Zi.WarehouseId is not null
	GROUP BY TY.SKU,T.SKU, zpw.PortalId,ZW.WarehouseName, ZW.WarehouseCode, ZI1.Quantity
                     
END TRY
BEGIN CATCH
	DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetInventoryBySkus @SKUs = '+@SKUs+',@PortalId='+@PortalId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_GetInventoryBySkus',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPimCategoryProductList')
	DROP PROC Znode_GetPimCategoryProductList
GO

CREATE PROCEDURE [dbo].[Znode_GetPimCategoryProductList]
(   
	@WhereClause   XML,
    @Rows          INT           = 100,
    @PageNo        INT           = 1,
    @Order_BY      VARCHAR(1000) = '',
    @RowsCount     INT OUT,
    @LocaleId      INT           = 1,
    @PimCategoryId INT,
    @IsAssociated  BIT           = 0,
	@AttributeCode VARCHAR(max) = ''
)
AS
/*
     Summary :- This Procedure is used to get the product list for category products
				The result is fetched order by DisplayOrder or status as per requirement in both asc and desc

     Unit Testing
	 begin tran
     EXEC Znode_GetPimCategoryProductList '',@RowsCount = 0, @PimCategoryId = 22,@Order_BY ='DisplayOrder asc'
	 rollback tran
*/
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;

			  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

             DECLARE @TBL_AttributeDefaultValue TABLE
             (PimAttributeId            INT,
              AttributeDefaultValueCode VARCHAR(100),
              IsEditable                BIT,
              AttributeDefaultValue     NVARCHAR(MAX),
			  DisplayOrder INT
             );
			 DECLARE @TransferPimProductId TransferId
             DECLARE @TBL_AttributeDetails AS TABLE
             (PimProductId   INT,
              AttributeValue NVARCHAR(MAX),
              AttributeCode  VARCHAR(600),
              PimAttributeId INT
             );
             DECLARE @TBL_FamilyDetails TABLE
             (PimProductId         INT,
              PimAttributeFamilyId INT,
              FamilyName           NVARCHAR(3000)
             );
             DECLARE @OrderByDisplay INT= 0;
             DECLARE @DefaultAttributeFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId(), @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();

			 DECLARE @TBL_ProductIdTable TABLE
             ([PimProductId] INT,
              [CountId]      INT,
              PimCategoryId  INT,
              RowId          INT
             );

             DECLARE @PimProductId TransferId ,--VARCHAR(MAX)= '',
					 @PimAttributeId VARCHAR(MAX),
					 @OutPimProductIds VARCHAR(MAX);

			 DECLARE @PimProductIds TransferId

             IF @Order_BY LIKE '%DisplayOrder%'
                 BEGIN
                     SET @OrderByDisplay = 1;
                 END;
             ELSE
             IF @Order_BY LIKE '%Status%'
                 BEGIN
                     SET @OrderByDisplay = 2;
                 END;
			 DECLARE @TBL_PimMediaAttributeId TABLE (PimAttributeId INT ,AttributeCode VARCHAR(600))
			 INSERT INTO @TBL_PimMediaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM Dbo.Fn_GetProductMediaAttributeId ()

            INSERT INTO @TransferPimProductId
			SELECT PimProductId
			FROM ZnodePimCategoryProduct ZCP
            WHERE ZCP.PimCategoryId = @PimCategoryId
			ORDER BY CASE WHEN @Order_By LIKE '% DESC%'
            THEN
			CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
				WHEN @OrderByDisplay = 2
					THEN ZCP.Status
				 ELSE 1 END
				 ELSE 1 END DESC,
            CASE WHEN @Order_By LIKE '% ASC%'
				THEN
					CASE WHEN @OrderByDisplay = 1
					THEN ZCP.DisplayOrder
						WHEN @OrderByDisplay = 2
							THEN ZCP.Status
							 ELSE 1 END
							  ELSE 1 END
	         IF NOT EXISTS (SELECT TOP 1 1 FROM @TransferPimProductId  )
			 BEGIN
			   INSERT INTO @TransferPimProductId
			   SELECT '0'
			   SET @IsAssociated = 0
             END


   DECLARE @SQL NVARcHAR(max)= ''
		 DECLARE  @ProductListIdRTR TransferId
	 DECLARE @TAb Transferid
	 DECLARE @tBL_mainList TABLE (Id INT,RowId INT)
	 --	IF   @IsCallForAttribute=1
		--BEGIN
	 SET @IsAssociated = CASE WHEN @IsAssociated = 0 THEN 1
					 WHEN @IsAssociated = 1 THEN 0 END
		--END
	 INSERT INTO @ProductListIdRTR
	 EXEC Znode_GetProductList  @IsAssociated,@TransferPimProductId

	 IF CAST(@WhereClause AS NVARCHAR(max))<> N''
	 BEGIN

	  SET @SQL = 'SELECT PimProductId FROM ##Temp_PimProductId'+CAST(@@SPID AS VARCHAR(500))

	  EXEC Znode_GetFilterPimProductId @WhereClause,@ProductListIdRTR,@localeId

      INSERT INTO @TAB
	  EXEC (@SQL)

	 END

	
	 IF EXISTS (SELECT Top 1 1 FROM @TAb ) OR CAST(@WhereClause AS NVARCHAR(max)) <> N''
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @TAb ,@AttributeCode,@localeId,@PimCategoryId=@PimCategoryId

	 END
	 ELSE
	 BEGIN

	 SET @AttributeCode = REPLACE(dbo.FN_TRIM(REPLACE(REPLACE(@order_by,' DESC',''),' ASC','')),'DisplayOrder','ProductName')
	 --SET @order_by = REPLACE(@order_by,'DisplayOrder','ProductName')
	 INSERT INTO @TBL_MainList(id,RowId)
	 EXEC Znode_GetOrderByPagingProduct @order_by,@rows,@PageNo, @ProductListIdRTR ,@AttributeCode,@localeId,@PimCategoryId=@PimCategoryId
	 END

			 INSERT INTO @TBL_ProductIdTable(PimProductId,RowId)
			 SELECT ID ,RowId FROM @TBL_MainList SP

			 INSERT INTO @PimProductIds ( Id )
			 SELECT Id FROM @TBL_MainList SP

             UPDATE @TBL_ProductIdTable SET PimCategoryId = @PimCategoryId;
             SET @PimAttributeId = SUBSTRING((SELECT ','+CAST(PimAttributeId AS VARCHAR(50)) FROM [dbo].[Fn_GetGridPimAttributes]() FOR XML PATH('')), 2, 4000);
 
             INSERT INTO @TBL_AttributeDetails(PimProductId, AttributeValue,AttributeCode,PimAttributeId)
			 EXEC Znode_GetProductsAttributeValue @PimProductIds,@PimAttributeId,@LocaleId;
             
	
			   DROP TABLE IF EXISTS #Cte_ProductMedia
			 
			   SELECT TBA.PimProductId , TBA.PimAttributeId
			   , SUBSTRING( ( SELECT ','+ISNULL(CASE WHEN ZMC.CDNURL = '' THEN NULL ELSE ZMC.CDNURL END,ZMC.URL)+ZMSM.ThumbnailFolderName+'/'+ zm.PATH  
			  
			   FROM ZnodeMedia AS ZM
               INNER JOIN ZnodeMediaConfiguration ZMC  ON (ZM.MediaConfigurationId = ZMC.MediaConfigurationId)
			   INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
			   INNER JOIN @TBL_AttributeDetails AS TBAI ON (TBAI.AttributeValue  = CAST(ZM.MediaId AS VARCHAR(50)) )
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBAI.PimATtributeId)
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) AS AttributeValue , SUBSTRING( ( SELECT ','+AttributeValue
			   FROM  @TBL_AttributeDetails AS TBAI
			   WHERE TBAI.PimProductId = TBA.PimProductId AND TBAI.PimAttributeId = TBA.PimAttributeId
			   FOR XML PATH('') ), 2 , 4000) MediaIds
			    
			   INTO #Cte_ProductMedia
			   
			   FROM @TBL_AttributeDetails AS TBA
			   INNER JOIN  @TBL_PimMediaAttributeId AS FNMA ON (FNMA.PImAttributeId = TBA.PimATtributeId )
			   
			   
			
		      UPDATE TBAV SET AttributeValue = CTPM.AttributeVALue
			  FROM @TBL_AttributeDetails TBAV
			  INNER JOIN #Cte_ProductMedia CTPM ON CTPM.PimProductId = TBAV.PimProductId  AND CTPM.PimAttributeId = TBAV.PimAttributeId
			  AND CTPM.PimAttributeId = TBAV.PimAttributeId;


			 INSERT INTO @TBL_FamilyDetails(PimAttributeFamilyId,PimProductId)
             EXEC [dbo].[Znode_GetPimProductAttributeFamilyId] @PimProductId,1;

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @LocaleId);

             UPDATE TFD SET FamilyName = ZPFL.AttributeFamilyName FROM @TBL_FamilyDetails TFD INNER JOIN ZnodePimFamilyLocale ZPFL
			 ON(TFD.PimAttributeFamilyId = ZPFL.PimAttributeFamilyId AND LocaleId = @DefaultLocaleId) WHERE TFD.FamilyName IS NULL OR TFD.FamilyName = '';


             SELECT  zpp.[PimProductId] AS [Productid],zpp.[PimProductId],ZPCP.[PimCategoryId],TBFD.FamilyName,Piv.[ProductName],Piv.[SKU],Piv.[ProductType],Piv.[Assortment],
				CASE WHEN PP.IsActive IS NULL THEN CAST(0 AS BIT) ELSE CAST(PP.IsActive AS BIT) END AS [IsActive],
				piv.[ProductImage] [ImagePath],ZPCP.DisplayOrder

			 FROM @TBL_ProductIdTable AS zpp
			 LEFT JOIN ZnodePimCategoryProduct ZPCP ON(ZPCP.PimProductId = Zpp.PimProductId AND ZPCP.PimCategoryId = Zpp.PimCategoryId)
             INNER JOIN (SELECT PimProductId,AttributeValue,AttributeCode FROM @TBL_AttributeDetails) TB
			  PIVOT(MAX([AttributeValue])
			 FOR [AttributeCode] IN([ProductName],[IsActive],[ProductImage],[SKU],[ProductType],[Assortment])) AS Piv ON(Piv.[PimProductId] = zpp.[PimProductId])
             LEFT JOIN @TBL_FamilyDetails TBFD ON(TBFD.PimProductId = zpp.[PimProductId])
			 LEFT JOIN ZnodePimProduct PP ON PP.PimProductId = Zpp.PimProductId
             ORDER BY CASE WHEN @Order_By LIKE '% DESC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
			 WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END DESC,
             CASE WHEN @Order_By LIKE '% ASC%' THEN CASE WHEN @OrderByDisplay = 1 THEN ZPCP.DisplayOrder
             WHEN @OrderByDisplay = 2 THEN ZPCP.Status ELSE 1 END ELSE 1 END,zpp.RowId;

		IF EXISTS (SELECT Top 1 1 FROM @TAb )
		BEGIN
			SELECT @RowsCount = (SELECT COUNT(1) FROM @TAb)
		END
		ELSE
		BEGIN
			SELECT @RowsCount=(SELECT COUNT(1) FROM @ProductListIdRTR)
		END

    END TRY
    BEGIN CATCH
	SELECT ERROR_MESSAGE()
    DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPimCategoryProductList @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',@Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',@LocaleId = '+CAST(@LocaleId AS VARCHAR(50))+',@PimCategoryId='+CAST(@PimCategoryId AS VARCHAR(50))+',@IsAssociated='+CAST(@IsAssociated AS VARCHAR(50))+',@RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));

        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetPimCategoryProductList',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

UPDATE PAL
SET PAL.AttributeName='Product Status'
FROM ZnodePimAttributeLocale PAL
INNER JOIN ZnodePimAttribute PA ON PAL.PimAttributeId=PA.PimAttributeId
WHERE PA.AttributeCode='IsActive' AND PA.IsCategory=0 --AND PAL.LocaleId=1

GO

Update ZnodeApplicationSetting
set Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimProductId</name><headertext>Checkbox</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>PimProductId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>Image</name><headertext>Image</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ProductImage,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>SKU</name><headertext>SKU</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>ProductName</name><headertext>Product Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>y</isallowlink><islinkactionurl>/PIM/Products/Edit</islinkactionurl><islinkparamfield>PimProductId</islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>ProductType</name><headertext>Product Type</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>AttributeFamily</name><headertext>Attribute Family</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>PublishStatus</name><headertext>Publish Status</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Copy|Delete|Publish</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Copy|Delete|Publish</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Products/Edit|/PIM/Products/Copy|/PIM/Products/Delete|/PIM/Products/PublishProduct</manageactionurl><manageparamfield>PimProductId|PimProductId|PimProductId|PimProductId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='View_ManageProductList'

Update ZnodeApplicationSetting
set Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimProductTypeAssociationId</name><headertext>Product ID</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PimProductId</name><headertext>Checkbox</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>PimProductId</name><headertext>ID</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Image</name><headertext>Image</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ProductImage,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview>    </column>    <column><id>5</id><name>ProductName</name><headertext>Product Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>ProductType</name><headertext>Product Type</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SKU</name><headertext>SKU</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>Assortment</name><headertext>Assortment</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Brand/UnAssociateBrandProducts</manageactionurl><manageparamfield>PimProductId,attributeValue</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='AssociatedBrandProductList'

Update ZnodeApplicationSetting
set Setting='<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductId</name>      <headertext>Checkbox</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>PimProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimProductId</name>      <headertext>ID</headertext>      <width>20</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ProductImage,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>AttributeFamily</name>      <headertext>Attribute Family</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Assortment</name>      <headertext>Assortment</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>IsActive</name>      <headertext>Product Status</headertext>      <width>0</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Status</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName='AssociatedProductList'

Update ZnodeApplicationSetting
set Setting= '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimLinkProductDetailId</name>      <headertext>Checkbox</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>PimLinkProductDetailId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimProductId</name>      <headertext>ID</headertext>      <width>40</width>      <datatype>Int32</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>PimLinkProductDetailId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ProductImage,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ProductName</name>      <headertext>Name</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>Assortment</name>      <headertext>Assortment</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>DisplayOrder</name>      <headertext>Display Order</headertext>      <width>0</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>3</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>y</iscontrol>      <controltype>Text</controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column><column><id>9</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column>    <column>      <id>10</id>      <name>Manage</name>      <headertext>Action</headertext>      <width>0</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>Edit|Delete</format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>Edit|Delete</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>/PIM/Products/EditAssignLinkProducts|/PIM/Products/UnAssignLinkProducts</manageactionurl>      <manageparamfield>PimLinkProductDetailId|PimLinkProductDetailId</manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName='View_ManageLinkProductList'

Update ZnodeApplicationSetting
set Setting= '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimProductTypeAssociationId</name><headertext>Checkbox</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>RelatedProductId</name><headertext>RelatedProductId</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ProductId</name><headertext>ID</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>productId</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Image</name><headertext>Image</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ImagePath,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>ProductName</name><headertext>Product Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>ProductType</name><headertext>Product Type</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SKU</name><headertext>SKU</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>AvailableInventory</name><headertext>Available Inventory</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Assortment</name><headertext>Assortment</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>10</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>3</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>n</isadvancesearch><Class></Class><SearchControlType>Text</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>IsDefault</name><headertext>Is Default</headertext><width>40</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype>HiddenField</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>isDefaultVariant</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>10</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>5</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>DisplayOrder</Class><SearchControlType>Text</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>Status</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>14</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Products/UpdateAssociatedConfigurableProducts|/PIM/Products/UnassociateProducts</manageactionurl><manageparamfield>PimProductTypeAssociationId,PimProductId,RelatedProductId,IsDefault,ProductId|PimProductTypeAssociationId,ProductId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='View_ManageProductTypeList'

Update ZnodeApplicationSetting
set Setting='<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimCategoryProductId</name><headertext>Checkbox</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>PimProductId</name><headertext>ID</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>Image</name><headertext>Image</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ImagePath,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>ProductName</name><headertext>Product Name</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>ProductType</name><headertext>Product Type</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>SKU</name><headertext>SKU</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>Assortment</name><headertext>Assortment</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>40</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>3</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>Manage</name><headertext>Action</headertext><width>40</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Category/UpdateCategoryProductDetail|/PIM/Category/DeleteAssociatedProducts</manageactionurl><manageparamfield>PimCategoryProductId|PimCategoryProductId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='AssociatedCategoryProducts'

Update ZnodeApplicationSetting
set Setting= '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimProductId</name>      <headertext>ID</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>ProductId</checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ProductImage,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>50</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>n</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>AvailableInventory</name>      <headertext>Available Inventory</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>SKU</displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Assortment</name>      <headertext>Assortment</headertext>      <width>30</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column><column><id>9</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='UnassociatedProducts'

Update ZnodeApplicationSetting
set Setting= '<?xml version="1.0" encoding="utf-16"?>  <columns>    <column>      <id>1</id>      <name>PimProductId</name>      <headertext>Checkbox</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>y</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>2</id>      <name>PimProductId</name>      <headertext>ID</headertext>      <width>30</width>      <datatype>Int32</datatype>      <columntype>Int32</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>3</id>      <name>Image</name>      <headertext>Image</headertext>      <width>20</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>ImagePath,ProductName</imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>imageicon</Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>4</id>      <name>ProductName</name>      <headertext>Product Name</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>5</id>      <name>ProductType</name>      <headertext>Product Type</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>6</id>      <name>AttributeFamily</name>      <headertext>Attribute Family</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>false</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>7</id>      <name>SKU</name>      <headertext>SKU</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>y</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>8</id>      <name>Assortment</name>      <headertext>Assortment</headertext>      <width>40</width>      <datatype>String</datatype>      <columntype>String</columntype>      <allowsorting>true</allowsorting>      <allowpaging>true</allowpaging>      <format>      </format>      <isvisible>n</isvisible>      <mustshow>n</mustshow>      <musthide>y</musthide>      <maxlength>0</maxlength>      <isallowsearch>y</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>    <column>      <id>9</id>      <name>IsActive</name>      <headertext>Product Status</headertext>      <width>0</width>      <datatype>Boolean</datatype>      <columntype>Boolean</columntype>      <allowsorting>true</allowsorting>      <allowpaging>false</allowpaging>      <format>      </format>      <isvisible>y</isvisible>      <mustshow>n</mustshow>      <musthide>n</musthide>      <maxlength>0</maxlength>      <isallowsearch>n</isallowsearch>      <isconditional>n</isconditional>      <isallowlink>n</isallowlink>      <islinkactionurl>      </islinkactionurl>      <islinkparamfield>      </islinkparamfield>      <ischeckbox>n</ischeckbox>      <checkboxparamfield>      </checkboxparamfield>      <iscontrol>n</iscontrol>      <controltype>      </controltype>      <controlparamfield>      </controlparamfield>      <displaytext>      </displaytext>      <editactionurl>      </editactionurl>      <editparamfield>      </editparamfield>      <deleteactionurl>      </deleteactionurl>      <deleteparamfield>      </deleteparamfield>      <viewactionurl>      </viewactionurl>      <viewparamfield>      </viewparamfield>      <imageactionurl>      </imageactionurl>      <imageparamfield>      </imageparamfield>      <manageactionurl>      </manageactionurl>      <manageparamfield>      </manageparamfield>      <copyactionurl>      </copyactionurl>      <copyparamfield>      </copyparamfield>      <xaxis>n</xaxis>      <yaxis>n</yaxis>      <isadvancesearch>y</isadvancesearch>      <Class>      </Class>      <SearchControlType>--Select--</SearchControlType>      <SearchControlParameters>      </SearchControlParameters>      <DbParamField>      </DbParamField>      <useMode>DataBase</useMode>      <IsGraph>n</IsGraph>      <allowdetailview>n</allowdetailview>    </column>  </columns>'
where ItemName='UnAssociatedCategoryProducts'

Update ZnodeApplicationSetting
set Setting= '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimProductTypeAssociationId</name><headertext>Checkbox</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>RelatedProductId</name><headertext>RelatedProductId</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>PimProductId</name><headertext>ID</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Image</name><headertext>Image</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ProductImage,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>ProductName</name><headertext>Product Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>ProductType</name><headertext>Product Type</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SKU</name><headertext>SKU</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>AvailableInventory</name><headertext>Available Inventory</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Assortment</name><headertext>Assortment</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>10</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>5</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>Text</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>11</id><name>BundleQuantity</name><headertext>Quantity</headertext><width>10</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>5</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>Text</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Products/UpdateAssociatedProducts|/PIM/Products/UnassociateProducts</manageactionurl><manageparamfield>PimProductTypeAssociationId,PimProductId,RelatedProductId|PimProductTypeAssociationId,PimProductId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='View_ManageProductTypeList_BundleProduct'

Update ZnodeApplicationSetting
set Setting= '<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>PimProductTypeAssociationId</name><headertext>Checkbox</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>RelatedProductId</name><headertext>RelatedProductId</headertext><width>20</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield>PimProductTypeAssociationId</checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>PimProductId</name><headertext>ID</headertext><width>30</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>Image</name><headertext>Image</headertext><width>20</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield>ProductImage,ProductName</imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>imageicon</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>ProductName</name><headertext>Product Name</headertext><width>60</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>ProductType</name><headertext>Product Type</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>7</id><name>SKU</name><headertext>SKU</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>8</id><name>AvailableInventory</name><headertext>Available Inventory</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>SKU</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>9</id><name>Assortment</name><headertext>Assortment</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>n</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>10</id><name>DisplayOrder</name><headertext>Display Order</headertext><width>10</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>true</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>5</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>y</iscontrol><controltype>Text</controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>Text</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>12</id><name>IsActive</name><headertext>Product Status</headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>13</id><name>Manage</name><headertext>Action</headertext><width>30</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>true</allowpaging><format>Edit|Delete</format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Edit|Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/PIM/Products/UpdateAssociatedProducts|/PIM/Products/UnassociateProducts</manageactionurl><manageparamfield>PimProductTypeAssociationId,PimProductId,RelatedProductId|PimProductTypeAssociationId,PimProductId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>'
where ItemName='View_ManageProductTypeList_GroupProduct'

GO

DELETE TRT
FROM ZnodeTaxRuleTypes TRT
WHERE ClassName='STOCCHTax'
	AND NOT EXISTS (SELECT * FROM ZnodeTaxPortal A WHERE A.TaxRuleTypeId=TRT.TaxRuleTypeId)
	AND NOT EXISTS (SELECT * FROM ZnodeTaxRule B WHERE B.TaxRuleTypeId=TRT.TaxRuleTypeId)
	AND NOT EXISTS (SELECT * FROM ZnodeOmsQuoteTaxRule C WHERE C.TaxRuleTypeId=TRT.TaxRuleTypeId)
	AND NOT EXISTS (SELECT * FROM ZnodeOmsTaxRule D WHERE D.TaxRuleTypeId=TRT.TaxRuleTypeId);

GO

INSERT INTO ZnodeAttributeInputValidationRule
	(InputValidationId,ValidationRule,ValidationName,DisplayOrder,RegExp,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1)),
	NULL,'.webp',7,NULL,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT * FROM ZnodeAttributeInputValidationRule WHERE InputValidationId =(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	AND ValidationName = '.webp')


INSERT INTO ZnodeGlobalAttributeValidation 
	(GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT (SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'PromoLargeImage'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	,(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp')
	,NULL,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodeGlobalAttributeValidation WHERE GlobalAttributeId = 
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'PromoLargeImage')
	AND InputValidationId = (SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

INSERT INTO ZnodeGlobalAttributeValidation 
	(GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'PromoSmallImage'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	,(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp')
	,NULL,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodeGlobalAttributeValidation WHERE GlobalAttributeId = 
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'PromoSmallImage')
	AND InputValidationId = (SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

INSERT INTO ZnodeGlobalAttributeValidation 
	(GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'AdSpaceImage1'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	,(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp')
	,NULL,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodeGlobalAttributeValidation WHERE GlobalAttributeId = 
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'AdSpaceImage1')
	AND InputValidationId = (SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

INSERT INTO ZnodeGlobalAttributeValidation 
	(GlobalAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'AdSpaceImage2'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	,(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp')
	,NULL,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodeGlobalAttributeValidation WHERE GlobalAttributeId = 
	(SELECT TOP 1 GlobalAttributeId FROM ZnodeGlobalAttribute WHERE AttributeCode = 'AdSpaceImage2')
	AND InputValidationId = (SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

GO

INSERT INTO ZnodePimAttributeValidation 
	(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'CategoryImage'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1)),
	(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'),
	'',2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodePimAttributeValidation WHERE PimAttributeId=(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'CategoryImage')
	AND InputValidationId=(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image'))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

INSERT INTO ZnodePimAttributeValidation 
	(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1)),
	(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'),
	'',2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodePimAttributeValidation WHERE PimAttributeId=(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'ProductImage')
	AND InputValidationId=(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image'))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

INSERT INTO ZnodePimAttributeValidation 
	(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'GalleryImages'),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1)),
	(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'),
	'',2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT * FROM ZnodePimAttributeValidation WHERE PimAttributeId=(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'GalleryImages')
	AND InputValidationId=(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image'))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

GO

INSERT INTO ZnodeMediaAttributeValidation
	(MediaAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 
	(SELECT TOP 1 MediaAttributeId FROM [dbo].[ZnodeMediaAttribute] WHERE AttributeTypeId=(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image')),
	(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image' AND IsList=1)),
	(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'),
	'',2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS (SELECT * FROM [dbo].[ZnodeMediaAttributeValidation] WHERE MediaAttributeId=(SELECT TOP 1 MediaAttributeId FROM [dbo].[ZnodeMediaAttribute] WHERE AttributeTypeId=(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image'))
	AND InputValidationId=(SELECT TOP 1 InputValidationId FROM dbo.ZnodeAttributeInputValidation WHERE AttributeTypeId =(SELECT TOP 1 AttributeTypeId FROM dbo.ZnodeAttributeType WHERE AttributeTypeName='Image'))
	AND InputValidationRuleId=(SELECT TOP 1 InputValidationRuleId FROM [dbo].[ZnodeAttributeInputValidationRule] WHERE ValidationName='.webp'))

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertSaveCartLineItemsForReOrder')
	DROP PROC Znode_InsertSaveCartLineItemsForReOrder
GO

CREATE PROCEDURE [dbo].[Znode_InsertSaveCartLineItemsForReOrder] 
(
	@OmsOrderId INT, 
	@OmsSavedCartId INT ,
	@UserId INT ,
	@OmsOrderLineItemsId INT = 0,
	@Status BIT = 0 OUT
)
AS 
BEGIN 
BEGIN TRY 
  SET NOCOUNT ON 
  DECLARE @TBL_ZnodeOmsSavedCartLineItem TABLE (OmsSavedCartLineItemId INT , RowId INT)
  DECLARE @GetDate DATETIME = dbo.FN_getDate() , @DefaultLocaleId INT = dbo.fn_getDefaultLocaleId ()
  DECLARE @AddOnOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Addons')

   DECLARE @BundleOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Bundles')

   DECLARE @GroupOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Group')
    DECLARE @versionId INT = (
    SELECT TOP 1 a.VersionId FROM  ZnodePublishVersionEntity a with(nolock) 
    INNER JOIN ZnodePortalCatalog b with(nolock) ON (b.PublishCatalogId = a.ZnodeCatalogId)
    INNER JOIN ZnodeOmsOrderDetails c with(nolock) ON (c.PortalId = b.PortalId)
    INNER JOIN ZnodeOmsOrder d with(nolock) ON (d.OmsOrderId = c.OmsOrderId AND (c.OmsOrderId = @OmsOrderId OR @OmsOrderId = 0  ) ) 
	INNER JOIN ZnodeOmsOrderLineItems f with(nolock) ON (f.OmsOrderDetailsId = c.OmsOrderDetailsId AND (f.OmsOrderLineItemsId = @OmsOrderLineItemsId OR @OmsOrderLineItemsId = 0 ) )
    WHERE a.LocaleId =@DefaultLocaleId
	AND a.RevisionType = (SELECT TOP 1 PublishStateCode FROM ZnodePublishState t WHERE t.PublishStateId = d.PublishStateId ) ) 

   DECLARE @OmsOrderStateId_RETURNED INT = (SELECT TOP 1 ZOOS.OmsOrderStateId FROM ZnodeOmsOrderState ZOOS WHERE ZOOS.OrderStateName = 'RETURNED')
   DECLARE @OmsOrderStateId_CANCELED INT = (SELECT TOP 1 ZOOS.OmsOrderStateId FROM ZnodeOmsOrderState ZOOS WHERE ZOOS.OrderStateName = 'CANCELED')

   CREATE TABLE #ZnodeOmsOrderLineItems_temp (OmsOrderLineItemsId INT ,ParentOmsOrderLineItemsId INT,OmsOrderDetailsId INT , SKU  NVARCHAr(2000),
   OrderLineItemRelationshipTypeID INT ,AutoAddonSKU NVARCHAR(400),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX),Custom3 NVARCHAR(MAX),Custom4 NVARCHAR(MAX)
   ,Custom5 NVARCHAR(MAX), GroupId nvarchar(MAX),ProductName NVARCHAr(2000), Description nvarchar(MAX),Quantity NUMERIC(28,6), ROWID INT, ParentRowID INT)

  IF EXISTS (SELECT TOP 1 OmsOrderDetailsId  FROM ZnodeOmsOrderDetails WHERE  OmsOrderId =  @OmsOrderId AND IsActive =1 )
  BEGIN 

	  ;WITH CTE_OrderData AS
	  (
		  SELECT MIN(ZOOLI.OmsOrderLineItemsId) AS OmsOrderLineItemsId, MIN(ZOOLI.ParentOmsOrderLineItemsId) AS ParentOmsOrderLineItemsId,ZOOLI.OmsOrderDetailsId,ZOOLI.SKU,ZOOLI.OrderLineItemRelationshipTypeID,ZOOLI.AutoAddonSKU,
			  ZOOLI.Custom1,ZOOLI.Custom2,ZOOLI.Custom3,ZOOLI.Custom4,
			  ZOOLI.Custom5,ZOOLI.GroupId,ZOOLI.ProductName,ZOOLI.Description,SUM(ZOOLI.Quantity) AS Quantity
		  FROM ZnodeOmsOrderLineItems ZOOLI WITH (NOLOCK)
		  INNER JOIN ZnodeOmsOrderDetails ZOOD WITH (NOLOCK) ON ZOOLI.OmsOrderDetailsId = ZOOD.OmsOrderDetailsId
		  WHERE  ZOOD.OmsOrderId =  @OmsOrderId AND ZOOD.IsActive =1 AND Exists(Select TOP 1 1 From ZnodePublishProductEntity ZPP With(NOLOCK) Where ZPP.SKU= ZOOLI.Sku AND ZPP.IsActive=1 AND ZPP.VersionId = @versionId)
  

		  AND CASE WHEN ZOOD.OmsOrderStateId = @OmsOrderStateId_CANCELED THEN 0 ELSE  ZOOLI.OrderLineItemStateId END  <> CASE WHEN ZOOD.OmsOrderStateId = @OmsOrderStateId_CANCELED THEN 1 ELSE  @OmsOrderStateId_RETURNED END 
		  GROUP BY ZOOLI.OmsOrderDetailsId,ZOOLI.SKU,ZOOLI.OrderLineItemRelationshipTypeID,ZOOLI.AutoAddonSKU,
			ZOOLI.Custom1,ZOOLI.Custom2,ZOOLI.Custom3,ZOOLI.Custom4, ZOOLI.Custom5,ZOOLI.GroupId,ZOOLI.ProductName,ZOOLI.Description
	  )
	  INSERT INTO #ZnodeOmsOrderLineItems_temp
	  SELECT *
		,Row_number()Over(Order By OmsOrderLineItemsId )  RowId, NULL ParentRowId
	  FROM CTE_OrderData
	  ORDER BY OmsOrderLineItemsId 
  END

  ELSE 
  BEGIN
		;WITH CTE_OrderData AS
		  (
			  SELECT MIN(OmsOrderLineItemsId) AS OmsOrderLineItemsId, MIN(ParentOmsOrderLineItemsId) AS ParentOmsOrderLineItemsId,
				  ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
				  ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4,
				  ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description,SUM(ZOO.Quantity) AS Quantity
			  FROM ZnodeOmsOrderLineItems ZOO WITH (NOLOCK)
			  WHERE ( ZOO.OmsOrderLineItemsId = @OmsOrderLineItemsId OR ZOO.ParentOmsOrderLineItemsId = @OmsOrderLineItemsId ) 
			  AND Exists(Select TOP 1 1 From ZnodePublishProductEntity ZPP With(NOLOCK) Where ZPP.SKU= ZOO.Sku AND ZPP.IsActive=1 AND ZPP.VersionId = @versionId)
			  AND NOT EXISTS(SELECT * FROM ZnodeOmsOrderState ZOOS WHERE ZOO.OrderLineItemStateId = ZOOS.OmsOrderStateId AND ZOOS.OrderStateName IN ( 'RETURNED'))
			  GROUP BY ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
				ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4, ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description
		 )
		 INSERT INTO #ZnodeOmsOrderLineItems_temp
		 SELECT *,Row_number()Over(Order By OmsOrderLineItemsId )   RowId, NULL ParentRowId
		 FROM CTE_OrderData

		INSERT INTO #ZnodeOmsOrderLineItems_temp 
		SELECT MIN(ZOO.OmsOrderLineItemsId) AS OmsOrderLineItemsId,MIN(ZOO.ParentOmsOrderLineItemsId) AS ParentOmsOrderLineItemsId,
		ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
		ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4,
		ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description,SUM(ZOO.Quantity) AS Quantity
		,0 RowId, NULL ParentRowId
		FROM ZnodeOmsOrderLineItems ZOO WITH (NOLOCK)
		WHERE ZOO.OmsOrderLineItemsId = (SELECT TOP 1 ParentOmsOrderLineItemsId FROM #ZnodeOmsOrderLineItems_temp TY WHERE TY.ParentOmsOrderLineItemsId IS NOT NULL 
		AND TY.OrderLineItemRelationshipTypeID <> @AddOnOrderLineItemRelationshipTypeId )
		AND ZOO.ParentOmsOrderLineItemsId  IS NULL
		AND NOT EXISTS(SELECT * FROM ZnodeOmsOrderState ZOOS WHERE OrderLineItemStateId = ZOOS.OmsOrderStateId AND ZOOS.OrderStateName IN ( 'RETURNED'))
		AND NOT EXISTS(SELECT * FROM #ZnodeOmsOrderLineItems_temp tem WHERE tem.OmsOrderLineItemsId = ZOO.OmsOrderLineItemsId )
		GROUP BY ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
			ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4,ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description;

  END

     CREATE TABLE #TBL_OmsSavedCartOld (SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAR(MAX) )

	 CREATE TABLE #TBL_OmsSavedCartNew (SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAR(MAX) )

	 
	 SELECT SKU , OmsOrderLineItemsId, ParentOmsOrderLineItemsId, OrderLineItemRelationshipTypeID,Quantity 
	 INTO #ZnodeOmsSavedCartLineItemOld
	 FROM #ZnodeOmsOrderLineItems_temp a 

	 SELECT OmsOrderLineItemsId, PersonalizeCode, PersonalizeValue  
	 INTO #ZnodeOmsPersonalizeCartItemOld
	 FROM ZnodeOmsPersonalizeItem a WITH (NOLOCK)
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsOrderLineItems_temp t WHERE t.OmsOrderLineItemsId = a.OmsOrderLineItemsId)

	 SELECT SKU , OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OrderLineItemRelationshipTypeID, Quantity
	 INTO #ZnodeOmsSavedCartLineItemNew
	 FROM ZnodeOmsSavedCartLineItem a WITH (NOLOCK)
	 WHERE OmsSavedCartId = @OmsSavedCartId 


	 SELECT OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue   
	 INTO #ZnodeOmsPersonalizeCartItemNew
	 FROM ZnodeOmsPersonalizeCartItem a WITH (NOLOCK)
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)

	 INSERT INTO #TBL_OmsSavedCartOld (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	 SELECT SKU , OmsOrderLineItemsId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemOld TBL_B WHERE TBL_B.OmsOrderLineItemsId = ISNULL(TBL_A.ParentOmsOrderLineItemsId,0)  ) ParentSKU
				, ParentOmsOrderLineItemsId
	 FROM #ZnodeOmsSavedCartLineItemOld TBL_A
	 WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId

	 ;With Cte_UpdateOld AS 
	 (
		SELECT ParentOmsOrderLineItemsId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsOrderLineItemsId = a.ParentOmsOrderLineItemsId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsOrderLineItemsId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsOrderLineItemsId = a.ParentOmsOrderLineItemsId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemOld a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM #TBL_OmsSavedCartOld TBL_O 
	 INNER JOIN Cte_UpdateOld TBL_ON ON (TBL_ON.ParentOmsOrderLineItemsId  = TBL_O.OmsSavedCartLineItemId )

	  INSERT INTO #TBL_OmsSavedCartNew (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	  SELECT SKU , OmsSavedCartLineItemId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemNew TBL_B WHERE TBL_B.OmsSavedCartLineItemId = ISNULL( TBL_A.ParentOmsSavedCartLineItemId,0)   ) ParentSKU
				, ParentOmsSavedCartLineItemId
	  FROM #ZnodeOmsSavedCartLineItemNew TBL_A
	  WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId
	 
	 ;With Cte_UpdateNew AS 
	 (
		SELECT ParentOmsSavedCartLineItemId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsSavedCartLineItemId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemNew a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )	 
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM #TBL_OmsSavedCartNew TBL_O 
	 INNER JOIN Cte_UpdateNew TBL_ON ON (TBL_ON.ParentOmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )

	  UPDATE TBL_O
	  SET TBL_O.PersonalizeCode = SUBSTRING((SELECT ','+TBL_ON.PersonalizeCode FROM #ZnodeOmsPersonalizeCartItemNew TBL_ON WHERE TBL_ON.OmsSavedCartLineItemId  = TBL_O.ParentOmsSavedCartLineItemId   FOR XML PATH ('')),2,4000) 
		,TBL_O.PersonalizeValue =  SUBSTRING((SELECT ','+TBL_ON.PersonalizeValue FROM #ZnodeOmsPersonalizeCartItemNew TBL_ON WHERE TBL_ON.OmsSavedCartLineItemId  = TBL_O.ParentOmsSavedCartLineItemId   FOR XML PATH ('')),2,4000)  
	  FROM #TBL_OmsSavedCartNew TBL_O 
	

	  UPDATE TBL_O
	  SET TBL_O.PersonalizeCode = SUBSTRING((SELECT ','+TBL_ON.PersonalizeCode FROM #ZnodeOmsPersonalizeCartItemOld TBL_ON WHERE  TBL_ON.OmsOrderLineItemsId  = TBL_O.ParentOmsSavedCartLineItemId  FOR XML PATH ('')),2,4000)
		,TBL_O.PersonalizeValue =  SUBSTRING((SELECT ','+TBL_ON.PersonalizeValue FROM #ZnodeOmsPersonalizeCartItemOld TBL_ON WHERE  TBL_ON.OmsOrderLineItemsId  = TBL_O.ParentOmsSavedCartLineItemId  FOR XML PATH ('')),2,4000) 
	  FROM #TBL_OmsSavedCartOld TBL_O 

	  UPDATE a 
	  SET   a.PersonalizeCode = ISNULL((SELECT TOP 1 PersonalizeCode FROM #TBL_OmsSavedCartOld RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeCode)
	  ,a.PersonalizeValue = ISNULL((SELECT TOP 1 PersonalizeValue FROM #TBL_OmsSavedCartOld RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeValue)
	  FROM #TBL_OmsSavedCartOld a 
	  WHERE a.ParentOmsSavedCartLineItemId IS NOT NULL 

	  UPDATE a 
	  SET   a.PersonalizeCode = ISNULL((SELECT TOP 1 PersonalizeCode FROM #TBL_OmsSavedCartNew RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeCode)
	  ,a.PersonalizeValue = ISNULL((SELECT TOP 1 PersonalizeValue FROM #TBL_OmsSavedCartNew RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeValue)
	  FROM #TBL_OmsSavedCartNew a 
	  WHERE a.ParentOmsSavedCartLineItemId IS NOT NULL 

	 UPDATE a 
	 SET  a.Quantity =  a.Quantity+d.Quantity 
	 FROM ZnodeOmsSavedCartLineItem a 
	 INNER JOIN #TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
	 INNER JOIN #TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
	 INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsOrderLineItemsId = c.OmsSavedCartLineItemId)

	 ;WITH CTE_UpdateOrder 
	 AS 
	 (
	   SELECT Sequence,  ROW_NUMBER()Over(order BY OmsSavedCartLineItemId ASC) RowId
	   FROM ZnodeOmsSavedCartLineItem WITH (NOLOCK)
	   WHERE  OmsSavedCartId = @OmsSavedCartId
	 
	 ) 
	 UPDATE CTE_UpdateOrder 
	 SET Sequence = RowId

		DECLARE @DeletedId TABLE (OmsSavedCartLineItemId INT )

	
		DELETE  FROM #ZnodeOmsOrderLineItems_temp OUTPUT DELETED.OmsOrderLineItemsId INTO @DeletedId WHERE OmsOrderLineItemsId IN (SELECT c.OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem a 
		INNER JOIN #TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		INNER JOIN #TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
		INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsOrderLineItemsId = c.OmsSavedCartLineItemId))


		DELETE FROM #ZnodeOmsOrderLineItems_temp WHERE ParentOmsOrderLineItemsId IN (SELECT OmsSavedCartLineItemId FROM @DeletedId)

		DELETE TR FROM #ZnodeOmsOrderLineItems_temp TR 
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsOrderLineItems_temp YU WHERE TR.OmsOrderLineItemsId = YU.ParentOmsOrderLineItemsId  ) 
		AND TR.ParentOmsOrderLineItemsId IS NULL 

		UPDATE B
		SET B.ParentRowID = A.ROWID
		FROM #ZnodeOmsOrderLineItems_temp A
		INNER JOIN #ZnodeOmsOrderLineItems_temp B ON A.OmsOrderLineItemsId = B.ParentOmsOrderLineItemsId
		WHERE A.ParentOmsOrderLineItemsId IS NULL

		UPDATE B
		SET B.ParentRowID = A.ParentRowID
		FROM #ZnodeOmsOrderLineItems_temp A
		INNER JOIN #ZnodeOmsOrderLineItems_temp B ON (A.OrderLineItemRelationshipTypeID=B.OrderLineItemRelationshipTypeID)
		WHERE A.ParentOmsOrderLineItemsId IS NOT NULL AND B.ParentRowID IS NULL

		UPDATE B
		SET B.ParentRowID = A.ROWID
		FROM #ZnodeOmsOrderLineItems_temp A
		INNER JOIN #ZnodeOmsOrderLineItems_temp B ON (A.OmsOrderLineItemsId=B.ParentOmsOrderLineItemsId AND B.OrderLineItemRelationshipTypeID IS NOT NULL)
		WHERE A.ParentOmsOrderLineItemsId IS NOT NULL AND B.ParentRowID IS NULL AND B.OrderLineItemRelationshipTypeID=@AddOnOrderLineItemRelationshipTypeId

	BEGIN TRANSACTION ReorderSaveCart
		INSERT INTO ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId,CustomText,CartAddOnDetails
											,Sequence,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AutoAddon,OmsOrderId,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId
											,ProductName,Description)
		OUTPUT INSERTED.OmsSavedCartLineItemId,INSERTED.Sequence INTO @TBL_ZnodeOmsSavedCartLineItem 
		SELECT NULL,@OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId,NULL CustomText, NULL CartAddOnDetails
											,RowId,@UserId,@GetDate,@UserId,@GetDate,AutoAddonSKU,NULL OmsOrderId,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId
											,ProductName,Description
		FROM #ZnodeOmsOrderLineItems_temp 
		ORDER BY OmsOrderLineItemsId 

		UPDATE ab 
		SET ab.ParentOmsSavedCartLineItemId = 
			(SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_ZnodeOmsSavedCartLineItem av WHERE av.RowId = b.ParentRowID)
		FROM ZnodeOmsSavedCartLineItem ab 
		INNER JOIN @TBL_ZnodeOmsSavedCartLineItem a ON (a.OmsSavedCartLineItemId = ab.OmsSavedCartLineItemId) 
		INNER JOIN #ZnodeOmsOrderLineItems_temp b ON  (b.RowId = a.RowId) 

		INSERT INTO ZnodeOmsPersonalizeCartItem (OmsSavedCartLineItemId,PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL)
		SELECT c.OmsSavedCartLineItemId,PersonalizeCode,PersonalizeValue,@UserId,@GetDate,@UserId,@GetDate,DesignId,ThumbnailURL
		FROM ZnodeOmsPersonalizeItem  a 
		INNER JOIN #ZnodeOmsOrderLineItems_temp b ON (a.OmsOrderLineItemsId = b.OmsOrderLineItemsId)
		INNER JOIN @TBL_ZnodeOmsSavedCartLineItem c ON (c.RowId = b.RowId)

		UPDATE ZOSCLI1 set Quantity = null
		from ZnodeOmsSavedCartLineItem ZOSCLI1
		where ParentOmsSavedCartLineItemId is null and OmsSavedCartId = @OmsSavedCartId
		and Quantity is not null
		and not exists(select * from ZnodeOmsSavedCartLineItem ZOSCLI where OrderLineItemRelationshipTypeId IN (@BundleOrderLineItemRelationshipTypeId,@GroupOrderLineItemRelationshipTypeId ) and ZOSCLI1.OmsSavedCartLineItemId = ZOSCLI.ParentOmsSavedCartLineItemId )

		--Update Qty for Parentlineitem except simple product
		UPDATE ZOSCLI
		SET Quantity = ZOSCLI.Quantity+Old.Quantity
		FROM ZnodeOmsSavedCartLineItem ZOSCLI
		INNER JOIN #ZnodeOmsSavedCartLineItemNew New ON (ZOSCLI.OmsSavedCartLineItemId = New.OmsSavedCartLineItemId)
		INNER JOIN #ZnodeOmsSavedCartLineItemOld Old ON (New.SKU = Old.SKU)
		WHERE ZOSCLI.ParentOmsSavedCartLineItemId IS NULL AND OmsSavedCartId = @OmsSavedCartId AND ZOSCLI.Quantity IS NOT NULL
	    --AND EXISTS(SELECT * FROM ZnodeOmsSavedCartLineItem ZOSCLI WHERE OrderLineItemRelationshipTypeId=@BundleOrderLineItemRelationshipTypeId)

		UPDATE ZnodeOmsSavedCart
		SET ModifiedDate = GETDATE()
		WHERE OmsSavedCartId = @OmsSavedCartId
	COMMIT TRANSACTION ReorderSaveCart
	SET @status = 1 
   
	END TRY 
	BEGIN CATCH 
		ROLLBACK TRANSACTION ReorderSaveCart
		SELECT ERROR_MESSAGE()
		SET @status = 0 

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertSaveCartLineItemsForReOrder @OmsOrderId = '+CAST(@OmsOrderId AS VARCHAR(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@OmsSavedCartId='+CAST(@OmsSavedCartId AS VARCHAR(50))+',@OmsOrderLineItemsId='+CAST(@OmsOrderLineItemsId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_InsertSaveCartLineItemsForReOrder',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialInsertUpdateProductAttribute')
	DROP PROC Znode_ImportPartialInsertUpdateProductAttribute
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialInsertUpdateProductAttribute] 
(
	@PimProductDetail	PIMPRODUCTDETAIL READONLY,
	@UserId				INT ,
	@status				BIT OUT,
	@IsNotReturnOutput	BIT = 0,
	@CopyPimProductId	INT = 0
)
AS
/*
	Summary : To Insert / Update bulk Product with multiple attribute values 
	Update Logic: 
*/
BEGIN 
	BEGIN TRY 
	SET NOCOUNT ON 

	--DECLARE @LocationDataPimAttribute INT

	--SET @LocationDataPimAttribute =(
	--SELECT TOP 1 PimAttributeId FROM dbo.ZnodePimAttribute where AttributeCode ='LocationData')

	DECLARE @DefaultLocaleId INT= dbo.fn_getdefaultLocaleId()
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @PublishStateIdForDraft INT = [dbo].[Fn_GetPublishStateIdForDraftState]()
	DECLARE @PublishStateIdForNotPublished INT = [dbo].[Fn_GetPublishStateIdForForNotPublishedState]()
	DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
	DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
	DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
	 
	INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
	SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetDefaultAttributeId] ()
			 
	INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
	SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

	INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
	SELECT PimAttributeId, AttributeCode FROM [dbo].[Fn_GetTextAreaAttributeId]()

	SELECT TBLPA.* INTO #Temp_Product FROM @PimProductDetail TBLPA

	DELETE FROM #Temp_Product WHERE RTRIM(LTRIM(AttributeValue)) = '';

	UPDATE TP
	SET TP.PimAttributeFamilyId=PP.PimAttributeFamilyId
	FROM #Temp_Product TP
	INNER JOIN ZnodePimProduct PP ON TP.PimProductId=PP.PimProductId;

	DECLARE @SQL VARCHAR(MAX);
	IF NOT EXISTS (SELECT TOP 1 1  FROM tempdb.INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME='RowNumber' AND TABLE_NAME='#Temp_Product')
	BEGIN
		SET @SQL='ALTER TABLE #Temp_Product ADD RowNumber BIGINT IDENTITY(1,1);'

		EXEC (@SQL);
	END

	UPDATE TP 
	SET TP.PimAttributeValueId = ZPAV.PimAttributeValueId
	FROM #Temp_Product TP
	INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeId = TP.PimAttributeId AND ZPAV.PimProductId = TP.PimProductId )
	 
	UPDATE ZPAVL
	SET AttributeValue = TP.AttributeValue
	,ModifiedDate = @GetDate
	,ModifiedBy = @UserId
	FROM ZnodePimAttributevalueLocale ZPAVL 
	INNER JOIN #Temp_Product TP ON (TP.PimAttributeValueId = ZPAVL.PimAttributeValueId AND TP.LocaleId = ZPAVL.LocaleId)

	UPDATE ZPAVL SET AttributeValue = TP.AttributeValue
	,ModifiedDate = @GetDate
	,ModifiedBy = @UserId
	FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
	INNER JOIN #Temp_Product TP ON (TP.PimAttributeValueId = ZPAVL.PimAttributeValueId AND TP.LocaleId = ZPAVL.LocaleId)

	--- Update default value 
	SELECT n.PimAttributeValueId, n.LocaleId,h.PimAttributeDefaultValueId
	INTO #temp_DefaultValue 
	FROM #Temp_Product N 
	CROSS APPLY STRING_SPLIT(n.AttributeValue,',') g 
	INNER JOIN ZnodePimAttributeDefaultValue h ON (h.AttributeDefaultValueCode = g.value)
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue T WHERE T.PimAttributeValueId = n.PimAttributeValueId)
	 
	DELETE YU FROM ZnodePimProductAttributeDefaultValue YU 
	WHERE EXISTS (SELECT TOP 1 1 FROM #temp_DefaultValue TY WHERE 
	YU.PimAttributeDefaultValueId <> TY.PimAttributeDefaultValueId 
	AND YU.PimAttributeValueId = TY.PimAttributeValueId )

	--End
	INSERT INTO ZnodePimProductAttributeDefaultValue (PimAttributeValueId,PimAttributeDefaultValueId,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT YU.PimAttributeValueId, PimAttributeDefaultValueId,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
	FROM #temp_DefaultValue YU 
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue TY WHERE YU.PimAttributeDefaultValueId <> TY.PimAttributeDefaultValueId AND YU.PimAttributeValueId = TY.PimAttributeValueId )

	-- Update product media 
	SELECT n.PimAttributeValueId, n.LocaleId,h.MediaId, h.Path As MediaPath
	INTO #temp_MediaValue
	FROM #Temp_Product N 
	CROSS APPLY STRING_SPLIT(n.AttributeValue,',') g 
	INNER JOIN ZnodeMedia h ON (h.MediaId = CAST(g.value as int))
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia T WHERE T.PimAttributeValueId = n.PimAttributeValueId)
	 
	DELETE YU FROM ZnodePimProductAttributeMedia YU 
	WHERE EXISTS (SELECT TOP 1 1 FROM #temp_MediaValue TY WHERE YU.MediaId <> TY.MediaId 
	AND YU.PimAttributeValueId = TY.PimAttributeValueId )

	INSERT INTO ZnodePimProductAttributeMedia (PimAttributeValueId,MediaPath,MediaId,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT YU.PimAttributeValueId, MediaPath,MediaId,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
	FROM #temp_MediaValue YU 
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia TY WHERE YU.MediaId <> TY.MediaId AND YU.PimAttributeValueId = TY.PimAttributeValueId )
	 
	UPDATE ZnodePimProduct SET ModifiedBy = @UserId ,ModifiedDate = @GetDate ,PublishStateId = @PublishStateIdForDraft	
	WHERE EXISTS (SELECT TOP 1 1 FROM #Temp_Product TY WHERE TY.PimProductId = ZnodePimProduct.PimProductId)
	-- Insert For New Product and Attribute 
	 
	--Update A SET A.PimAttributeFamilyId = B.PimAttributeFamilyId from ZnodePimProduct A Inner join #Temp_Product B on A.PimProductId = B.PimProductId 
	--where ProductType <> 'ConfigurableProduct'
	 
	--Update C SET C.PimAttributeFamilyId = B.PimAttributeFamilyId from ZnodePimProduct A Inner join #Temp_Product B on A.PimProductId = B.PimProductId 
	--Inner join ZnodePimattributeValue C on a.PimProductId = C.PimProductId
	--where ProductType <> 'ConfigurableProduct'
	 	 
	DECLARE @TBL_PimProductId TABLE (PimProductId INT , SKU VARCHAR(1000), RowNumber INT)
	DECLARE @TBL_PimAttributeValue TABLE (PimAttributeValueId INT , PimProductId INT ,PimAttributeId INT )

	--BEGIN TRAN 

	MERGE INTO ZnodePimProduct TARGET USING (SELECT PimAttributeFamilyId,AttributeValue SKU , RowNumber 
	FROM #Temp_Product WHERE ProductAttributeCode = 'SKU' AND PimAttributeValueId IS NULL 
	GROUP BY AttributeValue,PimAttributeFamilyId,RowNumber ) SOURCE ON 1=0 
	WHEN NOT MATCHED THEN INSERT 
	(PimAttributeFamilyId,ExternalId,IsProductPublish,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishStateId) 
	VALUES (Source.PimAttributeFamilyId,NULL ,NULL, @UserId , @Getdate,@userId , @getdate, @PublishStateIdForNotPublished )
	OUTPUT Inserted.PimProductId , Source.SKU, Source.RowNumber INTO @TBL_PimProductId;

	INSERT INTO @TBL_PimProductId (PimProductId, SKU, RowNumber)
	SELECT PimProductId, NULL, RowNumber
	FROM #Temp_Product TP
	WHERE PimProductId IS NOT NULL
		AND	NOT EXISTS (SELECT 1 FROM @TBL_PimProductId PPI WHERE PPI.PimProductId = TP.PimProductId AND PPI.RowNumber = TP.RowNumber)
	GROUP BY PimProductId,RowNumber;

	UPDATE P
	SET P.SKU=PP.SKU
	FROM @TBL_PimProductId P
	INNER JOIN ZnodePimProduct PP ON P.PimProductId=PP.PimProductId;

	INSERT INTO ZnodePimAttributeValue 
		(PimAttributeFamilyId,PimProductId,PimAttributeId,PimAttributeDefaultValueId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	OUTPUT Inserted.PimAttributeValueId , inserted.PimProductId,inserted.PimAttributeId INTO @TBL_PimAttributeValue
	SELECT PimAttributeFamilyId,CASE WHEN TYU.PimProductId IS NULL THEN TBL.PimProductId ELSE TYU.PimProductId END ,PimAttributeId,NULL PimAttributeDefaultValueId,NULL AttributeValue,@UserId , @Getdate,@userId , @getdate
	FROM #Temp_Product TBL 
	LEFT JOIN @TBL_PimProductId TYU ON (TYU.RowNumber = TBL.RowNumber ) 
	WHERE TBL.PimAttributeValueId IS NULL 
	AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue RT WHERE RT.PimProductId = CASE WHEN TYU.PimProductId IS NULL THEN TBL.PimProductId ELSE TYU.PimProductId END AND RT.PimAttributeId = TBL.PimAttributeId)
	--AND TBL.PimAttributeId<> @LocationDataPimAttribute

	UPDATE TP SET TP.PimAttributeValueId = ZPAV.PimAttributeValueId
	FROM #Temp_Product TP
	INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeId = TP.PimAttributeId AND ZPAV.PimProductId = TP.PimProductId )

	SELECT distinct CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END PimAttributeValueId , LocaleId , AttributeValue ,Row_number()Over(PARTITION BY CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END, LocaleId Order BY CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END, LocaleId ) RowId
	INTO #temp_AttributeValueLocale 
	FROM #Temp_Product TBL 
	LEFT JOIN @TBL_PimProductId TYU ON (TYU.RowNumber = TBL.RowNumber ) 
	LEFT JOIN @TBL_PimAttributeValue TBPV ON (TBPV.PimProductId = TYU.PimProductId AND TBPV.PimAttributeId = TBL.PimAttributeId)
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale TYU WHERE TYU.PimAttributeValueId = CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END AND TYU.LocaleId = TBL.LocaleId)
		AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TY WHERE TY.PimAttributeId = TBL.PimAttributeId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TY WHERE TY.PimAttributeId = TBL.PimAttributeId )
		AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TY WHERE TY.PimAttributeId = TBL.PimAttributeId )
		AND CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END IS NOT NULL 

	DELETE FROM #temp_AttributeValueLocale WHERE RowId > 1 

	INSERT INTO ZnodePimAttributeValueLocale (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT PimAttributeValueId , LocaleId , AttributeValue , @UserId , @Getdate,@userId , @getdate
	FROM #temp_AttributeValueLocale TBPV

	SELECT distinct CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END PimAttributeValueId, LocaleId , AttributeValue 
		,ROW_NUMBER() OVER (PARTITION BY CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END, LocaleId Order BY CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END, LocaleId ) RowId
	INTO #temp_AttributeValuetextareaLocale
	FROM #Temp_Product TBL 
	LEFT JOIN @TBL_PimProductId TYU ON (TYU.RowNumber = TBL.RowNumber ) 
	LEFT JOIN @TBL_PimAttributeValue TBPV ON (TBPV.PimProductId = TYU.PimProductId AND TBPV.PimAttributeId = TBL.PimAttributeId)
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeTextAreaValue TYU WHERE TYU.PimAttributeValueId = CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END AND TYU.LocaleId = TBL.LocaleId)
	-- AND TBL.PimAttributeId<> @LocationDataPimAttribute
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TY WHERE TY.PimAttributeId = TBL.PimAttributeId ) 
		AND CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END IS NOT NULL 

	DELETE FROM #temp_AttributeValuetextareaLocale WHERE RowId > 1 

	DELETE ZPVL FROM dbo.ZnodePimAttributeValue ZPV WITH(NOLOCK) 
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPVL ON ZPV.PimAttributeValueId=ZPVL.PimAttributeValueId
	INNER JOIN ZnodePimAttribute ZPT WITH(NOLOCK) ON ZPT.PimAttributeId=ZPV.PimAttributeId
	INNER JOIN ZnodeAttributeType ZT WITH(NOLOCK) ON ZT.AttributeTypeId=ZPT.AttributeTypeId
	--WHERE ZPV.PimAttributeId=@LocationDataPimAttribute
	WHERE EXISTS (SELECT * FROM #temp_AttributeValuetextareaLocale WHERE PimAttributeValueId=ZPVL.PimAttributeValueId)

	DELETE ZPV FROM dbo.ZnodePimAttributeValue ZPV
	INNER JOIN ZnodePimProductAttributeTextAreaValue ZPVL WITH(NOLOCK) ON ZPV.PimAttributeValueId=ZPVL.PimAttributeValueId
	INNER JOIN ZnodePimAttribute ZPT WITH(NOLOCK) ON ZPT.PimAttributeId=ZPV.PimAttributeId
	INNER JOIN ZnodeAttributeType ZT WITH(NOLOCK) ON ZT.AttributeTypeId=ZPT.AttributeTypeId
	--WHERE ZPV.PimAttributeId=@LocationDataPimAttribute
	WHERE EXISTS (SELECT * FROM #temp_AttributeValuetextareaLocale WHERE PimAttributeValueId=ZPVL.PimAttributeValueId)

	INSERT INTO ZnodePimProductAttributeTextAreaValue(PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT PimAttributeValueId, LocaleId , AttributeValue , @UserId , @Getdate,@userId , @getdate
	FROM #temp_AttributeValuetextareaLocale 
	--COMMIT TRAN 

	-- Default attributevalue 
	SELECT CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END PimAttributeValueId, TBL.LocaleId,h.PimAttributeDefaultValueId
	INTO #temp_DefaultValue_1 
	FROM #Temp_Product TBL 
	LEFT JOIN @TBL_PimProductId TYU ON (TYU.RowNumber = TBL.RowNumber ) 
	LEFT JOIN @TBL_PimAttributeValue TBPV ON (TBPV.PimProductId = TYU.PimProductId AND TBPV.PimAttributeId = TBL.PimAttributeId)
	CROSS APPLY STRING_SPLIT(TBL.AttributeValue,',') g 
	INNER JOIN ZnodePimAttributeDefaultValue h ON (h.AttributeDefaultValueCode = g.value AND h.PimAttributeId = TBL.pimAttributeId )
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue T WHERE T.PimAttributeValueId = CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TY WHERE TY.PimAttributeId = TBL.PimAttributeId ) 
		AND CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END IS NOT NULL 
	--SELECT * FROM #temp_DefaultValue_1

	INSERT INTO ZnodePimProductAttributeDefaultValue (PimAttributeValueId,PimAttributeDefaultValueId,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT YU.PimAttributeValueId, PimAttributeDefaultValueId,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
	FROM #temp_DefaultValue_1 YU 
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue TY WHERE YU.PimAttributeDefaultValueId = TY.PimAttributeDefaultValueId AND YU.PimAttributeValueId = TY.PimAttributeValueId )
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue X where YU.PimAttributeValueId = X.PimAttributeValueId )
	 
	SELECT CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END PimAttributeValueId, TBL.LocaleId,h.MediaId
		,h.Path As MediaPath
	INTO #temp_MediaValue_1
	FROM #Temp_Product TBL 
	LEFT JOIN @TBL_PimProductId TYU ON (TYU.RowNumber = TBL.RowNumber ) 
	LEFT JOIN @TBL_PimAttributeValue TBPV ON (TBPV.PimProductId = TYU.PimProductId AND TBPV.PimAttributeId = TBL.PimAttributeId)
	CROSS APPLY STRING_SPLIT(TBL.AttributeValue,',') g 
	INNER JOIN ZnodeMedia h ON (h.MediaId = cast(g.value as int))
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia T WHERE T.PimAttributeValueId = CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END)
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TY WHERE TY.PimAttributeId = TBL.PimAttributeId ) 
	AND CASE WHEN TBPV.PimAttributeValueId IS NULL THEN TBL.PimAttributeValueId ELSE TBPV.PimAttributeValueId END IS NOT NULL 

	INSERT INTO ZnodePimProductAttributeMedia (PimAttributeValueId,MediaPath,MediaId,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT YU.PimAttributeValueId,MediaPath, MediaId,LocaleId,@UserId,@GetDate,@UserId,@GetDate 
	FROM #temp_MediaValue_1 YU 
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia TY WHERE YU.MediaId = TY.MediaId AND YU.PimAttributeValueId = TY.PimAttributeValueId )


	IF EXISTS (SELECT TOP 1 1 FROM @PimProductDetail P INNER JOIN ZnodePimAttribute PA ON P.PimAttributeId=PA.PimAttributeId
			INNER JOIN ZnodeAttributeType c ON PA.AttributeTypeId=c.AttributeTypeId 
			WHERE c.AttributeTypeName = 'link' AND ISNULL(P.AttributeValue,'')<>'')
	BEGIN
		DECLARE @PimAttributeId INT =(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU');

		SELECT ZPAV.PimProductId, ZPAVL.AttributeValue as SKU
		INTO #ProductSKU
		FROM #Temp_Product tt
		INNER JOIN ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId=tt.PimProductId AND ZPAV.PimAttributeId=tt.PimAttributeId
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE ZPAV.PimAttributeId=@PimAttributeId;	

		--Inserting the link attribute product association
		INSERT INTO ZnodePimLinkProductDetail (PimParentProductId,PimProductId,PimAttributeId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)
		SELECT a.PimProductId, f.PimProductId, b.PimAttributeId,@UserId,@GetDate,@UserId,@GetDate,1 displayOrder
		FROM @PimProductDetail a 
		CROSS APPLY DBO.SPLIT(a.AttributeValue,',') s
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = a.PimAttributeId)
		INNER JOIN ZnodeAttributeType c ON (c.AttributeTypeId = b.AttributeTypeId)
		INNER JOIN #ProductSKU f ON (f.SKU = s.Item)
		WHERE c.AttributeTypeName = 'link'
			AND a.PimProductId != f.PimProductId
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimLinkProductDetail ER WHERE ER.PimParentProductId = a.PimProductId
					AND ER.PimProductId = f.PimProductId AND ER.PimAttributeId = b.PimAttributeId);
	END 

	INSERT INTO ZnodePimConfigureProductAttribute (PimProductId,PimAttributeId,PimFamilyId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT TYU.PimProductId , g.value,TBL.ConfigureFamilyIds,@UserId,@GetDate,@UserId,@GetDate 
	FROM #Temp_Product TBL
	INNER JOIN @TBL_PimProductId TYU ON (TYU.RowNumber = TBL.RowNumber )
	CROSS APPLY STRING_SPLIT(TBL.ConfigureAttributeIds,',') g
	WHERE TBL.AttributeValue = 'ConfigurableProduct' AND TBL.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode='ProductType')
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute TYU WHERE TYU.PimProductId = TBL.PimProductId AND TYU.PimAttributeId = g.value)
	GROUP BY TYU.PimProductId , g.value,TBL.ConfigureFamilyIds

	DELETE FROM ZnodePimProductAttributeDefaultValue 
	WHERE PimAttributeValueId IN (SELECT PimAttributeValueId FROM ZnodePimAttributeValue NT
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute TY WHERE NT.PimAttributeId = TY.PimAttributeId 
		AND NT.PimProductId =TY.PimProductId ))

	DELETE NT FROM ZnodePimAttributeValue NT
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute TY WHERE NT.PimAttributeId = TY.PimAttributeId 
		AND NT.PimProductId =TY.PimProductId )

	UPDATE P
	SET P.ProductAttributeCode = PA.AttributeCode
	FROM ZnodePimAttribute PA
	INNER JOIN #Temp_Product P ON PA.PimAttributeId=P.PimAttributeId
	WHERE PA.IsCategory = 0;

	DECLARE @LocaleId INT = (SELECT TOP 1 LocaleId FROM #Temp_Product);
	IF @LocaleId = @DefaultLocaleId
	BEGIN
		DECLARE @sqlt NVARCHAR(MAX) = ''
		DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr INT

		DECLARE Cur_AttributeDataUpdate CURSOR FOR 

		SELECT b.AttributeCode , PimAttributeId 
		FROM INFORMATION_SCHEMA.COLUMNS a 
		INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
		WHERE TABLE_NAME = 'ZnodePimProduct'
			AND IsCategory = 0 
			AND IsShowOnGrid = 1 
			AND EXISTS (SELECT TOP 1 1 FROM #Temp_Product n WHERE n.ProductAttributeCode = b.AttributeCode)

		OPEN Cur_AttributeDataUpdate 
		FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @sqlt = 'UPDATE a
			SET '+@AttributeCodeAtt+'= AttributeValue 
			FROM ZnodePimProduct a 
			INNER JOIN #Temp_Product m ON (m.PimProductId = a.pimProductId ) 
			WHERE m.ProductAttributeCode = '''+@AttributeCodeAtt+'''
			'

			PRINT (@sqlt)
			EXEC (@sqlt)

			FETCH NEXT FROM Cur_AttributeDataUpdate 
			INTO @AttributeCodeAtt,@PimAttributeIdAttr 
		END

		CLOSE Cur_AttributeDataUpdate
		DEALLOCATE Cur_AttributeDataUpdate
	END

	SELECT 1 Id , CAST(1 AS BIT ) Status

	END TRY 
	BEGIN CATCH 
		SELECT 1 Id , CAST(0 AS BIT ) Status

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialInsertUpdateProductAttribute @Status='+CAST(@Status AS VARCHAR(50));
		
		SELECT 0 AS ID,	CAST(0 AS BIT) AS Status,ERROR_MESSAGE();
		
		SET @Status = 0;
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialInsertUpdateProductAttribute',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialInsertUpdatePimProduct')
	DROP PROC Znode_ImportPartialInsertUpdatePimProduct
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 
)
AS
/*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
BEGIN
    BEGIN TRAN A;
    BEGIN TRY
		DECLARE @PimProductId INT;
		DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
		DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
		DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
		DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
		DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
		DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
		DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

		DECLARE @AssociatedProduct VARCHAR(4000);
		DECLARE @ConfigureAttributeId VARCHAR(4000);
		DECLARE @ConfigureFamilyId VARCHAR(4000);
		DECLARE @PimAttributeFamilyId INT;
		DECLARE @LocaleId INT 

		DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
		DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
		DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
		Declare @SKU nvarchar(300),@ProductName nvarchar(300)
		Select * into ##PimProductData from @PimProductDetail
		--DECLARE @PimAttributeFamily VARCHAR(50) =  [dbo].[Fn_GetAttributeFamilyId]()
		--Update ##PimProductData SET AttributeValue = 
		--(SELECT FamilyCode from ZnodePimAttributeFamily where PimAttributeFamilyId = @PimAttributeFamilyId)
		--where PimAttributeId = @PimAttributeFamily

		--DECLARE @PimAttributeIsPublish VARCHAR(50) =  [dbo].[Fn_GetAttributeIsPublish]()
			 
		--insert into ##PimProductData ([PimAttributeId],[PimAttributeFamilyId],[ProductAttributeCode],[ProductAttributeDefaultValueId],
		--[PimAttributeValueId],	[LocaleId],[PimProductId],[AttributeValue],[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]) 
			 
		--SELECT TOP 1 @PimAttributeIsPublish,[PimAttributeFamilyId],'PublishStatus' ProductAttributeCode,NULL ProductAttributeDefaultValueId,
		--NULL PimAttributeValueId,	[LocaleId],[PimProductId],
		--CASE when isnull([PimProductId] ,0) > 1 then 'Draft' else 'Not Publish' END AttributeValue,
		--[AssociatedProducts],[ConfigureAttributeIds],[ConfigureFamilyIds]
		--from @PimProductDetail  

		INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
		SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
		INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
		SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

		INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
		SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
		SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
        FROM ##PimProductData;
             			 
			 
		SELECT TOP 1 @LocaleId = LocaleId
        FROM ##PimProductData;

        -- Retrive input productId from ##PimProductData table ( having multiple attribute values with common productId) 
		DECLARE @PublishStateIdForDraft INT =  [dbo].[Fn_GetPublishStateIdForDraftState]()

        SELECT TOP 1 @PimProductId = PimProductId
        FROM ##PimProductData;
			
        IF ISNULL(@PimProductId, 0) = 0
        BEGIN
            INSERT INTO ZnodePimProduct
            (PimAttributeFamilyId,
            CreatedBy,
            CreatedDate,
            ModifiedBy,
            ModifiedDate
            )
            SELECT @PimAttributeFamilyId,
                    @UserId,
                    @GetDate,
                    @UserId,
                    @GetDate;

            SET @PimProductId = SCOPE_IDENTITY();

			If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
			Begin		
				Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId
				Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId
				insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
			End

        END;
        ELSE 
        BEGIN
            UPDATE ZNodePimProduct
            SET
                PublishStateId = @PublishStateIdForDraft, 
                ModifiedBy = @UserId,
                ModifiedDate = @GetDate
            WHERE PimProductId = @PimProductId;
            									
			INSERT INTO @TBL_PimProductId(PimAttributeValueId)
			SELECT ZPAV.PimAttributeValueId
            FROM ZnodePimAttributeValue ZPAV
			INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
			--INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
			WHERE ZPAV.PimProductId = @PimProductId
			AND NOT EXISTS
			(
				SELECT TOP 1 1
				FROM ##PimProductData TBPDI
				WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
					AND TBPDI.PimProductId = ZPAV.PimProductId
			)

			If EXISTS (select TOP 1 1 from ##PimProductData where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
			Begin
				Select TOP 1 @SKU  =  AttributeValue from  ##PimProductData where PimAttributeId =  @pimSkuAttributeId

				Select TOP 1 @ProductName  = AttributeValue from  ##PimProductData where PimAttributeId =  @pimProductNameAttributeId

				insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from ##PimProductData P
				where  PD.PimAttributeId = @pimSkuAttributeId 
					AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)

				IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
				insert into ZnodePimDownloadableProduct (SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
			End
		END;
		
		MERGE INTO ZnodePimAttributeValue TARGET
        USING ##PimProductData SOURCE
        ON(
		TARGET.PimProductId = @PimProductId
        AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
            WHEN MATCHED
            THEN UPDATE SET
                            TARGET.PimAttributeFamilyId = CASE
                                                            WHEN Source.PimAttributeFamilyId = 0
                                                            THEN NULL
                                                            ELSE Source.PimAttributeFamilyId
                                                        END,
                            TARGET.CreatedBy = @UserId,
                            TARGET.CreatedDate = @GetDate,
                            TARGET.ModifiedBy = @UserId,
                            TARGET.ModifiedDate = @GetDate
            WHEN NOT MATCHED
            THEN INSERT(PimAttributeFamilyId,
                        PimProductId,
                        PimAttributeId,
                        PimAttributeDefaultValueId,                            
                        CreatedBy,
                        CreatedDate,
                        ModifiedBy,
                        ModifiedDate) VALUES
        (CASE
            WHEN Source.PimAttributeFamilyId = 0
            THEN @PimDefaultFamily
            ELSE Source.PimAttributeFamilyId
        END,
        @PimProductId,
        SOURCE.PimAttributeId,
        CASE
            WHEN SOURCE.ProductAttributeDefaultValueId = 0
            THEN NULL
            ELSE SOURCE.ProductAttributeDefaultValueId
        END,              
        @UserId,
        @GetDate,
        @UserId,
        @GetDate
        )
             
        OUTPUT INSERTED.PimAttributeValueId,
            INSERTED.PimAttributeFamilyId,
            INSERTED.PimAttributeId
            INTO @ZnodePimAttributeValue;
        		 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
                b.LocaleId,
                    zm.Path AttributeValue
					,ZM.MediaId
		FROM @ZnodePimAttributeValue AS a
		INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
												--AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_MediaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodeMedia ZM ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue ,',') SP WHERE sp.Item = ZM.MediaId ))
		
		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
			(SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
			AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)

		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
				AND TARGET.MediaPAth = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
					TARGET.MediaPath = SOURCE.AttributeValue,
					TARGET.MediaId   = SOURCE.MediaId,
                    TARGET.CreatedBy = @UserId,
                    TARGET.CreatedDate = @GetDate,
                    TARGET.ModifiedBy = @UserId,
                    TARGET.ModifiedDate = @GetDate
            WHEN NOT MATCHED
            THEN 
		INSERT(PimAttributeValueId,
							LocaleId,
							MediaPath,
							MediaId ,
							CreatedBy,
							CreatedDate,
							ModifiedBy,
							ModifiedDate) 
		VALUES
			(SOURCE.PimAttributeValueId,
			SOURCE.LocaleId,
			SOURCE.AttributeValue,
			SOURCE.MediaId,
			@UserId,
			@GetDate,
			@UserId,
			@GetDate
			);
		
		;With Cte_TextAreaAttributeValue AS 
			(
		SELECT a.PimAttributeValueId,
						b.LocaleId,
						AttributeValue
		FROM @ZnodePimAttributeValue AS a
		INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
												--AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId)
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
				AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
					TARGET.AttributeValue = SOURCE.AttributeValue,
					TARGET.CreatedBy = @UserId,
					TARGET.CreatedDate = @GetDate,
					TARGET.ModifiedBy = @UserId,
					TARGET.ModifiedDate = @GetDate
            WHEN NOT MATCHED
            THEN 
		INSERT(PimAttributeValueId,
							LocaleId,
							AttributeValue,
							CreatedBy,
							CreatedDate,
							ModifiedBy,
							ModifiedDate) 
		VALUES
			(SOURCE.PimAttributeValueId,
			SOURCE.LocaleId,
			SOURCE.AttributeValue,
			@UserId,
			@GetDate,
			@UserId,
			@GetDate
			);


		INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
						b.LocaleId,
						d.PimAttributeDefaultValueId  AttributeValue
		FROM @ZnodePimAttributeValue AS a
		INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND ltrim(rtrim(SP.Item ))= ltrim(rtrim(d.AttributeDefaultValueCode))))    
	    
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
													AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
				AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
				AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
					TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
					TARGET.CreatedBy = @UserId,
					TARGET.CreatedDate = @GetDate,
					TARGET.ModifiedBy = @UserId,
					TARGET.ModifiedDate = @GetDate
					WHEN NOT MATCHED
					THEN 
		INSERT(PimAttributeValueId,
							LocaleId,
							PimAttributeDefaultValueId,
							CreatedBy,
							CreatedDate,
							ModifiedBy,
							ModifiedDate) 
		VALUES
			(SOURCE.PimAttributeValueId,
			SOURCE.LocaleId,
			SOURCE.AttributeValue,
			@UserId,
			@GetDate,
			@UserId,
			@GetDate
			);
			 
		MERGE INTO ZnodePimAttributeValueLocale TARGET
        USING
        (
            SELECT a.PimAttributeValueId,
                b.LocaleId,
                AttributeValue
            FROM @ZnodePimAttributeValue AS a
                INNER JOIN ##PimProductData AS b ON(a.PimAttributeId = b.PimAttributeId)
                                                        --AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
            WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
			AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
		) SOURCE
        ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
        AND TARGET.LocaleId = SOURCE.LocaleId)
            WHEN MATCHED
            THEN UPDATE SET
                            TARGET.AttributeValue = SOURCE.AttributeValue,
                            TARGET.CreatedBy = @UserId,
                            TARGET.CreatedDate = @GetDate,
                            TARGET.ModifiedBy = @UserId,
                            TARGET.ModifiedDate = @GetDate
            WHEN NOT MATCHED
            THEN INSERT(PimAttributeValueId,
                        LocaleId,
                        AttributeValue,
                        CreatedBy,
                        CreatedDate,
                        ModifiedBy,
                        ModifiedDate) VALUES
        (SOURCE.PimAttributeValueId,
        SOURCE.LocaleId,
        SOURCE.AttributeValue,
        @UserId,
        @GetDate,
        @UserId,
        @GetDate
        );
        SET @AssociatedProduct =
        (
            SELECT MAX(AssociatedProducts)
            FROM ##PimProductData AS a
        );
        INSERT INTO ZnodePimProductTypeAssociation
        (PimParentProductId,
        PimProductId,
        DisplayOrder,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
        )
        SELECT @PimProductId,
                Item,
                ID AS RowId,
                @UserId,
                @GetDate,
                @UserId,
                @GetDate
        FROM dbo.Split(@AssociatedProduct, ',') AS b
                INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item)
				WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation PPT
				WHERE PPT.PimParentProductId = @PimProductId AND PPT.PimProductId = b.Item)

        SET @ConfigureAttributeId =
        (
            SELECT MAX(ConfigureAttributeIds)
            FROM ##PimProductData AS a
        );
        SET @ConfigureFamilyId =
        (
            SELECT MAX(ConfigureFamilyIds)
            FROM ##PimProductData AS a
        );
	
		IF EXISTS (SELECT TOP  1 1 FROM @PimProductDetail P INNER JOIN ZnodePimAttribute PA ON P.PimAttributeId=PA.PimAttributeId
				INNER JOIN ZnodeAttributeType c ON PA.AttributeTypeId=c.AttributeTypeId 
				WHERE c.AttributeTypeName = 'link' AND ISNULL(P.AttributeValue,'')<>'')
		BEGIN
			DECLARE @PimAttributeId INT =(SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU');

			SELECT ZPAV.PimProductId, ZPAVL.AttributeValue as SKU
			INTO #ProductSKU
			FROM ##PimProductData tt
			INNER JOIN ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId=tt.PimProductId AND ZPAV.PimAttributeId=tt.PimAttributeId
			INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
			WHERE ZPAV.PimAttributeId=@PimAttributeId;

			--To get the product SKU in temp table
			--SELECT ZPAV.PimProductId, ZPAVL.AttributeValue as SKU
			--INTO #ProductSKU
			--FROM ZnodePimAttributeValue ZPAV
			--INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId 
			--WHERE EXISTS(SELECT * FROM ZnodePimAttribute ZPA WHERE ZPAV.PimAttributeId = zpa.PimAttributeId AND ZPA.AttributeCode = 'SKU')

			--Inserting the link attribute product association
			INSERT INTO ZnodePimLinkProductDetail (PimParentProductId,PimProductId,PimAttributeId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DisplayOrder)  
			SELECT a.PimProductId, f.PimProductId, b.PimAttributeId,@UserId,@GetDate,@UserId,@GetDate,1 displayOrder  
			FROM @PimProductDetail a 
			CROSS APPLY DBO.SPLIT(a.AttributeValue,',') s
			INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = a.PimAttributeId )  
			INNER JOIN ZnodeAttributeType c ON (c.AttributeTypeId = b.AttributeTypeId)  
			INNER JOIN #ProductSKU f ON (f.SKU = s.Item)  
			WHERE c.AttributeTypeName = 'link'  
				AND a.PimProductId != f.PimProductId  
				AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimLinkProductDetail ER WHERE ER.PimParentProductId = a.PimProductId AND ER.PimProductId = f.PimProductId AND ER.PimAttributeId = b.PimAttributeId)  
		END  

        INSERT INTO [ZnodePimConfigureProductAttribute]
        (PimProductId,
        PimFamilyId,
        PimAttributeId,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
        )
        SELECT @PimProductId,
                @ConfigureFamilyId,
                q.PimAttributeId,
                @UserId,
                @GetDate,
                @UserId,
                @GetDate
        FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);

        IF @IsNotReturnOutput = 0
            SELECT @PimProductId AS Id,
                CAST(1 AS BIT) AS Status;
        SET @status = 1;

		IF @CopyPimProductId > 0 
		BEGIN 
			INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			FROM ZnodePimAttributeValueLocale ZPAVL 
			INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			AND ZPAV.PimProductId = @CopyPimProductId

			INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
			FROM ZnodePimProductAttributeDefaultValue ZPAVL 
			INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			AND ZPAV.PimProductId = @CopyPimProductId

			INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
			FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			AND ZPAV.PimProductId = @CopyPimProductId
			   			   
			INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
			FROM ZnodePimProductAttributeMedia ZPAVL 
			INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
			INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
			WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
			AND ZPAV.PimProductId = @CopyPimProductId
		END 

		IF @LocaleId = @DefaultLocaleId
		BEGIN
			DECLARE @sqlt NVARCHAr(max) = ''
			DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

			DECLARE Cur_AttributeDataUpdate CURSOR FOR 

			SELECT b.AttributeCode , PimAttributeId 
			FROM INFORMATION_SCHEMA.COLUMNS a 
			INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
			WHERE TABLE_NAME = 'ZnodePimProduct'
			AND IsCategory = 0 
			AND IsShowOnGrid = 1 
			AND EXISTS (SELECT TOP 1 1 FROM ##PimProductData n  WHERE n.ProductAttributeCode = b.AttributeCode  )
			OPEN Cur_AttributeDataUpdate 
			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

			SET @sqlt = 'UPDATE a  
			SET '+@AttributeCodeAtt+'= AttributeValue 
			FROM ZnodePimProduct a 
			INNER JOIN ##PimProductData m ON(m.PimProductId = a.pimProductId ) 
			WHERE m.ProductAttributeCode = '''+@AttributeCodeAtt+'''
			' 

			EXEC (@sqlt)

			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			END 
			CLOSE Cur_AttributeDataUpdate
			DEALLOCATE Cur_AttributeDataUpdate
		END 

		If Object_id ('Tempdb..##PimProductData')  is not null 
		DROP TABLE Tempdb..##PimProductData

        COMMIT TRAN A;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE()
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

		ROLLBACK TRAN A;
        EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialInsertUpdatePimProduct',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
    END CATCH;
END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialPimProductData')
	DROP PROC Znode_ImportPartialPimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialPimProductData]
(
	@TableName			VARCHAR(200),
	@NewGUID			NVARCHAR(200),
	@TemplateId			NVARCHAR(200),
	@ImportProcessLogId INT,
	@UserId				INT,
	@LocaleId			INT,
	@DefaultFamilyId	INT
)
AS 
/*
	Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
	Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
				Create group of product with their attribute code and values and inserted one by one products.
	
	SourceColumnName : CSV file column headers
	TargetColumnName : Attributecode from ZnodePimAttribute Table 

	*** Need to log error if transaction failed during insertion of records into table.
*/
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		--BEGIN TRAN ImportProducts;
		DECLARE @SQLQuery NVARCHAR(MAX);
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
		--Declare error Log Table 


		DECLARE @FamilyAttributeDetail TABLE
		( 
		PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
		);
		SET @DefaultFamilyId = 0 

		IF @DefaultFamilyId = 0
		BEGIN
			INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
			--Call Process to insert data of defeult family with cource column name and target column name 
			--EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
			--UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();
			SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
			FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
			LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
			ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
			WHERE zpa.IsCategory = 0 
		END;
		--Read all attribute details with their datatype 
		IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
		BEGIN
			CREATE TABLE #DefaultAttributeValue (AttributeTypeName VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
			AttributeDefaultValueCode VARCHAR(100));
			-- ELSE 
			-- CREATE TABLE #DefaultAttributeValue (AttributeTypeName VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
			-- AttributeDefaultValueCode VARCHAR(100)
			-- Index Ix_Default (PimAttributeId, AttributeDefaultValueCode));
			--IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
			--Begin
				--Select 'Without Index'
			--END
			--Else
				--Alter TABLE #DefaultAttributeValue ADD Index Ix_Default (PimAttributeId, AttributeDefaultValueCode);
					
			INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
			--Call Process to insert default data value 
			EXEC Znode_ImportGetPimAttributeDefaultValue;
		END;
		ELSE
		BEGIN
			DROP TABLE #DefaultAttributeValue;
		END;
		EXEC sys.sp_sqlexec @SQLQuery;
	
		-- Split horizontal table into verticle table by column name and attribute Value with their 
		-- corresponding AttributeId, Default family , Default AttributeValue Id
		--DECLARE @PimProductDetail TABLE 
		--(
			-- PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			--	 ProductAttributeDefaultValueId INT NULL,PimAttributeValueId INT NULL,LocaleId INT,
			--	 PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			--	 ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT INDEX Ix CLUSTERED (RowNumber) 
		--);

		DECLARE @PimProductDetail TABLE 
		(
			PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			ProductAttributeDefaultValueId INT NULL,PimAttributeValueId INT NULL,LocaleId INT,
			PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT
		);

		-- Update Record count in log 
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND ImportProcessLogId = @ImportProcessLogId;
				
		SET @SQLQuery = ' insert into ZnodeImportSuccessLog (ImportedSku,ImportedProductId,ImportedGuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		Select SKU, PimProductId , ''' + @NewGUID + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''' from ' + @TableName ;
		EXEC	sp_executesql @SQLQuery

		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount
		
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
		-- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
		-- Add PimAttributeDefaultValue 
		DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
		FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail WHERE ISNULL(SourceColumnName, '') <> '';
		OPEN Cr_AttributeDetails;
		FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @NewProductId = 0;
			SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
							(SELECT TOP 1 PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId = '
							+ CONVERT(VARCHAR(100), @AttributeId)+'AND AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
							+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
									
							, RowNumber FROM '+@TableName+' TN';
			INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
		END;
		CLOSE Cr_AttributeDetails;
		DEALLOCATE Cr_AttributeDetails;

		SELECT * INTO #PimProductDetail FROM @PimProductDetail

		UPDATE a 
		SET ConfigureAttributeIds = SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
		FROM #PimProductDetail c 
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
		WHERE IsConfigurable =1 AND c.RowNumber = a.RowNumber FOR XML PATH('')),2,4000) 
		FROM #PimProductDetail a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail ab WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
		AND ab.AttributeValue = 'ConfigurableProduct' )

		-- In case of Yes/No : If value is not TRUE OR 1 then it will be False else True
		--If default Value set not need of hard code for IsActive
		UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'Yes','TRUE','1') THEN 'true' ELSE 'false' END FROM #PimProductDetail ppdti
		INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE dav.AttributeTypeName = 'Yes/No';

		-- Pass product records in bulk
		DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL; --User define table type to pass multiple records of product in single step

		INSERT INTO @PimProductDetailToInsert
			(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
				PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
		SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
			PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds 
		FROM #PimProductDetail

		DELETE FROM @PimProductDetailToInsert WHERE RTRIM(LTRIM(AttributeValue)) = '';
	
		IF EXISTS (SELECT TOP 1 1 FROM @PimProductDetailToInsert)
		BEGIN
			EXEC Znode_ImportPartialInsertUpdateProductAttribute @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
		END
		/*
		-- Pass product records one by one 
		DECLARE @IncrementalId INT= 1;
		DECLARE @SequenceId INT=
		(
			SELECT MAX(RowNumber) FROM #PimProductDetail
		);

		DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step
		
		WHILE @IncrementalId <= @SequenceId
		BEGIN
			INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
			PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
			SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
			PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail
			WHERE [#PimProductDetail].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

			Delete from @PimProductDetailToInsert where RTRIM(LTRIM(AttributeValue)) = '';
			--ORDER BY [@PimProductDetail].RowNumber;
			----Call process to finally insert data into 
			----------------------------------------------------------
			--1. [dbo].[ZnodePimProduct]
			--2. [dbo].[ZnodePimAttributeValue]
			--3. [dbo].[ZnodePimAttributeValueLocale]
			if Exists (select TOP 1 1 from @PimProductDetailToInsert)
				EXEC [Znode_ImportPartialInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
				
			DELETE FROM @PimProductDetailToInsert;
			SET @IncrementalId = @IncrementalId + 1;
		END;
		*/

		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialPimProductData @TableName = '+CAST(@TableName AS VARCHAR(max))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200)) +',@TemplateId='+CAST(@TemplateId AS VARCHAR(200)) +',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@DefaultFamilyId='+CAST(@DefaultFamilyId AS VARCHAR(200));
			---Import process updating fail due to database error
		
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
			TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialPimProductData',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;

		ROLLBACK TRAN ImportProducts;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialValidatePimProductData')
	DROP PROC Znode_ImportPartialValidatePimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0,
	@PromotionTypeId	INT=0 
)
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct ( for partial attribute import ) 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max), @FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

			SET @SQLQuery = 'SELECT * into tempdb..##ProductImport_BulkUpdate from '+@TableName;
            EXEC sys.sp_sqlexec    @SQLQuery;

            SET @TableName = 'tempdb..##ProductImport_BulkUpdate';

              --To get the total record count for update purpose in catch block
             SET @SQLQuery = 'SELECT '+CAST(@ImportProcessLogId AS VARCHAR(10))+',COUNT(*) FROM '+@TableName
			 INSERT INTO Znode_ImportCsvRowCount
			 EXEC (@SQLQuery) 

			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus(0)
			WHERE ImportProcessLogId = @ImportProcessLogId AND Status IS NULL;

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'ProductUpdate'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END



			--Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
	
			SET @SQLQuery = 'Select 98 ,''SKU'', SKU, '''+ @newGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',RowNumber   from  '+ @TableName + ' where PimProductId Is null ';
			INSERT INTO ZnodeImportLog
                     (ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
        	EXEC sys.sp_sqlexec	@SQLQuery	 	


			--SET @SQLQuery = '
			--INSERT INTO ZnodeImportLog
			--		(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			--Select 98 ,''Attribute '', a.Name , '''+ @NewGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',' +
			--' NULL  from tempdb.sys.columns a
			--inner join tempdb.sys.tables b on a.object_id = b.object_id 
			--where b.name in (''##ProductUpdate_' + @NewGUID +''') 
			--and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name <> ''guid''' 

   --     	EXEC sys.sp_sqlexec	@SQLQuery	 	

			SET @SQLQuery = 'Delete from  '+@TableName+ ' where PimProductId Is null ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
			
			DECLARE @RecordCount Bigint 
			SET @SQLQuery = ' Select @RecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC sp_executesql @SQLQuery, N'@RecordCount BIGINT out' , @RecordCount=@RecordCount out


			--Generate new process for current import 
            --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
            --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
            --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @ImportHeadName IN('ProductUpdate') AND @RecordCount > 0  
                 BEGIN 
					SET @IsCategory = 0 
				    --Get all default attribute values in attribute 
                    INSERT INTO @FamilyAttributeDetail
                    (PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                    --Call Process to insert data of defeult family with source column name and target column name 
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 
	             END;
            -- Check attributes are manditory and not provided with source table
		   	if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
		 
     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId )
            EXEC sys.sp_sqlexec  @SQLQuery;
            IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )  AND @RecordCount > 0  
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('ProductUpdate', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             --INSERT INTO ZnodeImportLog
                             --(ErrorDescription,
                             -- ColumnName,
                             -- Data,
                             -- GUID,
                             -- CreatedBy,
                             -- CreatedDate,
                             -- ModifiedBy,
                             -- ModifiedDate,
                             -- ImportProcessLogId
                             --)
                             --       SELECT '14' AS ErrorDescription,
                             --              AttributeCode,
                             --              '',
                             --              @NewGUID,
                             --              @UserId,
                             --              @GetDate,
                             --              @UserId,
                             --              @GetDate,
                             --              @ImportProcessLogId
                             --       FROM @FamilyAttributeDetail
                             --       WHERE ISNULL(SourceColumnName, '') = ''
                             --             AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							 Delete FAD from @AttributeDetail FAD
							 where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							 and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;

                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
						
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateMandatoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
									--For link product
									DECLARE @IsIgnoreProcess BIT = CASE WHEN EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute WHERE AttributeCode = (SELECT TOP 1 TargetColumnName
								    FROM ZnodeImportTemplateMapping a 
									INNER JOIN ZnodeImportTemplate b ON (b.ImportTemplateId = a.ImportTemplateId )
									WHERE TemplateName = 'ProductUpdate'
									AND a.TargetColumnName <> 'SKU'
								   )
								    AND AttributeTypeId = (SELECT TOP 1 AttributeTypeId FROM ZnodeAttributeType WHERE  AttributeTypeName = 'link' )
								   ) THEN 1 ELSE 0 END 
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId,
										  @IsIgnoreProcess = @IsIgnoreProcess;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

								 --For link product
								 IF @AttributeTypeName = 'Link'
                                 BEGIN
										--To get the product SKU in temp table
										SELECT ZPAV.PimProductId, ZPAVL.AttributeValue as SKU
										INTO #ProductSKU
										FROM ZnodePimAttributeValue ZPAV
										INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId 
										WHERE EXISTS(SELECT * FROM ZnodePimAttribute ZPA WHERE ZPAV.PimAttributeId = zpa.PimAttributeId AND ZPA.AttributeCode = 'SKU')

                                     	SET @SQLQuery = 'SELECT ''98'' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,RowNumber ,GUID,  '+@CreateDateString+' 
											FROM '+@TableName+' a 
											CROSS APPLY DBO.SPLIT('+@SourceColumnName+','','')S WHERE RowNumber in (SELECT RowNumber FROM '+@TableName+' WHERE  NOT EXISTS  (Select TOP 1 1  FROM #ProductSKU WHERE SKU = S.Item ) 
											)
											';
                     
											INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
											EXEC sys.sp_sqlexec @SQLQuery;
				
                                 END;

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('ProductUpdate', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            --COMMIT TRAN TRN_ImportValidProductData;
			 

		IF @ImportHeadName IN('ProductUpdate')
		 BEGIN
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000)   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId

		
  	--	 SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName = ''SKU  '' + ' + '  ' +@SourceColumnNameProduct + ' ' + ' + ' + ' '  + ' ZIL.ColumnName + ''  Attribute''
		 --FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber is not null';
            
			--SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		 --   FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
   --         PRINT @SQLQueryNew

            SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew

			EXEC sys.sp_sqlexec  @SQLQueryNew;
			
		END 

					 	 		 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;

			 ---------------------------------------------------------------------------

		--	 Declare @SourceColumnNameProduct nvarchar(4000)  
		--	 Declare @SQLQueryNew NVARCHAR(4000) 	 
		-- SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		-- AND ImportTemplateId = @TemplateId


		--INSERT INTO ZnodeImportLog  (ErrorDescription,ColumnName, Data, GUID,CreatedBy,
  --          CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		--	EXEC sys.sp_sqlexec  @SQLQueryNew;

		--	SET @SQLQueryNew = 'SELECT ''Successfully Imported '' ErrorDescription,''SKU'',
		--	'''+@SourceColumnNameProduct+''' AS [Data], 
  --          RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM '+@TableName+' WHERE Rownumber IS NOT NULL'

------------------------------------------------------------------------------------------------

		 --SET @SQLQuery = 'Select *  FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;

             IF @ImportHeadName IN('ProductUpdate')
                 BEGIN
                     IF NOT EXISTS
                
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN (43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 ) AND @RecordCount > 0 
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
                                     EXEC Znode_ImportPartialPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
	
                                 END;
                            
                         END;

					ELSE 
					BEGIN
					-- Update Record count in log 					
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					
					SELECT @SuccessRecordCount = 0
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
					END

                 END
				
			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
			SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			
			EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out

			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
			WHERE ImportProcessLogId = @ImportProcessLogId;

		   EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             ---- Finally call product insert process if error not found in error log table 
             --IF EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM ZnodeImportLog
             --    WHERE ImportProcessLogId = @ImportProcessLogId
             --          AND Guid = @NewGUID
             --)
             --    BEGIN
                    --Updating the import process status
					UPDATE ZnodeImportProcessLog
					SET Status = CASE WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
										WHEN ISNULL(FailedRecordcount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
										WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(FailedRecordcount,0) = ISNULL(TotalProcessedRecords,0) THEN dbo.Fn_GetImportStatus( 3 )
									END, 
						ProcessCompletedDate = getdate()
					WHERE ImportProcessLogId = @ImportProcessLogId;
                 --END;
		
				--SET @SQLQuery = 'select TOP 1 * from  ' + @TableName
				--EXEC sys.sp_sqlexec @SQLQuery;
        END TRY
      
		BEGIN CATCH 
		DECLARE @TempCount TABLE (Id INT)

		Declare @SQL Varchar(max) = 'Select Count(*) As Id From '+@TableName
		INSERT INTO @TempCount
		EXEC (@SQL)

			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialValidatePimProductData @ImportHeadName = '''+ISNULL(@ImportHeadName,'''''')+''',@TableName='''+ISNULL(CAST(@TableName AS
			VARCHAR(50)),'''''')+''',@TemplateId='+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''')+',@NewGUID='''+ISNULL(@NewGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@LocaleId='+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',
			@IsCategory='+ISNULL(CAST(@IsCategory AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@ImportProcessLogId='+ISNULL(CAST(@ImportProcessLogId AS VARCHAR(50)),'''')+',
			@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@CountryCode='''+ISNULL(CAST(@CountryCode AS VARCHAR(50)),'''''')+''',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',
			@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')+',@IsAccountAddress='+ISNULL(CAST(@IsAccountAddress AS VARCHAR(50)),'''')

			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;       
			
			---Import process updating fail due to database error
			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;

			---Loging error for Import process due to database error
		    INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		    SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

			--Updating total and fail record count
		    UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		    TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		    WHERE ImportProcessLogId = @ImportProcessLogId;

			EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialValidatePimProductData',
			@ErrorInProcedure = 'Znode_ImportPartialValidatePimProductData',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
		END CATCH 

     END;


GO

insert into ZnodePortalFeature(PortalFeatureName,	CreatedBy,	CreatedDate	,ModifiedBy,	ModifiedDate)
select 'Enable_Add_To_Cart_Option_For_Product_Sliders',	2,	getdate(),	2	,getdate()
where not exists(select * from ZnodePortalFeature where PortalFeatureName = 'Enable_Add_To_Cart_Option_For_Product_Sliders')

GO

DELETE FROM ZnodeMenuActionsPermission WHERE MenuId = 
(SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Analytics' AND ControllerName = 'Analytics') and ActionId = 
(SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Analytics' and ActionName= 'AnalyticsDashboard')

DELETE FROM ZnodeMenuActionsPermission WHERE MenuId = 
(SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Global Settings' AND ControllerName = 'GeneralSetting') and ActionId = 
(SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'GeneralSetting' and ActionName= 'GetAnalyticsData')

DELETE FROM ZnodeMenuActionsPermission WHERE MenuId = 
(SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Global Settings' AND ControllerName = 'GeneralSetting') and ActionId = 
(SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'GeneralSetting' and ActionName= 'UpdateAnalyticsData')

DELETE FROM ZnodeActionMenu WHERE MenuId = 
(SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Analytics' AND ControllerName = 'Analytics') and ActionId = 
(SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Analytics' and ActionName= 'AnalyticsDashboard')

DELETE FROM ZnodeActionMenu WHERE MenuId = 
(SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Global Settings' AND ControllerName = 'GeneralSetting') and ActionId = 
(SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'GeneralSetting' and ActionName= 'GetAnalyticsData')

DELETE FROM ZnodeActionMenu WHERE MenuId = 
(SELECT TOP 1 MenuId FROM ZnodeMenu WHERE MenuName = 'Global Settings' AND ControllerName = 'GeneralSetting') and ActionId = 
(SELECT TOP 1 ActionId FROM ZnodeActions WHERE ControllerName = 'GeneralSetting' and ActionName= 'UpdateAnalyticsData')

DELETE FROM ZnodeActions WHERE ControllerName = 'Analytics' and ActionName = 'AnalyticsDashboard'

DELETE FROM ZnodeActions WHERE ControllerName = 'GeneralSetting' and ActionName = 'GetAnalyticsData'

DELETE FROM ZnodeActions WHERE ControllerName = 'GeneralSetting' and ActionName = 'UpdateAnalyticsData'

DELETE  from ZnodeRoleMenuAccessMapper where RoleMenuId in ( select RoleMenuId from ZnodeRoleMenu WHERE MenuId IN (SELECT MenuId FROM ZnodeMenu WHERE MenuName = 'Analytics') )

DELETE  FROM ZnodeRoleMenu WHERE MenuId IN (SELECT MenuId FROM ZnodeMenu WHERE MenuName = 'Analytics')

DELETE FROM ZnodeMenu WHERE MenuName = 'Analytics' AND ControllerName = 'Analytics'

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportBrands')
	DROP PROC Znode_ImportBrands
GO

CREATE PROCEDURE [dbo].[Znode_ImportBrands](
	  @TableName			NVARCHAR(100), 
	  @Status				BIT OUT, 
	  @UserId				INT, 
	  @ImportProcessLogId	INT, 
	  @NewGUId				NVARCHAR(200),
	  @LocaleId	            INT= 1,
	  @CsvColumnString		NVARCHAR(max)
	  )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Made a provision to import Brand details.
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Brands;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		IF isnull(@LocaleId,0)=0
		BEGIN
			SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		END
		-- Retrive RoundOff Value from global setting 

		Create TABLE #InsertBrandData 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, BrandCode varchar(max),IsActive varchar(max), BrandDescription varchar(max) default null,
			SEOKeyword varchar(max) default null,SEODescription varchar(max) default null, BrandLogo varchar(max) default null,SEOTitle varchar(max) default null,
			SEOFriendlyPageName varchar(max) default null,URLKey varchar(max) default null, Custom1 varchar(max) default null,Custom2 varchar(max) default null,
			Custom3 varchar(max) default null,Custom4 varchar(max) default null,Custom5 varchar(max) default null, GUID nvarchar(400)
		);	
			
		SET @SSQL = 'INSERT INTO #InsertBrandData( RowNumber,' + @CsvColumnString + ',GUID)
		             SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;		
		EXEC sys.sp_sqlexec @SSQL;

		UPDATE #InsertBrandData SET IsActive=CASE  WHEN IsActive IN ('Yes', 'True','1') THEN 1 WHEN IsActive IN ('No', 'False','0') THEN  0 END
		
		SELECT BrandCode 
		INTO #DuplicateBrandData 
		FROM #InsertBrandData 
		Group BY BrandCode  having count(*) > 1
		
		-- Start Functional Validation 
		-----------------------------------------------
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'BrandCode', BrandCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE exists(SELECT * FROM #DuplicateBrandData bd where bd.BrandCode=ii.BrandCode)
			   And not exists(select * from  ZnodeBrandDetails zbd 
							  INNER JOIN #DuplicateBrandData bd on bd.BrandCode=zbd.BrandCode) 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'BrandCode', BrandCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE isnull(BrandCode,'')=''			   
			  

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '121', 'BrandCode', BrandCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE  not exists 
				   (
						select * from ZnodePimAttributeDefaultValue zpadv
						inner join ZnodePimAttribute zpa on zpa.PimAttributeId=zpadv.PimAttributeId
						where AttributeCode='Brand' and AttributeDefaultValueCode=ii.BrandCode
				   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '8', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE isnull(ii.IsActive,'')=''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE isnull(ii.IsActive,'') not in ('True','1','Yes','FALSE','0','No')
			
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '82', 'SEOKeyword', SEOKeyword, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			  WHERE len(ltrim(rtrim(ii.SEOKeyword))) > 300 and isnull(ii.SEOKeyword,'')<>''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '82', 'SEODescription', SEODescription, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE len(ltrim(rtrim(ii.SEODescription))) > 300 and isnull(ii.SEODescription,'')<>''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '45', 'BrandLogo', BrandLogo, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii			 
			   WHERE isnull(BrandLogo,'')<>'' AND reverse(left(reverse(ii.BrandLogo),charindex('.',reverse(ii.BrandLogo)))) 
			   not in (select ValidationName from View_FamilyExtensions where FamilyCode='Image')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '45', 'BrandLogo', BrandLogo, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii			 
			   WHERE isnull(BrandLogo,'')<>'' and not exists (select * from ZnodeMedia where FileName=ii.BrandLogo)

  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '81', 'SEOTitle', SEOTitle, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE len(ltrim(rtrim(ii.SEOTitle))) > 200 and isnull(ii.SEOTitle,'')<>''		
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '102', 'SEOFriendlyPageName', SEOFriendlyPageName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE (isnull(ii.SEOFriendlyPageName,'') LIKE '%[^a-zA-Z0-9]%' and  isnull(ii.SEOFriendlyPageName,'') NOT LIKE '%[_-]%' )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '81', 'URLKey', URLKey, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE len(ltrim(rtrim(ii.URLKey))) > 200 and isnull(ii.URLKey,'')<>''			


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Brand - ' + ISNULL(BrandCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertBrandData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertBrandData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertBrandData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		
		--<Begin Data Updation>
		CREATE TABLE #InsertedBrands (BrandId INT,BrandCode nvarchar(100),CMSSEODetailId int ) 
		
		UPDATE zbd set WebsiteLink=isnull(ibd.URLKey,WebsiteLink),IsActive=isnull(ibd.IsActive,zbd.IsActive),ModifiedBy=@UserId,
					   ModifiedDate=Getdate(),Custom1=isnull(ibd.Custom1,zbd.custom1),Custom2=isnull(ibd.Custom2,zbd.custom2),Custom3=isnull(ibd.Custom3,zbd.custom3),Custom4=isnull(ibd.Custom4,zbd.custom4),
					   Custom5=ISNULL(ibd.Custom5, zbd.Custom5)      
		OUTPUT INSERTED.BrandId ,INSERTED.BrandCode INTO  #InsertedBrands (BrandId, BrandCode)
		from ZnodeBrandDetails zbd
		inner join #InsertBrandData IBD on ibd.BrandCode=zbd.BrandCode
		where ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a where a.BrandCode=zbd.BrandCode)

		UPDATE zbdl set zbdl.BrandId=zbd.BrandId,zbdl.Description=isnull(ibd.BrandDescription,zbdl.Description),SEOFriendlyPageName=isnull(IBD.SEOFriendlyPageName,zbdl.SEOFriendlyPageName),
		LocaleId=@LocaleId,ModifiedBy=@UserId,ModifiedDate=getdate(),BrandName=isnull(ibd.BrandCode,zbdl.BrandName)
		FROM ZnodeBrandDetailLocale zbdl
		inner join ZnodeBrandDetails zbd on zbd.BrandId=zbdl.BrandId
		inner join #InsertBrandData IBD on ibd.BrandCode=zbd.BrandCode
		inner join #InsertedBrands ib on ib.BrandId=zbdl.BrandId
		where ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a where a.BrandCode=zbd.BrandCode)

		UPDATE ZCD set SEOId=ib.BrandId,SEOUrl=isnull(ibd.SEOFriendlyPageName,zcd.SEOUrl),ModifiedBy=@UserId,ModifiedDate=getdate(),
					   SEOCode=isnull(ibd.BrandCode,zcd.SEOCode)
		OUTPUT INSERTED.SEOId ,INSERTED.SEOCode, INSERTED.CMSSEODetailId INTO  #InsertedBrands (BrandId, BrandCode,CMSSEODetailId) 
		FROM ZnodeCMSSEODetail ZCD		
		inner join #InsertedBrands ib on ib.BrandId=ZCD.SEOId
		inner join #InsertBrandData IBD on ibd.BrandCode=zcd.SEOCode
		where exists (select null from ZnodeBrandDetailLocale zbdl where zbdl.BrandId=ZCD.SEOId)
		and ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a where a.BrandCode=zcd.SEOCode)
		
		--<Delete Records Having Null Value>
		Delete from #InsertedBrands where isnull(CMSSEODetailId,0)=0
		--</Delete Records Having Null Value>
		
		UPDATE zcdl set CMSSEODetailId =isnull(ib.CMSSEODetailId,zcdl.CMSSEODetailId),LocaleId=@LocaleId,SEOTitle=isnull(ibd.SEOTitle,zcdl.SEOTitle),
						SEODescription=isnull(ibd.SEODescription,zcdl.SEODescription),SEOKeywords=isnull(ibd.SEOKeyword,zcdl.SEOKeywords),ModifiedBy=@UserId,ModifiedDate=getdate()
		FROM ZnodeCMSSEODetailLocale zcdl
		inner join #InsertedBrands ib on ib.CMSSEODetailId=zcdl.CMSSEODetailId
		inner join #InsertBrandData IBD on ibd.BrandCode=ib.BrandCode
		and ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a 
		inner join ZnodeBrandDetails zcd on  a.BrandCode=zcd.BrandCode)

		--</End Data Updation>

		--<Begin Data Insert>
		insert into ZnodeBrandDetails(BrandCode,MediaId,WebsiteLink,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Custom1,Custom2,Custom3,
										Custom4,Custom5)
		OUTPUT INSERTED.BrandId ,INSERTED.BrandCode INTO  #InsertedBrands (BrandId, BrandCode) 		
		Select ibd.BrandCode,(select top 1 MediaId from ZnodeMedia where FileName=ibd.BrandLogo order by CreatedDate desc),ibd.URLKey,0,ibd.IsActive,@UserId,GETDATE(),@UserId,Getdate(),ibd.Custom1,ibd.Custom2,ibd.Custom3,ibd.Custom4,ibd.Custom5
		from #InsertBrandData IBD	
		WHERE NOT EXISTS(SELECT * FROM ZnodeBrandDetails ZBD WHERE ZBD.BrandCode = IBD.BrandCode )		

		insert into ZnodeBrandDetailLocale (BrandId,Description,SEOFriendlyPageName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,BrandName)
		select ac.BrandId,ibdl.BrandDescription,ibdl.SEOFriendlyPageName,@LocaleId,@UserId,getdate(),@UserId,GETDATE(),ibdl.BrandCode 
		from #InsertBrandData IBDL
		INNER JOIN #InsertedBrands ac on ac.BrandCode=ibdl.BrandCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeBrandDetailLocale a 
							INNER JOIN ZnodeBrandDetails b on  b.BrandCode=ibdl.BrandCode AND a.BrandId=b.BrandId )	

		insert into ZnodeCMSSEODetail (CMSSEOTypeId,SEOId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SEOCode,PublishStateId)
		OUTPUT INSERTED.SEOId ,INSERTED.SEOCode, INSERTED.CMSSEODetailId INTO  #InsertedBrands (BrandId, BrandCode,CMSSEODetailId)
		select (select CMSSEOTypeId  from ZnodeCMSSEOType where Name = 'Brand'),ac.BrandId,ibdl.SEOFriendlyPageName,@UserId,getdate(),@UserId,getdate(),ibdl.BrandCode,'2'
		from #InsertBrandData IBDL
		INNER JOIN #InsertedBrands ac on ac.BrandCode=ibdl.BrandCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeCMSSEODetail a 
							INNER JOIN ZnodeBrandDetails b on b.BrandCode=ibdl.BrandCode 
							where a.SEOCode=ibdl.BrandCode
							AND a.CMSSEOTypeId=(select CMSSEOTypeId  from ZnodeCMSSEOType where Name = 'Brand')  )
		
		--<Delete Records Having Null Value>
		Delete from #InsertedBrands where isnull(CMSSEODetailId,0)=0
		--</Delete Records Having Null Value>

		insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		select ac.CMSSEODetailId ,@LocaleId,ibdl.SEOTitle,ibdl.SEODescription,ibdl.SEOKeyword,@UserId,GETDATE(),@UserId,Getdate()
		from #InsertBrandData IBDL
		INNER JOIN #InsertedBrands ac on ac.BrandCode=ibdl.BrandCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeCMSSEODetailLocale a 
							INNER JOIN ZnodeCMSSEODetail b on a.CMSSEODetailId=b.CMSSEODetailId and b.SEOCode=ibdl.BrandCode
							INNER JOIN ZnodeBrandDetails c on c.BrandCode=ibdl.BrandCode 
							AND b.CMSSEOTypeId=(select CMSSEOTypeId  from ZnodeCMSSEOType where Name = 'Brand')  )		
        --<End Data Insert>

		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN Brands;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN Brands

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		 DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportBrands @TableName = '+CAST(@TableName AS VARCHAR(max)) +',
		 @Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(200))+',
		 @CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max)) ;

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportBrands',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialValidatePimProductData')
	DROP PROC Znode_ImportPartialValidatePimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0,
	@PromotionTypeId	INT=0 
)
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct ( for partial attribute import ) 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max), @FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

			DECLARE @TableNameNew NVARCHAR(100);
			SET @TableNameNew = REPLACE(@TableName,']','')+CAST(NEWID() AS NVARCHAR(100))+']'

			SET @SQLQuery='	SELECT * INTO '+@TableNameNew+' FROM '+@TableName+'	';

			--PRINT (@SQLQuery);
			EXEC (@SQLQuery);
			SET @TableName=@TableNameNew;

              --To get the total record count for update purpose in catch block
             SET @SQLQuery = 'SELECT '+CAST(@ImportProcessLogId AS VARCHAR(10))+',COUNT(*) FROM '+@TableName
			 INSERT INTO Znode_ImportCsvRowCount
			 EXEC (@SQLQuery) 

			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus(0)
			WHERE ImportProcessLogId = @ImportProcessLogId AND Status IS NULL;

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;
		  -- If Exists ( Select  count(1)  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 )
		  -- Begin
			 --   INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
    --               Select  46,ColumnName,'',@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  from #GlobalTempTableColumns GROUP BY ColumnName  Having count(1) > 1 
				
				----'Multiple occurance of column are not allow for'
		  -- END

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 
             --DELETE FROM ZnodeImportLog WHERE ImportProcessLogId in (select ImportProcessLogId  FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId )
             --GUID = @NewGUID;
             --Delete FROM ZnodeImportProcessLog  WHERE ImportTemplateId  = @TemplateId 
		
             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'ProductUpdate'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END



			--Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
	
			SET @SQLQuery = 'Select 98 ,''SKU'', SKU, '''+ @newGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',RowNumber   from  '+ @TableName + ' where PimProductId Is null ';
			INSERT INTO ZnodeImportLog
                     (ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
        	EXEC sys.sp_sqlexec	@SQLQuery	 	


			--SET @SQLQuery = '
			--INSERT INTO ZnodeImportLog
			--		(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			--Select 98 ,''Attribute '', a.Name , '''+ @NewGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',' +
			--' NULL  from tempdb.sys.columns a
			--inner join tempdb.sys.tables b on a.object_id = b.object_id 
			--where b.name in (''##ProductUpdate_' + @NewGUID +''') 
			--and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name <> ''guid''' 

   --     	EXEC sys.sp_sqlexec	@SQLQuery	 	

			SET @SQLQuery = 'Delete from  '+@TableName+ ' where PimProductId Is null ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
			
			DECLARE @RecordCount Bigint 
			SET @SQLQuery = ' Select @RecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC sp_executesql @SQLQuery, N'@RecordCount BIGINT out' , @RecordCount=@RecordCount out


			--Generate new process for current import 
            --INSERT INTO ZnodeImportProcessLog(ImportTemplateId,Status,ProcessStartedDate,ProcessCompletedDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
            --SELECT @TemplateId,dbo.Fn_GetImportStatus(0),@GetDate,NULL,@UserId,@GetDate,@UserId,@GetDate;
            --SET @ImportProcessLogId = @@IDENTITY;

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @ImportHeadName IN('ProductUpdate') AND @RecordCount > 0  
                 BEGIN 
					SET @IsCategory = 0 
				    --Get all default attribute values in attribute 
                    INSERT INTO @FamilyAttributeDetail
                    (PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                    --Call Process to insert data of defeult family with source column name and target column name 
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 
	             END;
            -- Check attributes are manditory and not provided with source table
		   	if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
		 
     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId )
            EXEC sys.sp_sqlexec  @SQLQuery;
            IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )  AND @RecordCount > 0  
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('ProductUpdate', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table
                             --INSERT INTO ZnodeImportLog
                             --(ErrorDescription,
                             -- ColumnName,
                             -- Data,
                             -- GUID,
                             -- CreatedBy,
                             -- CreatedDate,
                             -- ModifiedBy,
                             -- ModifiedDate,
                             -- ImportProcessLogId
                             --)
                             --       SELECT '14' AS ErrorDescription,
                             --              AttributeCode,
                             --              '',
                             --              @NewGUID,
                             --              @UserId,
                             --              @GetDate,
                             --              @UserId,
                             --              @GetDate,
                             --              @ImportProcessLogId
                             --       FROM @FamilyAttributeDetail
                             --       WHERE ISNULL(SourceColumnName, '') = ''
                             --             AND IsRequired = 1;  

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							 Delete FAD from @AttributeDetail FAD
							 where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							 and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;

                     --	Check attributes are not mapped with (Default / Other) family of Pim Product
                     --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                     --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                     --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                     --	Verify data in global temporary table (column wise)
						
                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateMandatoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
									--For link product
									DECLARE @IsIgnoreProcess BIT = CASE WHEN EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute WHERE AttributeCode = (SELECT TOP 1 TargetColumnName
								    FROM ZnodeImportTemplateMapping a 
									INNER JOIN ZnodeImportTemplate b ON (b.ImportTemplateId = a.ImportTemplateId )
									WHERE TemplateName = 'ProductUpdate'
									AND a.TargetColumnName <> 'SKU'
								   )
								    AND AttributeTypeId = (SELECT TOP 1 AttributeTypeId FROM ZnodeAttributeType WHERE  AttributeTypeName = 'link' )
								   ) THEN 1 ELSE 0 END 
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId,
										  @IsIgnoreProcess = @IsIgnoreProcess;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

								 --For link product
								 IF @AttributeTypeName = 'Link'
                                 BEGIN
										--To get the product SKU in temp table
										SELECT ZPAV.PimProductId, ZPAVL.AttributeValue as SKU
										INTO #ProductSKU
										FROM ZnodePimAttributeValue ZPAV
										INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId 
										WHERE EXISTS(SELECT * FROM ZnodePimAttribute ZPA WHERE ZPAV.PimAttributeId = zpa.PimAttributeId AND ZPA.AttributeCode = 'SKU')

                                     	SET @SQLQuery = 'SELECT ''98'' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,RowNumber ,GUID,  '+@CreateDateString+' 
											FROM '+@TableName+' a 
											CROSS APPLY DBO.SPLIT('+@SourceColumnName+','','')S WHERE RowNumber in (SELECT RowNumber FROM '+@TableName+' WHERE  NOT EXISTS  (Select TOP 1 1  FROM #ProductSKU WHERE SKU = S.Item ) 
											)
											';
                     
											INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
											EXEC sys.sp_sqlexec @SQLQuery;
				
                                 END;

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('ProductUpdate', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            --COMMIT TRAN TRN_ImportValidProductData;
			 

		IF @ImportHeadName IN('ProductUpdate')
		 BEGIN
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000)   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId

		
  	--	 SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName = ''SKU  '' + ' + '  ' +@SourceColumnNameProduct + ' ' + ' + ' + ' '  + ' ZIL.ColumnName + ''  Attribute''
		 --FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber is not null';
            
			--SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		 --   FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			--WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
   --         PRINT @SQLQueryNew

            SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew

			EXEC sys.sp_sqlexec  @SQLQueryNew;
			
		END 

					 	 		 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;

			 ---------------------------------------------------------------------------

		--	 Declare @SourceColumnNameProduct nvarchar(4000)  
		--	 Declare @SQLQueryNew NVARCHAR(4000) 	 
		-- SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		-- AND ImportTemplateId = @TemplateId


		--INSERT INTO ZnodeImportLog  (ErrorDescription,ColumnName, Data, GUID,CreatedBy,
  --          CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		--	EXEC sys.sp_sqlexec  @SQLQueryNew;

		--	SET @SQLQueryNew = 'SELECT ''Successfully Imported '' ErrorDescription,''SKU'',
		--	'''+@SourceColumnNameProduct+''' AS [Data], 
  --          RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM '+@TableName+' WHERE Rownumber IS NOT NULL'

------------------------------------------------------------------------------------------------

		 --SET @SQLQuery = 'Select *  FROM  '+@TableName
   --          EXEC sys.sp_sqlexec  @SQLQuery;

             IF @ImportHeadName IN('ProductUpdate')
                 BEGIN
                     IF NOT EXISTS
                
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN (43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 ) AND @RecordCount > 0 
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
                                     EXEC Znode_ImportPartialPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
	
                                 END;
                            
                         END;

					ELSE 
					BEGIN
					-- Update Record count in log 					
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					
					SELECT @SuccessRecordCount = 0
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
					END

                 END
				
			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
			SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			
			EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out

			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
			WHERE ImportProcessLogId = @ImportProcessLogId;

		   EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             ---- Finally call product insert process if error not found in error log table 
             --IF EXISTS
             --(
             --    SELECT TOP 1 1
             --    FROM ZnodeImportLog
             --    WHERE ImportProcessLogId = @ImportProcessLogId
             --          AND Guid = @NewGUID
             --)
             --    BEGIN
                    --Updating the import process status
					UPDATE ZnodeImportProcessLog
					SET Status = CASE WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
										WHEN ISNULL(FailedRecordcount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
										WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(FailedRecordcount,0) = ISNULL(TotalProcessedRecords,0) THEN dbo.Fn_GetImportStatus( 3 )
									END, 
						ProcessCompletedDate = getdate()
					WHERE ImportProcessLogId = @ImportProcessLogId;
                 --END;
		
				--SET @SQLQuery = 'select TOP 1 * from  ' + @TableName
				--EXEC sys.sp_sqlexec @SQLQuery;
        END TRY
      
		BEGIN CATCH 
		DECLARE @TempCount TABLE (Id INT)

		Declare @SQL Varchar(max) = 'Select Count(*) As Id From '+@TableName
		INSERT INTO @TempCount
		EXEC (@SQL)

			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialValidatePimProductData @ImportHeadName = '''+ISNULL(@ImportHeadName,'''''')+''',@TableName='''+ISNULL(CAST(@TableName AS
			VARCHAR(50)),'''''')+''',@TemplateId='+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''')+',@NewGUID='''+ISNULL(@NewGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@LocaleId='+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',
			@IsCategory='+ISNULL(CAST(@IsCategory AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@ImportProcessLogId='+ISNULL(CAST(@ImportProcessLogId AS VARCHAR(50)),'''')+',
			@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@CountryCode='''+ISNULL(CAST(@CountryCode AS VARCHAR(50)),'''''')+''',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',
			@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')+',@IsAccountAddress='+ISNULL(CAST(@IsAccountAddress AS VARCHAR(50)),'''')

			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;       
			
			---Import process updating fail due to database error
			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;

			---Loging error for Import process due to database error
		    INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		    SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

			--Updating total and fail record count
		    UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		    TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		    WHERE ImportProcessLogId = @ImportProcessLogId;

			EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialValidatePimProductData',
			@ErrorInProcedure = 'Znode_ImportPartialValidatePimProductData',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
		END CATCH 

     END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteImportTemplates')
	DROP PROC Znode_DeleteImportTemplates
GO

CREATE PROCEDURE [dbo].[Znode_DeleteImportTemplates]
(
	@ImportTemplateIds	NVARCHAR(MAX)=0,
	@Status				BIT OUT
)
/*
	Summary: 
		This procedure is used to remove Custom Import Template details with respective mapping details associated to it.

	Unit Testing:
		EXEC dbo.Znode_DeleteImportTemplates @ImportTemplateIds='17', @Status=0
		EXEC dbo.Znode_DeleteImportTemplates @ImportTemplateIds='19,20', @Status=0
*/
AS
BEGIN
	BEGIN TRAN DeleteImportTemplates;
	BEGIN TRY
		SET NOCOUNT ON;

		IF OBJECT_ID('tempdb..#ImportTemplateIds') IS NOT NULL
			DROP TABLE #ImportTemplateIds;

		SELECT Item As ImportTemplateId
		INTO #ImportTemplateIds
		FROM dbo.Split(@ImportTemplateIds,',');

		DELETE 
		FROM #ImportTemplateIds
		WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportProcessLog WHERE Status = 'Started');

		DELETE
		FROM ZnodeImportLog
		WHERE ImportProcessLogId IN (	SELECT ImportProcessLogId 
										FROM ZnodeImportProcessLog
										WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM #ImportTemplateIds)
									);

		DELETE
		FROM ZnodeImportProcessLog
		WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM #ImportTemplateIds);

		DELETE
		FROM ZnodeImportTemplateMapping
		WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM #ImportTemplateIds);

		DELETE
		FROM ZnodeImportTemplate
		WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM #ImportTemplateIds);

		DROP TABLE #ImportTemplateIds;

		SELECT 1 As ID, CAST(1 AS BIT) AS Status

		SET @Status = 1;
	COMMIT TRAN DeleteImportTemplates;
	END TRY
	BEGIN CATCH
		DECLARE @Error_Procedure VARCHAR(1000) = ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteImportTemplates 
					@ImportTemplateIds='''+CAST(@ImportTemplateIds AS NVARCHAR(MAX))+''',
					@Status='+CAST(@Status AS VARCHAR(50));
			
		SELECT 0 As ID, CAST(0 AS BIT) AS Status
        SET @Status = 0;

        ROLLBACK TRAN DeleteImportTemplates;

        EXEC Znode_InsertProcedureErrorLog
            @ProcedureName = 'Znode_DeleteImportTemplates',
            @ErrorInProcedure = @Error_procedure,
            @ErrorMessage = @ErrorMessage,
            @ErrorLine = @ErrorLine,
            @ErrorCall = @ErrorCall;

		SELECT ERROR_MESSAGE();
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetImportTemplates')
	DROP PROC Znode_GetImportTemplates
GO

CREATE PROCEDURE [dbo].[Znode_GetImportTemplates]
(
	@WhereClause	NVARCHAR(MAX),
	@Rows			INT	= 100,
	@PageNo			INT	= 1,
	@Order_BY		VARCHAR(1000) = '',
	@RowsCount		INT OUT
)
AS
/*
	Summary : Get Custom Import Template details and ImportHead associated to it.
		
	Unit Testing
		DECLARE @RowsCount INT;
		EXEC Znode_GetImportTemplates @WhereClause = '',@Rows = 50,@PageNo = 1,@Order_BY = NULL,@RowsCount = @RowsCount OUT;
*/
BEGIN
BEGIN TRY
	SET NOCOUNT ON;

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SQL NVARCHAR(MAX);

	DECLARE @TBL_ImportTemplates TABLE
		(ImportHeadId INT, ImportName NVARCHAR(100), ImportTemplateId INT, TemplateName VARCHAR(300), RowId INT, CountNo INT);

	IF OBJECT_ID('Tempdb..[#ImportTemplates]') IS NOT NULL
		DROP TABLE Tempdb..[#ImportTemplates];

	CREATE TABLE #ImportTemplates
		(ImportHeadId INT, ImportName NVARCHAR(100), ImportTemplateId INT, TemplateName NVARCHAR(600));

	INSERT INTO #ImportTemplates
		(ImportHeadId,ImportName,ImportTemplateId,TemplateName)
	SELECT DISTINCT ImportHeadId, ImportName, ImportTemplateId, TemplateName
	FROM
	(
		SELECT ZIH.ImportHeadId, ZIH.NAME ImportName, ZIT.ImportTemplateId, ZIT.TemplateName
			,ROW_NUMBER() OVER (PARTITION BY ZIH.ImportHeadId ORDER BY ZIT.ImportTemplateId) As Rn
		FROM ZnodeImportHead ZIH
		INNER JOIN ZnodeImportTemplate ZIT ON ZIH.ImportHeadId = ZIT.ImportHeadId
		WHERE ZIH.ImportHeadId NOT IN (SELECT ImportHeadId FROM ZnodeImportHead WHERE Name='Promotions')
		UNION
		SELECT ZIH.ImportHeadId, ZIH.NAME ImportName, ZIT.ImportTemplateId, ZIT.TemplateName
			,ROW_NUMBER() OVER (PARTITION BY ZIH.ImportHeadId, ZIT.PromotionTypeId ORDER BY ZIT.ImportTemplateId) As Rn
		FROM ZnodeImportHead ZIH
		INNER JOIN ZnodeImportTemplate ZIT ON ZIH.ImportHeadId = ZIT.ImportHeadId
		WHERE ZIH.ImportHeadId IN (SELECT ImportHeadId FROM ZnodeImportHead WHERE Name='Promotions')
	) A
	WHERE A.Rn>1;
	
	SET @SQL = '
	;With Cte_ImportTemplates AS
	(
		SELECT ImportHeadId, ImportName, ImportTemplateId, TemplateName, 
			'+dbo.Fn_GetPagingRowId(@Order_BY,'ImportTemplateId DESC')+', Count(*) OVER() CountNo
		FROM #ImportTemplates
		WHERE 1 = 1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'
	)
	SELECT ImportHeadId, ImportName, ImportTemplateId, TemplateName, RowId, CountNo
	FROM Cte_ImportTemplates
	'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows);

	INSERT INTO @TBL_ImportTemplates (ImportHeadId, ImportName, ImportTemplateId, TemplateName, RowId, CountNo)
	EXEC(@SQL);

	SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM @TBL_ImportTemplates ), 0);

	SELECT ImportName, ImportTemplateId, TemplateName, CASE A.Status WHEN 'Started' THEN 'true' ELSE 'false' END As Status
	FROM @TBL_ImportTemplates IT
	OUTER APPLY (SELECT TOP 1 Status FROM ZnodeImportProcessLog WHERE ImportTemplateId=IT.ImportTemplateId ORDER BY ImportProcessLogId DESC) A
	--ORDER BY ImportTemplateId DESC;

	IF OBJECT_ID('Tempdb..[#ImportTemplates]') IS NOT NULL
		DROP TABLE Tempdb..[#ImportTemplates];

	END TRY
	BEGIN CATCH
		DECLARE @Status BIT;
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetImportTemplates 
					@WhereClause = '''+ISNULL(@WhereClause,'''''')+''',
					@Rows='+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+',
					@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
					@Order_BY='''+ISNULL(@Order_BY,'''''')+''',
					@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');

		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_GetImportTemplates',
			@ErrorInProcedure = 'Znode_GetImportTemplates',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

INSERT INTO ZnodeApplicationSetting
	(GroupName,	ItemName,Setting,ViewOptions,FrontPageName,FrontObjectName,IsCompressed,OrderByFields,ItemNameWithoutCurrency,CreatedByName,ModifiedByName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Table','ZnodeImportTemplate','<?xml version="1.0" encoding="utf-16"?><columns><column><id>1</id><name>ImportTemplateId</name><headertext>Checkbox</headertext><width>0</width><datatype>Int32</datatype><columntype>Int32</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield>ImportTemplateId</islinkparamfield><ischeckbox>y</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>2</id><name>ImportTemplateId</name><headertext>Template ID</headertext><width>0</width><datatype>String</datatype><columntype>Int32</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>3</id><name>ImportName</name><headertext>Import Type</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>true</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>4</id><name>TemplateName</name><headertext>Template Name</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format></format><isvisible>y</isvisible><mustshow>y</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>y</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext></displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>5</id><name>Manage</name><headertext>Action</headertext><width>0</width><datatype>String</datatype><columntype>String</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>Delete</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>n</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Delete</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl>/Import/DeleteImportTemplate</manageactionurl><manageparamfield>ImportTemplateId</manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class></Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column><column><id>6</id><name>Status</name><headertext></headertext><width>0</width><datatype>Boolean</datatype><columntype>Boolean</columntype><allowsorting>false</allowsorting><allowpaging>false</allowpaging><format>d-none</format><isvisible>y</isvisible><mustshow>n</mustshow><musthide>y</musthide><maxlength>0</maxlength><isallowsearch>n</isallowsearch><isconditional>n</isconditional><isallowlink>n</isallowlink><islinkactionurl></islinkactionurl><islinkparamfield></islinkparamfield><ischeckbox>n</ischeckbox><checkboxparamfield></checkboxparamfield><iscontrol>n</iscontrol><controltype></controltype><controlparamfield></controlparamfield><displaytext>Status</displaytext><editactionurl></editactionurl><editparamfield></editparamfield><deleteactionurl></deleteactionurl><deleteparamfield></deleteparamfield><viewactionurl></viewactionurl><viewparamfield></viewparamfield><imageactionurl></imageactionurl><imageparamfield></imageparamfield><manageactionurl></manageactionurl><manageparamfield></manageparamfield><copyactionurl></copyactionurl><copyparamfield></copyparamfield><xaxis>n</xaxis><yaxis>n</yaxis><isadvancesearch>y</isadvancesearch><Class>IsStartedorNot, d-none</Class><SearchControlType>--Select--</SearchControlType><SearchControlParameters></SearchControlParameters><DbParamField></DbParamField><useMode>DataBase</useMode><IsGraph>n</IsGraph><allowdetailview>n</allowdetailview></column></columns>','ZnodeImportTemplate','ZnodeImportTemplate','ZnodeImportTemplate',0,NULL,NULL,NULL,NULL,2,getdate(),2,getdate()
WHERE NOT EXISTS (SELECT * FROM ZnodeApplicationSetting WHERE GroupName = 'Table' AND ItemName = 'ZnodeImportTemplate')

GO

INSERT INTO ZnodeActions(ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
    SELECT 'Import','ManageCustomImportTemplateList',1,2,GETDATE(),2,GETDATE()
    WHERE NOT EXISTS(SELECT 1 FROM ZnodeActions WHERE ControllerName='Import' AND ActionName='ManageCustomImportTemplateList')

INSERT INTO ZnodeActions(ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
SELECT 'Import','DeleteImportTemplate',1,2,GETDATE(),2,GETDATE()
WHERE NOT EXISTS(SELECT 1 FROM ZnodeActions WHERE ControllerName='Import' AND ActionName='DeleteImportTemplate')

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPimProductData')
	DROP PROC Znode_ImportPimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
/*
    Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
    Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inserted one by one products. 	   
    
    SourceColumnName : CSV file column headers
    TargetColumnName : Attributecode from ZnodePimAttribute Table 

	***  Need to log error if transaction failed during insertion of records into table.
*/

BEGIN
	SET NOCOUNT ON
    BEGIN TRY
        BEGIN TRAN ImportProducts;
        DECLARE @SQLQuery NVARCHAR(MAX);
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
        --Declare error Log Table 
			    
			
		DECLARE @FamilyAttributeDetail TABLE
		( 
		PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
		);
        IF @DefaultFamilyId = 0
            BEGIN
			INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
			--Call Process to insert data of defeult family with cource column name and target column name 
			EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
            UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

			---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;
        ELSE
            BEGIN
                INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                --Call Process to insert data of defeult family with cource column name and target column name 
                EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

				---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;  
				
		-- Retrive PimProductId on the basis of SKU for update product 
		SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
						FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
						(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
						INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
						INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
		EXEC sys.sp_sqlexec	@SQLQuery	
			 
			 
		SET @SQLQuery='
		INSERT INTO ZnodeImportLog( ErrorDescription,ColumnName, Data, GUID,RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT ''135'',''SKU'', SKU, '''+@NewGUId+''',RowNumber, '+cast(@UserId as varchar(10))+', getdate(), '+cast(@UserId as varchar(10))+', getdate(), '+cast(@ImportProcessLogId as varchar(10))+'
		FROM '+@TableName +' WHERE LEN(SKU)>600';
		EXEC sys.sp_sqlexec @SQLQuery;

		SET @SQLQuery='Delete B from '+@TableName +' B WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeImportLog A where B.RowNumber=A.RowNumber and A.ImportProcessLogId 
		='+cast(@ImportProcessLogId as varchar(10))+')'
		EXEC (@SQLQuery)

        --Read all attribute details with their datatype 
        IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
		BEGIN
				CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
				AttributeDefaultValueCode  VARCHAR(100));
					 
			INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
			--Call Process to insert default data value 
			EXEC Znode_ImportGetPimAttributeDefaultValue;
		END;
        ELSE
        BEGIN
            DROP TABLE #DefaultAttributeValue;
        END;
        EXEC sys.sp_sqlexec
            @SQLQuery;
       
		DECLARE @PimProductDetail TABLE 
		(
			      
			PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
			PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
        );

		-- Update Record count in log 
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
        -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
        -- Add PimAttributeDefaultValue 
        DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
        FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
        OPEN Cr_AttributeDetails;
        FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        WHILE @@FETCH_STATUS = 0
        BEGIN
			SET @NewProductId = 0;
			SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
							(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
							+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
							+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
						, RowNumber FROM '+@TableName+' TN';
						print @SQLQuery
			INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        END;
        CLOSE Cr_AttributeDetails;
        DEALLOCATE Cr_AttributeDetails;
			 
			
		if object_id('tempdb..#PimProductDetail1') is not null
		drop table #PimProductDetail1

		Select * into #PimProductDetail1 from @PimProductDetail

		UPDATE a 
		SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
		FROM #PimProductDetail1 c 
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
		WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
		FROM #PimProductDetail1 a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = '[ProductType]' 
		AND ab.AttributeValue = 'ConfigurableProduct' )
				
        -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
		--If default Value set not need of hard code for IsActive
		UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
        INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
            
		
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
		DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
		DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
		DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

		------------------------------------Bulk Row Process
		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
			DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
					MinRow = 1, 
					MaxRow = cast(@Rows as int)
			UNION ALL
			SELECT RowId + 1, 
					MinRow + cast(@Rows as int), 
					MaxRow + cast(@Rows as int)
			FROM cte
			WHERE RowId + 1 <= @MaxCount
		)
		SELECT RowId, MinRow, MaxRow
		INTO #Temp_ImportLoop
		FROM cte
		option (maxrecursion 0);

		--while @MaxCount <= @minRow
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
		FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

		OPEN cur_BulkData;
		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		BEGIN TRAN ImportProducts;

		if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
				drop table tempdb..#PimProductDetail_Bulk_Process

		CREATE TABLE #PimProductDetail_Bulk_Process
		([PimAttributeId]                 [INT] NULL, 
			[PimAttributeFamilyId]           [INT] NULL, 
			[ProductAttributeCode]           [VARCHAR](300) NULL, 
			[ProductAttributeDefaultValueId] [INT] NULL, 
			[PimAttributeValueId]            [INT] NULL, 
			[LocaleId]                       [INT] NULL, 
			[PimProductId]                   [INT] NULL, 
			[AttributeValue]                 [NVARCHAR](MAX) NULL, 
			[AssociatedProducts]             [NVARCHAR](4000) NULL, 
			[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
			[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
			[RowNumber]                      [INT] NULL, 
			SKU1                             VARCHAR(600),
			Id Int Identity(1,1)Primary Key
		);

		CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
		CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);

		---- Insert rows for import in bulk
		INSERT INTO #PimProductDetail_Bulk_Process
		([PimAttributeId], 
			[PimAttributeFamilyId], 
			[ProductAttributeCode], 
			[ProductAttributeDefaultValueId], 
			[PimAttributeValueId], 
			[LocaleId], 
			[PimProductId], 
			[AttributeValue], 
			[AssociatedProducts], 
			[ConfigureAttributeIds], 
			[ConfigureFamilyIds], 
			[RowNumber]
		)
		SELECT [PimAttributeId], 
				[PimAttributeFamilyId], 
				[ProductAttributeCode], 
				[ProductAttributeDefaultValueId], 
				[PimAttributeValueId], 
				[LocaleId], 
				[PimProductId], 
				ltrim(rtrim([AttributeValue])), 
				[AssociatedProducts], 
				[ConfigureAttributeIds], 
				[ConfigureFamilyIds], 
				[RowNumber]
		FROM #PimProductDetail1 a
		WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

		--select * from @PimProductDetail

		--select * from #PimProductDetail1

			    

		---------------------------Start Importing 
		if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
			drop table #TBL_DefaultAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeId')is not null
			drop table #TBL_MediaAttributeId

		if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
			drop table #TBL_TextAreaAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
			drop table #TBL_MediaAttributeValue

		if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
			drop table #TBL_DefaultAttributeValue

		if object_id ('tempdb..#ZnodePimAttributeValue')is not null
			drop table #ZnodePimAttributeValue

				
		CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

		CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

		CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

		DECLARE @ConfigureFamilyId VARCHAR(4000);

		INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetDefaultAttributeId]();

		INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetProductMediaAttributeId]();

		INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetTextAreaAttributeId]();

		SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

		if object_id ('tempdb..#cte')is not null
			drop table #cte

		SELECT AttributeValue AS SKU, RowNumber
		INTO #cte
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]';
              
		CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
		UPDATE a SET a.SKU1 = B.SKU
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

		----Update ZNodePimProduct 
		UPDATE ZNodePimProduct
		SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
			PublishStateId = @PublishStateIdForDraft, 
			ModifiedBy = @UserId, 
			ModifiedDate = @GetDate
		FROM ZNodePimProduct ZPP
		INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
		if object_id ('tempdb..#ZnodePimProduct')is not null
			drop table #ZnodePimProduct

		CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

		--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)

		----Insert into ZNodePimProduct 
		INSERT INTO ZnodePimProduct
		(PimAttributeFamilyId, 
			ExternalId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate, 
			PublishStateId
		)
		output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
		SELECT PimAttributeFamilyId, 
				RowNumber, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate, 
				@PublishStateIdForNotPublished
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]'
		AND PimProductId IS NULL;
            
		----Update newly created productIds
		UPDATE a SET a.PimProductId = b.PimProductId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

		----Insert Downloadable products into ZnodePimDownloadableProduct
		INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
		FROM #PimProductDetail_Bulk_Process PDSKU
		INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
		INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
		WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
		AND PDProdName.ProductAttributeCode = '[SKU]'
		AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
		AND PDDownload.AttributeValue = 'true'
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

		---- update ZnodePimAttributeValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeFamilyId = CASE
												WHEN Source.PimAttributeFamilyId = 0
												THEN NULL
												ELSE Source.PimAttributeFamilyId
											END, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate, 
				TARGET.PimProductId = SOURCE.PimProductId
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		FROM ZnodePimAttributeValue TARGET
		INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
		---- Inserting attribute data for Product 
		INSERT INTO ZnodePimAttributeValue 
		( 
			PimAttributeFamilyId, 
			PimProductId, PimAttributeId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate 
		)
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		SELECT 
			CASE
				WHEN Source.PimAttributeFamilyId = 0
				THEN @PimDefaultFamily
				ELSE Source.PimAttributeFamilyId
			END, 
			SOURCE.PimProductId, 
			ISNULL(SOURCE.PimAttributeId, 0),
			CASE
				WHEN SOURCE.ProductAttributeDefaultValueId = 0
				THEN NULL
				ELSE SOURCE.ProductAttributeDefaultValueId
			END, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #PimProductDetail_Bulk_Process SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValue TARGET
			WHERE TARGET.PimProductId = SOURCE.PimProductId
					AND TARGET.PimAttributeId = SOURCE.PimAttributeId
		);

		-------------------------
		if object_id ('tempdb..#MediaData')is not null
			drop table #MediaData

		CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

		---- Get Product Media Data
		INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
		SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
		CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

		---- Get product media attribute data
		INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
		SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
										AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
										AND a.PimProductId = b.PimProductId)
		INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
		---- Deleting product media attribute
		DELETE FROM ZnodePimProductAttributeMedia
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_MediaAttributeValue TBLM
			WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
					AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
					AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
		);

		---- update ZnodePimProductAttributeMedia : attribute data for Product
		UPDATE TARGET
			SET 
				TARGET.MediaPath = SOURCE.AttributeValue, 
				TARGET.MediaId = SOURCE.MediaId, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeMedia TARGET
		INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
													AND TARGET.MediaPAth = SOURCE.AttributeValue
													AND TARGET.LocaleId = SOURCE.LocaleId;
    
		---- inserting Media attribute data for Product
		INSERT INTO ZnodePimProductAttributeMedia 
		( 
			PimAttributeValueId, 
			LocaleId, MediaPath, 
			MediaId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				SOURCE.MediaId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #TBL_MediaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeMedia TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.MediaPAth = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		--------------------------
		if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
			drop table #Cte_TextAreaAttributeValue

		---- Getting text area data in temp #Cte_TextAreaAttributeValue
		SELECT a.PimAttributeValueId, 
				b.LocaleId, 
				AttributeValue
		INTO #Cte_TextAreaAttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
														AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
														AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

		---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.CreatedBy = @UserId, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeTextAreaValue TARGET
		INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting TextAreaValue attribute data for Product
		INSERT INTO ZnodePimProductAttributeTextAreaValue
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #Cte_TextAreaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeTextAreaValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
           
		---- Getting attribute default values for product
		INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
		SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
		CROSS APPLY dbo.split(b.AttributeValue, ',') SP
		INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
														AND SP.Item = d.AttributeDefaultValueCode;
		---- Deleting prodyuct attribute default value
		DELETE FROM ZnodePimProductAttributeDefaultValue
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_DefaultAttributeValue TBLAV
			WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
					AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
					AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
		);

		---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeDefaultValue TARGET
				INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																AND TARGET.LocaleId = SOURCE.LocaleId;

		---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimProductAttributeDefaultValue
		(
			PimAttributeValueId, 
			LocaleId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #TBL_DefaultAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeDefaultValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
               

		IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
			DROP TABLE #cte_ZnodePimAttributeValue;

		CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

		CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

		INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
		SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

		---- update ZnodePimAttributeValueLocale : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimAttributeValueLocale TARGET
		INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
														AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting AttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimAttributeValueLocale
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #cte_ZnodePimAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValueLocale TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		---- Inserting configurable products into ZnodePimConfigureProductAttribute
		INSERT INTO [ZnodePimConfigureProductAttribute]
		(PimProductId, 
			PimFamilyId, 
			PimAttributeId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT DISTINCT PD.PimProductId, 
				NULL, 
				q.PimAttributeId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #PimProductDetail_Bulk_Process PD
			CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
			INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
		WHERE NOT EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimConfigureProductAttribute RTR
			WHERE RTR.PimProductId = PD.PimProductId
					AND RTR.PimAttributeId = q.PimAttributeId
		);

		COMMIT TRAN ImportProducts;

		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
		END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;
		-----------Added Performance patch end

		

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN ImportProducts;

		DELETE FROM ZnodePimConfigureProductAttribute  
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
		--AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
		--INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
		--INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
		--INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
		--INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
		--WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
		--AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimProductId = ZnodePimConfigureProductAttribute.PimProductId )
   			
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);
		
		IF @LocaleId = @DefaultLocaleId
		BEGIN 	 
			DECLARE @sqlt NVARCHAr(max) = ''
			DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

			DECLARE Cur_AttributeDataUpdate CURSOR FOR 

			SELECT b.AttributeCode , PimAttributeId 
			FROM INFORMATION_SCHEMA.COLUMNS a 
			INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
			WHERE TABLE_NAME = 'ZnodePimProduct'
			AND IsCategory = 0 
			AND IsShowOnGrid = 1 
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail_Bulk_Process n  WHERE Replace(Replace(n.ProductAttributeCode, '[',''), ']','') = b.AttributeCode  )

			OPEN Cur_AttributeDataUpdate 
			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

			SET @sqlt = 'UPDATE a  
			SET '+@AttributeCodeAtt+'= AttributeValue 
			FROM ZnodePimProduct a 
			INNER JOIN #PimProductDetail_Bulk_Process m ON(m.PimProductId = a.pimProductId ) 
			WHERE  Replace(Replace(m.ProductAttributeCode, ''['',''''), '']'','''') = '''+@AttributeCodeAtt+'''
			' 

			EXEC (@sqlt)

			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			END 
			CLOSE Cur_AttributeDataUpdate
			DEALLOCATE Cur_AttributeDataUpdate 

		END 

	END TRY
    BEGIN CATCH
		ROLLBACK TRAN ImportProducts;
		INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		Select  46,ERROR_PROCEDURE(),ERROR_MESSAGE(),ERROR_LINE(),@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  
		
		SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;

		EXEC sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
		--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SELECT @SuccessRecordCount = 0
									
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus(3), 
		ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

        SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
		-- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
		-- ROLLBACK TRAN ImportProducts;
    END CATCH;
END;

GO

update ZnodeGlobalAttribute 
set HelpDescription='When this setting is enabled and saved, Znode can be accessed through the TradeCentric.'
where HelpDescription='When this setting is checked and saved, Znode can be accessed through the TradeCentric.'

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteExportLogs')
	DROP PROC Znode_DeleteExportLogs
GO

CREATE PROCEDURE [dbo].[Znode_DeleteExportLogs]
(
	@DurationInDays			INT=0,
	@ExportProcessLogIds	NVARCHAR(MAX)=0,
	@Status					INT OUT
)
/*
	Summary: 
		This procedure is used to remove export logs/files and drop respective export tables.

	Unit Testing:
		EXEC dbo.Znode_DeleteExportLogs @DurationInDays=30, @ExportProcessLogIds=0, @Status=0
		EXEC dbo.Znode_DeleteExportLogs @DurationInDays=0, @ExportProcessLogIds='1,2,3,4', @Status=0
		EXEC dbo.Znode_DeleteExportLogs @DurationInDays=0, @ExportProcessLogIds='58', @Status=0
*/
AS
BEGIN
	BEGIN TRAN DeleteExportLogs;
	BEGIN TRY
		SET NOCOUNT ON;

		IF OBJECT_ID('tempdb..#TableName') IS NOT NULL
			DROP TABLE #TableName;

		IF OBJECT_ID('tempdb..#ExportProcessLog') IS NOT NULL
			DROP TABLE #ExportProcessLog;

		SELECT Item As ExportProcessLogId
		INTO #ExportProcessLog
		FROM dbo.Split(@ExportProcessLogIds,',');
		
		SELECT TableName
		INTO #TableName
		FROM ZnodeExportProcessLog
		WHERE ((@DurationInDays<>0 AND CONVERT(DATE,CreatedDate,121) < DATEADD(DAY,-@DurationInDays,CONVERT(DATE,GETDATE(),121)))
			OR ExportProcessLogId IN (SELECT ExportProcessLogId FROM #ExportProcessLog))
			AND [Status] <> 'In Progress';

		--DECLARE @DropTable NVARCHAR(MAX) = (SELECT + STRING_AGG('DROP TABLE IF EXISTS '+TableName ,'; ') FROM #TableName);

		DECLARE @DropTable NVARCHAR(MAX);

		SELECT @DropTable = COALESCE(@DropTable + ' DROP TABLE IF EXISTS ', '') + TableName +';'
		FROM #TableName WHERE EXISTS (SELECT * FROM #TableName);

		IF LEN(@DropTable)>0
		BEGIN
			SET @DropTable = 'DROP TABLE IF EXISTS ' +  @DropTable;
			--,RIGHT(@DropTable,LEN(@DropTable)-2)

			--PRINT @DropTable
			EXEC (@DropTable);
		END

		DELETE
		FROM ZnodeExportProcessLog
		WHERE TableName IN (SELECT [TableName] FROM #TableName);

		SELECT TableName As [FileName]
		FROM #TableName;

		DROP TABLE #TableName;
		DROP TABLE #ExportProcessLog;

		SET @Status = 1;
	COMMIT TRAN DeleteExportLogs;
	END TRY
	BEGIN CATCH
		DECLARE @Error_Procedure VARCHAR(1000) = ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteExportLogs 
					@DurationInDays='+CAST(@DurationInDays AS VARCHAR(50))+',
					@ExportProcessLogIds='''+CAST(@ExportProcessLogIds AS NVARCHAR(MAX))+''',
					@Status='+CAST(@Status AS VARCHAR(50));
         
             SET @Status = 0;

             ROLLBACK TRAN DeleteExportLogs;

             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteExportLogs',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
		SELECT ERROR_MESSAGE()
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPimProductData')
	DROP PROC Znode_ImportPimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
/*
    Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
    Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inserted one by one products. 	   
    
    SourceColumnName : CSV file column headers
    TargetColumnName : Attributecode from ZnodePimAttribute Table 

	***  Need to log error if transaction failed during insertion of records into table.
*/

BEGIN
	SET NOCOUNT ON
    BEGIN TRY
        BEGIN TRAN ImportProducts;
        DECLARE @SQLQuery NVARCHAR(MAX);
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
        --Declare error Log Table 
			    
			
		DECLARE @FamilyAttributeDetail TABLE
		( 
		PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
		);
        IF @DefaultFamilyId = 0
            BEGIN
			INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
			--Call Process to insert data of defeult family with cource column name and target column name 
			EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
            UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

			---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;
        ELSE
            BEGIN
                INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                --Call Process to insert data of defeult family with cource column name and target column name 
                EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

				---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;  
				
		-- Retrive PimProductId on the basis of SKU for update product 
		SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
						FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
						(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
						INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
						INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
		EXEC sys.sp_sqlexec	@SQLQuery	
			 
			 
		SET @SQLQuery='
		INSERT INTO ZnodeImportLog( ErrorDescription,ColumnName, Data, GUID,RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT ''135'',''SKU'', SKU, '''+@NewGUId+''',RowNumber, '+cast(@UserId as varchar(10))+', getdate(), '+cast(@UserId as varchar(10))+', getdate(), '+cast(@ImportProcessLogId as varchar(10))+'
		FROM '+@TableName +' WHERE LEN(SKU)>600';
		EXEC sys.sp_sqlexec @SQLQuery;

		SET @SQLQuery='Delete B from '+@TableName +' B WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeImportLog A where B.RowNumber=A.RowNumber and A.ImportProcessLogId 
		='+cast(@ImportProcessLogId as varchar(10))+')'
		EXEC (@SQLQuery)

        --Read all attribute details with their datatype 
        IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
		BEGIN
				CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
				AttributeDefaultValueCode  VARCHAR(100));
					 
			INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
			--Call Process to insert default data value 
			EXEC Znode_ImportGetPimAttributeDefaultValue;
		END;
        ELSE
        BEGIN
            DROP TABLE #DefaultAttributeValue;
        END;
        EXEC sys.sp_sqlexec
            @SQLQuery;
       
		DECLARE @PimProductDetail TABLE 
		(
			      
			PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
			PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
        );

		-- Update Record count in log 
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
        -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
        -- Add PimAttributeDefaultValue 
        DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
        FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
        OPEN Cr_AttributeDetails;
        FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        WHILE @@FETCH_STATUS = 0
        BEGIN
			SET @NewProductId = 0;
			SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
							(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
							+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
							+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
						, RowNumber FROM '+@TableName+' TN';
						print @SQLQuery
			INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        END;
        CLOSE Cr_AttributeDetails;
        DEALLOCATE Cr_AttributeDetails;
			 
			
		if object_id('tempdb..#PimProductDetail1') is not null
		drop table #PimProductDetail1

		Select * into #PimProductDetail1 from @PimProductDetail

		UPDATE a 
		SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
		FROM #PimProductDetail1 c 
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
		WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
		FROM #PimProductDetail1 a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = '[ProductType]' 
		AND ab.AttributeValue = 'ConfigurableProduct' )
				
        -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
		--If default Value set not need of hard code for IsActive
		UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
        INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
   	
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
		DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
		DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
		DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

		------------------------------------Bulk Row Process
		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
			DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
					MinRow = 1, 
					MaxRow = cast(@Rows as int)
			UNION ALL
			SELECT RowId + 1, 
					MinRow + cast(@Rows as int), 
					MaxRow + cast(@Rows as int)
			FROM cte
			WHERE RowId + 1 <= @MaxCount
		)
		SELECT RowId, MinRow, MaxRow
		INTO #Temp_ImportLoop
		FROM cte
		option (maxrecursion 0);

		--while @MaxCount <= @minRow
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
		FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

		OPEN cur_BulkData;
		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		BEGIN TRAN ImportProducts;

		if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
				drop table tempdb..#PimProductDetail_Bulk_Process

		CREATE TABLE #PimProductDetail_Bulk_Process
		([PimAttributeId]                 [INT] NULL, 
			[PimAttributeFamilyId]           [INT] NULL, 
			[ProductAttributeCode]           [VARCHAR](300) NULL, 
			[ProductAttributeDefaultValueId] [INT] NULL, 
			[PimAttributeValueId]            [INT] NULL, 
			[LocaleId]                       [INT] NULL, 
			[PimProductId]                   [INT] NULL, 
			[AttributeValue]                 [NVARCHAR](MAX) NULL, 
			[AssociatedProducts]             [NVARCHAR](4000) NULL, 
			[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
			[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
			[RowNumber]                      [INT] NULL, 
			SKU1                             VARCHAR(600),
			Id Int Identity(1,1)Primary Key
		);

		CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
		CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);
		
		---- Insert rows for import in bulk
		INSERT INTO #PimProductDetail_Bulk_Process
		([PimAttributeId], 
			[PimAttributeFamilyId], 
			[ProductAttributeCode], 
			[ProductAttributeDefaultValueId], 
			[PimAttributeValueId], 
			[LocaleId], 
			[PimProductId], 
			[AttributeValue], 
			[AssociatedProducts], 
			[ConfigureAttributeIds], 
			[ConfigureFamilyIds], 
			[RowNumber]
		)
		SELECT [PimAttributeId], 
				[PimAttributeFamilyId], 
				[ProductAttributeCode], 
				[ProductAttributeDefaultValueId], 
				[PimAttributeValueId], 
				[LocaleId], 
				[PimProductId], 
				ltrim(rtrim([AttributeValue])), 
				[AssociatedProducts], 
				[ConfigureAttributeIds], 
				[ConfigureFamilyIds], 
				[RowNumber]
		FROM #PimProductDetail1 a
		WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

		--select * from @PimProductDetail

		--select * from #PimProductDetail1

			    

		---------------------------Start Importing 
		if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
			drop table #TBL_DefaultAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeId')is not null
			drop table #TBL_MediaAttributeId

		if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
			drop table #TBL_TextAreaAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
			drop table #TBL_MediaAttributeValue

		if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
			drop table #TBL_DefaultAttributeValue

		if object_id ('tempdb..#ZnodePimAttributeValue')is not null
			drop table #ZnodePimAttributeValue

				
		CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

		CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

		CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

		DECLARE @ConfigureFamilyId VARCHAR(4000);

		INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetDefaultAttributeId]();

		INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetProductMediaAttributeId]();

		INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetTextAreaAttributeId]();

		SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

		if object_id ('tempdb..#cte')is not null
			drop table #cte

		SELECT AttributeValue AS SKU, RowNumber
		INTO #cte
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]';
              
		CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
		UPDATE a SET a.SKU1 = B.SKU
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

		----Update ZNodePimProduct 
		UPDATE ZNodePimProduct
		SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
			PublishStateId = @PublishStateIdForDraft, 
			ModifiedBy = @UserId, 
			ModifiedDate = @GetDate
		FROM ZNodePimProduct ZPP
		INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
		if object_id ('tempdb..#ZnodePimProduct')is not null
			drop table #ZnodePimProduct

		CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

		--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)

		----Insert into ZNodePimProduct 
		INSERT INTO ZnodePimProduct
		(PimAttributeFamilyId, 
			ExternalId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate, 
			PublishStateId
		)
		output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
		SELECT PimAttributeFamilyId, 
				RowNumber, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate, 
				@PublishStateIdForNotPublished
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]'
		AND PimProductId IS NULL;
            
		----Update newly created productIds
		UPDATE a SET a.PimProductId = b.PimProductId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

		----Insert Downloadable products into ZnodePimDownloadableProduct
		INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
		FROM #PimProductDetail_Bulk_Process PDSKU
		INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
		INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
		WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
		AND PDProdName.ProductAttributeCode = '[SKU]'
		AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
		AND PDDownload.AttributeValue = 'true'
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

		---- update ZnodePimAttributeValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeFamilyId = CASE
												WHEN Source.PimAttributeFamilyId = 0
												THEN NULL
												ELSE Source.PimAttributeFamilyId
											END, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate, 
				TARGET.PimProductId = SOURCE.PimProductId
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		FROM ZnodePimAttributeValue TARGET
		INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
		---- Inserting attribute data for Product 
		INSERT INTO ZnodePimAttributeValue 
		( 
			PimAttributeFamilyId, 
			PimProductId, PimAttributeId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate 
		)
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		SELECT 
			CASE
				WHEN Source.PimAttributeFamilyId = 0
				THEN @PimDefaultFamily
				ELSE Source.PimAttributeFamilyId
			END, 
			SOURCE.PimProductId, 
			ISNULL(SOURCE.PimAttributeId, 0),
			CASE
				WHEN SOURCE.ProductAttributeDefaultValueId = 0
				THEN NULL
				ELSE SOURCE.ProductAttributeDefaultValueId
			END, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #PimProductDetail_Bulk_Process SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValue TARGET
			WHERE TARGET.PimProductId = SOURCE.PimProductId
					AND TARGET.PimAttributeId = SOURCE.PimAttributeId
		);
		-------------------------
		if object_id ('tempdb..#MediaData')is not null
			drop table #MediaData

		CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

		---- Get Product Media Data
		INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
		SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
		CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

		---- Get product media attribute data
		INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
		SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
										AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
										AND a.PimProductId = b.PimProductId)
		INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
		---- Deleting product media attribute
		DELETE FROM ZnodePimProductAttributeMedia
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_MediaAttributeValue TBLM
			WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
					AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
					AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
		);

		---- update ZnodePimProductAttributeMedia : attribute data for Product
		UPDATE TARGET
			SET 
				TARGET.MediaPath = SOURCE.AttributeValue, 
				TARGET.MediaId = SOURCE.MediaId, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeMedia TARGET
		INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
													AND TARGET.MediaPAth = SOURCE.AttributeValue
													AND TARGET.LocaleId = SOURCE.LocaleId;
    
		---- inserting Media attribute data for Product
		INSERT INTO ZnodePimProductAttributeMedia 
		( 
			PimAttributeValueId, 
			LocaleId, MediaPath, 
			MediaId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				SOURCE.MediaId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #TBL_MediaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeMedia TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.MediaPAth = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		--------------------------
		if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
			drop table #Cte_TextAreaAttributeValue

		---- Getting text area data in temp #Cte_TextAreaAttributeValue
		SELECT a.PimAttributeValueId, 
				b.LocaleId, 
				AttributeValue
		INTO #Cte_TextAreaAttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
														AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
														AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

		---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.CreatedBy = @UserId, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeTextAreaValue TARGET
		INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting TextAreaValue attribute data for Product
		INSERT INTO ZnodePimProductAttributeTextAreaValue
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #Cte_TextAreaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeTextAreaValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
           
		---- Getting attribute default values for product
		INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
		SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
		CROSS APPLY dbo.split(b.AttributeValue, ',') SP
		INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
														AND SP.Item = d.AttributeDefaultValueCode;
		---- Deleting prodyuct attribute default value
		DELETE FROM ZnodePimProductAttributeDefaultValue
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_DefaultAttributeValue TBLAV
			WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
					AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
					AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
		);

		---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeDefaultValue TARGET
				INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																AND TARGET.LocaleId = SOURCE.LocaleId;

		---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimProductAttributeDefaultValue
		(
			PimAttributeValueId, 
			LocaleId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #TBL_DefaultAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeDefaultValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
               

		IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
			DROP TABLE #cte_ZnodePimAttributeValue;

		CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

		CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

		INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
		SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

		---- update ZnodePimAttributeValueLocale : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimAttributeValueLocale TARGET
		INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
														AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting AttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimAttributeValueLocale
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #cte_ZnodePimAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValueLocale TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		---- Inserting configurable products into ZnodePimConfigureProductAttribute
		INSERT INTO [ZnodePimConfigureProductAttribute]
		(PimProductId, 
			PimFamilyId, 
			PimAttributeId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT DISTINCT PD.PimProductId, 
				NULL, 
				q.PimAttributeId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #PimProductDetail_Bulk_Process PD
			CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
			INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
		WHERE NOT EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimConfigureProductAttribute RTR
			WHERE RTR.PimProductId = PD.PimProductId
					AND RTR.PimAttributeId = q.PimAttributeId
		);

		IF @LocaleId = @DefaultLocaleId
		BEGIN 	 
			DECLARE @sqlt NVARCHAr(max) = ''
			DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

			DECLARE Cur_AttributeDataUpdate CURSOR FOR 

			SELECT b.AttributeCode , PimAttributeId 
			FROM INFORMATION_SCHEMA.COLUMNS a 
			INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
			WHERE TABLE_NAME = 'ZnodePimProduct'
			AND IsCategory = 0 
			AND IsShowOnGrid = 1 
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail_Bulk_Process n  WHERE Replace(Replace(n.ProductAttributeCode, '[',''), ']','') = b.AttributeCode  )

			OPEN Cur_AttributeDataUpdate 
			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

			SET @sqlt = 'UPDATE a  
			SET '+@AttributeCodeAtt+'= AttributeValue 
			FROM ZnodePimProduct a 
			INNER JOIN #PimProductDetail_Bulk_Process m ON(m.PimProductId = a.pimProductId ) 
			WHERE  Replace(Replace(m.ProductAttributeCode, ''['',''''), '']'','''') = '''+@AttributeCodeAtt+'''
			' 

			EXEC (@sqlt)

			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			END 
			CLOSE Cur_AttributeDataUpdate
			DEALLOCATE Cur_AttributeDataUpdate 

		END 



		COMMIT TRAN ImportProducts;

		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
		END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;
		-----------Added Performance patch end

		

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN ImportProducts;

		DELETE FROM ZnodePimConfigureProductAttribute  
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
		--AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
		--INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
		--INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
		--INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
		--INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
		--WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
		--AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimProductId = ZnodePimConfigureProductAttribute.PimProductId )
   			
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

	END TRY
    BEGIN CATCH
		ROLLBACK TRAN ImportProducts;
		INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		Select  46,ERROR_PROCEDURE(),ERROR_MESSAGE(),ERROR_LINE(),@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  
		
		SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;

		EXEC sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
		--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SELECT @SuccessRecordCount = 0
									
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus(3), 
		ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

        SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
		-- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
		-- ROLLBACK TRAN ImportProducts;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetOmsOrderDetail')
	DROP PROC Znode_GetOmsOrderDetail
GO

CREATE PROCEDURE [dbo].[Znode_GetOmsOrderDetail]
( 
	@WhereClause NVARCHAR(MAX),
	@Rows        INT            = 100,
	@PageNo      INT            = 1,
	@Order_BY    VARCHAR(1000)  = '',
	@RowsCount   INT OUT			,
	@UserId	   INT = 0 ,
	@IsFromAdmin int=0,
	@SalesRepUserId int = 0 
 )
AS
    /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

    EXEC [Znode_GetOmsOrderDetail_SCT] 'PortalId =1',@Order_BY = '',@RowsCount= 0, @UserId = 0 ,@Rows = 50, @PageNo = 1

	declare @p7 int
	set @p7=4
	exec sp_executesql N'Znode_GetOmsOrderDetail_SCT @WhereClause, @Rows,@PageNo,@Order_By,@RowCount OUT,@UserId,@IsFromAdmin',N'@WhereClause nvarchar(30),@Rows int,@PageNo int,@Order_By nvarchar(14),@RowCount int output,@UserId int,@IsFromAdmin int',@WhereClause=N'(PortalId in(''1'',''4'',''5'',''6''))',@Rows=50,@PageNo=1,@Order_By=N'orderdate desc',@RowCount=@p7 output,@UserId=0,@IsFromAdmin=1
	select @p7



   */
BEGIN
    BEGIN TRY
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		DECLARE @SQL NVARCHAR(MAX), @ProcessType  varchar(50)='Order'
		DECLARE @OrderLineItemRelationshipTypeId INT
		SET @OrderLineItemRelationshipTypeId = ( SELECT top 1 OrderLineItemRelationshipTypeId  FROM ZnodeOmsOrderLineItemRelationshipType where Name = 'AddOns' )

		----Verifying that the @SalesRepUserId is having 'Sales Rep' role
		IF NOT EXISTS
		(
			SELECT * FROM ZnodeUser ZU
			INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
			INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
			INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
			Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
			AND ZU.UserId = @SalesRepUserId
		)   
		Begin
			SET @SalesRepUserId = 0
		End

		DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows),
		@Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		set @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause)
			
		IF @Order_BY = ''
			set @Order_BY = 'OrderDate desc'

			set @Order_BY = replace(@Order_BY,'PortalId','ZODD.PortalId')
			set @Order_BY = replace(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Order_BY = replace(@Order_BY,'email','ZODD.Email')
			set @Order_BY = replace(@Order_BY,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Order_BY = replace(@Order_BY,'PaymentStatus','ZOPS.Name')
			set @Order_BY = replace(@Order_BY,'PublishState','ZODPS.DisplayName')
			set @Order_BY = replace(@Order_BY,'StoreName','ZP.StoreName')

			Declare @Fn_GetPagingRowId NVARCHAR(MAX) = ' DENSE_RANK()Over('+ ' Order By '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END  + ') RowId '
						
			IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

			IF OBJECT_ID('tempdb..#Portal') is not null
				DROP TABLE #Portal
			
			Create table #TBL_RowCount(RowsCount int )
			CREATE TABLE #tbl_GetRecurciveUserId  (ID INT IDENTITY(1,1) Primary key,UserId INT,ParentUserId INT)
			INSERT INTO #tbl_GetRecurciveUserId
			SELECT UserId,ParentUserId FROM dbo.Fn_GetRecurciveUserId (CAST(@UserId AS VARCHAR(50)),@ProcessType ) FNRU
			 
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PortalId','ZODD.PortalId')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''')')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'email','ZODD.Email')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'OrderState','case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PaymentStatus','ZOPS.Name')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'PublishState','ZODPS.DisplayName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')
			set @Fn_GetFilterWhereClause = replace(@Fn_GetFilterWhereClause,'orderdate','CAST((FORMAT(orderdate,''yyyy-MM-dd HH:mm'')) as datetime)')			
		
	
		set @Fn_GetPagingRowId = replace(@Fn_GetPagingRowId,'OmsOrderId','Zoo.OmsOrderId')
		
		
		set @Rows = @PageNo * @Rows

		CREATE TABLE #Portal (PortalId int,StoreName varchar(200))
		insert into #Portal
		select PortalId,StoreName
		from ZnodePortal

		SET @SQL = '
		SELECT Distinct top '+cast(@Rows as varchar(10))+' Zoo.OmsOrderId,Zoo.OrderNumber, ZODD.PortalId,ZP.StoreName ,ZODD.CurrencyCode,
		case when ZOS.IsShowToCustomer=0 and '+cast( @IsFromAdmin as varchar(50))+' = 0 then ZOSC.Description else  ZOS.Description end  OrderState,ZODD.ShippingId,ZODD.PaymentTypeId,ZODD.PaymentSettingId
		,ZOPS.Name PaymentStatus,ZPS.Name PaymentType,CAST(1 AS BIT) ShippingStatus ,ZODD.OrderDate,ZODD.UserId,ISNULL(RTRIM(LTRIM(ZODD.FirstName)),'''')
		+'' ''+ISNULL(RTRIM(LTRIM(ZODD.LastName)),'''') UserName ,ZODD.PaymentTransactionToken ,ZODD.OrderTotalWithoutVoucher as Total,ZODD.OmsOrderDetailsId,ZODD.PoDocument,
		ZODD.Email ,ZODD.PhoneNumber ,ZODD.SubTotal ,ZODD.TaxCost ,ZODD.ShippingCost,ZODD.BillingPostalCode,ZODD.RemainingOrderAmount,
		ZODD.ModifiedDate AS OrderModifiedDate,  ZODD.PaymentDisplayName  ,isnull(Zoo.ExternalId,0) ExternalId,ZODD.CreditCardExpMonth,ZODD.CultureCode--,ZODD.TotalAdditionalCost
		,ZODD.CreditCardExpYear,ZODD.CardType,ZODD.CreditCardNumber,ZODD.PaymentExternalId,ZODPS.DisplayName as PublishState,
		'''' ProductName, 0 CountId, CAST (0 as bit) IsInRMA, '+@Fn_GetPagingRowId+'
		INTO #Cte_OrderLineDescribe
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZODD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0 )  
		AND (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
		ORDER BY '+CASE WHEN Isnull(@Order_BY,'') = '' THEN 'OmsOrderId DESC' ELSE @Order_BY + ',OmsOrderId DESC' END +' 

		INSERT INTO #TBL_RowCount 
		SELECT count(*)
		FROM ZnodeOmsOrder (nolock) ZOO 
		INNER JOIN ZnodeOmsOrderDetails (nolock) ZODD ON (ZODD.OmsOrderId = ZOO.OmsOrderId AND  ZODD.IsActive = 1)
		INNER JOIN ZnodePublishState ZODPS ON (ZODPS.PublishStateId = ZOO.PublishStateId)
		INNER JOIN #Portal ZP (nolock) ON ZODD.PortalId = ZP.PortalId
		LEFT JOIN ZnodePaymentType (nolock) ZPS ON (ZPS.PaymentTypeId = ZODD.PaymentTypeId )
		LEFT JOIN ZnodeOmsOrderStateShowToCustomer (nolock) ZOSC ON (ZOSC.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsOrderState (nolock) ZOS ON (ZOS.OmsOrderStateId = ZODD.OmsOrderStateId)
		LEFT JOIN ZnodeOmsPaymentState (nolock) ZOPS ON (ZOPS.OmsPaymentStateId = ZODD.OmsPaymentStateId)
		WHERE (EXISTS(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = '+cast(@SalesRepUserId as varchar(10))+' and ZODD.UserId = SalRep.CustomerUserid) or '+cast(@SalesRepUserId as varchar(10))+' = 0 )  
		AND (EXISTS (SELECT TOP 1 1 FROM #tbl_GetRecurciveUserId FNRU WHERE FNRU.UserId = ZODD.UserId ) OR '+cast(@UserId as varchar(10))+'  =0 )'
		+ @Fn_GetFilterWhereClause+' 
			
		Create index Ind_OrderLineDescribe_RowId on #Cte_OrderLineDescribe(RowId )

		SELECT OmsOrderId,OrderNumber,PortalId,StoreName,CurrencyCode,OrderState,ShippingId,
		PaymentTypeId,PaymentSettingId,PaymentStatus,PaymentType,ShippingStatus,OrderDate,UserId,UserName,PaymentTransactionToken,Total,
		PN OrderItem,a.OmsOrderDetailsId,CountId ItemCount, PoDocument AS PODocumentPath,IsInRMA ,
		Email,PhoneNumber,SubTotal,TaxCost,ShippingCost,BillingPostalCode,null ShippingPostalCode
		,OrderModifiedDate,PaymentDisplayName, a.RemainingOrderAmount,
		ExternalId,CreditCardExpMonth,CreditCardExpYear,CardType,CreditCardNumber,PaymentExternalId,CultureCode,PublishState --TotalAdditionalCost
		FROM #Cte_OrderLineDescribe a inner join (select OmsOrderDetailsId, min(ProductName) PN, sum(case when OmsOrderLineItemsId is null then 0 else 1 end ) CNT from ZnodeOmsOrderLineItems
		where ParentOmsOrderLineItemsId is not null group by OmsOrderDetailsId ) b on a.OmsOrderDetailsId = b.OmsOrderDetailsId
		' + @Fn_GetPaginationWhereClause +' order by RowId '

		--print @SQL
		EXEC(@SQL)
		Select @RowsCount= isnull(RowsCount  ,0) from #TBL_RowCount
		
		IF OBJECT_ID('tempdb..#TBL_RowCount') is not null
				DROP TABLE #TBL_RowCount

		IF OBJECT_ID('tempdb..#Portal') is not null
			DROP TABLE #Portal
		
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetOmsOrderDetail @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
		@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',@IsFromAdmin='+ISNULL(CAST(@IsFromAdmin AS VARCHAR(10)),'''');
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetOmsOrderDetail',
		@ErrorInProcedure = 'Znode_GetOmsOrderDetail',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetQuoteList')
	DROP PROC Znode_GetQuoteList
GO

CREATE PROCEDURE [dbo].[Znode_GetQuoteList]
( 
	@WhereClause NVARCHAR(MAx) = '',
	@Rows INT = 100,
    @PageNo INT = 1,
    @Order_BY VARCHAR(1000)  = '',
    @RowsCount INT OUT			,
    @UserId INT = 0,
	@OmsQuoteTypeId int,
	@SalesRepUserId int = 0
)
AS
  /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

     EXEC Znode_GetQuoteList @Order_BY = 'omsquoteid desc',@RowsCount= 0, @UserId = 0 ,@Rows = 100, @PageNo = 2, @OmsQuoteTypeId=3,@SalesRepUserId=0
*/
BEGIN
SET NOCOUNT ON;
BEGIN TRY
	DECLARE @SQL nvarchar(max) = ''
	DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	CREATE TABLE #TBL_RowCount(RowsCount INT )

	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(SELECT * FROM AspNetRoles ANR WHERE Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	BEGIN
		SET @SalesRepUserId = 0
	END

	CREATE TABLE #QuoteInfo(OmsQuoteId INT, QuoteNumber VARCHAR(200),UserID INT, CustomerName VARCHAR(300), EmailID VARCHAR(50), PhoneNumber VARCHAR(50), PortalID INT, StoreName VARCHAR(500), QuoteStatus VARCHAR(500),  TotalAmount NUMERIC(28,6),QuoteDate DATETIME,QuoteExpirationDate  DATETIME,CultureCode VARCHAR(100),RowId INT)

	UPDATE ZOQ SET OmsOrderStateId = (SELECT TOP 1 OmsOrderStateId FROM ZnodeOMSOrderState WHERE OrderStateName = 'EXPIRED')
	FROM ZnodeOmsQuote ZOQ
	INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	WHERE ZOQ.OmsQuoteTypeId = @OmsQuoteTypeId AND (ZOQ.UserId = @UserId OR @UserId = 0 )
	AND CAST(ZOQ.QuoteExpirationDate AS DATE) < CAST(GETDATE() AS DATE)
	AND ZOQ.OmsOrderStateId <> (SELECT TOP 1 OmsOrderStateId FROM ZnodeOMSOrderState WHERE OrderStateName = 'EXPIRED')
	
	--For enhancemet purpose getting order by clause column from exact table
	IF @Order_BY <> ''
	BEGIN
		SET @Order_BY = REPLACE(@Order_BY,'OmsQuoteId','ZOQ.OmsQuoteId')
		SET @Order_BY = REPLACE(@Order_BY,'UserID','ZOQ.UserID')
		SET @Order_BY = REPLACE(@Order_BY,'EmailID','ZOQ.Email')
		SET @Order_BY = REPLACE(@Order_BY,'OmsQuoteTypeId','ZOQ.OmsQuoteTypeId')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteNumber','ZOQ.QuoteNumber')
		SET @Order_BY = REPLACE(@Order_BY,'PhoneNumber','ZOQ.PhoneNumber')
		SET @Order_BY = REPLACE(@Order_BY,'PortalID','ZP.PortalID')
		SET @Order_BY = REPLACE(@Order_BY,'StoreName','ZP.StoreName')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteDate','ZOQ.CreatedDate')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteStatus','ZOOS.Description')
		SET @Order_BY = REPLACE(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @Order_BY = REPLACE(@Order_BY,'CustomerName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @Order_BY = REPLACE(@Order_BY,'TotalAmount','ZOQ.QuoteOrderTotal')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteExpirationDate','ZOQ.QuoteExpirationDate')
		SET @Order_BY = REPLACE(@Order_BY,'CultureCode','ZOQ.CultureCode')
	END
	--For enhancemet purpose getting where clause column from exact table
	IF @WhereClause <> ''
	BEGIN
		SET @WhereClause = REPLACE(@WhereClause,'OmsQuoteId','ZOQ.OmsQuoteId')
		SET @WhereClause = REPLACE(@WhereClause,'OmsQuoteTypeId','ZOQ.OmsQuoteTypeId')
		SET @WhereClause = REPLACE(@WhereClause,'EmailID','ZOQ.Email')
		SET @WhereClause = REPLACE(@WhereClause,'UserID','ZOQ.UserID')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteNumber','ZOQ.QuoteNumber')
		SET @WhereClause = REPLACE(@WhereClause,'PhoneNumber','ZOQ.PhoneNumber')
		SET @WhereClause = REPLACE(@WhereClause,'PortalID','ZP.PortalID')
		SET @WhereClause = REPLACE(@WhereClause,'StoreName','ZP.StoreName')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteDate','ZOQ.CreatedDate')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteStatus','ZOOS.Description')
		SET @WhereClause = REPLACE(@WhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @WhereClause = REPLACE(@WhereClause,'CustomerName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @WhereClause = REPLACE(@WhereClause,'TotalAmount','ZOQ.QuoteOrderTotal')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteExpirationDate','ZOQ.QuoteExpirationDate')
		SET @WhereClause = REPLACE(@WhereClause,'CultureCode','ZOQ.CultureCode')
		SET @WhereClause = replace(@WhereClause,'ZOQ.CreatedDate','CAST((FORMAT(ZOQ.CreatedDate,''yyyy-MM-dd HH:mm'')) as datetime)')
	END
	--To get the maximum rows to fetch
	SET @Rows = @PageNo * @Rows

	SET @SQL = '
	INSERT INTO #TBL_RowCount
	SELECT COUNT(*)
	FROM ZnodeOmsQuote ZOQ
	INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	WHERE ZOQ.OmsQuoteTypeId = '+CAST(@OmsQuoteTypeId AS VARCHAR(10))+' AND (ZOQ.UserId = '+CAST(@UserId AS VARCHAR(10))+' OR '+CAST(@UserId AS VARCHAR(10))+'= 0 )
	AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = '+CAST(@SalesRepUserId AS VARCHAR(10))+' and ZOQ.UserId = SalRep.CustomerUserid) OR '+CAST(@SalesRepUserId AS VARCHAR(10))+' = 0)
	 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'

	SELECT TOP '+CAST(@Rows AS VARCHAR(10))+' ZOQ.OmsQuoteId, ZOQ.OmsQuoteTypeId,ZOQ.UserID, ZOQ.QuoteNumber AS QuoteNumber,ISNULL(ZOQ.FirstName,'''')+CASE WHEN ZOQ.MiddleName is not null THEN '' '' ELSE '''' END+ ISNULL(ZOQ.MiddleName,'''')+'' ''+isnull(ZOQ.LastName,'''') AS CustomerName,
	ZOQ.Email AS EmailID ,ZOQ.PhoneNumber,ZP.PortalID,ZP.StoreName ,ZOQ.CreatedDate AS QuoteDate,ZOOS.Description AS QuoteStatus,ZOQ.QuoteOrderTotal as TotalAmount, ZOQ.QuoteExpirationDate , ZOQ.CultureCode,
	'+dbo.Fn_GetPagingRowId(@Order_BY,'ZOQ.OmsQuoteId DESC')+' 
	INTO #QuoteDetail
	FROM ZnodeOmsQuote ZOQ
	INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	WHERE ZOQ.OmsQuoteTypeId = '+CAST(@OmsQuoteTypeId AS VARCHAR(10))+' AND (ZOQ.UserId = '+CAST(@UserId AS VARCHAR(10))+' OR '+CAST(@UserId AS VARCHAR(10))+'= 0 )
	AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = '+CAST(@SalesRepUserId AS VARCHAR(10))+' and ZOQ.UserId = SalRep.CustomerUserid) or '+CAST(@SalesRepUserId AS VARCHAR(10))+' = 0)
	 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'

	SELECT OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate,
			   TotalAmount,QuoteExpirationDate, CultureCode , RowId
	FROM #QuoteDetail
	'+@Fn_GetPaginationWhereClause

	INSERT INTO #QuoteInfo(OmsQuoteId, QuoteNumber,  CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode , RowId)
	EXEC(@SQL)

	SELECT OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode
	FROM #QuoteInfo
	ORDER BY RowId

	SET @RowsCount = ISNULL((SELECT TOP 1 RowsCount FROM #TBL_RowCount),0)

	IF OBJECT_ID('tempdb..#QuoteDetail') is not null
		DROP TABLE #QuoteDetail
	IF OBJECT_ID('tempdb..#QuoteInfo') is not null
		DROP TABLE #QuoteInfo

END TRY
BEGIN CATCH
    DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuoteList @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
	@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_GetQuoteList',
	@ErrorInProcedure = 'Znode_GetQuoteList',
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH;
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishSEOEntity')
	DROP PROC Znode_SetPublishSEOEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishSEOEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@PreviewVersionId INT = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSSEOTypeId varchar(500) = '' 
  ,@CMSSEOCode varchar(300) = ''
  ,@UserId int = 0 
  ,@Status int OUTPUT 
  ,@IsCatalogPublish bit = 0 
  ,@VersionIdString varchar(2000) = ''
  ,@IsSingleProductPublish bit = 0 
)
AS
/*
    This Procedure is used to publish the SEO details
  
	EXEC ZnodeSetPublishSEOEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishSEOEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Preview/Production' 
	  ,@CMSSEOTypeId = 0
	  ,@CMSSEOCode = ''
	  ,@UserId = 0 

	 Exec [ZnodeSetPublishSEOEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSSEOTypeId = 3
  ,@CMSSEOCode = ''
  ,@UserId = 0 




	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)
		If (@IsCatalogPublish = 0  AND @IsSingleProductPublish = 0 )
		Begin
			If @PreviewVersionId = 0 
				Begin
   					Insert into @Tbl_PreviewVersionId 
					SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
				end
			Else 
					Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
					where VersionId = @PreviewVersionId
			If @ProductionVersionId = 0 
   				Begin
					Insert into @Tbl_ProductionVersionId 
					SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
				End 
			Else 
				Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @ProductionVersionId
 		End
		--Else if (@IsCatalogPublish= 1  AND @IsSingleProductPublish = 0 )
		--Begin
		--	 IF OBJECT_ID('tempdb..#VesionIds') is not null
		--		DROP TABLE #VesionIds
  				 
		--	 SELECT PV.* into #VesionIds FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
		--End

		IF OBJECT_ID('tempdb..#VesionIds') is not null
				DROP TABLE #VesionIds
  				 
			 SELECT PV.* into #VesionIds FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
		
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		CREATE TABLE #TBL_SEO  
		(
			ItemName varchar(50),CMSSEODetailId int ,CMSSEODetailLocaleId int ,CMSSEOTypeId int ,SEOId int ,SEOTypeName varchar(50),SEOTitle nvarchar(Max)
			,SEODescription nvarchar(Max),
			SEOKeywords nvarchar(Max),SEOUrl nvarchar(Max) ,IsRedirect bit ,MetaInformation nvarchar(Max) ,LocaleId int ,
			OldSEOURL nvarchar(Max),CMSContentPagesId int ,PortalId int ,SEOCode varchar(300) ,CanonicalURL varchar(200),RobotTag varchar(50)
		)
		
		BEGIN 
			INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
			
			SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
			WHILE @IncrementalId <= @MaxCount
			BEGIN 
				SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				IF @IsSingleProductPublish = 0
				Begin
					;With Cte_GetCMSSEODetails AS 
					(
							select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
									 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
									 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
									 CDL.LocaleId,
									 NULL OldSEOURL, 
									 NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
									 from ZnodeCMSSEODetail CD 
									 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
									 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
									 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
									 AND (CD.PortalId = @PortalId  OR @PortalId  = 0 ) 
									 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
									 AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )
									union all
									select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
										 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
										 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
										 CDL.LocaleId,
										 NULL OldSEOURL, 
										 NULL CMSContentPagesId,ZPB.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
										 from ZnodeCMSSEODetail CD 
										 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
										 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId
										 INNER JOIN ZnodeBrandDetails ZBD ON CD.SeoCode = ZBD.BrandCode
										 INNER JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
										 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
										 AND (ZPB.PortalId = @PortalId  OR @PortalId  = 0 ) 
										 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
										 AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )
										 AND CT.Name = 'Brand' 
										 AND @IsCatalogPublish = 0
									 Union All 
									 select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
								 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
								 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
								 CDL.LocaleId,
								 NULL OldSEOURL, 
								 NULL CMSContentPagesId,ZPB.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
								 from ZnodeCMSSEODetail CD 
								 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
								 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
								 INNER JOIN ZnodeBrandDetails ZBD ON CD.SeoCode = ZBD.BrandCode
								 INNER JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
								 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
								 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
								 AND (CT.Name = 'Brand' ) 
								 AND @IsCatalogPublish= 1 
					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation, LocaleId ,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	
						FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	  FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	 FROM Cte_GetCMSSEODetails CTEC 
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE CTEFD.CMSSEOTypeId = CTEC.CMSSEOTypeId 
						and CTEFD.seoCode = CTEC.seoCode )
					)
	
					INSERT INTO #TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
					PortalId,SEOCode,CanonicalURL,RobotTag)
					SELECT 
						ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,@SetLocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag	
					FROM Cte_GetDefaultFilterData  A 

					End 
					Else If @IsSingleProductPublish = 1  
						INSERT INTO #TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag)
							SELECT CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
							CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
							CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
							CDL.LocaleId,
							NULL OldSEOURL, 
							NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
							from ZnodeCMSSEODetail CD 
							INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
							INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
							WHERE (CDL.LocaleId = @LocaleId )  
							AND (CD.PortalId = @PortalId  ) 
							AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
							AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )

				SET @IncrementalId = @IncrementalId +1 
			END 
		End 
		End			

	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%' OR  @RevisionState like '%Production%')  AND @IsSingleProductPublish = 0
	Begin
	    --Data inserted into flat table ZnodePublishSeoEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId  in (Select PreviewVersionId  from @TBL_PreviewVersionId ) 
		AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
		AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		AND @IsCatalogPublish= 0   
		

		If @IsCatalogPublish= 0
		BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 
			FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				Inner join @TBL_PreviewVersionId B on A.LocaleId = B.LocaleId AND A.LocaleId = B.LocaleId
				WHERE B.PreviewVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET C.ItemName = A.ItemName ,
				C.SEOTypeName = A.ItemName,C.SEOTitle = A.SEOTitle,C.SEODescription = A.SEODescription,C.SEOKeywords=A.SEOKeywords,C.SEOUrl = A.SEOUrl,
				C.IsRedirect=A.IsRedirect,C.MetaInformation = A.MetaInformation,C.OldSEOURL = A.OldSEOURL,
				C.CanonicalURL = A.CanonicalURL,C.RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			Inner join @TBL_PreviewVersionId B on A.LocaleId = B.LocaleId AND A.LocaleId = B.LocaleId 
			INNER JOIN ZnodePublishSeoEntity C ON B.PreviewVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag, ElasticSearchEvent
			)
			SELECT B.PreviewVersionId , Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A Inner join @TBL_PreviewVersionId B on A.LocaleId = B.LocaleId AND A.LocaleId = B.LocaleId
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishSeoEntity C WHERE B.PreviewVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId)

		END

		If @IsCatalogPublish= 1
		BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 
			FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				--Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PREVIEW'
				WHERE --B.VersionId = C.VersionId AND 
					A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET C.ItemName = A.ItemName ,
				C.SEOTypeName = A.ItemName, C.SEOTitle = A.SEOTitle,C.SEODescription = A.SEODescription,C.SEOKeywords=A.SEOKeywords,C.SEOUrl = A.SEOUrl,
				C.IsRedirect=A.IsRedirect,C.MetaInformation = A.MetaInformation,C.OldSEOURL = A.OldSEOURL,
				C.CanonicalURL = A.CanonicalURL,C.RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			--Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PREVIEW' 
			INNER JOIN ZnodePublishSeoEntity C ON --B.VersionId = C.VersionId AND 
				A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag, ElasticSearchEvent	
			)
			SELECT C.VersionId , Getdate(), A.ItemName,A.CMSSEODetailId,A.CMSSEODetailLocaleId,A.CMSSEOTypeId,A.SEOId,
				A.ItemName,A.SEOTitle,A.SEODescription,A.SEOKeywords,A.SEOUrl,A.IsRedirect,A.MetaInformation,A.LocaleId,
				A.OldSEOURL,Isnull(A.CMSContentPagesId,0),
				A.PortalId,A.SEOCode,A.CanonicalURL,A.RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A --Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PREVIEW'
			INNER JOIN ZnodePublishSeoEntity C ON 
				A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId

		END
	End

	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None') and @IsSingleProductPublish = 0
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId ) 
		AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
		AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		AND @IsCatalogPublish= 0  
		--AND EXISTS(SELECT * FROM #VesionIds V WHERE V.VersionId = ZnodePublishSeoEntity.VersionId)

		If @IsCatalogPublish= 0 		
		BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 
			FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				INNER JOIN @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId 
				WHERE B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET ItemName = A.ItemName ,
				SEOTypeName = A.ItemName,SEOTitle = A.SEOTitle,SEODescription = A.SEODescription,SEOKeywords=A.SEOKeywords,SEOUrl = A.SEOUrl,
				IsRedirect=A.IsRedirect,MetaInformation = A.MetaInformation,OldSEOURL = A.OldSEOURL,
				CanonicalURL = A.CanonicalURL,RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			INNER JOIN @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId 
			INNER JOIN ZnodePublishSeoEntity C ON B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag, ElasticSearchEvent
			)
			SELECT B.ProductionVersionId , Getdate(), ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A Inner join @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishSeoEntity C WHERE B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId)
		END
	   If @IsCatalogPublish= 1 		
	   BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				INNER JOIN @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId 
				WHERE B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET C.ItemName = A.ItemName ,
				C.SEOTypeName = A.ItemName,C.SEOTitle = A.SEOTitle,C.SEODescription = A.SEODescription,C.SEOKeywords=A.SEOKeywords,C.SEOUrl = A.SEOUrl,
				C.IsRedirect = A.IsRedirect,C.MetaInformation = A.MetaInformation, C.OldSEOURL = A.OldSEOURL,
				C.CanonicalURL = A.CanonicalURL, C.RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			--INNER JOIN #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PRODUCTION'
			INNER JOIN ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	,ElasticSearchEvent
			)
			SELECT C.VersionId , Getdate(), A.ItemName,A.CMSSEODetailId,A.CMSSEODetailLocaleId,A.CMSSEOTypeId,A.SEOId,
				A.ItemName,A.SEOTitle,A.SEODescription,A.SEOKeywords,A.SEOUrl,A.IsRedirect,A.MetaInformation,A.LocaleId,
				A.OldSEOURL,Isnull(A.CMSContentPagesId,0),
				A.PortalId,A.SEOCode,A.CanonicalURL,A.RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A 
			--Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PRODUCTION'
			inner join ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId
		END
	
	End

	--Single Product Publish 
	If @IsSingleProductPublish =1  
	Begin
			Delete from ZnodePublishSeoEntity where PortalId = @PortalId  --and VersionId in (Select Item from Split(@VersionIdString,',')) 
			AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
			AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
			--AND EXISTS(SELECT * FROM #VesionIds V WHERE V.VersionId = ZnodePublishSeoEntity.VersionId)

			UPDATE C SET ItemName = A.ItemName ,
				SEOTypeName = A.ItemName,SEOTitle = A.SEOTitle,SEODescription = A.SEODescription,SEOKeywords=A.SEOKeywords,SEOUrl = A.SEOUrl,
				IsRedirect=A.IsRedirect,MetaInformation = A.MetaInformation,OldSEOURL = A.OldSEOURL,
				CanonicalURL = A.CanonicalURL,RobotTag = A.RobotTag
			FROM #TBL_SEO A 
			INNER JOIN ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND EXISTS(SELECT * FROM #VesionIds V WHERE V.VersionId = C.VersionId)
		
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT --(Select Item from Split(@VersionIdString,',')), 
				c.VersionId ,Getdate(),A.ItemName, A.CMSSEODetailId,A.CMSSEODetailLocaleId,A.CMSSEOTypeId,A.SEOId,
				A.ItemName,A.SEOTitle,A.SEODescription,A.SEOKeywords,A.SEOUrl,A.IsRedirect,A.MetaInformation,@LocaleId,
				A.OldSEOURL,Isnull(A.CMSContentPagesId,0),
				A.PortalId,A.SEOCode,A.CanonicalURL,A.RobotTag
			FROM #TBL_SEO A 
			inner join ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId
		
	end 

	If (@RevisionState = 'Preview'  )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPreview()) , ISPublish = 1 
		from #TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId
	else If (@RevisionState = 'Production'  Or @RevisionState = 'None' )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPublish()) , ISPublish = 1 
		from #TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId

	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishSEOEntity 
	@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+''',@CMSSEOTypeId= ' + CAST(@CMSSEOTypeId  AS varchar(20))
	+',@UserId = ' + CAST(@UserId AS varchar(20))
	+',@CMSSEOCode  = ''' + CAST(@CMSSEOCode  AS varchar(20)) + '''';
	        			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishSEOEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPimProductData')
	DROP PROC Znode_ImportPimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
/*
    Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
    Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inserted one by one products. 	   
    
    SourceColumnName : CSV file column headers
    TargetColumnName : Attributecode from ZnodePimAttribute Table 

	***  Need to log error if transaction failed during insertion of records into table.
*/

BEGIN
	SET NOCOUNT ON
    BEGIN TRY
        BEGIN TRAN ImportProducts;
        DECLARE @SQLQuery NVARCHAR(MAX);
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
        --Declare error Log Table 
			    
			
		DECLARE @FamilyAttributeDetail TABLE
		( 
		PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
		);
        IF @DefaultFamilyId = 0
            BEGIN
			INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
			--Call Process to insert data of defeult family with cource column name and target column name 
			EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
            UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

			---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;
        ELSE
            BEGIN
                INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                --Call Process to insert data of defeult family with cource column name and target column name 
                EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

				---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;  
				
		-- Retrive PimProductId on the basis of SKU for update product 
		SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
						FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
						(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
						INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
						INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
		EXEC sys.sp_sqlexec	@SQLQuery	
			 
			 
		SET @SQLQuery='
		INSERT INTO ZnodeImportLog( ErrorDescription,ColumnName, Data, GUID,RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT ''135'',''SKU'', SKU, '''+@NewGUId+''',RowNumber, '+cast(@UserId as varchar(10))+', getdate(), '+cast(@UserId as varchar(10))+', getdate(), '+cast(@ImportProcessLogId as varchar(10))+'
		FROM '+@TableName +' WHERE LEN(SKU)>600';
		EXEC sys.sp_sqlexec @SQLQuery;

		SET @SQLQuery='Delete B from '+@TableName +' B WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeImportLog A where B.RowNumber=A.RowNumber and A.ImportProcessLogId 
		='+cast(@ImportProcessLogId as varchar(10))+')'
		EXEC (@SQLQuery)

        --Read all attribute details with their datatype 
        IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
		BEGIN
				CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
				AttributeDefaultValueCode  VARCHAR(100));
					 
			INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
			--Call Process to insert default data value 
			EXEC Znode_ImportGetPimAttributeDefaultValue;
		END;
        ELSE
        BEGIN
            DROP TABLE #DefaultAttributeValue;
        END;
        EXEC sys.sp_sqlexec
            @SQLQuery;
       
		DECLARE @PimProductDetail TABLE 
		(
			      
			PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
			PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
        );

		-- Update Record count in log 
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
        -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
        -- Add PimAttributeDefaultValue 
        DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
        FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
        OPEN Cr_AttributeDetails;
        FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        WHILE @@FETCH_STATUS = 0
        BEGIN
			SET @NewProductId = 0;
			SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
							(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
							+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
							+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
						, RowNumber FROM '+@TableName+' TN';
						print @SQLQuery
			INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        END;
        CLOSE Cr_AttributeDetails;
        DEALLOCATE Cr_AttributeDetails;
			 
			
		if object_id('tempdb..#PimProductDetail1') is not null
		drop table #PimProductDetail1

		Select * into #PimProductDetail1 from @PimProductDetail

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';

		UPDATE a 
		SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
		FROM #PimProductDetail1 c 
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
		WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
		FROM #PimProductDetail1 a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = '[ProductType]' 
		AND ab.AttributeValue = 'ConfigurableProduct' )
				
        -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
		--If default Value set not need of hard code for IsActive
		UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
        INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
   	
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
		DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
		DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
		DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

		------------------------------------Bulk Row Process
		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
			DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
					MinRow = 1, 
					MaxRow = cast(@Rows as int)
			UNION ALL
			SELECT RowId + 1, 
					MinRow + cast(@Rows as int), 
					MaxRow + cast(@Rows as int)
			FROM cte
			WHERE RowId + 1 <= @MaxCount
		)
		SELECT RowId, MinRow, MaxRow
		INTO #Temp_ImportLoop
		FROM cte
		option (maxrecursion 0);

		--while @MaxCount <= @minRow
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
		FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

		OPEN cur_BulkData;
		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		BEGIN TRAN ImportProducts;

		if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
				drop table tempdb..#PimProductDetail_Bulk_Process

		CREATE TABLE #PimProductDetail_Bulk_Process
		([PimAttributeId]                 [INT] NULL, 
			[PimAttributeFamilyId]           [INT] NULL, 
			[ProductAttributeCode]           [VARCHAR](300) NULL, 
			[ProductAttributeDefaultValueId] [INT] NULL, 
			[PimAttributeValueId]            [INT] NULL, 
			[LocaleId]                       [INT] NULL, 
			[PimProductId]                   [INT] NULL, 
			[AttributeValue]                 [NVARCHAR](MAX) NULL, 
			[AssociatedProducts]             [NVARCHAR](4000) NULL, 
			[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
			[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
			[RowNumber]                      [INT] NULL, 
			SKU1                             VARCHAR(600),
			Id Int Identity(1,1)Primary Key
		);

		CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
		CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);
		
		---- Insert rows for import in bulk
		INSERT INTO #PimProductDetail_Bulk_Process
		([PimAttributeId], 
			[PimAttributeFamilyId], 
			[ProductAttributeCode], 
			[ProductAttributeDefaultValueId], 
			[PimAttributeValueId], 
			[LocaleId], 
			[PimProductId], 
			[AttributeValue], 
			[AssociatedProducts], 
			[ConfigureAttributeIds], 
			[ConfigureFamilyIds], 
			[RowNumber]
		)
		SELECT [PimAttributeId], 
				[PimAttributeFamilyId], 
				[ProductAttributeCode], 
				[ProductAttributeDefaultValueId], 
				[PimAttributeValueId], 
				[LocaleId], 
				[PimProductId], 
				ltrim(rtrim([AttributeValue])), 
				[AssociatedProducts], 
				[ConfigureAttributeIds], 
				[ConfigureFamilyIds], 
				[RowNumber]
		FROM #PimProductDetail1 a
		WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

		--select * from @PimProductDetail

		--select * from #PimProductDetail1

			    

		---------------------------Start Importing 
		if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
			drop table #TBL_DefaultAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeId')is not null
			drop table #TBL_MediaAttributeId

		if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
			drop table #TBL_TextAreaAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
			drop table #TBL_MediaAttributeValue

		if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
			drop table #TBL_DefaultAttributeValue

		if object_id ('tempdb..#ZnodePimAttributeValue')is not null
			drop table #ZnodePimAttributeValue

				
		CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

		CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

		CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

		DECLARE @ConfigureFamilyId VARCHAR(4000);

		INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetDefaultAttributeId]();

		INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetProductMediaAttributeId]();

		INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetTextAreaAttributeId]();

		SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

		if object_id ('tempdb..#cte')is not null
			drop table #cte

		SELECT AttributeValue AS SKU, RowNumber
		INTO #cte
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]';
              
		CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
		UPDATE a SET a.SKU1 = B.SKU
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

		----Update ZNodePimProduct 
		UPDATE ZNodePimProduct
		SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
			PublishStateId = @PublishStateIdForDraft, 
			ModifiedBy = @UserId, 
			ModifiedDate = @GetDate
		FROM ZNodePimProduct ZPP
		INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
		if object_id ('tempdb..#ZnodePimProduct')is not null
			drop table #ZnodePimProduct

		CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

		--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)

		----Insert into ZNodePimProduct 
		INSERT INTO ZnodePimProduct
		(PimAttributeFamilyId, 
			ExternalId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate, 
			PublishStateId
		)
		output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
		SELECT PimAttributeFamilyId, 
				RowNumber, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate, 
				@PublishStateIdForNotPublished
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]'
		AND PimProductId IS NULL;
            
		----Update newly created productIds
		UPDATE a SET a.PimProductId = b.PimProductId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

		----Insert Downloadable products into ZnodePimDownloadableProduct
		INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
		FROM #PimProductDetail_Bulk_Process PDSKU
		INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
		INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
		WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
		AND PDProdName.ProductAttributeCode = '[SKU]'
		AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
		AND PDDownload.AttributeValue = 'true'
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

		---- update ZnodePimAttributeValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeFamilyId = CASE
												WHEN Source.PimAttributeFamilyId = 0
												THEN NULL
												ELSE Source.PimAttributeFamilyId
											END, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate, 
				TARGET.PimProductId = SOURCE.PimProductId
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		FROM ZnodePimAttributeValue TARGET
		INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
		---- Inserting attribute data for Product 
		INSERT INTO ZnodePimAttributeValue 
		( 
			PimAttributeFamilyId, 
			PimProductId, PimAttributeId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate 
		)
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		SELECT 
			CASE
				WHEN Source.PimAttributeFamilyId = 0
				THEN @PimDefaultFamily
				ELSE Source.PimAttributeFamilyId
			END, 
			SOURCE.PimProductId, 
			ISNULL(SOURCE.PimAttributeId, 0),
			CASE
				WHEN SOURCE.ProductAttributeDefaultValueId = 0
				THEN NULL
				ELSE SOURCE.ProductAttributeDefaultValueId
			END, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #PimProductDetail_Bulk_Process SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValue TARGET
			WHERE TARGET.PimProductId = SOURCE.PimProductId
					AND TARGET.PimAttributeId = SOURCE.PimAttributeId
		);
		-------------------------
		if object_id ('tempdb..#MediaData')is not null
			drop table #MediaData

		CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

		---- Get Product Media Data
		INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
		SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
		CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

		---- Get product media attribute data
		INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
		SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
										AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
										AND a.PimProductId = b.PimProductId)
		INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
		---- Deleting product media attribute
		DELETE FROM ZnodePimProductAttributeMedia
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_MediaAttributeValue TBLM
			WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
					AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
					AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
		);

		---- update ZnodePimProductAttributeMedia : attribute data for Product
		UPDATE TARGET
			SET 
				TARGET.MediaPath = SOURCE.AttributeValue, 
				TARGET.MediaId = SOURCE.MediaId, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeMedia TARGET
		INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
													AND TARGET.MediaPAth = SOURCE.AttributeValue
													AND TARGET.LocaleId = SOURCE.LocaleId;
    
		---- inserting Media attribute data for Product
		INSERT INTO ZnodePimProductAttributeMedia 
		( 
			PimAttributeValueId, 
			LocaleId, MediaPath, 
			MediaId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				SOURCE.MediaId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #TBL_MediaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeMedia TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.MediaPAth = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		--------------------------
		if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
			drop table #Cte_TextAreaAttributeValue

		---- Getting text area data in temp #Cte_TextAreaAttributeValue
		SELECT a.PimAttributeValueId, 
				b.LocaleId, 
				AttributeValue
		INTO #Cte_TextAreaAttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
														AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
														AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

		---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.CreatedBy = @UserId, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeTextAreaValue TARGET
		INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting TextAreaValue attribute data for Product
		INSERT INTO ZnodePimProductAttributeTextAreaValue
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #Cte_TextAreaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeTextAreaValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
           
		---- Getting attribute default values for product
		INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
		SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
		CROSS APPLY dbo.split(b.AttributeValue, ',') SP
		INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
														AND SP.Item = d.AttributeDefaultValueCode;
		---- Deleting prodyuct attribute default value
		DELETE FROM ZnodePimProductAttributeDefaultValue
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_DefaultAttributeValue TBLAV
			WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
					AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
					AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
		);

		---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeDefaultValue TARGET
				INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																AND TARGET.LocaleId = SOURCE.LocaleId;

		---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimProductAttributeDefaultValue
		(
			PimAttributeValueId, 
			LocaleId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #TBL_DefaultAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeDefaultValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
               

		IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
			DROP TABLE #cte_ZnodePimAttributeValue;

		CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

		CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

		INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
		SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

		---- update ZnodePimAttributeValueLocale : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimAttributeValueLocale TARGET
		INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
														AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting AttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimAttributeValueLocale
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #cte_ZnodePimAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValueLocale TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		---- Inserting configurable products into ZnodePimConfigureProductAttribute
		INSERT INTO [ZnodePimConfigureProductAttribute]
		(PimProductId, 
			PimFamilyId, 
			PimAttributeId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT DISTINCT PD.PimProductId, 
				NULL, 
				q.PimAttributeId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #PimProductDetail_Bulk_Process PD
			CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
			INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
		WHERE NOT EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimConfigureProductAttribute RTR
			WHERE RTR.PimProductId = PD.PimProductId
					AND RTR.PimAttributeId = q.PimAttributeId
		);

		IF @LocaleId = @DefaultLocaleId
		BEGIN 	 
			DECLARE @sqlt NVARCHAr(max) = ''
			DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

			DECLARE Cur_AttributeDataUpdate CURSOR FOR 

			SELECT b.AttributeCode , PimAttributeId 
			FROM INFORMATION_SCHEMA.COLUMNS a 
			INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
			WHERE TABLE_NAME = 'ZnodePimProduct'
			AND IsCategory = 0 
			AND IsShowOnGrid = 1 
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail_Bulk_Process n  WHERE Replace(Replace(n.ProductAttributeCode, '[',''), ']','') = b.AttributeCode  )

			OPEN Cur_AttributeDataUpdate 
			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

			SET @sqlt = 'UPDATE a  
			SET '+@AttributeCodeAtt+'= AttributeValue 
			FROM ZnodePimProduct a 
			INNER JOIN #PimProductDetail_Bulk_Process m ON(m.PimProductId = a.pimProductId ) 
			WHERE  Replace(Replace(m.ProductAttributeCode, ''['',''''), '']'','''') = '''+@AttributeCodeAtt+'''
			' 

			EXEC (@sqlt)

			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			END 
			CLOSE Cur_AttributeDataUpdate
			DEALLOCATE Cur_AttributeDataUpdate 

		END 



		COMMIT TRAN ImportProducts;

		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
		END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;
		-----------Added Performance patch end

		

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = getdate()
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN ImportProducts;

		DELETE FROM ZnodePimConfigureProductAttribute  
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
		--AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
		--INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
		--INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
		--INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
		--INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
		--WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
		--AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimProductId = ZnodePimConfigureProductAttribute.PimProductId )
   			
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

	END TRY
    BEGIN CATCH
		ROLLBACK TRAN ImportProducts;
		INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		Select  46,ERROR_PROCEDURE(),ERROR_MESSAGE(),ERROR_LINE(),@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  
		
		SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;

		EXEC sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
		--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SELECT @SuccessRecordCount = 0
									
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus(3), 
		ProcessCompletedDate = GETDATE()
		WHERE ImportProcessLogId = @ImportProcessLogId;

        SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
		-- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
		-- ROLLBACK TRAN ImportProducts;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportImportErrorLog')
	DROP PROC Znode_ExportImportErrorLog
GO

CREATE PROCEDURE [dbo].[Znode_ExportImportErrorLog]
(
    @WhereClause NVARCHAR(MAX),
	@FileType NVARCHAR(20),
	@ImportProcessLogId INT,
	@Status	BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to export Import Error Log data based on input values.

	Unit Testing :
		EXEC [dbo].[Znode_ExportImportErrorLog]  @WhereClause='',@FileType=N'CSV',@ImportProcessLogId=1034,@Status=1
*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @Count INT, 
				@Table NVARCHAR(MAX),
				@SSQLString NVARCHAR(MAX),
				@ExportProcessLogId INT=0,
				@ImportType NVARCHAR(50);

		DECLARE @Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		SET @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause);

		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'RowNumber','zil.RowNumber')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ColumnName','zil.ColumnName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'Data','zil.Data')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ErrorDescription','zil.ErrorDescription')
		
		SET @ImportType =
                         (
						 SELECT TOP 1 NAME AS IMPORTTYPE FROM ZnodeImportProcessLog zip
                         inner join  ZnodeImportTemplate zit WITH (NOLOCK) ON zip.ImportTemplateId=zit.ImportTemplateId
                         inner join ZnodeImportHead zih WITH (NOLOCK) on zit.ImportHeadId=zih.ImportHeadId
                         Where zip.ImportProcessLogId=@ImportProcessLogId
						 );

		INSERT INTO ZnodeExportProcessLog (ExportType,FileType,[Status],ProcessStartedDate,ProcessCompletedDate,TableName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @ImportType,@FileType,'Started',GETDATE(),NULL,NULL,3,GETDATE(),3,GETDATE()

		SET @ExportProcessLogId = SCOPE_IDENTITY()

		SET @Table = 'Export'+ @ImportType +'_'+ CAST(@ExportProcessLogId As VARCHAR(20));

		UPDATE ZnodeExportProcessLog
		SET TableName = @Table
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SET @SSQLString='    	
				SELECT zil.ImportLogId, zil.ImportProcessLogId, ISNULL(zil.RowNumber, 0) [RowNumber], ISNULL(zil.ColumnName, '''') [ColumnName],
					ISNULL(zil.Data, '''') [ColumnValue], zm.MessageName + 
					CASE 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1)
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') like ''%Quantity%''  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') -1) 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Inventory'')  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''')  like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Inventory'') THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (44) AND '''+@ImportType+''' in (''Pricing'') THEN +''  ''+ isnull(DefaultErrorValue,''0000000.00'' )
						WHEN zm.MessageCode IN (129) AND '''+@ImportType+''' NOT IN (''Product'') THEN +'' ''+ isnull(DefaultErrorValue,''0000000.00'')+''.''
						ELSE ''''END ''ErrorDescription'' 
				INTO '+@Table+' 
				FROM ZnodeImportLog AS zil WITH (NOLOCK) 
				INNER JOIN ZnodeMessage AS zm WITH (NOLOCK) ON zil.ErrorDescription = CONVERT(VARCHAR(50) , zm.MessageCode)
				WHERE zil.ImportProcessLogId='+CAST(@ImportProcessLogId AS NVARCHAR(20))+' '+ @Fn_GetFilterWhereClause+'  			
				'
	    EXEC (@SSQLString);
		
		SET @Count = @@ROWCOUNT;
				
		UPDATE ZnodeExportProcessLog 
		SET [Status]= 'In Progress',
			ProcessCompletedDate = GETDATE()
		WHERE ExportProcessLogId =@ExportProcessLogId;

		SELECT TableName
		FROM ZnodeExportProcessLog
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SELECT @Count As [COUNT];

		SET @Status = 1;
	END TRY
 
	BEGIN CATCH
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'Znode_ExportImportErrorLog 
					@WhereClause = '+CAST(@WhereClause AS NVARCHAR(MAX))+',
					@FileType='+CAST(@FileType AS VARCHAR(20))+',
					@Status='+CAST(@Status AS VARCHAR(10));
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportImportErrorLog',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportImportErrorLogByTableName')
	DROP PROC Znode_ExportImportErrorLogByTableName
GO

CREATE PROCEDURE [dbo].[Znode_ExportImportErrorLogByTableName]
(
	@TableName	NVARCHAR(100),
	@WhereClause NVARCHAR(MAX),
	@Rows        INT           = 100,
	@PageNo      INT           = 1,
	@Order_BY    VARCHAR(100)  = '',
	@RowsCount   INT OUT
	--@Status		 BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to display export import error log data from respective export table based on input values.

	Unit Testing :
		EXEC [Znode_ExportImportErrorLogByTableName] @TableName='ExportProduct_443',@WhereClause ='',@Rows=50,@PageNo=1,@Order_BY='',@RowsCount=0	
*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @SSQLString NVARCHAR(MAX);

		DROP TABLE IF EXISTS tempdb..##TBL_ImportErrorLog;

		SET @SSQLString = '
		;With Cte_GetImportErrorLogDetails 
		 AS 
		 (
			SELECT *
			FROM '+@TableName+' WITH (NOLOCK) 						
		)
		,Cte_GetFilterImportErrorLog
		AS 
		(
		SELECT *,ROW_NUMBER() OVER (ORDER BY ImportProcessLogId DESC) As RowId,				
		Count(*)Over() CountNo 
		FROM Cte_GetImportErrorLogDetails CGPTL 
		WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'						
		)				
		SELECT *
		INTO ##TBL_ImportErrorLog
		FROM Cte_GetFilterImportErrorLog
		'+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows);
	

		EXEC (@SSQLString);

		SET @RowsCount =@@ROWCOUNT;
	
		ALTER TABLE ##TBL_ImportErrorLog 
		DROP COLUMN IF EXISTS RowId;

		ALTER TABLE ##TBL_ImportErrorLog
		DROP COLUMN IF EXISTS CountNo;

		SELECT * FROM ##TBL_ImportErrorLog;
		
		DROP TABLE IF EXISTS tempdb..##TBL_ImportErrorLog;
	END TRY
              			 
	BEGIN CATCH
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= ' EXEC Znode_ExportImportErrorLogByTableName
					@TableName = '+CAST(@TableName AS VARCHAR(100))+',
					@WhereClause = '+CAST(@WhereClause AS VARCHAR(MAX))+',
					@Rows='+CAST(@Rows AS VARCHAR(50))+',
					@PageNo='+CAST(@PageNo AS VARCHAR(50))+',
					@Order_BY='+CAST(@Order_BY AS VARCHAR(MAX))+',
					@RowsCount='+CAST(@RowsCount AS VARCHAR(50));
					
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportImportErrorLogByTableName',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPaymentSettingByUserDetails')
	DROP PROC Znode_GetPaymentSettingByUserDetails
GO

CREATE PROCEDURE [dbo].[Znode_GetPaymentSettingByUserDetails]
(
	@PortalId	INT,
	@UserId		INT,
	@RowsCount  INT OUT
)
AS
/*
	Summary: This Procedure is used to get payment details according to associated profile or portal.

	Unit Testing:

	EXEC [Znode_GetPaymentSettingByUserDetails] @PortalId=1, @UserId=1, @RowsCount=0
*/	
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @GuestProfileId INT;

		SELECT TOP 1 @GuestProfileId=ProfileId FROM ZnodeProfile WHERE ProfileName = 'Anonymous' AND @UserId = -1;
		SET @GuestProfileId=ISNULL(@GuestProfileId,0);

		DECLARE @ProfileIds As TABLE (ProfileId INT);

		INSERT INTO @ProfileIds
		SELECT DISTINCT ProfileId
		FROM ZnodeUserProfile
		WHERE UserId = @UserId
		UNION 
		SELECT DISTINCT ProfileId
		FROM ZnodeProfile
		WHERE ProfileId=@GuestProfileId AND @UserId = -1;

		DECLARE @ProfilePaymentSetting As TABLE (PaymentSettingId INT, DisplayOrder INT, PortalId INT);

		INSERT INTO @ProfilePaymentSetting
		SELECT DISTINCT PaymentSettingId, DisplayOrder, @PortalId As PortalId
		FROM ZnodeProfilePaymentSetting
		WHERE ProfileId IN (SELECT ProfileId FROM @ProfileIds) OR (ProfileId=@GuestProfileId AND @UserId = -1);

		DECLARE @PortalPaymentSetting As TABLE (PaymentSettingId INT, PaymentDisplayName NVARCHAR(1200), PortalId INT);

		INSERT INTO @PortalPaymentSetting
		SELECT DISTINCT PaymentSettingId, PaymentDisplayName, PortalId
		FROM ZnodePortalPaymentSetting
		WHERE IsUsedForWebStorePayment=1
			AND PortalId = @PortalId;

		DROP TABLE IF EXISTS #PaymentSetting;
		CREATE TABLE #PaymentSetting (PaymentSettingId INT, PaymentDisplayName NVARCHAR(1200), DisplayOrder INT, PortalId INT);

		IF EXISTS (SELECT * FROM @ProfileIds P WHERE EXISTS (SELECT * FROM ZnodePortalProfile WHERE ProfileId=P.ProfileId))
			OR EXISTS (SELECT * FROM @ProfileIds P WHERE EXISTS (SELECT * FROM ZnodeProfilePaymentSetting WHERE ProfileId=P.ProfileId))
		BEGIN
			INSERT INTO #PaymentSetting
			SELECT DISTINCT PoPS.PaymentSettingId, PoPS.PaymentDisplayName, PrPS.DisplayOrder, PoPS.PortalId
			FROM @PortalPaymentSetting PoPS
			INNER JOIN @ProfilePaymentSetting PrPS ON PoPS.PaymentSettingId=PrPS.PaymentSettingId;

			SET @RowsCount=@@ROWCOUNT;
		END

		IF @RowsCount=0
		BEGIN
			INSERT INTO #PaymentSetting
			SELECT DISTINCT PoPS.PaymentSettingId, PoPS.PaymentDisplayName, NULL AS DisplayOrder, @PortalId As PortalId
			FROM @PortalPaymentSetting PoPS;

			SET @RowsCount=@@ROWCOUNT;
		END

		DROP TABLE IF EXISTS #ZnodePortalPaymentApprovers;

		--Getting the payment portal approver details
		SELECT PaymentSettingId ,ZPPG.PortalPaymentGroupId,ZPA.PortalId 
		INTO #ZnodePortalPaymentApprovers
		FROM ZnodePortalPaymentApprovers ZPPA
		INNER JOIN [ZnodePortalPaymentGroup] ZPPG ON( ZPPA.PortalPaymentGroupId = ZPPG.PortalPaymentGroupId)
		INNER JOIN [ZnodePortalApproval] ZPA ON (ZPA.PortalApprovalId = ZPPG.PortalApprovalId)
		WHERE ZPA.EnableApprovalManagement =1 AND ZPA.PortalId = @PortalId AND ZPPG.isActive = 1;

		--Getting the payment methods details
		SELECT DISTINCT ZPS.PaymentSettingId, ZPS.PaymentApplicationSettingId, ZPS.PaymentTypeId, ZPS.PaymentGatewayId,
			ZPS.PaymentName, ZPS.IsActive, ISNULL(ZPPS.DisplayOrder, ZPS.DisplayOrder) DisplayOrder, ZPS.IsTestMode,
			ZPS.IsPoDocUploadEnable, ZPS.IsPoDocRequire, ZPS.CreatedBy, ZPS.CreatedDate, ZPS.ModifiedBy, ZPS.ModifiedDate,
			ZPPS.PortalId, ZP1.StoreName, NULL IsAssociated, NULL As ProfileId, NULL As ProfileName, ZPT.BehaviorType PaymentTypeName,
			ZPG.GatewayName,
			CASE WHEN @PortalId > 0 AND ZPPS.PaymentDisplayName IS NOT NULL
				THEN ZPPS.PaymentDisplayName ELSE ZPS.PaymentDisplayName END PaymentDisplayName, 
			NULL PaymentExternalId, 
			CAST(CASE WHEN YU.PaymentSettingId IS NOT NULL THEN 1 ELSE 0 END As BIT) AS IsApprovalRequired,
			ZPS.PaymentCode, ZPG.GatewayCode, ZPT.IsCallToPaymentAPI, ZPS.IsBillingAddressOptional, ZPS.IsOABRequired,
			YU.PortalPaymentGroupId, '' AS PublishState
		FROM ZnodePaymentSetting ZPS
		INNER JOIN ZnodePaymentType ZPT ON (ZPT.PaymentTypeId = ZPS.PaymentTypeId)
		LEFT JOIN ZnodePaymentGateway ZPG ON (ZPG.PaymentGatewayId= ZPS.PaymentGatewayId)
		INNER JOIN #PaymentSetting ZPPS ON (ZPS.PaymentSettingId = ZPPS.PaymentSettingId )
		INNER JOIN ZnodePortal ZP1 ON ZP1.PortalId = ZPPS.PortalId
		LEFT JOIN #ZnodePortalPaymentApprovers YU ON (YU.PaymentSettingId = ZPS.PaymentSettingId)
		WHERE ZPS.IsActive=1;

		DROP TABLE IF EXISTS #ZnodePortalPaymentApprovers;
		DROP TABLE IF EXISTS #PaymentSetting;
	END TRY
	BEGIN CATCH
		DECLARE @Status BIT;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPaymentSettingByUserDetails 
					@PortalId='+CAST(@PortalId AS VARCHAR(50))+',
					@UserId='+CAST(@UserId AS VARCHAR(50))+',
					@RowsCount='+CAST(@RowsCount AS VARCHAR(50));

		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_GetPaymentSettingByUserDetails',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetShippingListByUserDetails')
	DROP PROC Znode_GetShippingListByUserDetails
GO

CREATE PROCEDURE [dbo].[Znode_GetShippingListByUserDetails]
(
	@PortalId	INT,
	@UserId		INT,
	@RowsCount  INT OUT
)
AS
/*
	Summary: This Procedure is used to get shipping details according to associated profile or portal.

	Unit Testing:

	EXEC [Znode_GetShippingListByUserDetails]  @PortalId=1, @UserId=1, @RowsCount=0
*/
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GuestProfileId INT;

		SELECT TOP 1 @GuestProfileId=ProfileId FROM ZnodeProfile WHERE ProfileName = 'Anonymous' AND @UserId = -1;

		DECLARE @ProfileIds As TABLE (ProfileId INT);

		INSERT INTO @ProfileIds
		SELECT DISTINCT ProfileId
		FROM ZnodeUserProfile
		WHERE UserId = @UserId
		UNION 
		SELECT DISTINCT ProfileId
		FROM ZnodeProfile
		WHERE ProfileId=@GuestProfileId AND @UserId = -1;

		DECLARE @ProfileShipping As TABLE (ShippingId INT, DisplayOrder INT, PortalId INT);

		INSERT INTO @ProfileShipping
		SELECT DISTINCT ShippingId, DisplayOrder, @PortalId As PortalId
		FROM ZnodeProfileShipping
		WHERE ProfileId IN (SELECT ProfileId FROM @ProfileIds) OR (ProfileId=@GuestProfileId AND @UserId = -1);

		DECLARE @PortalShipping As TABLE (ShippingId INT, PortalShippingId INT, PortalId INT);

		INSERT INTO @PortalShipping
		SELECT DISTINCT ShippingId, PortalShippingId, PortalId
		FROM ZnodePortalShipping
		WHERE PortalId = @PortalId;

		DROP TABLE IF EXISTS #Shipping;
		CREATE TABLE #Shipping (ShippingId INT, PortalShippingId INT, DisplayOrder INT, PortalId INT);

		IF EXISTS (SELECT * FROM @ProfileIds P WHERE EXISTS (SELECT * FROM ZnodePortalProfile WHERE ProfileId=P.ProfileId))
			OR EXISTS (SELECT * FROM @ProfileIds P WHERE EXISTS (SELECT * FROM ZnodeProfileShipping WHERE ProfileId=P.ProfileId))
		BEGIN
			INSERT INTO #Shipping
			SELECT DISTINCT PoS.ShippingId, PoS.PortalShippingId, PrS.DisplayOrder, PoS.PortalId
			FROM @PortalShipping PoS
			INNER JOIN @ProfileShipping PrS ON PoS.ShippingId=PrS.ShippingId;

			SET @RowsCount=@@ROWCOUNT;
		END

		IF @RowsCount=0
		BEGIN
			INSERT INTO #Shipping
			SELECT DISTINCT PoS.ShippingId, PoS.PortalShippingId, NULL AS DisplayOrder, @PortalId As PortalId
			FROM @PortalShipping PoS;

			SET @RowsCount=@@ROWCOUNT;
		END

		--Getting the shipping methods details
		SELECT DISTINCT NULL As ProfileId, NULL As ProfileName,ZPS.PortalId, ZP1.StoreName,ZS.ShippingId,ZS.ShippingTypeId,
			ZS.ShippingCode,ZS.HandlingCharge,ZS.HandlingChargeBasedOn,ZS.DestinationCountryCode,ZS.StateCode,ZS.CountyFIPS,
			ZS.Description,ZS.IsActive,ISNULL(ZPS.DisplayOrder, ZS.DisplayOrder) DisplayOrder, ZS.ZipCode,ZS.CreatedDate,
			ZS.ModifiedDate, NULL IsAssociated ,ZST.Name ShippingTypeName , ZPS.PortalShippingId, NULL As ProfileShippingId,
			ZS.ShippingName,ZST.ClassName,ZS.DeliveryTimeframe
		FROM ZnodeShipping ZS
		INNER JOIN ZnodeShippingTypes ZST ON (ZST.ShippingTypeId = ZS.ShippingTypeId)
		INNER JOIN #Shipping ZPS ON ZS.ShippingId=ZPS.ShippingId
		INNER JOIN ZnodePortal ZP1 ON ZP1.PortalId = ZPS.PortalId
		WHERE ZS.IsActive=1;

		DROP TABLE IF EXISTS #Shipping;
	END TRY
	BEGIN CATCH
		DECLARE @Status BIT;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetShippingListByUserDetails 
					@PortalId='+CAST(@PortalId AS VARCHAR(50))+',
					@UserId='+CAST(@UserId AS VARCHAR(50))+',
					@RowsCount='+CAST(@RowsCount AS VARCHAR(50));

        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

        EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_GetShippingListByUserDetails',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

INSERT  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
    SELECT NULL ,'Export','DownloadExportFile',0,2,Getdate(),2,Getdate() 
    WHERE NOT EXISTS (SELECT 1 from ZnodeActions where ControllerName = 'Export' and ActionName = 'DownloadExportFile')

INSERT  INTO ZnodeActions (AreaName,ControllerName,ActionName,IsGlobalAccess,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
    SELECT NULL ,'Export','Deletelogs',0,2,Getdate(),2,Getdate() 
    WHERE NOT EXISTS (SELECT 1 from ZnodeActions where ControllerName = 'Export' and ActionName = 'Deletelogs')

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportImportErrorLog')
	DROP PROC Znode_ExportImportErrorLog
GO

CREATE PROCEDURE [dbo].[Znode_ExportImportErrorLog]
(
    @WhereClause NVARCHAR(MAX),
	@FileType NVARCHAR(20),
	@ImportProcessLogId INT,
	@Status	BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to export Import Error Log data based on input values.

	Unit Testing :
		EXEC [dbo].[Znode_ExportImportErrorLog]  @WhereClause='',@FileType=N'CSV',@ImportProcessLogId=1034,@Status=1
*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @Count INT, 
				@Table NVARCHAR(MAX),
				@SSQLString NVARCHAR(MAX),
				@ExportProcessLogId INT=0,
				@ImportType NVARCHAR(50);

		DECLARE @Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		SET @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause);

		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'RowNumber','zil.RowNumber')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ColumnName','zil.ColumnName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'Data','zil.Data')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ErrorDescription','zil.ErrorDescription')
		
		SET @ImportType =
                         (
						 SELECT TOP 1 NAME AS IMPORTTYPE FROM ZnodeImportProcessLog zip
                         inner join  ZnodeImportTemplate zit WITH (NOLOCK) ON zip.ImportTemplateId=zit.ImportTemplateId
                         inner join ZnodeImportHead zih WITH (NOLOCK) on zit.ImportHeadId=zih.ImportHeadId
                         Where zip.ImportProcessLogId=@ImportProcessLogId
						 );

		INSERT INTO ZnodeExportProcessLog (ExportType,FileType,[Status],ProcessStartedDate,ProcessCompletedDate,TableName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @ImportType,@FileType,'Started',GETDATE(),NULL,NULL,3,GETDATE(),3,GETDATE()

		SET @ExportProcessLogId = SCOPE_IDENTITY()

		SET @Table = 'ImportErrorLog'+ @ImportType +'_'+ CAST(@ExportProcessLogId As VARCHAR(20));

		UPDATE ZnodeExportProcessLog
		SET TableName = @Table
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SET @SSQLString='    	
				SELECT zil.ImportLogId ID, zil.ImportProcessLogId, ISNULL(zil.RowNumber, 0) [Row Number], ISNULL(zil.ColumnName, '''') [Column Name],
					ISNULL(zil.Data, '''') [Column Data], zm.MessageName + 
					CASE 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1)
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') like ''%Quantity%''  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') -1) 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Inventory'')  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''')  like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Inventory'') THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (44) AND '''+@ImportType+''' in (''Pricing'') THEN +''  ''+ isnull(DefaultErrorValue,''0000000.00'' )
						WHEN zm.MessageCode IN (129) AND '''+@ImportType+''' NOT IN (''Product'') THEN +'' ''+ isnull(DefaultErrorValue,''0000000.00'')+''.''
						ELSE ''''END ''Error Description'' 
				INTO '+@Table+' 
				FROM ZnodeImportLog AS zil WITH (NOLOCK) 
				INNER JOIN ZnodeMessage AS zm WITH (NOLOCK) ON zil.ErrorDescription = CONVERT(VARCHAR(50) , zm.MessageCode)
				WHERE zil.ImportProcessLogId='+CAST(@ImportProcessLogId AS NVARCHAR(20))+' '+ @Fn_GetFilterWhereClause+'  			
				'
	    EXEC (@SSQLString);
		
		SET @Count = @@ROWCOUNT;
				
		UPDATE ZnodeExportProcessLog 
		SET [Status]= 'In Progress',
			ProcessCompletedDate = GETDATE()
		WHERE ExportProcessLogId =@ExportProcessLogId;

		SELECT TableName
		FROM ZnodeExportProcessLog
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SELECT @Count As [COUNT];

		SET @Status = 1;
	END TRY
 
	BEGIN CATCH
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'Znode_ExportImportErrorLog 
					@WhereClause = '+CAST(@WhereClause AS NVARCHAR(MAX))+',
					@FileType='+CAST(@FileType AS VARCHAR(20))+',
					@Status='+CAST(@Status AS VARCHAR(10));
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportImportErrorLog',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO








IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'AspNet_SqlCacheRegisterTableStoredProcedure')
	DROP PROC AspNet_SqlCacheRegisterTableStoredProcedure
GO

CREATE PROCEDURE [dbo].[AspNet_SqlCacheRegisterTableStoredProcedure]
       @tableName NVARCHAR(450)
AS
     BEGIN
         DECLARE @triggerName AS NVARCHAR(3000);
         DECLARE @fullTriggerName AS NVARCHAR(3000);
         DECLARE @canonTableName NVARCHAR(3000);
         DECLARE @quotedTableName NVARCHAR(3000);
		 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

         /* Create the trigger name */

         SET @triggerName = REPLACE(@tableName , '[' , '__o__');
         SET @triggerName = REPLACE(@triggerName , ']' , '__c__');
         SET @triggerName = @triggerName+'_AspNet_SqlCacheNotification_Trigger';
         SET @fullTriggerName = 'dbo.['+@triggerName+']'; 

         /* Create the cannonicalized table name for trigger creation */

         /* Do not touch it if the name contains other delimiters */

         IF ( CHARINDEX('.' , @tableName) <> 0
              OR
              CHARINDEX('[' , @tableName) <> 0
              OR
              CHARINDEX(']' , @tableName) <> 0 )
             BEGIN
                 SET @canonTableName = @tableName;
             END
         ELSE
             BEGIN
                 SET @canonTableName = '['+@tableName+']';
             END; 

         /* First make sure the table exists */

         IF ( SELECT OBJECT_ID(@tableName , 'U') ) IS NULL
             BEGIN
                 RAISERROR('00000001' , 16 , 1);
                 RETURN;
             END;
         BEGIN TRAN;
         
         /* Insert the value into the notification table */

         IF NOT EXISTS ( SELECT tableName
                         FROM dbo.AspNet_SqlCacheTablesForChangeNotification WITH (NOLOCK)
                         WHERE tableName = @tableName
                       )
             BEGIN
                 IF NOT EXISTS ( SELECT tableName
                                 FROM dbo.AspNet_SqlCacheTablesForChangeNotification WITH (TABLOCKX)
                                 WHERE tableName = @tableName
                               )
                     BEGIN
                         INSERT INTO dbo.AspNet_SqlCacheTablesForChangeNotification
                         VALUES ( @tableName , @GetDate , 0
                                )
                     END
             END;

         /* Create the trigger */

         SET @quotedTableName = QUOTENAME(@tableName , '''');
         IF NOT EXISTS ( SELECT name
                         FROM sysobjects WITH (NOLOCK)
                         WHERE name = @triggerName
                               AND
                               type = 'TR'
                       )
             BEGIN
                 IF NOT EXISTS ( SELECT name
                                 FROM sysobjects WITH (TABLOCKX)
                                 WHERE name = @triggerName
                                       AND
                                       type = 'TR'
                               )
                     BEGIN
                         EXEC ('CREATE TRIGGER '+@fullTriggerName+' ON '+@canonTableName+'
                       FOR INSERT, UPDATE, DELETE AS BEGIN
                       SET NOCOUNT ON
                       EXEC dbo.AspNet_SqlCacheUpdateChangeIdStoredProcedure N'+@quotedTableName+'
                       END
                       ')
                     END
             END;
         COMMIT TRAN;
     END;



GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'ZnodeB2BCustomerMapping')
	DROP PROC ZnodeB2BCustomerMapping
GO

--- ZnodeB2BCustomerMapping @ImportHeadName = 'B2BCustomer', @TableName = 'tempdb..##B2BCustomer_7a6e2c3f-ad0c-4ba1-8d4d-827f6748db35'
CREATE PROCEDURE [dbo].[ZnodeB2BCustomerMapping]
(
	@ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200)
)
AS
Begin
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	declare @SQL varchar(max)
	DECLARE @TemplateId INT
	
	--------- template mapping 
	SELECT TOP 1 @TemplateId = ImportTemplateId FROM dbo.ZnodeImportTemplate 
	WHERE ImportHeadId = (SELECT ImportHeadId FROM ZnodeImportHead WHERE Name = @ImportHeadName )
	
	 IF OBJECT_ID ('tempdb..##GlobalAttributeColumnForMapping') is not null
			DROP TABLE tempdb..##GlobalAttributeColumnForMapping
	
	SET @SQL = '
			select isnull(Name ,'''') Name
			into ##GlobalAttributeColumnForMapping
			from tempdb.sys.columns a
			inner join ZnodeGlobalAttribute ZGA on a.Name = ZGA.AttributeCode where object_id = object_id('''+@TableName+''')'
	--print @SQL
	EXEC (@SQL)
		
		DELETE FROM ZnodeImportTemplateMapping WHERE ImportTemplateId = @TemplateId
		AND NOT EXISTS( SELECT * FROM ZnodeImportTemplate TM inner join ZnodeImportTemplateMapping ITM on TM.ImportTemplateId = ITM.ImportTemplateId
					WHERE TM.TemplateName='CustomerTemplate' and ZnodeImportTemplateMapping.SourceColumnName = ITM.SourceColumnName  )

		INSERT [dbo].[ZnodeImportTemplateMapping] ( [ImportTemplateId], [SourceColumnName], [TargetColumnName], [DisplayOrder], [IsActive], [IsAllowNull], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) 
		SELECT @TemplateId , CM.name as [SourceColumnName], CM.name AS [TargetColumnName], 1, 1, 1, 2, @GetDate, 2, @GetDate
		FROM ##GlobalAttributeColumnForMapping CM
		WHERE NOT EXISTS ( SELECT * FROM [ZnodeImportTemplateMapping] TM WHERE TM.ImportTemplateId = @TemplateId and CM.name = TM.SourceColumnName )

		IF OBJECT_ID ('tempdb..##GlobalAttributeColumnForMapping') is not null
			DROP TABLE tempdb..##GlobalAttributeColumnForMapping

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'ZnodeReport_ActivityLog')
	DROP PROC ZnodeReport_ActivityLog
GO

CREATE PROCEDURE [dbo].[ZnodeReport_ActivityLog]
(
		@PortalId		VARCHAR(max)  = ''
		,@BeginDate		DATE		  = NULL 
		,@EndDate       DATE          = NULL
		,@Category      NVARCHAR(510)	  = ''
) 
AS
/*
	 Summary : - This Procedure is used to get the activity log on the basis of portal and category 
	 Unit Testing
	 EXEC ZnodeReport_ActivityLog 2,'2017-01-01','2017-08-01',''
	*/
BEGIN 
 BEGIN TRY 
  SET NOCOUNT ON 
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
       IF ( @BeginDate  IS NULL   )
            BEGIN  
   -- If date is NULL then display current date activity log report.  
                SET @BeginDate = CONVERT(DATE,@GetDate,101);
            END  
        ELSE
        BEGIN
        SET @BeginDate = CONVERT(DATE,@BeginDate,101);  
        END
        
        SELECT  AL.[ActivityLogID],  
                AL.[ActivityLogTypeID],  
                Alt.[Name] [Name],  
                Alt.[TypeCategory]  AS 'Category',  
                AL.[ActivityCreateDate],  
                P.[StoreName] AS 'StoreName',  
                Al.ActivityEndDate,  
                AL.[Data1],  
                AL.[Data2],  
                AL.[Data3],  
                AL.[Status],  
                AL.[LongData],  
                AL.[Source],  
                AL.[Target],
                AL.[PortalID]  
        FROM    ZNodeActivityLog AL  
                INNER JOIN ZNodeActivityLogType Alt ON Alt.ActivityLogTypeID = AL.ActivityLogTypeID  
                INNER JOIN ZNodePortal P ON P.PortalId = AL.PortalId  
	    WHERE    (CAST(AL.[ActivityCreateDate] AS DATE) BETWEEN CASE
                                                                     WHEN @BeginDate IS NULL
                                                                     THEN CAST(AL.[ActivityCreateDate] AS DATE)
                                                                     ELSE @BeginDate
                                                                 END AND CASE
                                                                             WHEN @EndDate IS NULL
                                                                             THEN CAST(AL.[ActivityCreateDate] AS DATE)
                                                                             ELSE @EndDate
                                                                         END)
                AND Alt.TypeCategory LIKE '%' +CASE WHEN @Category = '0' THEN '' ELSE @Category END  + '%'  
                AND EXISTS(SELECT TOP 1 1 FROM dbo.split(@PortalId,',') SP WHERE (AL.PortalId = SP.Item OR @PortalId = '')  )
        ORDER BY AL.ActivityLogId DESC  

	END TRY 
	BEGIN CATCH 
	 DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
			 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_ActivityLog @PortalId = '+@PortalId+',@BeginDate='+CAST(@BeginDate AS VARCHAR(50))+',@EndDate='+CAST(@EndDate AS VARCHAR(50))+',@Category='+@Category+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'ZnodeReport_ActivityLog',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'ZnodeReport_DashboardQuotes')
	DROP PROC ZnodeReport_DashboardQuotes
GO

CREATE PROCEDURE [dbo].[ZnodeReport_DashboardQuotes]              
(             
	@PortalId  bigint  = null,        
	@AccountId bigint  = null,    
	@SalesRepUserId int = 0                
)              
AS               
/*              
     Summary:- This procedure is used to get the order details               
    Unit Testing:              
     EXEC [ZnodeReport_DashboardTopCategory]              
*/              
BEGIN              
BEGIN TRY              
SET NOCOUNT ON;              
	DECLARE @GetDate DATE = dbo.Fn_GetDate();
	DECLARE @TopItem TABLE (ItemName nvarchar(100),CustomerName varchar(302),ItemId nvarchar(10), Total numeric(28,6) , Date datetime,Symbol NVARCHAR(10))               
     
	DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('PriceRoundOff')      
        
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(select * from AspNetRoles ANR Where Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	Begin
		SET @SalesRepUserId = 0
	End              
  
	DECLARE @TBL_CultureCurrency TaBLE (Symbol Varchar(100),CurrencyCode varchar(100))              
	INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode)              
	SELECT Symbol,CultureCode FROM  ZnodeCulture ZC               
	DECLARE @PortalCurrencySymbol nvarchar(20)          
	DECLARE @DefaultCurrencySymbol nvarchar(20)            
            
	SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )          
	SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()           
          
	IF @PortalCurrencySymbol IS NULL           
	UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL          
	ELSE           
	UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL          
     
	CREATE TABLE #User(UserId INT, FirstName varchar(100), MiddleName varchar(100), LastName varchar(100), Email varchar(50), PhoneNumber varchar(50))

	IF @AccountId = -1
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber )
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber                    
		FROM ZnodeUser ZU           
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
		and ISNULL(ZU.AccountId,0) = 0      
	Else
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber )
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber          
		FROM ZnodeUser ZU           
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ where ZU.UserId = ZOQ.UserID )        
		and (ZU.AccountId = @AccountId or isnull(@AccountId,0) = 0 ) 
          
	Update ZOQ set OmsOrderStateId = (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and cast(ZOQ.QuoteExpirationDate as date) < @GetDate         
	and ZOQ.OmsOrderStateId <> (select top 1 OmsOrderStateId from ZnodeOMSOrderState where OrderStateName = 'EXPIRED')          
          
	insert into @TopItem(ItemId, ItemName,CustomerName,Date,Total,Symbol)          
	Select ZOQ.OmsQuoteId,ZOQ.QuoteNumber as QuoteNumber,isnull(U.FirstName,'')+case when U.MiddleName is not null then ' ' else '' end+ isnull(U.MiddleName,'')+' '+isnull(U.LastName,'') as CustomerName,          
	ZOQ.CreatedDate as QuoteDate,round(ZOQ.QuoteOrderTotal,@RoundOffValue) as TotalAmount        
	,COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol              
	from ZnodeOmsQuote ZOQ          
	Inner Join ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	INNER JOIN #User U ON ZOQ.UserId = U.UserId           
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )           
	where  (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId is null)          
	and (exists(select * from ZnodeSalesRepCustomerUserPortal SalRep where SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)              
	and ZOQT.QuoteTypeCode = 'QUOTE'
	
	SELECT TOP 5 ItemId, ItemName,CustomerName,Date,Total,Symbol FROM @TopItem Order by  Convert(datetime,Date )  desc                
   
END TRY              
              
BEGIN CATCH              
	DECLARE @Status BIT ;              
		SET @Status = 0;              
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),              
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardQuotes @PortalId = '+CAST(@PortalId AS VARCHAR(50));             
                                
				SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                  
                  
				EXEC Znode_InsertProcedureErrorLog              
	@ProcedureName = 'ZnodeReport_DashboardQuotes',              
	@ErrorInProcedure = @Error_procedure,              
	@ErrorMessage = @ErrorMessage,              
	@ErrorLine = @ErrorLine,              
	@ErrorCall = @ErrorCall;              
END CATCH              
              
END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'ZnodeReport_DashboardSales')
	DROP PROC ZnodeReport_DashboardSales
GO

CREATE PROCEDURE [dbo].[ZnodeReport_DashboardSales]            
(                  
	@PortalId  BIGINT  = NULL,        
	@AccountId BIGINT  = NULL,    
	@SalesRepUserId INT = 0                      
)            
AS            
/*            
    Summary:- This procedure is used to get the order details            
    Unit Testing:            
    EXEC [ZnodeReport_DashboardSales] @PortalId=8, @AccountId=0, @SalesRepUserId=19          
*/            
BEGIN            
BEGIN TRY            
SET NOCOUNT ON;            
    DECLARE @GetDate DATE = dbo.Fn_GetDate();
	DECLARE @TotalNewCust INT, @Frequency INT, @TotalQuotes INT, @TotalReturns INT            
         
	DECLARE @TBL_CultureCurrency TABLE (Symbol VARCHAR(100),CurrencyCode VARCHAR(100),IsDefault BIT)            
	INSERT INTO @TBL_CultureCurrency (Symbol,CurrencyCode,IsDefault)            
	SELECT Symbol,CultureCode, IsDefault FROM  ZnodeCulture ZC  -- Changed ZnodeCurrency to ZnodeCulture here.          
           
	DECLARE @PortalCurrencySymbol NVARCHAR(20)        
	DECLARE @DefaultCurrencySymbol NVARCHAR(20)          
   
	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
	SELECT * FROM ZnodeUser ZU
	INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
	INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
	INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
	WHERE Exists(SELECT * FROM AspNetRoles ANR WHERE Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id)
	AND ZU.UserId = @SalesRepUserId
	)  
	BEGIN
		SET @SalesRepUserId = 0
	End  
 
	  SET @PortalCurrencySymbol = [dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalID AS INTEGER) )        
	  SET @DefaultCurrencySymbol = [dbo].[Fn_GetDefaultCurrencySymbol]()        
       
	  IF @PortalCurrencySymbol IS NULL        
		UPDATE @TBL_CultureCurrency SET Symbol  =@DefaultCurrencySymbol WHERE  Symbol IS NULL        
	  ELSE        
		UPDATE @TBL_CultureCurrency SET Symbol  =@PortalCurrencySymbol WHERE  Symbol IS NULL        
       
	  -- this will CHECK for customer            
	  CREATE TABLE #User(UserId INT, FirstName VARCHAR(100), MiddleName VARCHAR(100), LastName VARCHAR(100), Email VARCHAR(50), PhoneNumber VARCHAR(50),AccountId INT )
 
	  CREATE TABLE #CalculateTotalValues(TotalOrders INT, TotalSales INT, Symbol VARCHAR(100))

	  IF @AccountId = -1
	  BEGIN
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber,AccountId)
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber ,ZU.AccountId                  
		FROM ZnodeUser ZU          
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ WHERE ZU.UserId = ZOQ.UserID )      
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
		AND ISNULL(ZU.AccountId,0)=0

		SELECT @TotalNewCust = COUNT(*)        
		FROM View_CustomerUserDetail CUD  WHERE                      
		(CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (ISNULL(CUD.AccountId,0)=0)    
     
		INSERT INTO #CalculateTotalValues(TotalOrders, TotalSales, Symbol)        
		SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                
		FROM ZNodeOmsOrder ZOO            
		INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
		INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
		LEFT JOIN ZnodeUser ZU ON (ZU.UserId = ZOOD.UserId)    
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
		WHERE ZOOD.IsActive =1 AND (P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0)    
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
		AND NOT EXISTS(SELECT * FROM ZnodeAccount ZA WHERE isnull(ZU.AccountId,0) = ZA.AccountId)
		Group by ZC.Symbol

		SELECT @TotalQuotes = COUNT(*)                    
		FROM ZnodeOmsQuote ZOQ          
		INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
		INNER JOIN #User U ON ZOQ.UserId = U.UserId          
		INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
		INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )          
		WHERE ZOQT.QuoteTypeCode = 'QUOTE' AND
		(ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId IS NULL)    
		AND NOT EXISTS(SELECT * FROM ZnodeAccount ZA WHERE isnull(U.AccountId,0) = ZA.AccountId)
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
     
		-- This will get returns count      
		SELECT @TotalReturns = COUNT(*)              
		FROM ZnodeRmaReturnDetails ZRRD          
		INNER JOIN ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
		INNER JOIN ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId          
		INNER JOIN ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )        
		WHERE isnull(ZRRD.RmaReturnStateId,0) NOT IN (SELECT ISNULL(RmaReturnStateId,0) FROM ZnodeRmaReturnState WHERE ReturnStateName = 'Not Submitted')          
		AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId IS NULL)    
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
		AND NOT EXISTS(SELECT * FROM ZnodeAccount ZA WHERE isnull(ZU.AccountId,0) = ZA.AccountId)
	 END
	 ELSE
	 BEGIN
			-- This will get quotes count
		INSERT INTO #User(UserId, FirstName, MiddleName, LastName, Email , PhoneNumber)
		SELECT ZU.UserId, ZU.FirstName, ZU.MiddleName, ZU.LastName, ZU.Email , ZU.PhoneNumber                
		FROM ZnodeUser ZU          
		WHERE EXISTS(SELECT * FROM ZnodeOmsQuote ZOQ WHERE ZU.UserId = ZOQ.UserID )    AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
     
		SELECT @TotalNewCust = COUNT(*)        
			FROM View_CustomerUserDetail CUD  WHERE                      
			(CUD.PortalId=@PortalId OR ISNULL(@PortalId,0)=0) AND  (CUD.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
     
		INSERT INTO #CalculateTotalValues (TotalOrders, TotalSales, Symbol)
		SELECT   count(*)  TotalOrders , sum(ZOOD.Total) TotalSales,      
		COALESCE (ZC.Symbol,[dbo].[Fn_GetPortalCurrencySymbol](CAST(@PortalId AS INTEGER)),[dbo].[Fn_GetDefaultCurrencySymbol]()) Symbol                      
		FROM ZNodeOmsOrder ZOO            
		INNER JOIN ZnodeOmsOrderDetails ZOOD ON(ZOOD.OmsOrderId = ZOO.OmsOrderId AND IsActive = 1)            
		INNER JOIN ZNodePortal P ON (P.PortalID = ZOOD.PortalId )        
		LEFT JOIN #User ZU ON (ZU.UserId = ZOOD.UserId)    
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOOD.CurrencyCode )            
		WHERE ZOOD.IsActive =1 AND (P.PortalId = @PortalId OR ISNULL(@PortalId,0)=0) AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)          
		Group by ZC.Symbol

		SELECT @TotalQuotes = COUNT(*)                    
		FROM ZnodeOmsQuote ZOQ          
		INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
		INNER JOIN #User U ON ZOQ.UserId = U.UserId          
		INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
		INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZOQ.CultureCode )          
		WHERE ZOQT.QuoteTypeCode = 'QUOTE' AND (ZOQ.PortalID = @PortalId OR @PortalId = 0 OR @PortalId IS NULL)          
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and U.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)      
     
		-- This will get returns count      
		SELECT @TotalReturns = COUNT(*)              
		FROM ZnodeRmaReturnDetails ZRRD          
		INNER JOIN ZnodeUser ZU ON ZRRD.UserId = ZU.UserId          
		INNER JOIN ZnodePortal ZP ON ZRRD.PortalId = ZP.PortalId          
		INNER JOIN ZnodeRmaReturnState ZRRS on ZRRD.RmaReturnStateId = ZRRS.RmaReturnStateId          
		LEFT JOIN @TBL_CultureCurrency ZC ON (ZC.CurrencyCode = ZRRD.CultureCode )        
		WHERE isnull(ZRRD.RmaReturnStateId,0) NOT IN (SELECT ISNULL(RmaReturnStateId,0) FROM ZnodeRmaReturnState WHERE ReturnStateName = 'Not Submitted')          
		AND (ZRRD.PortalId = @PortalId OR @PortalId  =0 or @PortalId IS NULL)  AND (ZU.AccountId = @AccountId OR ISNULL(@AccountId,0)=0)    
		AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = @SalesRepUserId and ZU.UserId = SalRep.CustomerUserid) or @SalesRepUserId = 0)  
 
	 END

	  UPDATE ZOQ set OmsOrderStateId = (SELECT top 1 OmsOrderStateId FROM ZnodeOMSOrderState WHERE OrderStateName = 'EXPIRED')          
	  FROM ZnodeOmsQuote ZOQ          
	  INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId          
	  INNER JOIN #User U ON ZOQ.UserId = U.UserId          
	  INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID          
	  INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId          
	  WHERE  (ZOQ.PortalID = @PortalId OR ISNULL(@PortalId,0)=0)          
	  and CAST(ZOQ.QuoteExpirationDate as date) < @GetDate         
	  and ZOQ.OmsOrderStateId <> (SELECT top 1 OmsOrderStateId FROM ZnodeOMSOrderState WHERE OrderStateName = 'EXPIRED')          
         
           
	  SELECT  Sum(TotalOrders) AS TotalOrders,Sum(TotalSales) AS TotalSales,Symbol,@TotalNewCust AS TotalNewCust, @TotalQuotes as TotalQuotes, @TotalReturns as TotalReturns      
	  INTO #TotalValues        
	  FROM #CalculateTotalValues          
	  GROUP BY Symbol            
       
	  IF NOT EXISTS(SELECT * FROM #TotalValues)
	  BEGIN
		SELECT 0 AS TotalOrders, CAST('0' AS VARCHAR(10)) AS TotalSales            
		 , 0 AS TotalNewCust ,0 AS TotalAvgOrders,0 AS TotalQuotes,0 as TotalReturns ,
		 [dbo].[Fn_GetDefaultCurrencySymbol]() Symbol     
 
	  END
	  ELSE
	  BEGIN
		 SELECT TotalOrders, [dbo].[Fn_GetDefaultPriceRoundOff](TotalSales) TotalSales            
		 , TotalNewCust ,Isnull(TotalOrders / @Frequency,0) AS TotalAvgOrders,TotalQuotes,TotalReturns ,Symbol        
		 FROM #TotalValues
	  END

       
END TRY            
BEGIN CATCH
	DECLARE @Status BIT ;            
	SET @Status = 0;            
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),            
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeReport_DashboardSales @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));            
                             
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                                
               
	EXEC Znode_InsertProcedureErrorLog            
	@ProcedureName = 'ZnodeReport_DashboardSales',            
	@ErrorInProcedure = @Error_procedure,            
	@ErrorMessage = @ErrorMessage,            
	@ErrorLine = @ErrorLine,            
	@ErrorCall = @ErrorCall;            
END CATCH            
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_CatalogProductDraftForPublish')
	DROP PROC Znode_CatalogProductDraftForPublish
GO

CREATE PROCEDURE Znode_CatalogProductDraftForPublish
(
	@PublishCatalogId INT
)
AS
BEGIN
BEGIN TRY 
SET NOCOUNT ON 
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	SELECT ZPCP.PimProductId
	INTO #DraftProduct
	FROM ZnodePimCategoryProduct ZPCP WITH(NOLOCK)
	INNER JOIN ZnodePimCategoryHierarchy ZPCH WITH(NOLOCK) ON ZPCP.PimCategoryId = ZPCH.PimCategoryId 
	WHERE ZPCH.PimCatalogId = @PublishCatalogId

	Update ZPP SET PublishStateId = 2, IsProductPublish = 0 , ModifiedDate = @GetDate 
	FROM ZnodePimProduct ZPP 
	WHERE EXISTS(SELECT * FROM #DraftProduct DP WHERE ZPP.PimProductId = DP.PimProductId)

	Update ZPP SET PublishStateId = 2, IsProductPublish = 0 , ModifiedDate = @GetDate 
	FROM ZnodePimProduct ZPP WITH(NOLOCK)
	where EXISTS(SELECT * FROM ZnodePimProductTypeAssociation PTA WITH(NOLOCK) WHERE ZPP.PimProductId = PTA.PimProductId 
			AND EXISTS(SELECT * FROM #DraftProduct DP WHERE PTA.PimParentProductId = DP.PimProductId))

	Update ZPP SET PublishStateId = 2, IsProductPublish = 0 , ModifiedDate = @GetDate 
	FROM ZnodePimProduct ZPP WITH(NOLOCK)
	where EXISTS(SELECT * FROM ZnodePimLinkProductDetail PTA WITH(NOLOCK) WHERE ZPP.PimProductId = PTA.PimProductId 
			AND EXISTS(SELECT * FROM #DraftProduct DP WHERE PTA.PimParentProductId = DP.PimProductId))

	Update ZPP SET PublishStateId = 2, IsProductPublish = 0 , ModifiedDate = @GetDate 
	FROM ZnodePimProduct ZPP WITH(NOLOCK)
	where EXISTS(SELECT * FROM ZnodePimLinkProductDetail PTA WITH(NOLOCK) WHERE ZPP.PimProductId = PTA.PimProductId 
			AND EXISTS(SELECT * FROM #DraftProduct DP WHERE PTA.PimParentProductId = DP.PimProductId))

	Update ZPP SET PublishStateId = 2, IsProductPublish = 0 , ModifiedDate = @GetDate 
	FROM ZnodePimProduct ZPP
	where EXISTS(SELECT * FROM ZnodePimAddOnProduct PTA WITH(NOLOCK)
			INNER JOIN ZnodePimAddOnProductDetail ZPA1 WITH(NOLOCK) ON PTA.PimAddOnProductId = ZPA1.PimAddOnProductId
			WHERE ZPP.PimProductId = PTA.PimProductId 
			AND EXISTS(SELECT * FROM #DraftProduct DP WHERE ZPA1.PimChildProductId = DP.PimProductId))
END TRY
BEGIN CATCH
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_CatalogProductDraftForPublish @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200));

    EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_CatalogProductDraftForPublish',
        @ErrorInProcedure = @Error_procedure,
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
           
END CATCH;
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteExportLogs')
	DROP PROC Znode_DeleteExportLogs
GO

CREATE PROCEDURE [dbo].[Znode_DeleteExportLogs]
(
	@DurationInDays			INT=0,
	@ExportProcessLogIds	NVARCHAR(MAX)=0,
	@Status					INT OUT
)
/*
	Summary: 
		This procedure is used to remove export logs/files and drop respective export tables.

	Unit Testing:
		EXEC dbo.Znode_DeleteExportLogs @DurationInDays=30, @ExportProcessLogIds=0, @Status=0
		EXEC dbo.Znode_DeleteExportLogs @DurationInDays=0, @ExportProcessLogIds='1,2,3,4', @Status=0
		EXEC dbo.Znode_DeleteExportLogs @DurationInDays=0, @ExportProcessLogIds='58', @Status=0
*/
AS
BEGIN
	BEGIN TRAN DeleteExportLogs;
	BEGIN TRY
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

		SET NOCOUNT ON;

		IF OBJECT_ID('tempdb..#TableName') IS NOT NULL
			DROP TABLE #TableName;

		IF OBJECT_ID('tempdb..#ExportProcessLog') IS NOT NULL
			DROP TABLE #ExportProcessLog;

		SELECT Item As ExportProcessLogId
		INTO #ExportProcessLog
		FROM dbo.Split(@ExportProcessLogIds,',');
		
		SELECT TableName
		INTO #TableName
		FROM ZnodeExportProcessLog
		WHERE ((@DurationInDays<>0 AND CONVERT(DATE,CreatedDate,121) < DATEADD(DAY,-@DurationInDays,CONVERT(DATE,@GetDate,121)))
			OR ExportProcessLogId IN (SELECT ExportProcessLogId FROM #ExportProcessLog))
			AND [Status] <> 'In Progress';

		--DECLARE @DropTable NVARCHAR(MAX) = (SELECT + STRING_AGG('DROP TABLE IF EXISTS '+TableName ,'; ') FROM #TableName);

		DECLARE @DropTable NVARCHAR(MAX);

		SELECT @DropTable = COALESCE(@DropTable + ' DROP TABLE IF EXISTS ', '') + TableName +';'
		FROM #TableName WHERE EXISTS (SELECT * FROM #TableName);

		IF LEN(@DropTable)>0
		BEGIN
			SET @DropTable = 'DROP TABLE IF EXISTS ' +  @DropTable;
			--,RIGHT(@DropTable,LEN(@DropTable)-2)

			--PRINT @DropTable
			EXEC (@DropTable);
		END

		DELETE
		FROM ZnodeExportProcessLog
		WHERE TableName IN (SELECT [TableName] FROM #TableName);

		SELECT TableName As [FileName]
		FROM #TableName;

		DROP TABLE #TableName;
		DROP TABLE #ExportProcessLog;

		SET @Status = 1;
	COMMIT TRAN DeleteExportLogs;
	END TRY
	BEGIN CATCH
		DECLARE @Error_Procedure VARCHAR(1000) = ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteExportLogs 
					@DurationInDays='+CAST(@DurationInDays AS VARCHAR(50))+',
					@ExportProcessLogIds='''+CAST(@ExportProcessLogIds AS NVARCHAR(MAX))+''',
					@Status='+CAST(@Status AS VARCHAR(50));
         
             SET @Status = 0;

             ROLLBACK TRAN DeleteExportLogs;

             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_DeleteExportLogs',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
		SELECT ERROR_MESSAGE()
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeletePublishCatalogEntity')
	DROP PROC Znode_DeletePublishCatalogEntity
GO

CREATE PROCEDURE [dbo].[Znode_DeletePublishCatalogEntity]
(
    @PublishCatalogId  INT = 0 
   ,@UserId int = 0
   ,@IsRevertPublish bit = 0 
   ,@NewGUID nvarchar(500) 

)
AS
/*
	To Remove all publish catalog details from related entities
	Unit Testing : 
	Declare @Status bit 
	Exec [dbo].[ZnodePublishPortalEntity]
     @PortalId  = 1 
	,@LocaleId  = 0 
	,@RevisionState = 'PRODUCTION' 
	,@UserId = 2
	,@Status = @Status 
	--Select @Status 
*/
BEGIN
SET NOCOUNT ON
BEGIN TRY 
		DECLARE @Status BIT = 0;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

		IF @IsRevertPublish = 0 AND @PublishCatalogId > 0 
		BEGIN 
		 

		 DELETE FROM ZnodePublishProductEntity WHERE ElasticSearchEvent = 2 AND ZnodeCatalogId = @PublishCatalogId
		  
		 UPDATE ZnodePublishProductEntity 
		 SET ElasticSearchEvent = 0 
		 WHERE ZnodeCatalogId = @PublishCatalogId
		 		
		 UPDATE  a
		 SET IsCatalogPublished = 1, IsCategoryPublished = 1 , IsProductPublished = 1
			, PublishStateId = b.PublishStateId, a.ModifiedDate = @GetDate
		 FROM ZnodePublishCatalogLog a 
		 INNER JOIN ZnodePublishState b ON (b.PublishStateCode = a.Token )
		 WHERE a.PublishStateId = 6 AND a.PublishType = 'Catalog'
		 AND a.PimCatalogId =@PublishCatalogId
			
		UPDATE ZnodePublishProgressNotifierEntity SET 
            ProgressMark =100, 
            IsCompleted  = 1,
            IsFailed =0
        WHERE  JobId = @NewGUID
		END 
		ELSE 
		BEGIN 

		UPDATE a
		SET Name = b.name , a.SalesPrice = b.SalesPrice , a.RetailPrice = b.RetailPrice, CurrencyCode = b.CurrencyCode , CultureCode= b.CultureCode, CurrencySuffix = b.CurrencySuffix
		, CategoryName = b.CategoryName, a.ElasticSearchEvent = 0 , ZnodeParentCategoryIds = b.ZnodeParentCategoryIds , a.SKU = b.SKU , a.SKULower = b.SKULower,a.Attributes = b.Attributes
		FROM ZnodePublishProductEntity a 
		INNER JOIN ZnodePublishProductEntityLog b ON (b.PublishProductEntityId = a.PublishProductEntityId)

			   
		 UPDATE  a
		 SET IsCatalogPublished = 0, IsCategoryPublished = 0 , IsProductPublished = 0
			, PublishStateId = b.PublishStateId, a.ModifiedDate = @GetDate
		 FROM ZnodePublishCatalogLog a 
		 INNER JOIN ZnodePublishState b ON (b.PublishStateCode = 'PUBLISH_FAILED' )
		 WHERE a.PublishStateId = 6 AND a.PublishType = 'Catalog'
		-- AND a.PimCatalogId =@PublishCatalogId

		INSERT INTO ZnodeProceduresErrorLog (ProcedureName,ErrorInProcedure,ErrorMessage,ErrorLine,ErrorCall,CreatedBy,CreatedDate)
		SELECT 'Publish Catalog','Elastic Fail', ' Publish Failed due to Elastic data update failure or connection issue'
			   ,0, 'Publish', 2, @GetDate

		UPDATE ZnodePublishProgressNotifierEntity SET 
            ProgressMark =80, 
            IsCompleted  = 0,
            IsFailed =1 
        WHERE  JobId = @NewGUID

		-- TRUNCATE TABLE ZnodePublishProductEntityLog
		END 
		SET @Status = 1 

		DELETE FROM ZnodePublishProgressNotifierEntity WHERE ProgressMark = 100 OR IsCompleted = 1 OR IsFailed = 1 
		SELECT @PublishCatalogId AS id,@Status AS Status;   
END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 Rollback transaction
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeletePublishCatalogEntity 
		@PublishCatalogId = '+CAST(@PublishCatalogId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@IsRevertPublish='+CAST(@IsRevertPublish AS VARCHAR(10))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_DeletePublishCatalogEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteSaveCartLineItem')
	DROP PROC Znode_DeleteSaveCartLineItem
GO

CREATE PROCEDURE [dbo].[Znode_DeleteSaveCartLineItem]
(
	  @OmsSavedCartLineItemId  int,
	  @Status bit OUT 
)
AS 
BEGIN
	BEGIN TRY
	SET NOCOUNT ON;
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	----Adding dummy CookieMappingId if not present
	if not exists(select * from ZnodeOmsCookieMapping where OmsCookieMappingId = 1)
	begin
		SET IDENTITY_INSERT ZnodeOmsCookieMapping ON
		INSERT INTO ZnodeOmsCookieMapping(OmsCookieMappingId,UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT 1,null,(select top 1 PortalId from ZnodePortal order by 1 ASC),2,@GetDate,2,@GetDate
		SET IDENTITY_INSERT ZnodeOmsCookieMapping OFF
	end

	----geting dummy OmsSavedCartId on basis of OmsCookieMappingId = 1 if not present then add
	Declare @OmsSavedCartId int = 0
	SET @OmsSavedCartId = (Select Top 1 OmsSavedCartId  from ZnodeOmsSavedCart With(NoLock) where OmsCookieMappingId = 1)
	If Isnull(@OmsSavedCartId ,0) = 0 
	Begin 
		Insert into ZnodeOmsSavedCart(OmsCookieMappingId,SalesTax,RecurringSalesTax,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select  1,null,null,2,@GetDate,2,@GetDate
		SET @OmsSavedCartId  = @@IDENTITY
	end
	
	DECLARE @TBL_DeleteSavecartLineitems TABLE (OmsSavedCartLineItemId int)

	IF OBJECT_ID(N'tempdb..#TBL_ZnodeOmsSavedCartLineItem') IS NOT NULL
		DROP TABLE #TBL_ZnodeOmsSavedCartLineItem

	----Getting date related to @OmsSavedCartLineItemId input parameter into a table
	select OmsSavedCartLineItemId,	ParentOmsSavedCartLineItemId   
	INTO #TBL_ZnodeOmsSavedCartLineItem  
	from ZnodeOmsSavedCartLineItem  with (NOLOCK)
	where OmsSavedCartLineItemId = @OmsSavedCartLineItemId or ParentOmsSavedCartLineItemId =@OmsSavedCartLineItemId 

	--selecting all the record which needs to be deleted
	INSERT INTO @TBL_DeleteSavecartLineitems	
	select OmsSavedCartLineItemId from #TBL_ZnodeOmsSavedCartLineItem
	union
	select ParentOmsSavedCartLineItemId from #TBL_ZnodeOmsSavedCartLineItem
		where not exists (select  OmsSavedCartLineItemId,	ParentOmsSavedCartLineItemId from ZnodeOmsSavedCartLineItem 
				where OmsSavedCartLineItemId != #TBL_ZnodeOmsSavedCartLineItem.OmsSavedCartLineItemId and  ParentOmsSavedCartLineItemId =#TBL_ZnodeOmsSavedCartLineItem.ParentOmsSavedCartLineItemId)
				and ParentOmsSavedCartLineItemId is not null

	BEGIN TRAN DeleteSaveCartLineItem;

	IF exists (select top 1 1 from @TBL_DeleteSavecartLineitems)
	Begin
			Update ZnodeOmsSavedCartLineItemDetails SET OmsSavedCartId = @OmsSavedCartId
			WHERE EXISTS
			(
				SELECT TOP 1 1
				FROM @TBL_DeleteSavecartLineitems DeleteSaveCart
				WHERE DeleteSaveCart.OmsSavedCartLineItemId = ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId
		
			);
	  
			Update ZnodeOmsSavedCartLineItem SET OmsSavedCartId = @OmsSavedCartId
			WHERE EXISTS
			(
				SELECT TOP 1 1
				FROM @TBL_DeleteSavecartLineitems DeleteSaveCart
				WHERE DeleteSaveCart.OmsSavedCartLineItemId = ZnodeOmsSavedCartLineItem.OmsSavedCartLineItemId
			);
	End	

	SET @Status = 1;
	COMMIT TRAN DeleteSaveCartLineItem;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE()	
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_DeleteSaveCartLineItem @OmsSavedCartLineItemId = '+CAST(@OmsSavedCartLineItemId AS varchar(max))
		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN DeleteSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_DeleteSaveCartLineItem', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteSavedCartItem')
	DROP PROC Znode_DeleteSavedCartItem
GO

CREATE PROCEDURE [dbo].[Znode_DeleteSavedCartItem]  
(  
	@OmsCookieMappingId INT = 0,  
	@UserId INT = 0,
	@PortalId INT,
	@Status Bit OUT  
)  
/*  
 EXEC Znode_DeleteSavedCartItem  
 
*/  
 
AS  
BEGIN  
--BEGIN TRAN  
SET NOCOUNT ON;
BEGIN TRY
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	IF(@OmsCookieMappingId < 1 AND @UserId > 0)
	BEGIN
		SET @OmsCookieMappingId =(SELECT TOP 1 OmsCookieMappingId FROM ZnodeOmsCookieMapping WITH (NOLOCK) WHERE UserId = @UserId AND ISNULL(PortalId,0) = @PortalId )
	END

    DECLARE @OmsSavedCartId INT =  ( SELECT TOP 1 OmsSavedCartId FROM ZnodeOmsSavedCart WITH (NOLOCK) WHERE OmsCookieMappingId = @OmsCookieMappingId )  
     
	 ----Adding dummy CookieMappingId if not present
	IF NOT EXISTS(SELECT * FROM ZnodeOmsCookieMapping WITH (NOLOCK) where OmsCookieMappingId = 1)
	BEGIN
		SET IDENTITY_INSERT ZnodeOmsCookieMapping ON
		INSERT INTO ZnodeOmsCookieMapping(OmsCookieMappingId,UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT 1,null,(select top 1 PortalId from ZnodePortal order by 1 ASC),2,@GetDate,2,@GetDate
		SET IDENTITY_INSERT ZnodeOmsCookieMapping OFF
	END

	----geting dummy OmsSavedCartId on basis of OmsCookieMappingId = 1 if not present then add
	Declare @OmsSavedCartIdDummy int = 0
	SET @OmsSavedCartIdDummy = (Select Top 1 OmsSavedCartId  from ZnodeOmsSavedCart With(NoLock) where OmsCookieMappingId = 1)
	IF Isnull(@OmsSavedCartIdDummy ,0) = 0 
	BEGIN 
		INSERT INTO ZnodeOmsSavedCart(OmsCookieMappingId,SalesTax,RecurringSalesTax,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT  1,null,null,2,@GetDate,2,@GetDate
		SET @OmsSavedCartIdDummy  = @@IDENTITY
	END
   
	UPDATE ZnodeOmsSavedCartLineItem SET OmsSavedCartId = @OmsSavedCartIdDummy
	WHERE ZnodeOmsSavedCartLineItem.OmsSavedCartId = @OmsSavedCartId  
 
  SET @Status = 1  
 
  SELECT @OmsCookieMappingId Id , CAST(1 AS BIT ) Status  
 
--COMMIT TRAN  
 
END TRY  
BEGIN CATCH  
	--ROLLBACK TRAN
    SET @Status = 1  
  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteSavedCartItem @OmsCookieMappingId = '+CAST(@OmsCookieMappingId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
	SELECT @OmsCookieMappingId Id , CAST(0 AS BIT ) Status                  
		  
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_DeleteSavedCartItem',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall; 
    
END CATCH  
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteStockNotifications')
	DROP PROC Znode_DeleteStockNotifications
GO

Create PROCEDURE [dbo].[Znode_DeleteStockNotifications]
AS
BEGIN
	BEGIN TRY
	DECLARE @Status BIT;
	declare @DeleteSentEmail int , @DeletePendingEmails int
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	select @DeleteSentEmail = (select Top 1  FeatureValues from ZnodeGlobalSetting where FeatureName = 'DeleteAlreadySentEmails')
	select @DeletePendingEmails = (select Top 1  FeatureValues from ZnodeGlobalSetting where FeatureName = 'DeletePendingEmails')

	IF OBJECT_ID('tempdb..#Tbl_StockNotice') IS NOT NULL
	DROP TABLE #Tbl_StockNotice

				Create TABLE #Tbl_StockNotice
				(
					  StockNoticeId  int,
					  EmailId    varchar(100),
					  DateDiffSent  int,
					  DateDiffPending int,
					  IsEmailSent bit
			    );

  insert into #Tbl_StockNotice(StockNoticeId, EmailId, DateDiffSent, DateDiffPending, IsEmailSent)
  select ZSN.StockNoticeId, ZSN.EmailId, (SELECT DATEDIFF(day,ZSN.ModifiedDate,  @GetDate)) as DateDiffSent ,
  (SELECT DATEDIFF(day, ZSN.CreatedDate, @GetDate )) as DateDiffPending,ZSN.IsEmailSent  from ZnodeStockNotice ZSN

	
	DELETE FROM ZnodeStockNotice 
    WHERE StockNoticeId IN (SELECT StockNoticeId FROM #Tbl_StockNotice WHERE (IsEmailSent = 0 AND DateDiffPending > @DeletePendingEmails)
                   OR (IsEmailSent = 1 AND DateDiffSent > @deleteSentEmail))
		 
		 SET @Status = 1  
			  SELECT 1 AS ID,@Status AS Status; 
	
	END TRY

	BEGIN CATCH
		  SET @Status =0  
			  SELECT 1 AS ID,@Status AS Status; 
		select @Status
		DECLARE @Error_procedure VARCHAR(1000) = ERROR_PROCEDURE()
			,@ErrorMessage NVARCHAR(MAX) = ERROR_MESSAGE()
			,@ErrorLine VARCHAR(100) = ERROR_LINE()
			,@ErrorCall NVARCHAR(MAX) = 'EXEC Znode_DeleteStockNotifications';
		SELECT 0 AS ID
			,CAST(0 AS BIT) AS STATUS;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_DeleteStockNotifications'
			,@ErrorInProcedure = ''
			,@ErrorMessage = @ErrorMessage
			,@ErrorLine = @ErrorLine
			,@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportFormSubmissions')
	DROP PROC Znode_ExportFormSubmissions
GO

CREATE PROCEDURE [dbo].[Znode_ExportFormSubmissions] 
(
    @WhereClause NVARCHAR(MAX),
	@FileType NVARCHAR(20),
	@Status	BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to export FormSubmissions data based on input values.

	Unit Testing :
		EXEC Znode_ExportFormSubmissions @WhereClause='',@FileType=N'CSV',@Status=1
		EXEC Znode_ExportFormSubmissions @WhereClause=N'formcode like ''%BottleSuggestionForm%''',@FileType=N'CSV',@Status=1
		EXEC Znode_ExportFormSubmissions @WhereClause=N'storename like ''%QA Znode Bottles%''',@FileType=N'CSV',@Status=1
		EXEC Znode_ExportFormSubmissions @WhereClause=N'username like ''%shubham.yende@yopmail.com%''',@FileType=N'CSV',@Status=1
		EXEC Znode_ExportFormSubmissions @WhereClause=N'fullname like ''%Tapesh D%''',@FileType=N'CSV',@Status=1
		EXEC Znode_ExportFormSubmissions @WhereClause=N'CreatedDate between ''05/19/2022 12:00:00 am'' and ''05/19/2022 11:59:59 pm''',@FileType=N'CSV',@Status=1

*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ExportProcessLogId INT = 0, @Count INT, @Table NVARCHAR(MAX), @GLobalAttributeCode NVARCHAR(MAX), @SSQLString NVARCHAR(MAX);
		DECLARE @Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

		SET @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause);

		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'FormCode','ZFB.FormCode')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'StoreName','ZP.StoreName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'UserName','ZU.UserName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'FullName','ZU.FullName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'CreatedDate','SS.CreatedDate')
			
		INSERT INTO ZnodeExportProcessLog (ExportType,FileType,[Status],ProcessStartedDate,ProcessCompletedDate,TableName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT 'FormSubmissions',@FileType,'Started',@GetDate,NULL,NULL,3,@GetDate,3,@GetDate

		SET @ExportProcessLogId = SCOPE_IDENTITY()

		SET @Table = 'ExportFormSubmissions'+'_'+ CAST(@ExportProcessLogId As VARCHAR(20));

		UPDATE ZnodeExportProcessLog
		SET TableName = @Table
		WHERE ExportProcessLogId = @ExportProcessLogId;

		IF OBJECT_ID('tempdb..[#GlobalAttribute]') IS NOT NULL
			DROP TABLE tempdb..[#GlobalAttribute];

		IF OBJECT_ID('tempdb..[##GLobalAttributeData]') IS NOT NULL
			DROP TABLE tempdb..[##GLobalAttributeData];
					
		SELECT A.FormBuilderSubmitId,C.AttributeCode
			,CASE WHEN B.MediaPath IS NOT NULL THEN RIGHT(B.MediaPath,LEN(B.MediaPath)-(CHARINDEX('--',B.MediaPath,1)+1)) ELSE B.AttributeValue END As AttributeValue
			, B.GlobalAttributeDefaultValueId, B.LocaleId
		INTO #GlobalAttribute
		FROM ZnodeFormBuilderGlobalAttributeValue A WITH (NOLOCK)
		INNER JOIN ZnodeFormBuilderGlobalAttributeValueLocale B WITH (NOLOCK) ON B.FormBuilderGlobalAttributeValueId=A.FormBuilderGlobalAttributeValueId
		INNER JOIN ZnodeGlobalAttribute C WITH (NOLOCK) ON C.GlobalAttributeId=A.GlobalAttributeId;

		UPDATE aa
		SET AttributeValue=CASE WHEN aa.AttributeValue IS NULL THEN RIGHT(h.AttributeDefaultValueCode,LEN(h.AttributeDefaultValueCode)-(CHARINDEX('--',h.AttributeDefaultValueCode,1)+1)) ELSE aa.AttributeValue END
		FROM #GlobalAttribute aa
		INNER JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId
		WHERE ISNULL(aa.AttributeValue,'')='';

		UPDATE h
		SET h.AttributeValue=RIGHT(g.AttributeDefaultValue,LEN(g.AttributeDefaultValue)-(CHARINDEX('--',g.AttributeDefaultValue,1)+1))
		FROM #GlobalAttribute h
		INNER JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
        WHERE ISNULL(h.AttributeValue,'')='' AND g.LocaleId=h.LocaleId;

		ALTER TABLE #GlobalAttribute DROP COLUMN IF EXISTS GlobalAttributeDefaultValueId;
		ALTER TABLE #GlobalAttribute DROP COLUMN IF EXISTS LocaleId;
		
		SELECT @GLobalAttributeCode = STUFF((
		SELECT DISTINCT ',' + AttributeCode
		FROM #GlobalAttribute
		FOR XML PATH('') 
		), 1, 1, '');

		SET @SSQLString ='SELECT * INTO ##GLobalAttributeData
		FROM (
		SELECT FormBuilderSubmitId,AttributeCode, AttributeValue FROM #GlobalAttribute
		)T
		PIVOT(MAX(Attributevalue) FOR AttributeCode IN ('+@GLobalAttributeCode+'))PIV'

		EXEC (@SSQLString);
		
		SET @SSQLString='SELECT ZFB.FormCode,ZP.StoreName,ZU.UserName,ZU.FullName,SS.CreatedDate,V.*
		INTO '+@Table+'
		FROM ZnodeFormBuilderSubmit ss WITH (NOLOCK) 
		INNER JOIN ZnodeFormBuilder ZFB WITH (NOLOCK) on SS.FormBuilderId=ZFB.FormBuilderId
		INNER JOIN ZnodePortal ZP WITH (NOLOCK) ON ZP.PortalId=SS.PortalId 
		LEFT JOIN View_CustomerUserDetail ZU WITH (NOLOCK) ON ZU.UserId=SS.UserId												
		LEFT JOIN ##GLobalAttributeData V ON (V.FormBuilderSubmitId=SS.FormBuilderSubmitId)
		WHERE 1=1 '+ @Fn_GetFilterWhereClause+'
		'		
		EXEC (@SSQLString);
		
		SET @Count = @@ROWCOUNT;
				
		IF OBJECT_ID('tempdb..[#GlobalAttribute]') IS NOT NULL
			DROP TABLE tempdb..[#GlobalAttribute];

		IF OBJECT_ID('tempdb..[##GLobalAttributeData]') IS NOT NULL
			DROP TABLE tempdb..[##GLobalAttributeData];
		
		SET @GetDate = dbo.Fn_GetDate();

		UPDATE ZnodeExportProcessLog 
		SET [Status]= 'In Progress',
			ProcessCompletedDate = dbo.Fn_GetDate()
		WHERE ExportProcessLogId =@ExportProcessLogId;

		SELECT TableName
		FROM ZnodeExportProcessLog
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SELECT @Count As [Count];

		SET @Status = 1;
	END TRY
 
	BEGIN CATCH
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'Znode_ExportFormSubmissions 
					@WhereClause = '+CAST(@WhereClause AS NVARCHAR(MAX))+',
					@FileType='+CAST(@FileType AS VARCHAR(20))+',
					@Status='+CAST(@Status AS VARCHAR(10));
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportFormSubmissions',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportImportErrorLog')
	DROP PROC Znode_ExportImportErrorLog
GO

CREATE PROCEDURE [dbo].[Znode_ExportImportErrorLog]
(
    @WhereClause NVARCHAR(MAX),
	@FileType NVARCHAR(20),
	@ImportProcessLogId INT,
	@Status	BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to export Import Error Log data based on input values.

	Unit Testing :
		EXEC [dbo].[Znode_ExportImportErrorLog]  @WhereClause='',@FileType=N'CSV',@ImportProcessLogId=1034,@Status=1
*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @Count INT, 
				@Table NVARCHAR(MAX),
				@SSQLString NVARCHAR(MAX),
				@ExportProcessLogId INT=0,
				@ImportType NVARCHAR(50);

		DECLARE @Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		SET @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause);

		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'RowNumber','zil.RowNumber')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ColumnName','zil.ColumnName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'Data','zil.Data')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ErrorDescription','zil.ErrorDescription')
		
		SET @ImportType =
                         (
						 SELECT TOP 1 NAME AS IMPORTTYPE FROM ZnodeImportProcessLog zip
                         inner join  ZnodeImportTemplate zit WITH (NOLOCK) ON zip.ImportTemplateId=zit.ImportTemplateId
                         inner join ZnodeImportHead zih WITH (NOLOCK) on zit.ImportHeadId=zih.ImportHeadId
                         Where zip.ImportProcessLogId=@ImportProcessLogId
						 );

		INSERT INTO ZnodeExportProcessLog (ExportType,FileType,[Status],ProcessStartedDate,ProcessCompletedDate,TableName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @ImportType,@FileType,'Started',@GetDate,NULL,NULL,3,@GetDate,3,@GetDate

		SET @ExportProcessLogId = SCOPE_IDENTITY()

		SET @Table = 'ImportErrorLog'+ @ImportType +'_'+ CAST(@ExportProcessLogId As VARCHAR(20));

		UPDATE ZnodeExportProcessLog
		SET TableName = @Table
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SET @SSQLString='    	
				SELECT zil.ImportLogId ID, zil.ImportProcessLogId, ISNULL(zil.RowNumber, 0) [Row Number], ISNULL(zil.ColumnName, '''') [Column Name],
					ISNULL(zil.Data, '''') [Column Data], zm.MessageName + 
					CASE 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1)
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') like ''%Quantity%''  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') -1) 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Inventory'')  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''')  like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Inventory'') THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (44) AND '''+@ImportType+''' in (''Pricing'') THEN +''  ''+ isnull(DefaultErrorValue,''0000000.00'' )
						WHEN zm.MessageCode IN (129) AND '''+@ImportType+''' NOT IN (''Product'') THEN +'' ''+ isnull(DefaultErrorValue,''0000000.00'')+''.''
						ELSE ''''END ''Error Description'' 
				INTO '+@Table+' 
				FROM ZnodeImportLog AS zil WITH (NOLOCK) 
				INNER JOIN ZnodeMessage AS zm WITH (NOLOCK) ON zil.ErrorDescription = CONVERT(VARCHAR(50) , zm.MessageCode)
				WHERE zil.ImportProcessLogId='+CAST(@ImportProcessLogId AS NVARCHAR(20))+' '+ @Fn_GetFilterWhereClause+'  			
				'
	    EXEC (@SSQLString);
		
		SET @Count = @@ROWCOUNT;
				
		SET @GetDate = dbo.Fn_GetDate();

		UPDATE ZnodeExportProcessLog 
		SET [Status]= 'In Progress',
			ProcessCompletedDate = @GetDate
		WHERE ExportProcessLogId =@ExportProcessLogId;

		SELECT TableName
		FROM ZnodeExportProcessLog
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SELECT @Count As [COUNT];

		SET @Status = 1;
	END TRY
 
	BEGIN CATCH
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'Znode_ExportImportErrorLog 
					@WhereClause = '+CAST(@WhereClause AS NVARCHAR(MAX))+',
					@FileType='+CAST(@FileType AS VARCHAR(20))+',
					@Status='+CAST(@Status AS VARCHAR(10));
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportImportErrorLog',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetEligibleOrderNumberListForReturn')
	DROP PROC Znode_GetEligibleOrderNumberListForReturn
GO

CREATE PROCEDURE [dbo].[Znode_GetEligibleOrderNumberListForReturn]
( @UserId			int,
  @PortalId         INT,
  @MaxDays          INT,
  @OrderNumber      varchar(200) ='',
  @WhereClause		varchar(2000)= '',
  @PageSize			Int = 50
)
AS
/*
     Summary:- This Procedure is used to Get Eligible OrderNumber List For Return
     Unit Testing 
	 begin tran
     EXEC Znode_GetEligibleOrderNumberListForReturn @UserId=2,@PortalId=7,@MaxDays=90,@OrderNumber='',@WhereClause='',@PageSize=10
	 rollback tran
*/
     BEGIN
         BEGIN TRY
            SET NOCOUNT ON;
			DECLARE @SQL NVARCHAR(MAX), @OrderLineItemRelationshipTypeId int
			DECLARE @GetDate DATE = dbo.Fn_GetDate();

			select @OrderLineItemRelationshipTypeId = OrderLineItemRelationshipTypeId 
			from ZnodeOmsOrderLineItemRelationshipType where Name = 'Bundles' 
			
			select OmsReturnOrderLineItemsId,RRD.OmsOrderId, RRD.OrderNumber, RRD.OmsOrderDetailsId, RRLI.OmsOrderLineItemsId , 
			      sum(case when RRD.RmaReturnStateId  in (50,60,70,80) then isnull(RRLI.ReturnedQuantity,0) else isnull(RRLI.ExpectedReturnQuantity,0) end) ReturnQuantity
			into #RmaReturnDetails
			from ZnodeRmaReturnDetails RRD
			inner join ZnodeRmaReturnLineItems RRLI on RRD.RmaReturnDetailsId = RRLI.RmaReturnDetailsId
			WHERE 
			--case when RRD.RmaReturnStateId  in (50,70,80) then RRLI.RmaReturnStateId else 0 end <> case when RRD.RmaReturnStateId  in (50,70,80) then 60 else 1 end and
			OmsReturnOrderLineItemsId is null AND RRD.RmaReturnStateId  <> 20
			group by RRD.OmsOrderId, RRD.OrderNumber, RRD.OmsOrderDetailsId, RRLI.OmsOrderLineItemsId,OmsReturnOrderLineItemsId


			----considering child entry other than bundle products
			select distinct zo.OrderNumber, zo.CreatedDate  
			into #cte_OrderData
			from ZnodeOmsOrder zo
			inner join ZnodeOmsOrderDetails zod on zo.OmsOrderId = zod.OmsOrderId 
			inner join ZnodeOmsOrderLineItems zoli on zoli.OmsOrderDetailsId = zod.OmsOrderDetailsId
			left join ZnodeRmaReturnDetails zrd on zo.OmsOrderId = zrd.OmsOrderId 
			and RmaReturnStateId = (select RmaReturnStateId from ZnodeRmaReturnState where RmaReturnStateId = 60)
			where  zod.UserId = @UserId and zod.PortalId = @PortalId and zod.IsActive = 1
			and case when zoli.ShipDate is not null and zoli.OrderLineItemStateId = (Select top 1 OmsOrderStateId from ZnodeOmsOrderState where OrderStateName='Shipped') then CAST(DATEADD(DD,@MaxDays,zoli.ShipDate) AS Date) else CAST(DATEADD(DD,@MaxDays,zod.OrderDate) AS Date) end > @GetDate
			and zoli.OrderLineItemStateId in (SELECT OmsOrderStateId FROM ZnodeOmsOrderState ZOS where ZOS.OmsOrderStateId in(10, 20) ) 
			and zoli.OrderLineItemRelationshipTypeId is not NULL and zoli.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeId
			and zoli.IsActive=1 and (zo.OrderNumber = @OrderNumber or @OrderNumber = '')
			and not exists(SELECT * FROM ZnodeOmsOrderState ZOS where ZOS.OmsOrderStateId in (40,140) and zod.OmsOrderStateId = ZOS.OmsOrderStateId)  
			and not exists(select * from #RmaReturnDetails RD where zod.OmsOrderDetailsId = RD.OmsOrderDetailsId AND RD.OmsOrderLineItemsId=zoli.OmsOrderLineItemsId and zoli.Quantity = RD.ReturnQuantity)
			and not exists(select * from ZnodeOMSOrderLineItemRelationshipType Addon where Name = 'AddOns' and Addon.OrderLineItemRelationshipTypeId = zoli.OrderLineItemRelationshipTypeId) 
			
			-----Considering only parent entry in return for bundle products
			insert into #cte_OrderData
			select distinct zo.OrderNumber, zo.CreatedDate  
			from ZnodeOmsOrder zo
			inner join ZnodeOmsOrderDetails zod on zo.OmsOrderId = zod.OmsOrderId 
			inner join ZnodeOmsOrderLineItems zoli on zoli.OmsOrderDetailsId = zod.OmsOrderDetailsId
			inner join ZnodeOmsOrderLineItems zoli1 on zoli1.ParentOmsOrderLineItemsId = zoli.OmsOrderLineItemsId
			left join ZnodeRmaReturnDetails zrd on zo.OmsOrderId = zrd.OmsOrderId 
			and RmaReturnStateId = (select RmaReturnStateId from ZnodeRmaReturnState where RmaReturnStateId = 60)
			where  zod.UserId = @UserId and zod.PortalId = @PortalId and zod.IsActive = 1
			and case when zoli.ShipDate is not null and zoli.OrderLineItemStateId = (Select top 1 OmsOrderStateId from ZnodeOmsOrderState where OrderStateName='Shipped') then CAST(DATEADD(DD,@MaxDays,zoli.ShipDate) AS Date) else CAST(DATEADD(DD,@MaxDays,zod.OrderDate) AS Date) end > @GetDate
			and zoli.OrderLineItemStateId in (SELECT OmsOrderStateId FROM ZnodeOmsOrderState ZOS where ZOS.OmsOrderStateId in(10, 20) ) 
			and zoli.OrderLineItemRelationshipTypeId is NULL and isnull(zoli1.OrderLineItemRelationshipTypeId,0) = @OrderLineItemRelationshipTypeId
			and zoli.IsActive=1 and (zo.OrderNumber = @OrderNumber or @OrderNumber = '')
			and not exists(SELECT * FROM ZnodeOmsOrderState ZOS where ZOS.OmsOrderStateId in (40,140) and zod.OmsOrderStateId = ZOS.OmsOrderStateId)  
			and not exists(select * from #RmaReturnDetails RD where zod.OmsOrderDetailsId = RD.OmsOrderDetailsId AND RD.OmsOrderLineItemsId=zoli.OmsOrderLineItemsId and zoli.Quantity = RD.ReturnQuantity)
			and not exists(select * from #cte_OrderData OD where zo.OrderNumber = OD.OrderNumber )

			set @SQL ='
			Select top '+cast(@PageSize as varchar(10))+' OrderNumber
			from #cte_OrderData
			WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+'
			order by CreatedDate desc'
			print @SQL
			EXEC (@SQL)

         END TRY
         BEGIN CATCH
             DECLARE @Status BIT ;
			 --select Error_message(), Error_line();
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetEligibleOrderNumberListForReturn @UserId = '+ cast (@UserId as varchar(10)) +',@PortalId='+cast (@PortalId as varchar(10)) +',@MaxDays='+cast (@MaxDays as varchar(10)) +',@OrderNumber='+@OrderNumber;
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		    
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetEligibleOrderNumberListForReturn',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPriceFromAssociateProducts')
	DROP PROC Znode_GetPriceFromAssociateProducts
GO

CREATE  PROCEDURE [dbo].[Znode_GetPriceFromAssociateProducts]
(   
	@PortalId         INT,
    @SKU			  NVARCHAR(300),
	@PimProductId	  INT,
	@UserId			  INT = 2,
	@ProductType	  VARCHAR(200),
	@LocaleId		  INT )
AS 
  /*  
    Summary: WebStore: Calculate price from associate product and assign to parent products
	EXEC [Znode_GetPriceFromAssociateProducts]
	@PortalId         = 1 ,
	@SKU	= 'gr990',
	@PimProductId	=  97 ,
	@UserId	= 2,
	@ProductType	= 'Configurable Product',
	@LocaleId	= 1 

 */
BEGIN
    BEGIN TRAN A;
    BEGIN TRY
        SET NOCOUNT ON;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @TBL_ListOfAssociateProducts TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
		ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
		TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		DECLARE @tbl_PricingListOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
		TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), CultureCode varchar(100), ExternalId NVARCHAR(2000),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX), Custom3 NVARCHAR(MAX))				

		DECLARE @PimAttributeId INT,@currentUtcDate   VARCHAR(200) = ''
		SET @currentUtcDate   = @GetDate
		SET @PimAttributeId =   DBO.Fn_GetProductSKUAttributeId()
						Declare @ChildProductIds TABLE (Id int, AssociatedProductDisplayOrder int )
		INSERT INTO @ChildProductIds (ID,AssociatedProductDisplayOrder) 
		SELECT ZPPT.PimProductId , ZPPT.DisplayOrder  from ZnodePimProductTypeAssociation ZPPT 
		WHERE ZPPT.PimParentProductId= @PimProductId
			
		--Price logic for Associate products
		INSERT INTO @TBL_ListOfAssociateProducts
		(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct,AssociatedProductDisplayOrder)
		SELECT ZPAV.PimProductId,ZPAVL.AttributeValue,@SKU ,@PimProductId,NULL , NULL,@PimProductId,
		CPI.AssociatedProductDisplayOrder 
		FROM ZnodePimAttributeValue ZPAV INNER JOIN ZnodePimAttributeValueLocale ZPAVL 
		ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		Inner join @ChildProductIds  CPI ON CPI.ID = ZPAV.PimProductId  
		where ZPAV.PimAttributeId  = @PimAttributeId 

		SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),ChildSKU) 
		FROM @TBL_ListOfAssociateProducts where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

		INSERT INTO @tbl_PricingListOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, CultureCode, ExternalId,Custom1,Custom2,Custom3)	
		EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

		update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
		PLC.SalesPrice = PLCA.SalesPrice 
		from @TBL_ListOfAssociateProducts PLC inner join @tbl_PricingListOfAssociatedProduct
		PLCA on PLC.ChildSKU = PLCA.sku
			
		If @ProductType in ('Configurable Product','grouped product')
			select Min(RetailPrice)  RetailPrice  , Min(SalesPrice) SalesPrice  from @TBL_ListOfAssociateProducts			
				
		COMMIT TRAN A;
			
    END TRY
    BEGIN CATCH
        DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
		@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductDataForWebStore_ver1 @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetProductDataForWebStore_ver1',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishCatalog')
	DROP PROC Znode_GetPublishCatalog
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCatalog]
(   @PimCatalogId INT,
    @UserId       INT,
    @Status       BIT = 0 OUT,
	@PublishTimeoutSeconds INT = 0,
	@LocaleId  TransferId Readonly,
	@IsCategoryPublishInProcess BIT = 0,
	@isDebug INT = 0
	 )
AS
/*
     Summary:- This Procedure is used to get data of catalog for publish 
     Unit Testing
	 begin tran
	 DECLARE @RT transferId 
	 INSERT INTO @RT 
	 VALUES (1),()
	  DECLARE @rerer INT =0 
     EXEC Znode_GetPublishCatalog 18 ,2,@rerer OUT SELECT @rerer
	 UPDATE ZnodePublishCatalogLog SET IsCatalogPublished = 0 WHERE IsCatalogPublished IS NULL 
	 SELECT * FROM ZnodePublishcatalogLog 
	 -- SELECT CASE WHEN DATEDIFF(s, LogDateTIme ,@GetDate) > 1500 THEN 1 ELSE 0 END, DATEDIFF(s, LogDateTIme,GETUTCDATE() ) ,*  FROM ZnodePublishCatalogLog  WHERE publishCatalogId = 5  AND isCatalogPublished IS NULL 
	 rollback tran
	*/
BEGIN
    BEGIN TRAN GetPublishCatalog;
    BEGIN TRY

	DECLARE @LocaleIds TABLE (LocaleId INT )
	DECLARE @LocaleIDsin TransferId 
	DECLARE @PublishStateIdForProcessing  INT = [dbo].[Fn_GetPublishStateIdForProcessing]()
	,@PublishStateIdForPublishFailed INT =  [dbo].[Fn_GetPublishStateIdForPublishFailed]()
	INSERT INTO  @LocaleIDsin 
	SELECT * FROM @LocaleID
	DELETE FROM  @LocaleIDsin WHERE id = 0 


	DECLARE @StartPublishProcess BIT = 0 
	DECLARE @GetDate  DATETIME = dbo.Fn_GetDate();
	DECLARE @PublishCatalogId INT= ISNULL((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @PimCatalogId), 0), @PublishCataloglogId INT= 0;
	DECLARE @TBL_DeletePublishCataLogLogId TABLE (PublishCatalogLogId INT )
	DECLARE @MaxCatalogLog INT = ( SELECT max(PublishcataloglogId) FROM ZnodePublishCataloglog  WHERE PimCatalogId = @PimCatalogId)
	  
	INSERT INTO @LocaleIds 
	SELECT id 
	FROM @LocaleIDsin RT 
	UNION ALL 
	SELECT LocaleId 
	FROM ZnodeLocale 
	WHERE IsActive = 1
	AND NOT EXISTS (SELECT TOP 1 1 FROM @LocaleIDsin ) 

	INSERT INTO   @TBL_DeletePublishCataLogLogId
	SELECT PublishCatalogLogId FROM ZnodePublishCatalogLog ZPCC WHERE ZPCC.PublishCatalogLogId < (@MaxCatalogLog - 2 )
	AND ZPCC.PimCatalogId = @PimCatalogId

    DECLARE @CatalogProfileId VARCHAR(MAX)= '';
                                                   
    IF EXISTS (SELECT TOP 1 1 FROM ZnodePublishcatalogLog  WHERE  IsCatalogPublished  IS NULL OR  PublishStateId = @PublishStateIdForProcessing   )
		BEGIN
		
				SET @StartPublishProcess =1
				SET @Status = 0;
				
		END 
	ELSE 
		BEGIN
			    
		SET @StartPublishProcess = 0
		SET @Status = 1;
		END 	

		IF @isDebug =1 
		BEGIN 
		SELECT @StartPublishProcess
		END 

		IF (@PublishCatalogId <> 0 AND @StartPublishProcess = 0 )
                BEGIN
			
					UPDATE ZnodePublishCatalogLog SET  IsCatalogPublished = 0 ,PublishStateId = @PublishStateIdForPublishFailed 
					WHERE PublishCatalogId = @PublishCatalogId 
					AND  PublishStateId = @PublishStateIdForProcessing

					UPDATE ZPC SET CatalogName = ZC.CatalogName,ExternalId = ZC.ExternalId,PimCatalogId= @PimCatalogId,CreatedBy = @UserId,
					CreatedDate = @GetDate,ModifiedBy = @UserId,ModifiedDate = @GetDate 
					FROM ZnodePublishCatalog ZPC 
					INNER JOIN ZnodePimCatalog ZC ON(ZC.PimCatalogId = ZPC.PimCatalogId)
					WHERE ZPC.PimCatalogId = @PimCatalogId;
              
			  		INSERT INTO ZnodePublishCatalogLog (PublishCatalogId , IsProductPublished,IsCategoryPublished,IsCatalogPublished,pimCatalogId,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,LocaleId,PublishStateId )
					SELECT @PublishCatalogId,NULL,CASE WHEN @IsCategoryPublishInProcess = 1 THEN 0 ELSE NULL END,NULL,@PimCatalogId,@UserId,@GetDate,@UserId,@GetDate,@UserId,@GetDate,LocaleId,@PublishStateIdForProcessing
					FROM @LocaleIds a
					WHERE @PublishCataloglogId = 0 

					SET @PublishCataloglogId = SCOPE_IDENTITY();
				END
            ELSE IF @StartPublishProcess = 0 
                BEGIN
				     
					INSERT INTO ZnodePublishCatalog (PimCatalogId,CatalogName,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
                    SELECT PimCatalogId,CatalogName,ExternalId,@UserId,@GetDate,@UserId,@GetDate 
					FROM ZnodePimCatalog AS ZPC 
					WHERE ZPC.PimCatalogId = @PimCatalogId;
                      
					SET @PublishCatalogId = SCOPE_IDENTITY();
                     
					INSERT INTO ZnodePublishCatalogLog (PublishCatalogId,IsProductPublished,IsCategoryPublished,IsCatalogPublished,pimCatalogId,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,LocaleId,PublishStateId )
					SELECT @PublishCatalogId,NULL,CASE WHEN @IsCategoryPublishInProcess = 1 THEN 0 ELSE NULL END,NULL,@PimCatalogId,@UserId,@GetDate,@UserId,@GetDate,@UserId,@GetDate,LocaleId,@PublishStateIdForProcessing
					FROM @LocaleIds
					WHERE @PublishCataloglogId = 0 

                    SET @PublishCataloglogId = SCOPE_IDENTITY();
                END;

				-- here find the profile attached to the catalog 
        SET @CatalogProfileId = SUBSTRING((SELECT ','+CAST(ProfileId AS VARCHAR(20)) FROM ZnodeProfile ZPC WHERE PimCatalogId = @PimCatalogId FOR XML PATH('')), 2, 4000);              

	      
	SELECT ZPC.PublishCatalogId ZnodeCatalogId,CatalogName,@CatalogProfileId TempProfileIds,Max(PublishCatalogLogId) VersionId  ,yu.localeid LocaleId,PublishStateId
	FROM ZnodePublishCatalog ZPC
	INNER JOIN  ZnodePublishCatalogLog YU ON (YU.PublishCatalogId = ZPC.PublishCatalogId)
	WHERE ZPC.PublishCatalogId = @PublishCatalogId
	AND (YU.IsCatalogPublished IS NULL OR  YU.PublishStateId= @PublishStateIdForProcessing)
	AND  @StartPublishProcess = 0 
	GROUP BY 	ZPC.PublishCatalogId,CatalogName,yu.localeid,YU.IsCatalogPublished,PublishStateId ;

	COMMIT TRAN GetPublishCatalog;
		
    END TRY
    BEGIN CATCH
            DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetPublishCatalog @PimCatalogId = '+CAST(@PimCatalogId AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(50));
            SET @Status = 0;
            ROLLBACK TRAN GetPublishCatalog;
            EXEC Znode_InsertProcedureErrorLog
                @ProcedureName = 'Znode_GetPublishCatalog',
                @ErrorInProcedure = @Error_procedure,
                @ErrorMessage = @ErrorMessage,
                @ErrorLine = @ErrorLine,
                @ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetPublishCategoryProducts')
	DROP PROC Znode_GetPublishCategoryProducts
GO

CREATE PROCEDURE [dbo].[Znode_GetPublishCategoryProducts]
( @pimCatalogId int = 0,@pimCategoryHierarchyId int = 0,@userId int,@versionId int= 0,@status int = 0 OUT,@isDebug bit = 0 ,@LocaleId TransferId READONLY , @PublishStateId INT = 0,   @ProductPublishStateId INT=NULL)  AS  /*
    Summary :	Publish Product on the basis of publish catalog and category
				Calling sp [Znode_InsertPublishProductIds] to retrive category and their child category with associated products 
				 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
	
	Unit Testing
    ------------------------------------------------------------------------------------------------
	Declare @Status int 
	DECLARE @r transferid 
	INSERT INTO @r
	VALUES (1)
	,(24)
	EXEC [Znode_GetPublishCategoryProducts]  @PimCatalogId = 9
	, @PimCategoryHierarchyId = 48 
	, @UserId = 2 
	, @VersionId = 0
	, @IsDebug = 1
	, @Status  = @Status  out
	,@localeId = @r
	,@PublishStateId = 4
	Select @Status  

 */
BEGIN   
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			DECLARE @IsCatalogPublishInProcess INT  = 0
		DECLARE @tBL_PublishIds table (PublishProductId int,PimProductId int,PublishCatalogId int)
		DECLARE @publishCatalogId int= isnull((SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalog ZPC WHERE ZPC.PimCatalogId = @pimCatalogId),0),@publishCataloglogId int= 0;
		DECLARE @tBL_CategoryCategoryHierarchyIds table (CategoryId int,ParentCategoryId int ,PimCategoryHierarchyId INT ,ParentPimCategoryHierarchyId INT  )
		DECLARE @pimProductId TransferId
		DECLARE @insertPublishProductIds table (PublishProductId int,PimProductId int,PublishCatalogId int )

		SELECT @versionId = max(PublishCataloglogId)
		FROM ZnodePublishCatalogLog 
		WHERE PublishCatalogId =@publishCatalogId

		INSERT INTO @tBL_CategoryCategoryHierarchyIds(CategoryId,ParentCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId ) 
		SELECT DISTINCT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM ( SELECT PimCategoryId,ParentPimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId
		FROM DBO.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchy](@pimCategoryHierarchyId,@pimCatalogId) 
		UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL FROM ZnodePimCategoryHierarchy WHERE PimCategoryHierarchyId = @pimCategoryHierarchyId 
		UNION SELECT PimCategoryId, Null,PimCategoryHierarchyId,NULL  FROM dbo.[Fn_GetRecurciveCategoryIds_PimCategoryHierarchyIdnew] (@pimCategoryHierarchyId,@pimCatalogId) ) Category

		IF NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct ty inner join ZnodePimCategoryHierarchy ZPCH ON ty.PimCategoryId = ZPCH.PimCategoryId
		WHERE EXISTS (SELECT TOP 1 1 FROM ( SELECT PimCategoryId,PimCategoryHierarchyId,ParentPimCategoryHierarchyId 
		FROM dbo.[Fn_GetRecurciveCategoryIds_ForChild](@pimCategoryHierarchyId,@pimCatalogId) UNION ALL SELECT NULL ,@pimCategoryHierarchyId,NULL  ) TN WHERE TN.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  ) AND ty.PimProductId IS NOT NULL )
		BEGIN 
			SET @IsCatalogPublishInProcess = 2 

		END 

		IF (isnull(@publishCatalogId,0) = 0 ) 
			BEGIN 
				SET @status = 1
				-- Catalog Not Published 
				RETURN 0;
			END
			
		IF @IsCatalogPublishInProcess =  0 
		BEGIN 
			-- Any other catalog was in process dont intitiate category publish	
			EXEC [Znode_GetPublishCategoryGroup] @publishCatalogId = @PublishCatalogId,@VersionId = 0,@userId =2,@isDebug = 1,@PimCategoryHierarchyId = @PimCategoryHierarchyId,@localeId =@localeID,@PublishStateId=@PublishStateId
			
		BEGIN 
			INSERT INTO @insertPublishProductIds EXEC [Dbo].[Znode_InsertPublishProductIds] @publishCatalogId = @publishCatalogId,@userid = @userid,@pimProductId = @pimProductId,@pimCategoryHierarchyId = @pimCategoryHierarchyId
			INSERT INTO @pimProductId SELECT PimProductId FROM @insertPublishProductIds

			EXEC [Dbo].[Znode_GetPublishProductbulk] @publishCatalogId = @publishCatalogId,@versionId = @versionId,@pimProductId = @pimProductId,@userid = @userid,@pimCategoryHierarchyId = @pimCategoryHierarchyId,@pimCatalogId = @pimCatalogId,@localeIds = @localeId ,@publishstateId =@publishStateId
		END
		DECLARE @tBL_PublishCatalogId table(PublishCatalogId int,PublishProductId int,PublishCategoryId int,PimProductId int,VersionId int,LocaleId INT  );
			
		INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId ,Localeid)  
		SELECT DISTINCT ZPC.PublishCatalogId,ZPX.PublishProductId,ZPX.PublishCategoryId,ZPP.PimProductId,Max(TH.PublishCatalogLogId),TH.Localeid 
		FROM ZnodePublishCategory ZPC 
		INNER JOIN ZnodePublishCatalogLog TH ON (TH.PublishCatalogId = ZPC.PublishCatalogId)
		INNER JOIN @tBL_CategoryCategoryHierarchyIds CTC ON (ZPC.PimCategoryHierarchyId = CTC .PimCategoryHierarchyId )
		INNER JOIN ZnodePublishCategoryProduct ZPX  ON ZPC.PublishCategoryId = ZPX.PublishCategoryId AND ZPX.PublishCatalogId = ZPC.PublishCatalogId 
		INNER JOIN ZnodePublishProduct ZPP ON ZPP.PublishCatalogId = ZPC.PublishCatalogId AND ZPX.PublishProductId = ZPP.PublishProductId 
		WHERE ZPC.PublishCatalogId = @PublishCatalogId 
		AND  TH.PublishStateId = @PublishStateId
		AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = TH.LocaleId)
		GROUP BY ZPC.PublishCatalogId,ZPX.PublishProductId ,ZPX.PublishCategoryId,ZPP.PimProductId,TH.Localeid 
		
		INSERT INTO @tBL_PublishCatalogId (PublishCatalogId,PublishProductId,PublishCategoryId,PimProductId,VersionId,Localeid ) 
		SELECT IPP.PublishCatalogId,IPP.PublishProductId,0,IPP.PimProductId,max(PublishCatalogLogId) VersionId ,h.Localeid
		FROM @insertPublishProductIds IPP 
		LEFT JOIN ZnodePublishCatalogLog h ON (h.PublishCatalogId = IPP.PublishCatalogId )
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM @tBL_PublishCatalogId PCI WHERE IPP.PublishProductId = PCI.PublishProductId)
		AND EXISTS (SELECT TOP 1 1 FROM @LocaleId WHERE id = h.LocaleId)
		AND h.PublishStateId = @PublishStateId
		GROUP BY IPP.PublishCatalogId,IPP.PublishProductId,IPP.PimProductId,Localeid
			
		UPDATE ZnodePublishCatalogLog 
		SET IsProductPublished = 1,
			PublishProductId = (SELECT  COUNT(DISTINCT PublishProductId) FROM ZnodePublishCategoryProduct ZPP WHERE ZPP.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId AND ZPP.PublishCategoryId IS NOT NULL)  
		,ModifiedBy=@userId, ModifiedDate=@GetDate
		WHERE PublishCatalogLogId IN (SELECT VersionId FROM @tBL_PublishCatalogId)

		UPDATE ZnodePimProduct 
		SET IsProductPublish = 1 ,PublishStateId = ISNULL(@ProductPublishStateId,@PublishStateId),
		ModifiedBy=@userId, ModifiedDate=@GetDate	
		WHERE EXISTS (SELECT TOP 1 1 
			FROM @tBL_PublishCatalogId ZPP
			WHERE ZPP.PimProductId = ZnodePimProduct.PimProductId
			)
		
			SELECT PublishCatalogId
				,PublishProductId
				,PublishCategoryId
				,VersionId,LocaleId
		FROM @tBL_PublishCatalogId
		END 
			IF @IsCatalogPublishInProcess = 1 
			BEGIN 
			SELECT 1 Id , 'Single category publish request cannot be processed as catalog or category publish is in progress. Please try after publish is complete.' MessageDetails,  CAST(0 AS BIT ) Status
			END 
			ELSE
				IF @IsCatalogPublishInProcess = 2 
			BEGIN
				
			SELECT 1 Id , 'Please associate products to the category or to at least one child category to publish the category.' MessageDetails,  CAST(0 AS BIT ) Status
			END 
			ELSE 
			BEGIN 
			SELECT 1 Id , ' Publish Successfull' MessageDetails, CAST(1 AS BIT ) Status
			END 
	END TRY
	BEGIN CATCH
		SELECT error_message()
			,error_procedure();
		UPDATE ZnodePublishCatalogLog 
		SET IsCatalogPublished = 0 
		WHERE PublishCatalogLogId = @versionId
		SET @status = 0;
		DECLARE @error_procedure varchar(1000)= error_procedure(),@errorMessage nvarchar(max)= error_message(),@errorLine varchar(100)= error_line(),@errorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PimCatalogId = '+cast(@pimCatalogId AS varchar(max))+',@@PimCategoryHierarchyId='+@pimCategoryHierarchyId+',@UserId='+cast(@userId AS varchar(50))+',@UserId = '+cast(@userId AS varchar(50))+',@VersionId='+cast(@versionId AS varchar(50))+',@Status='+cast(@status AS varchar(10));
		SELECT 0 AS ID
			,cast(0 AS bit) AS Status;
		--ROLLBACK TRAN GetPublishProducts;
		EXEC Znode_InsertProcedureErrorLog @procedureName = 'Znode_GetPublishCategoryProducts',@errorInProcedure = @error_procedure,@errorMessage = @errorMessage,@errorLine = @errorLine,@errorCall = @errorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetQuickOrderPublishProduct')
	DROP PROC Znode_GetQuickOrderPublishProduct
GO

CREATE PROCEDURE [dbo].[Znode_GetQuickOrderPublishProduct]
(
	@PublishCatalogId int,
	@LocaleId int,
	@PublishCategoryIds NVARCHAR(MAX),
	@SKUs NVARCHAR(MAX),
	@VersionId int,
	@ProductIndex int,
	@PortalId int 
)
AS
/*
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	 EXEC Znode_GetQuickOrderPublishProduct 
	@PublishCatalogId= '3',
	@LocaleId= '1',
	@PublishCategoryIds = '34,35,36,37,38,39,40,41,42,43,50,79,82,83,84,85,86,87,88,90' ,
	@SKUs= 'TestConfig1',
	@VersionId= '5942',
	@ProductIndex= '1',
	@PortalId =1 
*/
BEGIN

SET NOCOUNT ON;
BEGIN TRY
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
   -- Insert statements for procedure here
	Create table #TBL_SKUs (SKU NVARCHAR(MAX));
	Create table #TBL_CategoryIds (CategoryId INT);

	INSERT INTO #TBL_SKUs
	SELECT item
	FROM dbo.split(@SKUs, ',');

	INSERT INTO #TBL_CategoryIds
	SELECT item
	FROM dbo.split(@PublishCategoryIds, ',');


	----getting publish product associations
	select ZPAVL.AttributeValue as ParentSKU, ZPAP.ParentPimProductId,ZPAP.PimProductId, ZPAVL1.attributeValue as SKU, 
		   IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId
	into #TempProductassociation
	from ZnodePublishAssociatedProduct ZPAP
	inner join ZnodePimAttributeValue ZPAV ON ZPAV.PimProductId = ZPAP.ParentPimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimattributeValueId = ZPAVL.PimAttributeValueId
	inner join ZnodePimAttributeValue ZPAV1 ON ZPAV1.PimProductId = ZPAP.PimProductId
	inner join ZnodePimAttributeValueLocale ZPAVL1 ON ZPAV1.PimattributeValueId = ZPAVL1.PimAttributeValueId
	where ZPAV.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU')
	AND ZPAV1.PimattributeId = (select Top 1 PimattributeId from ZnodePimAttribute ZPA where ZPa.AttributeCode = 'SKU') 
	and Exists(select * from #TBL_SKUs s where s.sku = ZPAVL.AttributeValue )
	

	----getting publish product associations
	select ParentSKU,  SKU,
		    Row_Number()Over( PARTITION BY  ParentSKU ORDER BY DisplayOrder, PublishAssociatedProductId) RowId
	into #TempConfigProduct
	from #TempProductassociation
	where IsConfigurable = 1

	
	SELECT sku.SKU as ParentSKU, case when ParentSKU is null then sku.SKU else config.sku  end as childsku, ParentSKU as ConfigurableProductSKUs
	into #SKUs
	FROM #TBL_SKUs sku
	LEFT JOIN #TempConfigProduct config on sku.sku = config.ParentSKU and RowId = 1
	
	SELECT P.Name,P.SKU,P.ZnodeProductId as Id, P.IsActive as IsActive, P.Attributes, s.ParentSKU , s.ConfigurableProductSKUs 
	into #ProductDetail
	FROM ZnodePublishProductEntity  AS P
	INNER JOIN #SKUs AS S ON P.SKU=S.childsku
	INNER JOIN #TBL_CategoryIds AS C ON C.CategoryId = P.ZnodeCategoryIds
	WHERE ZnodeCatalogId = @PublishCatalogId and LocaleId = @LocaleId and IsActive = 'true' and ZnodeCategoryIds != 0 and ProductIndex = @ProductIndex and VersionId = @VersionId  

	CREATE TABLE #TempSKUInventory (SKU varchar(600),Quantity numeric(28,6),ReOrderLevel numeric(28,6),PortalId int, WarehouseName varchar(100), WarehouseCode varchar(100), DefaultInventoryCount numeric(28,6))

	CREATE TABLE #TempProductPrice 
	(	
		SKU varchar(600),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice  numeric(28,6),TierQuantity  numeric(28,6),CurrencyCode varchar(100),
		CurrencySuffix varchar(1000),CultureCode varchar(100),ExternalId varchar(1000),Custom1 varchar(1000),Custom2 varchar(1000),Custom3 varchar(1000)
	)

	Declare @NewSKU vaRCHAR(MAX)

	SET @NewSKU = SUBSTRING((SELECT ','+SKU FROM #ProductDetail FOR XML PATH(''),Type).value('.', 'varchar(max)'), 2, 4000);

	----getting products inventory details
	insert into #TempSKUInventory(SKU ,Quantity ,ReOrderLevel ,PortalId, WarehouseName, WarehouseCode, DefaultInventoryCount)
	Execute [Znode_GetInventoryBySkus] @SKUs = @NewSKU, @PortalId = @PortalId

	----getting product pricing details
	insert into #TempProductPrice(SKU,RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId ,Custom1,Custom2 ,Custom3 )
	Execute [Znode_GetPublishProductPricingBySku] @SKU = @NewSKU, @PortalId=@PortalId, @currentUtcDate=@Getdate

	--getting comma seperated Addon Product
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsAddOn = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') as AddOnProductSkus
	into #AddOnProductSKUS
	from #TempProductassociation TPA
	where IsAddOn = 1


	--getting comma seperated Group Products
	select TPA.ParentSKU,
		stuff( (SELECT ','+TPA1.SKU FROM #TempProductassociation TPA1 
		WHERE (TPA.ParentPimProductId = TPA1.ParentPimProductId and IsGroup = 1)
					 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '') GroupProductSKUs
		,count(TPA.SKU) as GroupProductsQuantity
	into #GroupProductSKUs
	from #TempProductassociation TPA
	where IsGroup = 1
	group by TPA.ParentSKU, TPA.ParentPimProductId 
		

	select SKU,sum(ISNULL(Quantity,0)) as Quantity 
	into #TempSKUInventorySum
	from #TempSKUInventory
	group by SKU

	Select PD.SKU, ZPP.PromotionId 
	into #TempProductPromotion
	from #ProductDetail PD
	inner join ZnodePromotionProduct ZPP ON PD.Id = ZPP.PublishProductId 
	where exists(select * from ZnodePromotion ZP inner join ZnodePromotionType ZPT ON ZP.PromotionTypeId = ZPT.PromotionTypeId
	      where ZPP.PromotionId = ZP.PromotionId and ZPT.Name = 'Call For Pricing')

	select DISTINCT PD.Name,PD.SKU,PD.Id as Id, PD.IsActive as IsActive, PD.Attributes, TPP.RetailPrice, 
	       addon.AddOnProductSkus, PD.ConfigurableProductSKUs, grp.GroupProductSKUs, ISNULL(grp.GroupProductsQuantity,0) AS GroupProductsQuantity,
		   ISNULL(Inv.Quantity,0) as QuantityOnHand, Cast(case when Promo.PromotionId is null then 'false' else 'true' end as bit) HasPromotion
	from #ProductDetail PD
	left join #TempProductPrice TPP ON PD.SKU = TPP.SKU
	left join #AddOnProductSKUS addon ON PD.SKU = addon.ParentSKU
	left join #GroupProductSKUs grp  ON PD.SKU = grp.ParentSKU
	left join #TempSKUInventorySum Inv  ON PD.SKU = Inv.SKU
	left join #TempProductPromotion Promo  ON PD.SKU = Promo.SKU
	
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE()
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuickOrderPublishProduct @PublishCatalogId = '+cast(@PublishCatalogId as varchar(10))+',@LocaleId= '+cast(@LocaleId as varchar(10))+',@VersionId='+CAST(@VersionId AS VARCHAR(50))+',@PublishCategoryIds='+CAST(@PublishCategoryIds AS VARCHAR(50))+',@SKUs='+CAST(@SKUs AS VARCHAR(10))+',@ProductIndex='+CAST(@ProductIndex AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		ROLLBACK TRANSACTION GetPublishAssociatedProducts;
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_GetQuickOrderPublishProduct',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH;
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetQuoteList')
	DROP PROC Znode_GetQuoteList
GO

CREATE PROCEDURE [dbo].[Znode_GetQuoteList]
( 
	@WhereClause NVARCHAR(MAx) = '',
	@Rows INT = 100,
    @PageNo INT = 1,
    @Order_BY VARCHAR(1000)  = '',
    @RowsCount INT OUT			,
    @UserId INT = 0,
	@OmsQuoteTypeId int,
	@SalesRepUserId int = 0
)
AS
  /*
     Summary : This procedure is used to get the oms order detils
			   Records are fetched for those users who placed the order i.e UserId is Present in ZnodeUser and  ZnodeOmsOrderDetails tables
	 Unit Testing:

     EXEC Znode_GetQuoteList @Order_BY = 'omsquoteid desc',@RowsCount= 0, @UserId = 0 ,@Rows = 100, @PageNo = 2, @OmsQuoteTypeId=3,@SalesRepUserId=0
*/
BEGIN
SET NOCOUNT ON;
BEGIN TRY
	DECLARE @SQL nvarchar(max) = ''
	DECLARE @Fn_GetPaginationWhereClause VARCHAR(500) = dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows)
	DECLARE @GetDate DATE = dbo.Fn_GetDate();

	CREATE TABLE #TBL_RowCount(RowsCount INT )

	----Verifying that the @SalesRepUserId is having 'Sales Rep' role
	IF NOT EXISTS
	(
		SELECT * FROM ZnodeUser ZU
		INNER JOIN AspNetZnodeUser ANZU ON ZU.UserName = ANZU.UserName
		INNER JOIN AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		INNER JOIN AspNetUserRoles ANUR ON ANU.Id = ANUR.UserId
		Where Exists(SELECT * FROM AspNetRoles ANR WHERE Name = 'Sales Rep' AND ANUR.RoleId = ANR.Id) 
		AND ZU.UserId = @SalesRepUserId
	)   
	BEGIN
		SET @SalesRepUserId = 0
	END

	CREATE TABLE #QuoteInfo(OmsQuoteId INT, QuoteNumber VARCHAR(200),UserID INT, CustomerName VARCHAR(300), EmailID VARCHAR(50), PhoneNumber VARCHAR(50), PortalID INT, StoreName VARCHAR(500), QuoteStatus VARCHAR(500),  TotalAmount NUMERIC(28,6),QuoteDate DATETIME,QuoteExpirationDate  DATETIME,CultureCode VARCHAR(100),RowId INT)

	UPDATE ZOQ SET OmsOrderStateId = (SELECT TOP 1 OmsOrderStateId FROM ZnodeOMSOrderState WHERE OrderStateName = 'EXPIRED')
	FROM ZnodeOmsQuote ZOQ
	INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	WHERE ZOQ.OmsQuoteTypeId = @OmsQuoteTypeId AND (ZOQ.UserId = @UserId OR @UserId = 0 )
	AND CAST(ZOQ.QuoteExpirationDate AS DATE) < @GetDate
	AND ZOQ.OmsOrderStateId <> (SELECT TOP 1 OmsOrderStateId FROM ZnodeOMSOrderState WHERE OrderStateName = 'EXPIRED')
	
	--For enhancemet purpose getting order by clause column from exact table
	IF @Order_BY <> ''
	BEGIN
		SET @Order_BY = REPLACE(@Order_BY,'OmsQuoteId','ZOQ.OmsQuoteId')
		SET @Order_BY = REPLACE(@Order_BY,'UserID','ZOQ.UserID')
		SET @Order_BY = REPLACE(@Order_BY,'EmailID','ZOQ.Email')
		SET @Order_BY = REPLACE(@Order_BY,'OmsQuoteTypeId','ZOQ.OmsQuoteTypeId')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteNumber','ZOQ.QuoteNumber')
		SET @Order_BY = REPLACE(@Order_BY,'PhoneNumber','ZOQ.PhoneNumber')
		SET @Order_BY = REPLACE(@Order_BY,'PortalID','ZP.PortalID')
		SET @Order_BY = REPLACE(@Order_BY,'StoreName','ZP.StoreName')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteDate','ZOQ.CreatedDate')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteStatus','ZOOS.Description')
		SET @Order_BY = REPLACE(@Order_BY,'UserName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @Order_BY = REPLACE(@Order_BY,'CustomerName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @Order_BY = REPLACE(@Order_BY,'TotalAmount','ZOQ.QuoteOrderTotal')
		SET @Order_BY = REPLACE(@Order_BY,'QuoteExpirationDate','ZOQ.QuoteExpirationDate')
		SET @Order_BY = REPLACE(@Order_BY,'CultureCode','ZOQ.CultureCode')
	END
	--For enhancemet purpose getting where clause column from exact table
	IF @WhereClause <> ''
	BEGIN
		SET @WhereClause = REPLACE(@WhereClause,'OmsQuoteId','ZOQ.OmsQuoteId')
		SET @WhereClause = REPLACE(@WhereClause,'OmsQuoteTypeId','ZOQ.OmsQuoteTypeId')
		SET @WhereClause = REPLACE(@WhereClause,'EmailID','ZOQ.Email')
		SET @WhereClause = REPLACE(@WhereClause,'UserID','ZOQ.UserID')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteNumber','ZOQ.QuoteNumber')
		SET @WhereClause = REPLACE(@WhereClause,'PhoneNumber','ZOQ.PhoneNumber')
		SET @WhereClause = REPLACE(@WhereClause,'PortalID','ZP.PortalID')
		SET @WhereClause = REPLACE(@WhereClause,'StoreName','ZP.StoreName')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteDate','ZOQ.CreatedDate')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteStatus','ZOOS.Description')
		SET @WhereClause = REPLACE(@WhereClause,'UserName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @WhereClause = REPLACE(@WhereClause,'CustomerName','ISNULL(RTRIM(LTRIM(ZOQ.FirstName)),'''')+'' ''+ISNULL(RTRIM(LTRIM(ZOQ.LastName)),'''')')
		SET @WhereClause = REPLACE(@WhereClause,'TotalAmount','ZOQ.QuoteOrderTotal')
		SET @WhereClause = REPLACE(@WhereClause,'QuoteExpirationDate','ZOQ.QuoteExpirationDate')
		SET @WhereClause = REPLACE(@WhereClause,'CultureCode','ZOQ.CultureCode')
		SET @WhereClause = replace(@WhereClause,'ZOQ.CreatedDate','CAST((FORMAT(ZOQ.CreatedDate,''yyyy-MM-dd HH:mm'')) as datetime)')
	END
	--To get the maximum rows to fetch
	SET @Rows = @PageNo * @Rows

	SET @SQL = '
	INSERT INTO #TBL_RowCount
	SELECT COUNT(*)
	FROM ZnodeOmsQuote ZOQ
	INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	WHERE ZOQ.OmsQuoteTypeId = '+CAST(@OmsQuoteTypeId AS VARCHAR(10))+' AND (ZOQ.UserId = '+CAST(@UserId AS VARCHAR(10))+' OR '+CAST(@UserId AS VARCHAR(10))+'= 0 )
	AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = '+CAST(@SalesRepUserId AS VARCHAR(10))+' and ZOQ.UserId = SalRep.CustomerUserid) OR '+CAST(@SalesRepUserId AS VARCHAR(10))+' = 0)
	 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'

	SELECT TOP '+CAST(@Rows AS VARCHAR(10))+' ZOQ.OmsQuoteId, ZOQ.OmsQuoteTypeId,ZOQ.UserID, ZOQ.QuoteNumber AS QuoteNumber,ISNULL(ZOQ.FirstName,'''')+CASE WHEN ZOQ.MiddleName is not null THEN '' '' ELSE '''' END+ ISNULL(ZOQ.MiddleName,'''')+'' ''+isnull(ZOQ.LastName,'''') AS CustomerName,
	ZOQ.Email AS EmailID ,ZOQ.PhoneNumber,ZP.PortalID,ZP.StoreName ,ZOQ.CreatedDate AS QuoteDate,ZOOS.Description AS QuoteStatus,ZOQ.QuoteOrderTotal as TotalAmount, ZOQ.QuoteExpirationDate , ZOQ.CultureCode,
	'+dbo.Fn_GetPagingRowId(@Order_BY,'ZOQ.OmsQuoteId DESC')+' 
	INTO #QuoteDetail
	FROM ZnodeOmsQuote ZOQ
	INNER JOIN ZnodeOmsQuoteType ZOQT ON ZOQ.OmsQuoteTypeId = ZOQT.OmsQuoteTypeId
	INNER JOIN ZnodePortal ZP ON ZOQ.PortalID = ZP.PortalID
	INNER JOIN ZnodeOMSOrderState ZOOS ON ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId
	WHERE ZOQ.OmsQuoteTypeId = '+CAST(@OmsQuoteTypeId AS VARCHAR(10))+' AND (ZOQ.UserId = '+CAST(@UserId AS VARCHAR(10))+' OR '+CAST(@UserId AS VARCHAR(10))+'= 0 )
	AND (EXISTS(SELECT * FROM ZnodeSalesRepCustomerUserPortal SalRep WHERE SalRep.SalesRepUserId = '+CAST(@SalesRepUserId AS VARCHAR(10))+' and ZOQ.UserId = SalRep.CustomerUserid) or '+CAST(@SalesRepUserId AS VARCHAR(10))+' = 0)
	 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'

	SELECT OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate,
			   TotalAmount,QuoteExpirationDate, CultureCode , RowId
	FROM #QuoteDetail
	'+@Fn_GetPaginationWhereClause

	INSERT INTO #QuoteInfo(OmsQuoteId, QuoteNumber,  CustomerName, EmailID, PhoneNumber, PortalID, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode , RowId)
	EXEC(@SQL)

	SELECT OmsQuoteId, QuoteNumber, CustomerName, EmailID, PhoneNumber, StoreName, QuoteStatus, QuoteDate, TotalAmount, QuoteExpirationDate, CultureCode
	FROM #QuoteInfo
	ORDER BY RowId

	SET @RowsCount = ISNULL((SELECT TOP 1 RowsCount FROM #TBL_RowCount),0)

	IF OBJECT_ID('tempdb..#QuoteDetail') is not null
		DROP TABLE #QuoteDetail
	IF OBJECT_ID('tempdb..#QuoteInfo') is not null
		DROP TABLE #QuoteInfo

END TRY
BEGIN CATCH
    DECLARE @Status BIT ;
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetQuoteList @WhereClause = '''+ISNULL(CAST(@WhereClause AS VARCHAR(max)),'''''')+''',@Rows='''+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+''',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
	@Order_BY='+ISNULL(@Order_BY,'''''')+',@UserId = '+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');
              			 
    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
    EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_GetQuoteList',
	@ErrorInProcedure = 'Znode_GetQuoteList',
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH;
END



GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAccount')
	DROP PROC Znode_ImportAccount
GO

CREATE PROCEDURE [dbo].[Znode_ImportAccount](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200),@PortalId int 
	  ,@CsvColumnString nvarchar(max) )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	
		-- Three type of import required three table varible for product , category and brand
		
		select A.CountryCode,B.StateName,B.StateId,B.StateCode
        into #ZnodeCountryState
		from ZnodePortalCountry A
		inner JOin ZnodeState B on B.CountryCode=A.CountryCode
		Where B.CountryCode in ('US','CA')
		
		CREATE TABLE #InsertAccount 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,ParentAccountCode nvarchar(max),AccountName nvarchar(max), AccountCode nvarchar(max),ExternalID nvarchar(max),
			CatalogCode nvarchar(max),AddressName nvarchar(max),FirstName varchar(max),LastName varchar(max),CompanyName varchar(max),
			Address1 varchar(max),Address2 varchar(max),CountryName varchar(max),StateName varchar(max),CityName varchar(max),
			PostalCode varchar(max),PhoneNumber varchar(max),IsDefaultBilling varchar(10),IsDefaultShipping varchar(10),GUID VARCHAR(100)
		);
	
		SET @SSQL = ' INSERT INTO #InsertAccount ( RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID )
		SELECT RowNumber, ParentAccountCode,AccountName ,AccountCode,ExternalID,CatalogCode,AddressName,FirstName,LastName,CompanyName
						,Address1,Address2,CountryName,StateName,CityName,PostalCode,PhoneNumber,IsDefaultBilling,IsDefaultShipping,GUID FROM '+ @TableName;

		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '86', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from znodePortalAccount ZPA inner join ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId where ii.ParentAccountCode = ZA.AccountCode and ZPA.PortalId = @PortalId)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '87', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)
		--and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '89', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)
		and exists(select * from ZnodeAccount ZA 
				inner join ZnodeAccount ZA1 on ZA.ParentAccountId = ZA1.accountId 
				 where ii.ParentAccountCode <> ZA1.AccountCode)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '')
		and ii.RowNumber > IA.RowNumber )
		

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountCode, '')) >100 and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '79', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ii.AccountCode like '%[^a-zA-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountCode)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AccountName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AccountName, '')) >100 and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '52', 'AccountName', AccountName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE isnull(replace(ii.AccountName,' ',''),'') like '%[^a-Z0-9]%' and ISnull(ltrim(rtrim(ii.AccountName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.StateName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.StateName)), '')) >100 and ISnull(ltrim(rtrim(ii.StateName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '116', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeState ZS where ZS.StateName = ISnull(ltrim(rtrim(ii.StateName)), '')
		and  exists (select * from #ZnodeCountryState Y where Y.CountryCode=zs.CountryCode and ii.StateName=y.StateName))
		and ISnull(ltrim(rtrim(ii.StateName)), '') <> '' and ii.CountryName in ('United States','Canada')

        INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '83', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodeCountry ZC where ZC.CountryName = ISnull(ltrim(rtrim(ii.CountryName)), '') ) AND ISnull(ltrim(rtrim(ii.CountryName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '90', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CountryName)), '') <> ''
		and not exists(select * from ZnodePortalCountry ZPC inner join ZnodeCountry ZC ON ZPC.CountryCode = ZC.CountryCode
		    where PortalId = @PortalId and ltrim(rtrim(ii.CountryName)) = ltrim(rtrim(ZC.CountryName)))

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'CityName', CityName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.CityName)), '')) >100 and ISnull(ltrim(rtrim(ii.CityName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PostalCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PostalCode', PostalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PostalCode)), '')) >100 and ISnull(ltrim(rtrim(ii.PostalCode)), '') <> ''
				
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.PhoneNumber)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '78', 'PhoneNumber', PhoneNumber, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.PhoneNumber)), '')) >100 and ISnull(ltrim(rtrim(ii.PhoneNumber)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultBilling)),'') not in ('True','1','FALSE','0') and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '91', 'IsDefaultBilling', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode)  
		and ISnull(ltrim(rtrim(ii.IsDefaultBilling)), '') <> '' and ISnull(ltrim(rtrim(ii.IsDefaultBilling)),'') in ('FALSE','0')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE ISnull(ltrim(rtrim(ii.IsDefaultShipping)),'') not in ('True','1','FALSE','0') and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '91', 'IsDefaultShipping', IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertAccount AS ii  
		WHERE exists(select * from ZnodeAccount ZA where ii.AccountCode = ZA.AccountCode)  
		and ISnull(ltrim(rtrim(ii.IsDefaultShipping)), '') <> '' and ISnull(ltrim(rtrim(ii.IsDefaultShipping)),'') in ('FALSE','0')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.AddressName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'AddressName', AddressName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.AddressName, '')) >200 and ISnull(ltrim(rtrim(ii.AddressName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.Address1)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '81', 'Address1', Address1, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.Address1, '')) >200 and ISnull(ltrim(rtrim(ii.Address1)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'CompanyName', CompanyName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.CompanyName, '')) >300 and ISnull(ltrim(rtrim(ii.CompanyName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.LastName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'LastName', LastName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ltrim(rtrim(ii.LastName)), '')) >300 and ISnull(ltrim(rtrim(ii.LastName)), '') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.FirstName)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'FirstName', FirstName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.FirstName, '')) >300 and ISnull(ltrim(rtrim(ii.FirstName)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '80', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE not exists(select * from ZnodePimCatalog ZS where ZS.CatalogCode = ISnull(ltrim(rtrim(ii.CatalogCode)), '') )
		and ISnull(ltrim(rtrim(ii.CatalogCode)), '') <> ''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.CatalogCode)), '') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '82', 'ExternalID', ExternalID, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE len(ISnull(ii.ExternalID, '')) >300 and ISnull(ltrim(rtrim(ii.ExternalID)), '') <> ''

		-- -- error log when atleast db have 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '85', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling +'/'+ IsDefaultShipping, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount IC where not exists (
		SELECT TOP 1 1  from ZnodeAccount ZAA where IC.AccountCode = ZAA.AccountCode )
		and (IC.IsDefaultBilling not in ('1', 'true') or (IsDefaultShipping not in ('1', 'true')))  
		
		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AccountCode - ' + ISNULL(AccountCode,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertAccount IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		DELETE FROM #InsertAccount
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertAccount
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		CREATE TABLE #InsertedAccount (AccountId int, Accountcode nvarchar(100)) 
		
		INSERT INTO ZnodeAccount(AccountCode,ParentAccountId,Name,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		select IC.AccountCode, null as ParentAccountId, AccountName, IC.ExternalID, @UserId, @GetDate, @UserId, @GetDate
		from #InsertAccount IC
		where not exists(select * from ZnodeAccount ZA1 where ZA1.AccountCode = IC.AccountCode)
		and ISnull(ltrim(rtrim(IC.ParentAccountCode)), '') = '' 

		INSERT INTO ZnodePortalAccount(PortalId,AccountId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @PortalId, IA.AccountId,  @UserId, @GetDate, @UserId, @GetDate
		FROM #InsertedAccount IA 
		WHERE not exists(select * from ZnodePortalAccount ZPA where IA.AccountId = ZPA.AccountId )

		----Import Child Account where Parent account details having in same CSV ****Start
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '86', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and not exists(select * from znodePortalAccount ZPA inner join ZnodeAccount ZA ON ZPA.AccountId = ZA.AccountId where ii.ParentAccountCode = ZA.AccountCode and ZPA.PortalId = @PortalId)
		and not exists(select * from #InsertAccount IA where ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') = ISnull(ltrim(rtrim(IA.AccountCode)), '') and ii.RowNumber > IA.RowNumber)
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '87', 'ParentAccountCode', ParentAccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertAccount AS ii
		WHERE ISnull(ltrim(rtrim(ii.ParentAccountCode)), '') <> ''
		and exists(select * from ZnodeAccount ZA where ii.ParentAccountCode = ZA.AccountCode and ZA.ParentAccountId is not null)

		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AccountCode - ' + ISNULL(AccountCode,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertAccount IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		DELETE FROM #InsertAccount
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		INSERT INTO ZnodeAccount(AccountCode,ParentAccountId,Name,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		select IC.AccountCode, za.AccountId as ParentAccountId, AccountName, IC.ExternalID, @UserId, @GetDate, @UserId, @GetDate
		from #InsertAccount IC
		left join ZnodeAccount za on IC.ParentAccountCode = za.AccountCode
		where not exists(select * from ZnodeAccount ZA1 where ZA1.AccountCode = IC.AccountCode)
		and ISnull(ltrim(rtrim(IC.ParentAccountCode)), '') <> ''

		INSERT INTO ZnodePortalAccount(PortalId,AccountId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @PortalId, IA.AccountId,  @UserId, @GetDate, @UserId, @GetDate
		FROM #InsertedAccount IA 
		WHERE not exists(select * from ZnodePortalAccount ZPA where IA.AccountId = ZPA.AccountId )
		--------
		update ZA set ZA.ParentAccountId =  ZA1.AccountId
		from ZnodeAccount ZA
		inner join #InsertAccount IA ON ZA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA1 ON ZA1.AccountCode = IA.ParentAccountCode 
		where exists(select * from #InsertedAccount IC where IA.AccountCode = IC.AccountCode)
		and ZA.ParentAccountId is null

		----updating AccountName for respective account
		update ZA set Name = IC.AccountName, AccountCode = IC.AccountCode
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode)
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode

		----updating publishcatalogin to respective account
		update ZA set PublishCatalogId = ZPC1.PublishCatalogId, AccountCode = IC.AccountCode
		OUTPUT INSERTED.AccountId, INSERTED.Accountcode INTO  #InsertedAccount (AccountId, Accountcode) 
		from ZnodeAccount ZA
		inner join #InsertAccount IC ON ZA.AccountCode = IC.AccountCode
		inner join ZnodePimCatalog ZPC ON IC.CatalogCode = ZPC.CatalogCode
		inner join ZnodePublishCatalog ZPC1 ON ZPC.PimCatalogId = ZPC1.PimCatalogId
		where not exists(select * from ZnodePortalCatalog ZPCa where ZPCa.PublishCatalogId = ZPC1.PublishCatalogId and ZPCa.PortalId = @PortalId)

		----------update ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name= 'Account')

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')
		
		CREATE TABLE #InsertedAccountAddress (AddressId  int, AccountCode varchar(100)) 

		SET @SSQL = '
			UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
			FROM ZnodeAddress ZA
			INNER JOIN #InsertAccount IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

		EXEC (@SSQL)

		SET @SSQL = '
		Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
								StateName,CityName,PostalCode,PhoneNumber,
								IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedAccountAddress (AddressId, AccountCode) 			 
		SELECT IC.FirstName,IC.LastName,IC.AddressName,IC.Address1,IC.Address2,IC.AccountCode,ZC.CountryCode,
		ZS.StateCode,IC.CityName,IC.PostalCode,IC.PhoneNumber,
		isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),1,IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' , '+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+'''
		FROM  #InsertAccount IC
		inner join ZnodeState ZS on IC.StateName = ZS.StateName
		inner join ZnodeCountry ZC ON IC.CountryName = ZC.CountryName and ZS.CountryCode = ZC.CountryCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

		EXEC (@SSQL)

		update ZAA set AddressId = UA.AddressId
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		inner join ZnodeAccount ZA ON IA.AccountCode = ZA.AccountCode
		inner join ZnodeAccountAddress ZAA ON ZA.AccountId = ZAA.AccountId
		
		INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
		SELECT distinct IA.AccountId, AddressId ,  @UserId , @GetDate, @UserId , @GetDate 
		FROM #InsertedAccountAddress UA
		INNER JOIN #InsertedAccount IA ON UA.AccountCode = IA.AccountCode
		WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AA.AccountId = IA.AccountId )

		update ZnodeAddress set Address3 = null
		where exists(select * from #InsertedAccountAddress IAA where IAA.AddressId = ZnodeAddress.AddressId )
		and Address3 is null
		
		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
		 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAccount @TableName = '+CAST(@TableName AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10))+',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));

		 ---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;
              			
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportAccount',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAddonAssociation')
	DROP PROC Znode_ImportAddonAssociation
GO

CREATE PROCEDURE [dbo].[Znode_ImportAddonAssociation](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @SSQL nvarchar(max);
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();

		IF OBJECT_ID('TEMPDB..#InsertProductAddonAssociation') IS NOT NULL
			DROP TABLE #InsertProductAddonAssociation

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL
			DROP TABLE #SKU

		IF OBJECT_ID('TEMPDB..#InsertZnodePimAddOnProduct') IS NOT NULL
			DROP TABLE #InsertZnodePimAddOnProduct

		CREATE TABLE #InsertZnodePimAddOnProduct ( PimAddOnProductId int,PimAddonGroupId int,PimProductId int)

		CREATE TABLE #InsertProductAddonAssociation
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300),AddonGroupName varchar(300),AddOnSKU varchar(300),DisplayOrder int, IsDefault varchar(10), GUID nvarchar(400)
		
		);

		CREATE TABLE #SKU 
		( 
			SKU nvarchar(300), PimProductId int
		);

		----Get All SKU Data From DB
		INSERT INTO #SKU (SKU, PimProductId)
		SELECT ZPAVL.AttributeValue, ZPAV.PimProductId
		FROM ZnodePimAttributeValue AS ZPAV
		INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		INNER JOIN ZnodePimAttribute ZPA ON ZPAV.PimAttributeId = ZPA.PimAttributeId
		WHERE ZPA.AttributeCode = 'SKU';

		SET @SSQL = 'Select RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID FROM '+@TableName;
		INSERT INTO #InsertProductAddonAssociation( RowNumber,SKU,AddonGroupName,AddOnSKU,DisplayOrder,IsDefault,GUID )
		EXEC sys.sp_sqlexec @SSQL;

		UPDATE #InsertProductAddonAssociation  
		SET IsDefault=CASE ISNULL(IsDefault,0) WHEN 'YES' THEN 1 WHEN 'NO' THEN 0 END

		SELECT SKU,AddonGroupName,AddOnSKU 
		INTO #DuplicateProductAddonAssociation 
		FROM #InsertProductAddonAssociation 
		Group BY SKU,AddonGroupName,AddOnSKU  having count(*) > 1

		----Checking AddonGroupName present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '99', 'AddonGroupName', AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS ( SELECT * FROM ZnodePimAddonGroupLocale i where i.AddonGroupName = ii.AddonGroupName );

		----Checking SKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '98', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.SKU = SKU.SKU)

		----Checking AddOnSKU present in DB
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '98', 'AddOnSKU', AddOnSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE NOT EXISTS( SELECT * FROM #SKU SKU WHERE ii.AddOnSKU = SKU.SKU)
		
		----Duplicate Record (SKU \ AddOnSKU \ AddonGroupName)
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '53', 'SKU \ AddOnSKU \ AddonGroupName ', SKU+' \ '+AddOnSKU+' \ '+AddonGroupName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAddonAssociation AS ii
		WHERE EXISTS ( select * FROM #DuplicateProductAddonAssociation i WHERE i.SKU = ii.SKU and i.AddOnSKU = ii.AddOnSKU and i.AddonGroupName = ii.AddonGroupName );

		----Checking is default value data validation
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertProductAddonAssociation AS ii  
		WHERE ISNULL(ii.IsDefault,0) not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '115', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM #InsertProductAddonAssociation AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAddonAssociation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertProductAddonAssociation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProductAddonAssociation
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount
		,TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))  
		WHERE ImportProcessLogId = @ImportProcessLogId;    
		
		UPDATE PAPD
		SET PAPD.ModifiedBy =@UserId,PAPD.ModifiedDate = @GetDate,
		PAPD.IsDefault = CASE WHEN ISNULL(IPAA.IsDefault,'') <>'' THEN IPAA.IsDefault ELSE PAPD.IsDefault END,
		PAPD.DisplayOrder = CASE WHEN ISNULL(IPAA.DisplayOrder,'') <>'' THEN IPAA.DisplayOrder ELSE PAPD.DisplayOrder END 
		FROM #InsertProductAddonAssociation IPAA   
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU   
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.AddOnSKU   
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName   
		INNER JOIN ZnodePimAddOnProduct PAP ON (PAP.PimProductId = SKU.PimProductId AND PAP.PimAddonGroupId = ZPAGL.PimAddonGroupId)
		INNER JOIN ZnodePimAddOnProductDetail PAPD ON (PAPD.PimAddOnProductId =PAP.PimAddOnProductId AND SKU1.PimProductId = PAPD.PimChildProductId )
		
		-----Inserting records in ZnodePimAddOnProduct
		INSERT INTO ZnodePimAddOnProduct(PimAddonGroupId,PimProductId,DisplayOrder,RequiredType,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT inserted.PimAddOnProductId, inserted.PimAddonGroupId,inserted.PimProductId into #InsertZnodePimAddOnProduct (PimAddOnProductId,PimAddonGroupId,PimProductId)
		SELECT DISTINCT ZPAGL.PimAddonGroupId,SKU.PimProductId, 999 as DisplayOrder,
		'Required' RequiredType,@UserId as CreatedBy,@GetDate,@UserId as ModifiedBy,@GetDate
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.SKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on ZPAGL.AddonGroupName = IPAA.AddonGroupName
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProduct ZPAP where ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId and ZPAP.PimProductId = SKU.PimProductId )

		-----Inserting records in ZnodePimAddOnProductDetail
		INSERT INTO ZnodePimAddOnProductDetail(PimAddOnProductId,PimChildProductId,IsDefault,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT ZPAP.PimAddOnProductId, SKU.PimProductId as PimChildProductId, CASE WHEN isnull(IPAA.IsDefault,0) IN ('True','1','Yes') THEN 1 ELSE 0 END, ISNULL(IPAA.DisplayOrder,999),@UserId ,@GetDate,@UserId,@GetDate 
		FROM #InsertProductAddonAssociation IPAA
		INNER JOIN #SKU SKU1 ON SKU1.SKU = IPAA.SKU
		INNER JOIN #SKU SKU ON SKU.SKU = IPAA.AddOnSKU
		INNER JOIN ZnodePimAddonGroupLocale ZPAGL on IPAA.AddonGroupName = ZPAGL.AddonGroupName
		INNER JOIN ZnodePimAddOnProduct ZPAP on SKU1.PimProductId = ZPAP.PimProductId and ZPAP.PimAddonGroupId = ZPAGL.PimAddonGroupId
		WHERE NOT EXISTS(SELECT * FROM ZnodePimAddOnProductDetail ZPAPD WHERE ZPAPD.PimAddOnProductId = ZPAP.PimAddOnProductId and ZPAPD.PimChildProductId = SKU.PimProductId )

		SET @GetDate = dbo.Fn_GetDate()
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;

	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAddonAssociation @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(max));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportAddonAssociation',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAssociateProducts')
	DROP PROC Znode_ImportAssociateProducts
GO

CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Product Association 
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	
	BEGIN TRY
	BEGIN TRAN A;
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation') IS NOT NULL 
			DROP TABLE #InsertProductAssociation

		IF OBJECT_ID('TEMPDB..#InsertProduct') IS NOT NULL 
			DROP TABLE #InsertProduct

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL 
			DROP TABLE #SKU

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation_Parent_type') IS NOT NULL 
			DROP TABLE #InsertProductAssociation_Parent_type
		-- Retrive RoundOff Value from global setting 

		CREATE TABLE #InsertProductAssociation 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400),BundleQuantity varchar(10) null
		);

		CREATE TABLE #InsertProductAssociation_Parent_type
		( 
			RowId int  PRIMARY KEY, RowNumber int, ParentSKU varchar(300), ChildSKU varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400),BundleQuantity varchar(10) null
			,PT_ParentProductId varchar(300), PT_ProductType nvarchar(100)
		);
		
		CREATE TABLE #InsertProduct 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, ParentProductId varchar(300), ChildProductId varchar(200), DisplayOrder int,IsDefault varchar(10), GUID nvarchar(400), ProductType nvarchar(100),BundleQuantity varchar(10) null
		);


		DECLARE @CategoryAttributId int;

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,ParentSKU,ChildSKU,DisplayOrder,IsDefault,GUID,Quantity FROM '+@TableName;
		INSERT INTO #InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder,IsDefault, GUID, BundleQuantity )
		EXEC sys.sp_sqlexec @SSQL;

		--@MessageDisplay will use to display validate message for input inventory value  
		CREATE TABLE #SKU 
		( 
						   SKU nvarchar(300), PimProductId int
		);
		INSERT INTO #SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;

		DECLARE @ProductType TABLE
		( 
			ProductType nvarchar(100) ,PimProductId int
		);
		INSERT INTO @ProductType
			   SELECT  ZPADV.AttributeDefaultValueCode, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimProductAttributeDefaultValue AS b
					ON a.PimAttributeId = dbo.Fn_GetProductTypeAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId
					   Inner join ZnodePimAttributeDefaultValue ZPADV On b.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
					   where  ZPADV.AttributeDefaultValueCode in ('GroupedProduct','BundleProduct','ConfigurableProduct');

		INSERT INTO #InsertProductAssociation_Parent_type
			SELECT IPAC.*,SKUParent.PimProductId, PT.ProductType
					FROM #InsertProductAssociation AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 
					inner join @ProductType PT on PT.PimProductId = SKUParent.PimProductId


		-- start Functional Validation 
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '84', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE isnull(ii.IsDefault,'') = '' and ii.PT_ProductType ='ConfigurableProduct'

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE isnull(ii.IsDefault,'') not in ('true','1','false','0') and isnull(ii.IsDefault,'') <> '' and ii.PT_ProductType ='ConfigurableProduct'

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE isnull(ii.IsDefault,'') not in ('true','1','false','0') and isnull(ii.IsDefault,'') <> '' and ii.PT_ProductType ='BundleProduct'

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '98', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii
			   WHERE NOT EXISTS( SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'ParentSKU / ChildSKU', ParentSKU+' / '+ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE ii.ParentSKU IN
			   (
				   select ParentSKU from #InsertProductAssociation_Parent_type
					group by ParentSKU,ChildSKU
					having count(1)>1
			   );

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '49', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE not exists
			   ( SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId Where  ii.ParentSKU = SKU.SKU )
			   AND  EXISTS (SELECT SKU  FROM #SKU SKU where ii.ParentSKU = SKU.SKU);

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '94', 'ParentSKU',   ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE NOT  EXISTS (SELECT SKU  FROM #SKU SKU where ii.ParentSKU = SKU.SKU) ;


			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '51', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE exists 
			   (SELECT SKU  FROM #SKU SKU inner join @ProductType  PT ON SKU.PimProductId = PT.PimProductId and ii.ChildSKU = SKU.SKU)
			    AND  EXISTS (SELECT SKU  FROM #SKU SKU where ii.ChildSKU = SKU.SKU);
			
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '94', 'ChildSKU',   ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation AS ii
			   WHERE NOT EXISTS (SELECT SKU  FROM #SKU SKU where ii.ChildSKU = SKU.SKU);

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '101', 'ParentSKU',  'Configure Attribute Missing: '+ Convert(nvarchar(400),isnull(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertProductAssociation_Parent_type AS ii Inner join #SKU PS ON 
			   ii.ParentSKU = PS.SKU 
			   Inner join @ProductType  PT ON PS.PimProductId = PT.PimProductId  AND PT.ProductType  in ('ConfigurableProduct')
			   where  NOT exists 
			   (select PimProductId  from ZnodePimConfigureProductAttribute d where PS.PimProductId = d.PimProductId)
			   -- End Function Validation 	

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '16', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation_Parent_type AS ii
			WHERE (ISNUMERIC(ii.DisplayOrder)=0 OR ii.DisplayOrder < 0 OR ii.DisplayOrder > 99999)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '26', 'BundleQuantity', BundleQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation_Parent_type AS ii
			WHERE ((isnull(ii.BundleQuantity,0) < 1 ) and ii.PT_ProductType ='BundleProduct' ) --or  ii.DisplayOrder = 0

			
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '2', 'BundleQuantity', BundleQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM #InsertProductAssociation_Parent_type AS ii
			WHERE (ii.BundleQuantity ='' and ii.PT_ProductType ='BundleProduct'  ) --or  ii.DisplayOrder = 0

			   UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + isnull(ParentSKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertProductAssociation_Parent_type IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		--- Delete Invalid Data after functional validation  
		DELETE FROM #InsertProductAssociation_Parent_type
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);

		SELECT RowNumber , SKUParent.PimProductId SKUParentId  ,
				   ( Select TOP 1 SKUChild.PimProductId from #SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    case when isnull(DisplayOrder,'')= '' and IPAC.PT_ProductType ='ConfigurableProduct'  then 99 else DisplayOrder end DisplayOrder ,
					 case when (isnull(IsDefault,'')= '' or IsDefault =0 or IsDefault > 999) and IPAC.PT_ProductType !='ConfigurableProduct'  then '0' else IsDefault end IsDefault, IPAC.PT_ProductType
					, BundleQuantity
					FROM #InsertProductAssociation_Parent_type AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

		insert into #InsertProduct (RowNumber,  ParentProductId , ChildProductId , DisplayOrder, IsDefault, ProductType, BundleQuantity)
			SELECT RowNumber , SKUParent.PimProductId SKUParentId  ,
				   ( Select TOP 1 SKUChild.PimProductId from #SKU AS SKUChild where  SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				    case when isnull(DisplayOrder,'')= '' and IPAC.PT_ProductType ='ConfigurableProduct'  then 99 else DisplayOrder end DisplayOrder ,
					 case when (isnull(IsDefault,'')= '' or IsDefault =0 or IsDefault > 999) and IPAC.PT_ProductType !='ConfigurableProduct'  then '0' else IsDefault end IsDefault, IPAC.PT_ProductType
					, BundleQuantity
					FROM #InsertProductAssociation_Parent_type AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 

	-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertProduct
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		update #InsertProduct
		set IsDefault =0
		where RowNumber < (select max(RowNumber) from #InsertProduct where IsDefault = '1' or  IsDefault = 'True' and ProductType ='ConfigurableProduct')
		and  ProductType ='ConfigurableProduct';


		update ZnodePimProductTypeAssociation
		set  IsDefault =0
		where  exists (select top 1 1  from #InsertProduct IP where IsDefault = '1' or  IsDefault = 'true' and PimParentProductId = IP.ParentProductId and ProductType ='ConfigurableProduct')
		

		UPDATE B set b.ModifiedDate = @GetDate, b.ModifiedBy = @UserId, b.DisplayOrder = case when ISNULL(a.DisplayOrder,0)<>0 then a.DisplayOrder else b.DisplayOrder end
				,b.IsDefault = A.IsDefault,b.BundleQuantity= case when A.Producttype = 'BundleProduct' then  case when isnull(a.BundleQuantity,'') ='' then case when b.BundleQuantity >=1 then b.BundleQuantity else 1 end else cast (a.BundleQuantity as int) end else null end
		from #InsertProduct A
		INNER JOIN ZnodePimProductTypeAssociation B ON a.ParentProductId = b.PimParentProductId and a.ChildProductId = b.PimProductId

	
		INSERT INTO ZnodePimProductTypeAssociation (PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDefault,BundleQuantity) 
		select  ParentProductId , ChildProductId , CASE WHEN ISNULL(DisplayOrder,0)=0 THEN 1 ELSE DisplayOrder END, @UserId, @GetDate, @UserId, @GetDate, IsDefault ,case when Producttype = 'BundleProduct' then case when  isnull(BundleQuantity,'') ='' then 1 else cast (BundleQuantity as int) end else null end
		from #InsertProduct  
		where  NOT Exists (Select TOP 1 1 from ZnodePimProductTypeAssociation where PimParentProductId =  #InsertProduct.ParentProductId
		AND PimProductId = #InsertProduct.ChildProductId )

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
						  WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
						  WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
					 END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
END TRY
	BEGIN CATCH
		ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAssociateProducts @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(max));


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportAssociateProducts',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	
	END CATCH;
END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAttributeDefaultValue')
	DROP PROC Znode_ImportAttributeDefaultValue
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributeDefaultValue](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			RowNumber int, AttributeCode varchar(300),AttributeDefaultValueCode varchar(300),AttributeDefaultValue varchar(1000),IsEditable varchar(10),DisplayOrder int, IsDefault varchar(10), SwatchText varchar(1000),SwatchImage varchar(500), SwatchImagePath varchar(500), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeCode,AttributeDefaultValueCode,AttributeDefaultValue,IsEditable,DisplayOrder,IsDefault,SwatchText,SwatchImage, SwatchImagePath ,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		UPDATE @InsertPimAtrribute  
		SET IsDefault=CASE ISNULL(IsDefault,0) WHEN 'YES' THEN 1 WHEN 'NO' THEN 0 END

		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '117', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode not in 
			   (
				   SELECT AttributeCode FROM @AttributeCode
			   );

		WITH CTE_AttributeDefaultValueCode AS(
		SELECT AttributeDefaultValueCode , AttributeCode, RowNumber ,ROW_NUMBER ()OVER (PARTITION BY AttributeDefaultValueCode , AttributeCode ORDER BY AttributeDefaultValueCode , AttributeCode )  Row_Id
		FROM @InsertPimAtrribute Z
		
		
		)
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE EXISTS
			  ( SELECT TOP 1 1 FROM CTE_AttributeDefaultValueCode Z WHERE Z.RowNumber=ii.RowNumber AND Z.Row_Id >1
			   )
			  

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '79', 'AttributeDefaultValueCode', AttributeDefaultValueCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '%[^0-9A-Za-z]%' OR ltrim(rtrim(isnull(ii.AttributeDefaultValueCode,''))) like '% %'

		

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsEditable', IsEditable, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsEditable not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsDefault not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '16', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 99999

		UPDATE ZIL
			SET ZIL.ColumnName =   ZIL.ColumnName + ' [ AttributeDefaultValueCode - ' + ISNULL(AttributeDefaultValueCode,'') + ' ] '
			FROM ZnodeImportLog ZIL 
			INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount
		,	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName and IPA.SwatchImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.SwatchImage = ZM.FileName)

        update ZPADV set ZPADV.IsEditable = case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end,
		                 ZPADV.DisplayOrder = CASE WHEN ISNULL(IPA.DisplayOrder,'') <> '' then  IPA.DisplayOrder ELSE ZPADV.DisplayOrder END ,
		                 ZPADV.IsDefault = CASE WHEN ISNULL(IPA.IsDefault,'')<>'' THEN IPA.IsDefault ELSE ZPADV.IsDefault END,ZPADV.SwatchText = IPA.SwatchText ,
		                 ZPADV.MediaId = case when isnull(@MediaId,0)= 0 then ZPADV.MediaId else @MediaId end, ZPADV.ModifiedBy = @UserId, ZPADV.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode

		update ZPADVL set ZPADVL.AttributeDefaultValue = IPA.AttributeDefaultValue, ZPADVL.ModifiedBy = @UserId, ZPADVL.ModifiedDate = @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode 
		inner join ZnodePimAttributeDefaultValue ZPADV on ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode
		inner join ZnodePimAttributeDefaultValueLocale ZPADVL ON ( ZPADVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId)

		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttributeDefaultValue (PimAttributeId,AttributeDefaultValueCode,IsEditable,DisplayOrder,IsDefault,SwatchText,MediaId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
		OUTPUT Inserted.PimAttributeId,Inserted.PimAttributeDefaultValueId,Inserted.AttributeDefaultValueCode INTO @InsertedPimAttributeIds  		
		SELECT ZPA.PimAttributeId,IPA.AttributeDefaultValueCode, case when IPA.IsEditable in ('True','1','Yes') then 1 else 0 end , Case when Isnull(IPA.DisplayOrder,0) = 0 then  99999 else IPA.DisplayOrder end  , 
		       case when IPA.IsDefault in ('True','1','Yes') then 1 else 0 end , IPA.SwatchText, @MediaId,@UserId , @GetDate ,@UserId , @GetDate 
		from @InsertPimAtrribute IPA 
		INNER JOIN ZnodePimAttribute ZPA ON IPA.AttributeCode = ZPA.AttributeCode  
		where not exists(select * from ZnodePimAttributeDefaultValue ZPADV where ZPA.PimAttributeId = ZPADV.PimAttributeId and IPA.AttributeDefaultValueCode = ZPADV.AttributeDefaultValueCode)
		
		INSERT INTO ZnodePimAttributeDefaultValueLocale(LocaleId,PimAttributeDefaultValueId,AttributeDefaultValue,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeDefaultValueId, IPA.AttributeDefaultValue, '', @UserId , @GetDate ,@UserId , @GetDate   
		FROM @InsertedPimAttributeIds IPAS 
		INNER JOIN ZnodePimAttribute ZPA ON IPAS.PimAttributeId = ZPA.PimAttributeId  
		INNER JOIN @InsertPimAtrribute IPA ON ZPA.AttributeCode= IPA.AttributeCode and IPAS.AttributeDefaultValueCode = IPA.AttributeDefaultValueCode

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
	
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAttributeDefaultValue @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportAttributeDefaultValue',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAttributes')
	DROP PROC Znode_ImportAttributes
GO

CREATE PROCEDURE [dbo].[Znode_ImportAttributes](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, AttributeName varchar(300), AttributeCode varchar(300), AttributeType varchar(300), DisplayOrder int, GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,AttributeTypeId int,AttributeCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,AttributeName,AttributeCode,AttributeType,DisplayOrder ,GUID)
		EXEC sys.sp_sqlexec @SSQL;


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @AttributeCode TABLE
		( 
		   AttributeCode nvarchar(300)
		);
		INSERT INTO @AttributeCode
			   SELECT AttributeCode
			   FROM ZnodePimAttribute 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   SELECT AttributeCode FROM @AttributeCode  where AttributeCode is not null 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeCode in 
			   (
				   select AttributeCode  FROM @InsertPimAtrribute  Group BY AttributeCode  having count(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '103', 'AttributeType', AttributeType, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.AttributeType NOT in 
			   (
				   SELECT AttributeTypeName  FROM ZnodeAttributeType  where IsPimAttributeType = 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.AttributeCode,''))) like '%[^0-9A-Za-z]%' OR ltrim(rtrim(isnull(ii.AttributeCode,''))) NOT LIKE '[^0-9]%'
			   OR ltrim(rtrim(isnull(ii.AttributeCode,''))) like '% %'

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '50', 'AttributeCode', AttributeCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE Isnumeric(ltrim(rtrim(isnull(ii.AttributeCode,'')))) =1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '16', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 99999


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Attribute - ' + ISNULL(AttributeCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		--- Insert data into base table ZnodePimatrribute with their validation 

		INSERT INTO ZnodePimAttribute (AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined
			,IsConfigurable,IsPersonalizable,IsShowOnGrid,DisplayOrder,HelpDescription,IsCategory,IsHidden,IsSwatch,
			CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		
		OUTPUT Inserted.PimAttributeId,Inserted.AttributeTypeId,Inserted.AttributeCode INTO @InsertedPimAttributeIds  
		
		SELECT ZAT.AttributeTypeId,AttributeCode, 0 IsRequired , 1 IsLocalizable,1 IsFilterable, 0 IsSystemDefined, 0 IsConfigurable,
		0 IsPersonalizable,  0 IsShowOnGrid , Case when Isnull(DisplayOrder,0) = 0 then  999 else DisplayOrder end  , '' HelpDescription ,0  IsCategory , 0 IsHidden , 0 IsSwatch,
		@UserId , @GetDate ,@UserId , @GetDate from @InsertPimAtrribute IPA INNER JOIN ZnodeAttributeType ZAT 
		ON IPA.AttributeType = ZAT.AttributeTypeName  
		
		INSERT INTO ZnodePimAttributeLocale (LocaleId,PimAttributeId,AttributeName,Description,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select @LocaleId ,IPAS.PimAttributeId, IPA.AttributeName, '', @UserId , @GetDate ,@UserId , @GetDate   
		 FROM @InsertedPimAttributeIds IPAS INNER JOIN @InsertPimAtrribute IPA ON IPAS.AttributeCode= IPA.AttributeCode 
		
		INSERT INTO ZnodePimAttributeValidation
		(PimAttributeId,InputValidationId,InputValidationRuleId,Name,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT IPA.PimAttributeId,ZAIV.InputValidationId,NULL,null , @UserId , @GetDate ,@UserId , @GetDate  
		FROM @InsertedPimAttributeIds IPA INNER JOIN ZnodeAttributeInputValidation ZAIV ON IPA.AttributeTypeId = ZAIV.AttributeTypeId

		insert into ZnodePimFrontendProperties (PimAttributeId,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		Select PimAttributeId, 0 IsComparable, 0 IsUseInSearch,0 IsHtmlTags,0 IsFacets, @UserId CreatedBy,@GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		from  @InsertedPimAttributeIds
		--      SET @Status = 1;
		
		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAttributes @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(max));


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportAttributes',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportB2BCustomer')
	DROP PROC Znode_ImportB2BCustomer
GO

CREATE PROCEDURE [dbo].[Znode_ImportB2BCustomer](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @LocaleId int= 0,@PortalId int ,@CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10),
		@AccountId int

		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';
		SELECT  @RoleId  = Id FROM AspNetRoles WHERE   NAME = 'User'  
		
		SELECT @AccountId = AccountId FROM ZnodeUser ZU WHERE UserId = @UserId

		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		CREATE TABLE #InsertCustomer 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, UserName nvarchar(512) ,FirstName	nvarchar(200),
			LastName nvarchar(200), BudgetAmount	numeric,Email	nvarchar(100),PhoneNumber	nvarchar(100),
		    EmailOptIn	bit	,ReferralStatus	nvarchar(40),IsActive	bit	,ExternalId	nvarchar(max), GUID NVARCHAR(400)
		);
		

		SET @SSQL = 'INSERT INTO #InsertCustomer( RowNumber,'+@CsvColumnString+',GUID ) 
					 SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+@TableName+'';

		EXEC sys.sp_sqlexec @SSQL
	
	    -- start Functional Validation 
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '104', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertCustomer AS ii
				WHERE ii.UserName not like '%_@_%_.__%' 
				
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertCustomer AS ii
				WHERE ii.UserName in 
				(SELECT UserName  FROM #InsertCustomer group by UserName  having count(*) > 1 )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '104', 'Email', Email, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertCustomer AS ii
				WHERE ii.Email not like '%_@_%_.__%'

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  

		DELETE FROM #InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomer
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		-- Insert Product Data 

		DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId nvarchar(256) ,UserName nvarchar(512),PortalId int )
		DECLARE @InsertedASPNetUsers TABLE (Id nvarchar(256) ,UserName nvarchar(512))
		DECLARE @InsertZnodeUser TABLE (UserId int,AspNetUserId nvarchar(256) )

		UPDATE ANU SET 
		ANU.PhoneNumber	= IC.PhoneNumber
		from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN #InsertCustomer IC ON ANZU.UserName = IC.UserName 
		where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

		UPDATE ZU SET 
		ZU.FirstName	= IC.FirstName,
		ZU.LastName		= IC.LastName,
		--ZU.MiddleName	= IC.MiddleName,
		ZU.BudgetAmount = IC.BudgetAmount,
		ZU.Email		= IC.Email,
		ZU.PhoneNumber	= IC.PhoneNumber,
		ZU.EmailOptIn	= Isnull(IC.EmailOptIn,0),
		ZU.IsActive		= 1,--IC.IsActive,
		ZU.AccountId    = @AccountId
		--ZU.ExternalId = ExternalId
		from AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN #InsertCustomer IC ON ANZU.UserName = IC.UserName 
		where Isnull(ANZU.PortalId,0) = Isnull(@PortalId ,0)

		Insert into AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
		OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
		Select NEWID(),IC.UserName, @PortalId FROM #InsertCustomer IC 
		where Not Exists (Select TOP 1 1  from AspNetZnodeUser ANZ where Isnull(ANZ.PortalId,0) = Isnull(@PortalId,0) AND ANZ.UserName = IC.UserName)

		INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
		LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
		output inserted.Id, inserted.UserName into @InsertedASPNetUsers
		SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,NULL LockoutEndDateUtc,A.IsActive As LockoutEnabled,
		0,@GetDate,AspNetZnodeUserId from #InsertCustomer A INNER JOIN @InsertedAspNetZnodeUser  B 
		ON A.UserName = B.UserName
				
		INSERT INTO  ZnodeUser(AccountId, AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
		IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		OUTPUT Inserted.UserId, Inserted.AspNetUserId into @InsertZnodeUser
		SELECT @AccountId, IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email
		,IC.PhoneNumber,Isnull(IC.EmailOptIn,0), 1 as IsActive,--IC.IsActive,
		IC.ExternalId, @UserId,@Getdate,@UserId,@Getdate
		FROM #InsertCustomer IC Inner join 
		@InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName  INNER JOIN 
		@InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
				  	     
		INSERT INTO AspNetUserRoles (UserId,RoleId)  Select AspNetUserId, @RoleID from @InsertZnodeUser 
		INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		SELECT UserId, @PortalId , @UserId,@Getdate,@UserId,@Getdate from @InsertZnodeUser
				
		Declare @ProfileId  int 
		select TOP 1 @ProfileId   =  ProfileId from ZnodePortalprofile where Portalid = @PortalId and IsDefaultRegistedProfile=1

		insert into ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @ProfileId  , UserId, 1 , @UserId,@Getdate,@UserId,@Getdate from @InsertZnodeUser

		DECLARE @GlobalAttributeDetail TABLE
		( 
		GlobalAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit 
		);

		INSERT INTO @GlobalAttributeDetail ( GlobalAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired )
		SELECT ZGA.GlobalAttributeId, ZAT.AttributeTypeName, ZGA.AttributeCode, ZGA.AttributeCode SourceColumnName, ZGA.IsRequired
		from tempdb.sys.columns a
		INNER JOIN ZnodeGlobalAttribute ZGA ON a.Name = ZGA.AttributeCode
		INNER JOIN ZnodeAttributeType ZAT ON ZGA.AttributeTypeId = ZAT.AttributeTypeId
		WHERE  object_id = object_id(@TableName)

		DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @GlobalAttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @NewProductId INT, @PimAttributeValueId INT, @SQLQuery varchar(max); 

		DECLARE  @UserDetail TABLE (  UserId int, GlobalAttributeId int , AttributeValue varchar(max), LocaleId int, RowNumber int)
			
		DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
		FOR SELECT GlobalAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired FROM @GlobalAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
		OPEN Cr_AttributeDetails;
		FETCH NEXT FROM Cr_AttributeDetails INTO @GlobalAttributeId, @AttributeTypeName, @AttributeCode, @SourceColumnName, @IsRequired;
		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @NewProductId = 0;
			SET @SQLQuery = 'SELECT ZU.UserId ,'''+CONVERT(VARCHAR(100), @GlobalAttributeId)+''' GlobalAttributeId , TN.'+@SourceColumnName+' as AttributeValue, '+CONVERT(VARCHAR(100), @LocaleId)+' LocaleId
							, RowNumber FROM '+@TableName+' TN
							INNER JOIN AspNetZnodeUser ANZU ON TN.UserName = ANZU.UserName
							INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
							INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId ';
				--print @SQLQuery	

			INSERT INTO @UserDetail(  UserId, GlobalAttributeId, AttributeValue, LocaleId, RowNumber )
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @GlobalAttributeId, @AttributeTypeName, @AttributeCode, @SourceColumnName, @IsRequired;
		END;
		CLOSE Cr_AttributeDetails;
		DEALLOCATE Cr_AttributeDetails;
			
		-----GLOBAL ATTRIBUTE USER INSERT
		INSERT INTO ZnodeUserGlobalAttributeValue ( UserId,	GlobalAttributeId,	GlobalAttributeDefaultValueId,	AttributeValue,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate )
		SELECT UserId, GlobalAttributeId ,NULL, NULL, @UserId, @GetDate, @UserId , @GetDate
		FROM @UserDetail UD
		where isnull(AttributeValue,'') <> ''
		AND NOT EXISTS (select * from ZnodeUserGlobalAttributeValue GAV where UD.UserId = GAV.UserId and UD.GlobalAttributeId = GAV.GlobalAttributeId )
				
		UPDATE ZnodeUserGlobalAttributeValueLocale set AttributeValue = UD.AttributeValue, ModifiedBy = @UserId,	ModifiedDate = @GetDate, GlobalAttributeDefaultValueId = GADV.GlobalAttributeDefaultValueId
		FROM ZnodeUserGlobalAttributeValueLocale UGAVL
		INNER JOIN ZnodeUserGlobalAttributeValue UGAV on UGAV.UserGlobalAttributeValueId = UGAVL.UserGlobalAttributeValueId 
		INNER JOIN @UserDetail UD ON  UGAV.UserId = UD.UserId and UGAV.GlobalAttributeId = UD.GlobalAttributeId
		LEFT JOIN ZnodeGlobalAttributeDefaultValue GADV ON GADV.GlobalAttributeId = UD.GlobalAttributeId AND UD.AttributeValue = GADV.AttributeDefaultValueCode
				
		INSERT INTO ZnodeUserGlobalAttributeValueLocale( UserGlobalAttributeValueId,	LocaleId,	AttributeValue,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate, GlobalAttributeDefaultValueId )
		SELECT UGAV.UserGlobalAttributeValueId, UD.LocaleId , UD.AttributeValue, @UserId, @GetDate, @UserId , @GetDate, GADV.GlobalAttributeDefaultValueId
		from ZnodeUserGlobalAttributeValue UGAV 
		INNER JOIN @UserDetail UD ON  UGAV.UserId = UD.UserId and UGAV.GlobalAttributeId = UD.GlobalAttributeId
		LEFT JOIN ZnodeGlobalAttributeDefaultValue GADV ON GADV.GlobalAttributeId = UD.GlobalAttributeId AND UD.AttributeValue = GADV.AttributeDefaultValueCode
		WHERE isnull(UD.AttributeValue,'') <> ''
		AND NOT EXISTS ( select * from ZnodeUserGlobalAttributeValueLocale UGAVL where UGAV.UserGlobalAttributeValueId = UGAVL.UserGlobalAttributeValueId)

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportB2BCustomer @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(max)) +',@PortalId='+CAST(@PortalId AS VARCHAR(max)) +',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportB2BCustomer',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		
	END CATCH;
END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportBrands')
	DROP PROC Znode_ImportBrands
GO

CREATE PROCEDURE [dbo].[Znode_ImportBrands](
	  @TableName			NVARCHAR(100), 
	  @Status				BIT OUT, 
	  @UserId				INT, 
	  @ImportProcessLogId	INT, 
	  @NewGUId				NVARCHAR(200),
	  @LocaleId	            INT= 1,
	  @CsvColumnString		NVARCHAR(max)
	  )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Made a provision to import Brand details.
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Brands;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		IF isnull(@LocaleId,0)=0
		BEGIN
			SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		END
		-- Retrive RoundOff Value from global setting 

		Create TABLE #InsertBrandData 
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, BrandCode varchar(max),IsActive varchar(max), BrandDescription varchar(max) default null,
			SEOKeyword varchar(max) default null,SEODescription varchar(max) default null, BrandLogo varchar(max) default null,SEOTitle varchar(max) default null,
			SEOFriendlyPageName varchar(max) default null,URLKey varchar(max) default null, Custom1 varchar(max) default null,Custom2 varchar(max) default null,
			Custom3 varchar(max) default null,Custom4 varchar(max) default null,Custom5 varchar(max) default null, GUID nvarchar(400)
		);	
			
		SET @SSQL = 'INSERT INTO #InsertBrandData( RowNumber,' + @CsvColumnString + ',GUID)
		             SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;		
		EXEC sys.sp_sqlexec @SSQL;

		UPDATE #InsertBrandData SET IsActive=CASE  WHEN IsActive IN ('Yes', 'True','1') THEN 1 WHEN IsActive IN ('No', 'False','0') THEN  0 END
		
		SELECT BrandCode 
		INTO #DuplicateBrandData 
		FROM #InsertBrandData 
		Group BY BrandCode  having count(*) > 1
		
		-- Start Functional Validation 
		-----------------------------------------------
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'BrandCode', BrandCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE exists(SELECT * FROM #DuplicateBrandData bd where bd.BrandCode=ii.BrandCode)
			   And not exists(select * from  ZnodeBrandDetails zbd 
							  INNER JOIN #DuplicateBrandData bd on bd.BrandCode=zbd.BrandCode) 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'BrandCode', BrandCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE isnull(BrandCode,'')=''			   
			  

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '121', 'BrandCode', BrandCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE  not exists 
				   (
						select * from ZnodePimAttributeDefaultValue zpadv
						inner join ZnodePimAttribute zpa on zpa.PimAttributeId=zpadv.PimAttributeId
						where AttributeCode='Brand' and AttributeDefaultValueCode=ii.BrandCode
				   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '8', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE isnull(ii.IsActive,'')=''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE isnull(ii.IsActive,'') not in ('True','1','Yes','FALSE','0','No')
			
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '82', 'SEOKeyword', SEOKeyword, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			  WHERE len(ltrim(rtrim(ii.SEOKeyword))) > 300 and isnull(ii.SEOKeyword,'')<>''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '82', 'SEODescription', SEODescription, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE len(ltrim(rtrim(ii.SEODescription))) > 300 and isnull(ii.SEODescription,'')<>''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '45', 'BrandLogo', BrandLogo, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii			 
			   WHERE isnull(BrandLogo,'')<>'' AND reverse(left(reverse(ii.BrandLogo),charindex('.',reverse(ii.BrandLogo)))) 
			   not in (select ValidationName from View_FamilyExtensions where FamilyCode='Image')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '45', 'BrandLogo', BrandLogo, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii			 
			   WHERE isnull(BrandLogo,'')<>'' and not exists (select * from ZnodeMedia where FileName=ii.BrandLogo)

  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '81', 'SEOTitle', SEOTitle, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertBrandData AS ii
			   WHERE len(ltrim(rtrim(ii.SEOTitle))) > 200 and isnull(ii.SEOTitle,'')<>''		
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '102', 'SEOFriendlyPageName', SEOFriendlyPageName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE (isnull(ii.SEOFriendlyPageName,'') LIKE '%[^a-zA-Z0-9]%' and  isnull(ii.SEOFriendlyPageName,'') NOT LIKE '%[_-]%' )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '81', 'URLKey', URLKey, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertBrandData AS ii  
			WHERE len(ltrim(rtrim(ii.URLKey))) > 200 and isnull(ii.URLKey,'')<>''			


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Brand - ' + ISNULL(BrandCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertBrandData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM #InsertBrandData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertBrandData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		
		--<Begin Data Updation>
		CREATE TABLE #InsertedBrands (BrandId INT,BrandCode nvarchar(100),CMSSEODetailId int ) 
		
		UPDATE zbd set WebsiteLink=isnull(ibd.URLKey,WebsiteLink),IsActive=isnull(ibd.IsActive,zbd.IsActive),ModifiedBy=@UserId,
					   ModifiedDate=@GetDate,Custom1=isnull(ibd.Custom1,zbd.custom1),Custom2=isnull(ibd.Custom2,zbd.custom2),Custom3=isnull(ibd.Custom3,zbd.custom3),Custom4=isnull(ibd.Custom4,zbd.custom4),
					   Custom5=ISNULL(ibd.Custom5, zbd.Custom5)      
		OUTPUT INSERTED.BrandId ,INSERTED.BrandCode INTO  #InsertedBrands (BrandId, BrandCode)
		from ZnodeBrandDetails zbd
		inner join #InsertBrandData IBD on ibd.BrandCode=zbd.BrandCode
		where ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a where a.BrandCode=zbd.BrandCode)

		UPDATE zbdl set zbdl.BrandId=zbd.BrandId,zbdl.Description=isnull(ibd.BrandDescription,zbdl.Description),SEOFriendlyPageName=isnull(IBD.SEOFriendlyPageName,zbdl.SEOFriendlyPageName),
		LocaleId=@LocaleId,ModifiedBy=@UserId,ModifiedDate=@GetDate,BrandName=isnull(ibd.BrandCode,zbdl.BrandName)
		FROM ZnodeBrandDetailLocale zbdl
		inner join ZnodeBrandDetails zbd on zbd.BrandId=zbdl.BrandId
		inner join #InsertBrandData IBD on ibd.BrandCode=zbd.BrandCode
		inner join #InsertedBrands ib on ib.BrandId=zbdl.BrandId
		where ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a where a.BrandCode=zbd.BrandCode)

		UPDATE ZCD set SEOId=ib.BrandId,SEOUrl=isnull(ibd.SEOFriendlyPageName,zcd.SEOUrl),ModifiedBy=@UserId,ModifiedDate=@GetDate,
					   SEOCode=isnull(ibd.BrandCode,zcd.SEOCode)
		OUTPUT INSERTED.SEOId ,INSERTED.SEOCode, INSERTED.CMSSEODetailId INTO  #InsertedBrands (BrandId, BrandCode,CMSSEODetailId) 
		FROM ZnodeCMSSEODetail ZCD		
		inner join #InsertedBrands ib on ib.BrandId=ZCD.SEOId
		inner join #InsertBrandData IBD on ibd.BrandCode=zcd.SEOCode
		where exists (select null from ZnodeBrandDetailLocale zbdl where zbdl.BrandId=ZCD.SEOId)
		and ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a where a.BrandCode=zcd.SEOCode)
		
		--<Delete Records Having Null Value>
		Delete from #InsertedBrands where isnull(CMSSEODetailId,0)=0
		--</Delete Records Having Null Value>
		
		UPDATE zcdl set CMSSEODetailId =isnull(ib.CMSSEODetailId,zcdl.CMSSEODetailId),LocaleId=@LocaleId,SEOTitle=isnull(ibd.SEOTitle,zcdl.SEOTitle),
						SEODescription=isnull(ibd.SEODescription,zcdl.SEODescription),SEOKeywords=isnull(ibd.SEOKeyword,zcdl.SEOKeywords),ModifiedBy=@UserId,ModifiedDate=@GetDate
		FROM ZnodeCMSSEODetailLocale zcdl
		inner join #InsertedBrands ib on ib.CMSSEODetailId=zcdl.CMSSEODetailId
		inner join #InsertBrandData IBD on ibd.BrandCode=ib.BrandCode
		and ibd.RowNumber=(select max(RowNumber) from #InsertBrandData a 
		inner join ZnodeBrandDetails zcd on  a.BrandCode=zcd.BrandCode)

		--</End Data Updation>

		--<Begin Data Insert>
		insert into ZnodeBrandDetails(BrandCode,MediaId,WebsiteLink,DisplayOrder,IsActive,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Custom1,Custom2,Custom3,
										Custom4,Custom5)
		OUTPUT INSERTED.BrandId ,INSERTED.BrandCode INTO  #InsertedBrands (BrandId, BrandCode) 		
		Select ibd.BrandCode,(select top 1 MediaId from ZnodeMedia where FileName=ibd.BrandLogo order by CreatedDate desc),ibd.URLKey,0,ibd.IsActive,@UserId,@GetDate,@UserId,@GetDate,ibd.Custom1,ibd.Custom2,ibd.Custom3,ibd.Custom4,ibd.Custom5
		from #InsertBrandData IBD	
		WHERE NOT EXISTS(SELECT * FROM ZnodeBrandDetails ZBD WHERE ZBD.BrandCode = IBD.BrandCode )		

		insert into ZnodeBrandDetailLocale (BrandId,Description,SEOFriendlyPageName,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,BrandName)
		select ac.BrandId,ibdl.BrandDescription,ibdl.SEOFriendlyPageName,@LocaleId,@UserId,@GetDate,@UserId,@GetDate,ibdl.BrandCode 
		from #InsertBrandData IBDL
		INNER JOIN #InsertedBrands ac on ac.BrandCode=ibdl.BrandCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeBrandDetailLocale a 
							INNER JOIN ZnodeBrandDetails b on  b.BrandCode=ibdl.BrandCode AND a.BrandId=b.BrandId )	

		insert into ZnodeCMSSEODetail (CMSSEOTypeId,SEOId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SEOCode,PublishStateId)
		OUTPUT INSERTED.SEOId ,INSERTED.SEOCode, INSERTED.CMSSEODetailId INTO  #InsertedBrands (BrandId, BrandCode,CMSSEODetailId)
		select (select CMSSEOTypeId  from ZnodeCMSSEOType where Name = 'Brand'),ac.BrandId,ibdl.SEOFriendlyPageName,@UserId,@GetDate,@UserId,@GetDate,ibdl.BrandCode,'2'
		from #InsertBrandData IBDL
		INNER JOIN #InsertedBrands ac on ac.BrandCode=ibdl.BrandCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeCMSSEODetail a 
							INNER JOIN ZnodeBrandDetails b on b.BrandCode=ibdl.BrandCode 
							where a.SEOCode=ibdl.BrandCode
							AND a.CMSSEOTypeId=(select CMSSEOTypeId  from ZnodeCMSSEOType where Name = 'Brand')  )
		
		--<Delete Records Having Null Value>
		Delete from #InsertedBrands where isnull(CMSSEODetailId,0)=0
		--</Delete Records Having Null Value>

		insert into ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		select ac.CMSSEODetailId ,@LocaleId,ibdl.SEOTitle,ibdl.SEODescription,ibdl.SEOKeyword,@UserId,@GetDate,@UserId,@GetDate
		from #InsertBrandData IBDL
		INNER JOIN #InsertedBrands ac on ac.BrandCode=ibdl.BrandCode
		WHERE NOT EXISTS(SELECT * FROM ZnodeCMSSEODetailLocale a 
							INNER JOIN ZnodeCMSSEODetail b on a.CMSSEODetailId=b.CMSSEODetailId and b.SEOCode=ibdl.BrandCode
							INNER JOIN ZnodeBrandDetails c on c.BrandCode=ibdl.BrandCode 
							AND b.CMSSEOTypeId=(select CMSSEOTypeId  from ZnodeCMSSEOType where Name = 'Brand')  )		
        --<End Data Insert>

		SET @GetDate = dbo.Fn_GetDate();

		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN Brands;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN Brands

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		 DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportBrands @TableName = '+CAST(@TableName AS VARCHAR(max)) +',
		 @Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(200))+',
		 @CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max)) ;

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportBrands',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCatalogCategory')
	DROP PROC Znode_ImportCatalogCategory
GO

CREATE PROCEDURE [dbo].[Znode_ImportCatalogCategory](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Catalog Category Product association
	
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()

		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertCatalogCategory TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, SKU varchar(300), CategoryCode varchar(200), DisplayOrder int, IsActive varchar(10), GUID nvarchar(400)
			--,Index Ind_SKU1 (SKU),Index Ind_CategoryName (CategoryName)
		);

		DECLARE @CategoryAttributId int;

		SET @CategoryAttributId =
		(
			SELECT TOP 1 PimAttributeId
			FROM ZnodePimAttribute AS ZPA
			WHERE ZPA.AttributeCode = 'CategoryCode' AND 
				  ZPA.IsCategory = 1
		);

		DECLARE @InventoryListId int;

		SET @SSQL = 'Select RowNumber,trim(SKU),CategoryCode,DisplayOrder ,IsActive,GUID FROM '+@TableName;
		INSERT INTO @InsertCatalogCategory( RowNumber, SKU, CategoryCode, DisplayOrder, IsActive, GUID )
		EXEC sys.sp_sqlexec @SSQL;

		----Removing Duplicate data
		;with cte as
		(
			select SKU, CategoryCode,max(RowNumber) as RowNumber from @InsertCatalogCategory
			group by SKU, CategoryCode
		)
		delete a from @InsertCatalogCategory a
		where  not exists (select * from CTE b where a.RowNumber = b.RowNumber )

		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @SKU TABLE
		( 
		   SKU nvarchar(300), PimProductId INT--, Index Ins_SKU (SKU)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue, a.PimProductId
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId AND b.LocaleId=@DefaultLocaleId;

		Declare @PimCategoryAttributeId int 
		set @PimCategoryAttributeId = (select top 1 PimAttributeId from ZnodePimAttribute where AttributeCode = 'CategoryCode')

		DECLARE @CategoryCode TABLE
		( 
			CategoryCode nvarchar(300), PimCategoryId int --index ind_101 (CategoryName)
		);
		INSERT INTO @CategoryCode
			   SELECT ZPCAL.CategoryValue, ZPCA.PimCategoryId
			   FROM ZnodePimCategoryAttributeValue AS ZPCA
					INNER JOIN
					ZnodePimCategoryAttributeValueLocale AS ZPCAL
					ON ZPCA.PimAttributeId = @PimCategoryAttributeId AND 
					ZPCA.PimCategoryAttributeValueId = ZPCAL.PimCategoryAttributeValueId;
					
		-- start Functional Validation 
		
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '98', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertCatalogCategory AS ii
			   WHERE ii.SKU NOT in 
			   (
				   SELECT SKU FROM @SKU  where SKU IS NOT NULL 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '105', 'CategoryCode', CategoryCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertCatalogCategory AS ii
			   WHERE ii.CategoryCode NOT IN 
			   (
				   SELECT CategoryCode FROM @CategoryCode  where CategoryCode IS NOT NULL 
			   );
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '17', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertCatalogCategory AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '115', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM @InsertCatalogCategory AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		  SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		  FROM @InsertCatalogCategory AS ii  
		  WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No')

		  
		
		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ CategoryCode - ' + ISNULL(CategoryCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertCatalogCategory IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertCatalogCategory
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber IS NOT NULL
		);

	
		
			  Declare @ZnodePimCategoryProduct TABLE (PimProductId int , PimCategoryId int , Status bit , DisplayOrder int) 
			  	
			  insert into @ZnodePimCategoryProduct (PimProductId , PimCategoryId , Status , DisplayOrder )
			  SELECT SKU.PimProductId, (Select top 1 PimCategoryId from @CategoryCode where ICC.CategoryCode = CategoryCode )  PimCategoryId
				 , CASE WHEN IsActive in ('True','1','Yes') Then 1 ELSE 0 END , DisplayOrder FROM @InsertCatalogCategory AS ICC INNER JOIN	 @SKU AS SKU ON ICC.SKU = SKU.SKU 
			
			  INSERT into ZnodePimCategoryProduct ( PimProductId, PimCategoryId, Status, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate) 
			  Select TABL.PimProductId, TABL.PimCategoryId, TABL.Status, TABL.DisplayOrder,@UserId, @GetDate, @UserId, @GetDate   from @ZnodePimCategoryProduct TABL    
			  Where NOT EXISTS (Select top 1 1 from ZnodePimCategoryProduct ZPCP where ZPCP.PimProductId = TABL.PimProductId and  ZPCP.PimCategoryId = TABL.PimCategoryId)

		SET @GetDate = dbo.Fn_GetDate();
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertCatalogCategory
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
 
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportCatalogCategory @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(max));


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportCatalogCategory',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		
		
	END CATCH;
END;



GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCatalogCategoryHierarchyAssociation')
	DROP PROC Znode_ImportCatalogCategoryHierarchyAssociation
GO

CREATE PROCEDURE [dbo].[Znode_ImportCatalogCategoryHierarchyAssociation]
(
	@TableName NVARCHAR(100), 
	@Status BIT OUT, 
	@UserId INT, 
	@ImportProcessLogId INT, 
	@NewGUId NVARCHAR(200),
	@PimCatalogId INT
)
AS
BEGIN 
BEGIN TRAN A;
BEGIN TRY
SET NOCOUNT ON;

	DECLARE @GetDate datetime= dbo.Fn_GetDate()
	DECLARE @SSQL VARCHAR(1000)

	IF OBJECT_ID('tempdb..#Category') IS NOT NULL
		DROP TABLE #Category;

	Declare @FeatureValue VARCHAR(500)
	--If the CatalogCategoryHierarchyAssociationAutoCreate value is true, 1 or Yes then input parent code hierarchy will be generate thogh the import
	--If the CatalogCategoryHierarchyAssociationAutoCreate value is false, 0 or No then input parent code hierarchy is not present in the database then it will give an error log
	SELECT TOP 1 @FeatureValue = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'CatalogCategoryHierarchyAssociationAutoCreate'

	--Getting existing categories
	SELECT A.PimCategoryId,B.CategoryValue CategoryCode 
	INTO #Category 
	FROM ZnodePimCategoryAttributeValue A 
	INNER JOIN ZnodePimCategoryAttributeValueLocale B ON A.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId 
	WHERE EXISTS(SELECT TOP 1 1 FROM ZnodePimAttribute X WHERE X.IsCategory =1 and X.AttributeCode = 'CategoryCode' and A.PimAttributeId = X.PimAttributeId )

	IF OBJECT_ID('tempdb..#HierarchyImportData') IS NOT NULL
		DROP TABLE #HierarchyImportData;

	CREATE TABLE #HierarchyImportData (RowNumber INT,ParentCode NVARCHAR(MAX),CategoryCode NVARCHAR(MAX), DisplayOrder VARCHAR(10),Action VARCHAR(100),GUID VARCHAR(100));

	SET @SSQL = 'Select RowNumber,LTRIM(RTRIM(ParentCode)), LTRIM(RTRIM(CategoryCode)), DisplayOrder, Action ,GUID FROM '+@TableName;
	INSERT INTO #HierarchyImportData( RowNumber,ParentCode, CategoryCode, DisplayOrder,Action ,GUID)
	EXEC sys.sp_sqlexec @SSQL;

	
	IF OBJECT_ID('tempdb..#SplitedCategoryHierarchy') IS NOT NULL
		DROP TABLE #SplitedCategoryHierarchy

	--Created table for category hierarchy split
	CREATE TABLE #SplitedCategoryHierarchy (PimCategoryHierarchyId INT, ParentPimCategoryHierarchyId INT
	,PimCatalogId INT, PimCategoryId INT,RowNumber INT ,PimCategoryCode VARCHAR(300),RowId INT,Action varchar(100),DisplayOrder VARCHAR(10), ParentCategoryId INT)

	DECLARE @RecordCount INT=(SELECT COUNT(1) FROM #HierarchyImportData) , @Cnt INT = 1 ,@FirstCategoryId  INT 
	WHILE @Cnt <= @RecordCount  
	BEGIN
		SET @FirstCategoryId = 0 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '122', 'ParentCode / CategoryCode', '', @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE ISNULL(ParentCode,'') = '' AND ISNULL(CategoryCode,'') = '' AND ii.RowNumber  = @Cnt 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '131', 'CategoryCode', CategoryCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE ISNULL(CategoryCode,'') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '16', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE (ii.DisplayOrder > 99999 OR ii.DisplayOrder <= 0) AND ISNULL(ii.DisplayOrder,'') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '115', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE ISNUMERIC(ii.DisplayOrder)=0 AND ISNULL(ii.DisplayOrder,'') <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '125', 'Action', Action, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE isnull(Action,'') NOT IN ('ADD','DELETE')
		
		DELETE FROM #HierarchyImportData WHERE RowNumber IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )
		
		IF OBJECT_ID('tempdb..#ExistingHierarchy') IS NOT NULL
			DROP TABLE #ExistingHierarchy;
	
		TRUNCATE TABLE #SplitedCategoryHierarchy

		--Splitting category hierarchy and inserted into temp table #SplitedCategoryHierarchy
		INSERT INTO #SplitedCategoryHierarchy (PimCatalogId , PimCategoryCode ,RowNumber,RowId,Action,DisplayOrder)
		SELECT @PimCatalogId, LTRIM(RTRIM(B.item)) as PimCategoyHierarchyCode , Id, RowNumber, Action, CASE WHEN ISNULL(DisplayOrder,'') = '' THEN 0 ELSE DisplayOrder END
		FROM #HierarchyImportData A 
		CROSS APPLY  dbo.split(isnull(A.ParentCode,'')+CASE WHEN isnull(A.ParentCode,'') = '' THEN '' ELSE '/' END+A.CategoryCode,'/') B 
		Where A.RowNumber  = @Cnt  

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '127', 'ParentCode / CategoryCode', PimCategoryCode, @NewGUId, RowId, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #SplitedCategoryHierarchy AS ii
		WHERE NOT EXISTS(SELECT * FROM #Category C WHERE LTRIM(RTRIM(ii.PimCategoryCode)) = c.CategoryCode)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '123', 'ParentCode / CategoryCode', PimCategoryCode, @NewGUId, RowId, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #SplitedCategoryHierarchy AS ii
		GROUP BY PimCategoryCode ,RowId
		HAVING COUNT(*) > 1

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '124', 'ParentCode', ParentCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE ISNULL(replace(ii.ParentCode,' ',''),'') like '%//%'
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '128', 'CategoryCode', CategoryCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #HierarchyImportData AS ii
		WHERE ISNULL(replace(LTRIM(RTRIM(ii.CategoryCode)),' ',''),'') like '%[^a-zA-Z0-9]%'

		--Deleting the records which was invalid and added into error log
		DELETE FROM #SplitedCategoryHierarchy WHERE RowId IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )
		DELETE FROM #HierarchyImportData WHERE RowNumber IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )

		IF OBJECT_ID('tempdb..#CategoryCodeCheck') IS NOT NULL
			DROP TABLE #CategoryCodeCheck;

		IF EXISTS(SELECT * FROM #SplitedCategoryHierarchy)
		BEGIN
			Update A SET A.PimCategoryId = D.PimCategoryId FROM #SplitedCategoryHierarchy A INNER JOIN #Category D ON LTRIM(RTRIM(A.PimCategoryCode)) = LTRIM(RTRIM(D.CategoryCode))

			Select TOP 1 @FirstCategoryId = X.PimCategoryId FROM #SplitedCategoryHierarchy X
	
			--Getting existing category hierarchy
			;WITH CTE_ZnodePimCategoryHierarchy as 
			(
				SELECT PimCategoryHierarchyId,ParentPimCategoryHierarchyId,PimCategoryId,PimCatalogId
				FROM ZnodePimCategoryHierarchy 
				WHERE PimCatalogId = @PimCatalogId 
			)
			,Hierarchy AS
			(
				-- Anchor
				SELECT  A.PimCategoryHierarchyId,A.ParentPimCategoryHierarchyId,A.PimCategoryId,A.PimCatalogId --, dense_rank() over(order by a.ParentPimCategoryHierarchyId) as RowNumber
				FROM CTE_ZnodePimCategoryHierarchy A
				WHERE A.ParentPimCategoryHierarchyId IS NULL AND  
				A.PimCategoryId =@FirstCategoryId 	AND A.PimCatalogId = @PimCatalogId
				UNION ALL
				-- Recursive query
				SELECT  E.PimCategoryHierarchyId,E.ParentPimCategoryHierarchyId,E.PimCategoryId,E.PimCatalogId--, ROW_NUMBER() over(order by E.ParentPimCategoryHierarchyId,E.PimCategoryHierarchyId) as RowNumber
				FROM CTE_ZnodePimCategoryHierarchy E
				JOIN Hierarchy H ON E.ParentPimCategoryHierarchyId = H.PimCategoryHierarchyId
				WHERE  Exists(Select * FROM #SplitedCategoryHierarchy X WHERE E.PimCategoryId = X.PimCategoryId)
			)
			SELECT * INTO #ExistingHierarchy FROM Hierarchy --Where RowNumber  = @Cnt  --
			--order by PimCategoryHierarchyId

			--Adding required columns into temp table
			Alter table #ExistingHierarchy Add Id INT Identity(1,1), RowNumber INT, ParentCategoryId INT

			--Updating the row number for parent category
			UPDATE #ExistingHierarchy SET RowNumber = 1 WHERE ParentPimCategoryHierarchyId IS NULL

			DECLARE @RecordCount1 INT=(SELECT COUNT(1) FROM #ExistingHierarchy) , @Cnt1 INT = 1 --,@FirstCategoryId1  INT 
			DECLARE @ParentPimCategoryHierarchyId1 INT , @RowNumber INT

			--Updating the row number according to category hierarhcy level
			WHILE @Cnt1 <= @RecordCount1  
			BEGIN
				
				SELECT @ParentPimCategoryHierarchyId1 = PimCategoryHierarchyId FROM #ExistingHierarchy WHERE Id = @Cnt1
				SET @RowNumber = (SELECT TOP 1 RowNumber FROM #ExistingHierarchy WHERE PimCategoryHierarchyId = @ParentPimCategoryHierarchyId1) 

				UPDATE #ExistingHierarchy SET RowNumber = @RowNumber + 1
				WHERE ParentPimCategoryHierarchyId = @ParentPimCategoryHierarchyId1
				
				SET @ParentPimCategoryHierarchyId1 = 0
				SET @RowNumber = 0
				SET @Cnt1 = @Cnt1+1
			END

			--Updating the parent category on existing category hierarchy
			UPDATE b SET ParentCategoryId = a.PimCategoryId
			from #ExistingHierarchy a
			inner join #ExistingHierarchy b on b.ParentPimCategoryHierarchyId = a.PimCategoryHierarchyId
			
			--Updating the parent category on input record
			UPDATE  A SET A.ParentCategoryId = B.PimCategoryId
			FROM #SplitedCategoryHierarchy A  
			INNER JOIN #SplitedCategoryHierarchy B ON B.RowNumber = A.RowNumber-1
						
			--Existing Hierarchy has been updated on the input categories
			Update B SET B.PimCategoryHierarchyId= A.PimCategoryHierarchyId, 
			B.ParentPimCategoryHierarchyId = A.ParentPimCategoryHierarchyId
			FROM #ExistingHierarchy  A INNER JOIN #SplitedCategoryHierarchy B ON ISNULL(A.PimCategoryId,0) = ISNULL(B.PimCategoryId,0) AND ISNULL(A.ParentCategoryId,0) = ISNULL(B.ParentCategoryId,0) and A.RowNumber = B.RowNumber 

			--Removing hierarchy ids of categoris if its parent dont have any hierarchy for input	
			UPDATE CH SET PimCategoryHierarchyId = NULL ,ParentPimCategoryHierarchyId = NULL
			FROM #SplitedCategoryHierarchy CH
			WHERE CH.PimCategoryHierarchyId IS NOT NULL AND EXISTS(SELECT * FROM #SplitedCategoryHierarchy CH1 WHERE CH1.PimCategoryHierarchyId IS NULL AND CH.RowNumber-1 = CH1.RowNumber)

			--Removing hierarchy ids of categories if its parent doesent present in the input hierarchy
			UPDATE A SET PimCategoryHierarchyId = NULL ,ParentPimCategoryHierarchyId = NULL 
			FROM #SplitedCategoryHierarchy A 
			WHERE NOT EXISTS(SELECT * FROM #SplitedCategoryHierarchy X WHERE X.PimCategoryHierarchyId = A.ParentPimCategoryHierarchyId)
			AND A.ParentPimCategoryHierarchyId IS NOT NULL 
			
			IF isnull(@FeatureValue,'') IN ('False','0','No','')
			BEGIN
				--If root level category is not present
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '130', 'ParentCode', ParentCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #HierarchyImportData h
				WHERE RowNumber IN (
					SELECT RowId FROM #SplitedCategoryHierarchy a
					WHERE NOT EXISTS(SELECT * FROM #HierarchyImportData b WHERE LTRIM(RTRIM(A.PimCategoryCode)) = LTRIM(RTRIM(b.CategoryCode)) AND a.RowId = b.RowNumber)
					AND A.ParentCategoryId IS NULL AND A.PimCategoryHierarchyId IS NULL)
				
				--If child level category is not present
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '130', 'ParentCode', ParentCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #HierarchyImportData H
				WHERE RowNumber IN (
					SELECT RowId FROM #SplitedCategoryHierarchy a
					WHERE NOT EXISTS(SELECT * FROM #HierarchyImportData b WHERE LTRIM(RTRIM(A.PimCategoryCode)) = LTRIM(RTRIM(b.CategoryCode)) AND a.RowId = b.RowNumber)
					AND A.ParentCategoryId IS NOT NULL AND A.ParentPimCategoryHierarchyId IS NULL)
				AND NOT EXISTS(SELECT * FROM ZnodeImportLog X WHERE H.RowNumber = X.RowNumber AND X.ImportProcessLogId=@ImportProcessLogId)
				
				--Deleting the records which was invalid and added into error log
				DELETE FROM #SplitedCategoryHierarchy WHERE RowId IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )
				DELETE FROM #HierarchyImportData WHERE RowNumber IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )
			END

			--Adding new hierarchy into ZnodePimCategoryHierarchy if input having Add action
			IF EXISTS(SELECT * FROM #SplitedCategoryHierarchy WHERE Action = 'Add')
			BEGIN
				
				DROP TABLE IF EXISTS #InsertedPimCategoryHierarchy

				CREATE TABLE #InsertedPimCategoryHierarchy (PimCategoryHierarchyId INT, PimCategoryId INT);

				--Inserting new category hierarchy if not present
				INSERT INTO ZnodePimCategoryHierarchy (PimCatalogId,ParentPimCategoryHierarchyId,PimCategoryId,DisplayOrder,IsActive,
					ActivationDate,ExpirationDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PimParentCategoryId)
				OUTPUT inserted.PimCategoryHierarchyId,inserted.PimCategoryId
				INTO #InsertedPimCategoryHierarchy (PimCategoryHierarchyId, PimCategoryId)
				Select PimCatalogId,ParentPimCategoryHierarchyId,PimCategoryId,DisplayOrder,1,NULL,NULL,2,@GetDate,2,@GetDate,NULL
				FROM #SplitedCategoryHierarchy WHERE PimCategoryHierarchyId is null 

				-- Newly created Hierarchy has been updated into input category hierarchy
				UPDATE A 
				SET A.PimCategoryHierarchyId=B.PimCategoryHierarchyId
				FROM #SplitedCategoryHierarchy A INNER JOIN #InsertedPimCategoryHierarchy B
					ON A.PimCategoryId=B.PimCategoryId
				WHERE A.PimCategoryHierarchyId IS NULL

				-- Updating new parent hierarchy has been updated into input category hierarchy
				UPDATE A SET A.ParentPimCategoryHierarchyId =(Select PimCategoryHierarchyId FROM #SplitedCategoryHierarchy X WHERE X.RowNumber = A.RowNumber -1 )
				FROM #SplitedCategoryHierarchy A 
		
				-- Updating new parent hierarchy has been updated newly added input category hierarchy into table ZnodePimCategoryHierarchy
				UPDATE ZnodePimCategoryHierarchy SET ParentPimCategoryHierarchyId = A.ParentPimCategoryHierarchyId
				FROM #SplitedCategoryHierarchy A WHERE ZnodePimCategoryHierarchy.PimCategoryHierarchyId = A.PimCategoryHierarchyId
				AND EXISTS(SELECT * FROM #InsertedPimCategoryHierarchy B WHERE A.PimCategoryHierarchyId = B.PimCategoryHierarchyId)
			END
			ELSE
			BEGIN
			
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '126', 'ParentCode / CategoryCode', ParentCode + case when isnull(ParentCode,'') <> '' then '/' else '' end + CategoryCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #HierarchyImportData AS ii
				WHERE ii.RowNumber = (SELECT TOP 1 RowId FROM #SplitedCategoryHierarchy where PimCategoryHierarchyId is null ORDER BY RowNumber DESC)

				DELETE FROM #SplitedCategoryHierarchy WHERE RowId IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )
				DELETE FROM #HierarchyImportData WHERE RowNumber IN (SELECT RowNumber FROM ZnodeImportLog WHERE ImportProcessLogId = @ImportProcessLogId )

				--Delete the category hierarchy and its child category 
				DECLARE @PimCategoryHierarchyId INT
				SET @PimCategoryHierarchyId = (SELECT TOP 1 PimCategoryHierarchyId FROM #SplitedCategoryHierarchy ORDER BY RowNumber DESC)
				EXECUTE [Znode_DeletePimCategoryHierarchy] @PimCategoryHierarchyId = @PimCategoryHierarchyId, @PimCatalogId = @PimCatalogId, @Status = 0
			END
		END

		SET @Cnt = @Cnt + 1 
	END

	DECLARE @FailedRecordCount BIGINT
	DECLARE @SuccessRecordCount BIGINT

	SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
	SELECT @SuccessRecordCount = COUNT(DISTINCT RowNumber) FROM #HierarchyImportData

	SET @GetDate = dbo.Fn_GetDate();
	--Updating the import process status
	UPDATE ZnodeImportProcessLog
	SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
						WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
						WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
					END, 
		ProcessCompletedDate = @GetDate
	WHERE ImportProcessLogId = @ImportProcessLogId;

	UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
	WHERE ImportProcessLogId = @ImportProcessLogId;

COMMIT TRAN A;
END TRY
BEGIN CATCH
ROLLBACK TRAN A;

	SET @Status = 0;
	SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

	DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportCatalogCategoryHierarchyAssociation @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(200));


	---Import process updating fail due to database error
	UPDATE ZnodeImportProcessLog
	SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
	WHERE ImportProcessLogId = @ImportProcessLogId;

	---Loging error for Import process due to database error
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

	--Updating total and fail record count
	UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
	TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId)
	WHERE ImportProcessLogId = @ImportProcessLogId;

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_ImportCatalogCategoryHierarchyAssociation',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
		
		
END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCustomer')
	DROP PROC Znode_ImportCustomer
GO

CREATE PROCEDURE [dbo].[Znode_ImportCustomer]
(
	  @TableName NVARCHAR(100), 
	  @Status BIT OUT, 
	  @UserId INT, 
	  @ImportProcessLogId INT, 
	  @NewGUId NVARCHAR(200), 
	  @LocaleId INT= 0,
	  @PortalId INT ,
	  @CsvColumnString NVARCHAR(max)
)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Customer Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY

	    DECLARE @MessageDisplay NVARCHAR(100), @SSQL NVARCHAR(max),@AspNetZnodeUserId NVARCHAR(256),@ASPNetUsersId NVARCHAR(256),
			@PasswordHash NVARCHAR(max),@SecurityStamp NVARCHAR(max),@RoleId NVARCHAR(256),@IsAllowGlobalLevelUserCreation NVARCHAR(10)
			,@ProfileId INT, @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT
		 
		SET @SecurityStamp = '0wVYOZNK4g4kKz9wNs-UHw2'
		SET @PasswordHash = 'APy4Tm1KbRG6oy7h3r85UDh/lCW4JeOi2O2Mfsb3OjkpWTp1YfucMAvvcmUqNaSOlA==';

		SELECT @RoleId = Id FROM AspNetRoles WHERE   NAME = 'User'  

		SELECT @IsAllowGlobalLevelUserCreation = FeatureValues FROM ZnodeGlobalsetting WHERE FeatureName = 'AllowGlobalLevelUserCreation'

		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		-- Retrive RoundOff Value FROM global setting 
		Delete from ZnodeImportLog where ErrorDescription = '42' and ColumnName like '%AccountCode%' and  ImportProcessLogId= @ImportProcessLogId

		DECLARE @AttributeCode Nvarchar(max) = ''
		SELECT @AttributeCode=STRING_AGG(c.AttributeCode , ',')   
		FROM ZnodeGlobalFamilyGroupMapper a
		INNER JOIN ZnodeGlobalAttributeGroupMapper f ON (f.GlobalAttributeGroupId = a.GlobalAttributeGroupId)
		INNER JOIN ZnodeGlobalAttribute c ON (c.GlobalAttributeId = f.GlobalAttributeId)
		WHERE GlobalAttributeFamilyId = (SELECT TOP 1 GlobalAttributeFamilyId FROM ZnodeGlobalAttributeFamily where FamilyCode='User')
			AND NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='ZnodeUser' AND COLUMN_NAME=c.AttributeCode)
			AND EXISTS (SELECT TOP 1 1 FROM tempdb.sys.columns WHERE Object_id = Object_id(@TableName) AND name = c.AttributeCode )
		
		-- Three type of import required three table varible for product , category and brand
		CREATE TABLE #InsertCustomer 
		( 
			RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, UserName NVARCHAR(512) ,FirstName	NVARCHAR(200),
			LastName NVARCHAR(200), BudgetAmount	NUMERIC,Email	NVARCHAR(100),PhoneNumber	NVARCHAR(100),
		    EmailOptIn	varchar(100)	,ReferralStatus	NVARCHAR(40),IsActive	varchar(100)	,ExternalId	NVARCHAR(max),CreatedDate DATETIME,
			ProfileName varchar(200),AccountCode NVARCHAR(100),DepartmentName varchar(300),RoleName NVARCHAR(256), GUID NVARCHAR(400)
			,Custom1 NVARCHAR(max),Custom2 NVARCHAR(max),Custom3 NVARCHAR(max),
			Custom4 NVARCHAR(max),Custom5 NVARCHAR(max), SMSOptIn varchar(100)
		);

		SET @SSQL = ' ALTER TABLE #InsertCustomer ADD '+REPLACE(TRIM(LTRIM(@AttributeCode)), ',',' NVARCHAR(max),' ) + CASE WHEN @AttributeCode = '' THEN '' ELSE ' NVARCHAR(max)' END 
		EXEC (@SSQL)

		SET @SSQL = 'INSERT INTO #InsertCustomer( RowNumber,' + @CsvColumnString + ',GUID)
						SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;

		EXEC sys.sp_sqlexec @SSQL;

		--If Account Code Exists then it will update as it is and if not exists then it will show error.
		UPDATE IC set AccountCode = ZA.AccountCode 
		FROM ZnodeUser a
		inner join ZnodeAccount ZA on (ZA.AccountId = a.AccountId)
		INNER JOIN #InsertCustomer IC on (IC.UserName = a.UserName)
		WHERE ISNULL(IC.AccountCode,'') = '' AND ISNULL(IC.RoleName,'') <> ''

		IF @CsvColumnString NOT LIKE '%AccountCode%'
		BEGIN
			--If Acount Code Exists then it will update as it is and if not exists then it will show error.
			UPDATE IC set AccountCode = ZA.AccountCode
			FROM ZnodeUser a
			INNER JOIN ZnodeAccount ZA on (ZA.AccountId = a.AccountId)
			INNER JOIN #InsertCustomer IC on (IC.UserName = a.UserName)
			WHERE ISNULL(IC.AccountCode,'') = '' 
		END
		
		SELECT TOP 1 @ProfileId   =  ProfileId FROM ZnodePortalprofile WHERE Portalid = @Portalid and IsDefaultRegistedProfile=1
		
		IF (ISNULL(@ProfileId ,0) = 0 ) 
		BEGIN
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '62', 'Default Portal Profile', '', @NewGUId, 1 , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
							
			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;

			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
			WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
			SELECT @SuccessRecordCount = 0

			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
			WHERE ImportProcessLogId = @ImportProcessLogId;

			DELETE FROM #InsertCustomer 
			SET @Status = 0;

			COMMIT TRAN A;
			RETURN 0 
		END
		
		IF @IsAllowGlobalLevelUserCreation = 'true'
		BEGIN
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '10', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM #InsertCustomer AS ii  
			WHERE ltrim(rtrim(ii.UserName)) IN (SELECT UserName FROM AspNetZnodeUser);  
		END

        INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '104', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ii.UserName not like '%_@_%_.__%' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '35', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ii.UserName like '%;%'
				
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '30', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ltrim(rtrim(ii.UserName)) IN 
		(SELECT ltrim(rtrim(UserName))  FROM #InsertCustomer GROUP BY ltrim(rtrim(UserName))  having count(*) > 1 )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '104', 'Email', Email, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ii.Email not like '%_@_%_.__%' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'IsActive',  IsActive , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertCustomer AS ii  
		WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '77', 'AccountCode', ii.AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer ii 
		WHERE ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') !='' 
			AND NOT EXISTS(SELECT * FROM ZnodeAccount za INNER JOIN ZnodePortalAccount zpa on za.AccountId = zpa.AccountId
				WHERE  ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') = za.AccountCode and zpa.PortalId = @PortalId )
			AND EXISTS(SELECT ISNULL(LTRIM(RTRIM(AccountCode)),'') FROM ZnodeAccount za1 WHERE ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') = za1.AccountCode );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '73', 'AccountCode', AccountCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') !='' AND ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') NOT IN 
			(
				SELECT ISNULL(LTRIM(RTRIM(AccountCode)),'') FROM ZnodeAccount   
			);

        INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '75', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') ='' AND ISNULL(LTRIM(RTRIM(RoleName)),'') <> '' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '74', 'RoleName', RoleName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE --ltrim(rtrim(ii.RoleName)) not IN ('User','Manager','Administrator') and ISNULL(LTRIM(RTRIM(RoleName)),'') <> '' and
			ISNULL(LTRIM(RTRIM(RoleName)),'') <> '' and not exists (SELECT top 1 1 FROM  AspNetRoles ANR WHERE name IN ('User','Manager','Administrator') AND  ANR.name =ii.RoleName)

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '76', 'DepartmentName', DepartmentName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
		FROM #InsertCustomer AS ii
		WHERE ISNULL(LTRIM(RTRIM(ii.DepartmentName)),'') <> ''
			AND NOT EXISTS(SELECT * FROM  ZnodeAccount ZA INNER JOIN ZnodeDepartment ZD on ZA.AccountId = ZD.AccountId
				WHERE ISNULL(LTRIM(RTRIM(ii.AccountCode)),'') = LTRIM(RTRIM(za.AccountCode))
				AND ISNULL(LTRIM(RTRIM(ii.DepartmentName)),'') = LTRIM(RTRIM(ZD.DepartmentName)))

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'EmailOptIn',  EmailOptIn , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertCustomer AS ii  
		WHERE ii.EmailOptIn NOT IN ('True','1','Yes','FALSE','0','No','');

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT '68', 'SMSOptIn',  SMSOptIn , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
		FROM #InsertCustomer AS ii  
		WHERE ii.SMSOptIn NOT IN ('True','1','Yes','FALSE','0','No','');
	
		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertCustomer IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL;

		--Note : Content page import is not required 
		
		-- END Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		IF OBJECT_ID('tempdb..#GlobalAttributeData1') IS NOT NULL 
			DROP TABLE #GlobalAttributeData1;

		CREATE TABLE #GlobalAttributeData1 (RowNumber INT,Username NVARCHAR(500),FirstName NVARCHAR(100),LastName NVARCHAR(100),AttributeCode Nvarchar(300),AttributeValue Nvarchar(Max),Userid Int)

		SET @SSQL =' Select RowNumber,Username,FirstName,LastName,AttributeCode,AttributeValue
                    FROM #InsertCustomer 
					UNPIVOT
					( AttributeValue For AttributeCode IN ('+@AttributeCode+')
					) UNPIVOT8'
                
		INSERT INTO #GlobalAttributeData1(RowNumber,Username,FirstName,LastName,AttributeCode,AttributeValue)   
        EXEC sys.sp_sqlexec @SSQL;  

		ALTER TABLE #GlobalAttributeData1 ADD AttributetypeName VARCHAR(200) , ValidationName VARCHAR(600) , ValidationValue VARCHAR(600);
		
		UPDATE A
		SET A.AttributetypeName=C.AttributeTypeName, ValidationName = d.name  , ValidationValue =  e.Name
		FROM #GlobalAttributeData1 A
		INNER JOIN ZnodeGlobalAttribute B ON (B.AttributeCode=A.AttributeCode)
		INNER JOIN ZnodeAttributeType C ON (C.AttributeTypeId=B.AttributeTypeId)
		INNER JOIN ZnodeAttributeInputValidation d ON (d.AttributeTypeId = c.AttributeTypeId AND c.AttributeTypeName=d.ControlName)
		INNER JOIN ZnodeGlobalAttributeValidation e ON (e.InputValidationId = d.InputValidationId AND b.GlobalAttributeId = e.GlobalAttributeId);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
		SELECT dbo.Fn_ValidateDataErrorCode(ii.AttributetypeName,ii.ValidationName ), ii.AttributeCode, ii.AttributeValue , @NewGUId, RowNumber, @UserId, @GetDate, 
			@UserId, @GetDate, @ImportProcessLogId  
		FROM #GlobalAttributeData1 AS ii
		WHERE dbo.Fn_ValidateData (ii.AttributetypeName,ii.AttributeValue,ii.ValidationName, ii.ValidationValue)=0
			AND ii.AttributeValue<>'';
		
		DELETE FROM #InsertCustomer
		WHERE RowNumber IN
		(
			SELECT DISTINCT RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND RowNumber IS NOT NULL
			--AND GUID = @NewGUID
		);

		-- Update Record count IN log 
        
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog 
		WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomer

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- END

		-- Insert Product Data 
				
		DECLARE @InsertedAspNetZnodeUser TABLE (AspNetZnodeUserId NVARCHAR(256) ,UserName NVARCHAR(512),PortalId INT )
		DECLARE @InsertedASPNetUsers TABLE (Id NVARCHAR(256) ,UserName NVARCHAR(512))
		DECLARE @InsertZnodeUser TABLE (UserId INT,AspNetUserId NVARCHAR(256),CreatedDate DATETIME )

		UPDATE ANU 
		SET ANU.PhoneNumber	= IC.PhoneNumber, 
			ANU.LockoutEndDateUtc = case when IC.IsActive IN('0','No','False') then @GetDate when IC.IsActive IN('1','Yes','True') then null else ANU.LockoutEndDateUtc END
		FROM AspNetZnodeUser ANZU 
		INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN #InsertCustomer IC ON ANZU.UserName = IC.UserName 
		WHERE CASE WHEN @IsAllowGlobalLevelUserCreation = 'true' THEN -1 ELSE Isnull(ANZU.PortalId,0) END = CASE WHEN @IsAllowGlobalLevelUserCreation = 'true' THEN -1 ELSE Isnull(@PortalId ,0) END

		UPDATE ZU SET 
		ZU.FirstName	= IC.FirstName,
		ZU.LastName		= IC.LastName,
		ZU.BudgetAmount = IC.BudgetAmount,
		ZU.Email		= IC.Email,
		ZU.PhoneNumber	= IC.PhoneNumber,
		ZU.EmailOptIn	= (CASE ISNULL(IC.EmailOptIn,0) WHEN 'Yes' THEN 1 WHEN 'No' THEN 0 ELSE CAST(ISNULL(IC.EmailOptIn,0) As BIT) END),
		ZU.IsActive		= (CASE ISNULL(IC.IsActive,0) WHEN 'Yes' THEN 1 WHEN 'No' THEN 0 ELSE CAST(ISNULL(IC.IsActive,0) As BIT) END),
		ZU.Custom1 = IC.Custom1,
		ZU.Custom2 = IC.Custom2,
		ZU.Custom3 = IC.Custom3,
		ZU.Custom4 = IC.Custom4,
		ZU.Custom5 = IC.Custom5,
		ZU.SMSOptIn	= (CASE ISNULL(IC.SMSOptIn,0) WHEN 'Yes' THEN 1 WHEN 'No' THEN 0 WHEN '' THEN ZU.SMSOptIn ELSE CAST(ISNULL(IC.SMSOptIn,0) As BIT) END)
		FROM AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN #InsertCustomer IC ON ANZU.UserName = IC.UserName 
		WHERE CASE WHEN @IsAllowGlobalLevelUserCreation = 'true' THEN -1 ELSE Isnull(ANZU.PortalId,0) END = CASE WHEN @IsAllowGlobalLevelUserCreation = 'true' THEN -1 ELSE Isnull(@PortalId ,0) END

		INSERT INTO AspNetZnodeUser (AspNetZnodeUserId, UserName, PortalId)		
		OUTPUT INSERTED.AspNetZnodeUserId, INSERTED.UserName, INSERTED.PortalId	INTO  @InsertedAspNetZnodeUser 			 
		SELECT NEWID(),IC.UserName, @PortalId FROM #InsertCustomer IC 
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM AspNetZnodeUser ANZ 
			WHERE CASE WHEN @IsAllowGlobalLevelUserCreation = 'true' THEN -1 ELSE Isnull(ANZ.PortalId,0) END = CASE WHEN @IsAllowGlobalLevelUserCreation = 'true' THEN -1 ELSE Isnull(@PortalId ,0) END 
				AND ANZ.UserName = IC.UserName)

		INSERT INTO ASPNetUsers (Id,Email,EmailConfirmed,PasswordHash,SecurityStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
		LockoutEndDateUtc,LockOutEnabled,AccessFailedCount,PasswordChangedDate,UserName)
		OUTPUT inserted.Id, inserted.UserName INTO @InsertedASPNetUsers
		SELECT NewId(), Email,0 ,@PasswordHash,@SecurityStamp,PhoneNumber,0,0,case when A.IsActive IN ('0','False','No') then @GetDate else null END LockoutEndDateUtc,1 LockoutEnabled,
			0,@GetDate,AspNetZnodeUserId 
		FROM #InsertCustomer A 
		INNER JOIN @InsertedAspNetZnodeUser B ON A.UserName = B.UserName
			
		INSERT INTO  ZnodeUser(AspNetUserId,FirstName,LastName,CustomerPaymentGUID,Email,PhoneNumber,EmailOptIn,
			IsActive,ExternalId, CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,UserName,Custom1,Custom2,Custom3,Custom4,Custom5,SMSOptIn)
		OUTPUT Inserted.UserId, Inserted.AspNetUserId,Inserted.CreatedDate INTO @InsertZnodeUser
		SELECT IANU.Id AspNetUserId ,IC.FirstName,IC.LastName,null CustomerPaymentGUID,IC.Email,IC.PhoneNumber,
			(CASE ISNULL(IC.EmailOptIn,0) WHEN 'Yes' THEN 1 WHEN 'No' THEN 0 ELSE CAST(ISNULL(IC.EmailOptIn,0) As BIT) END),
			(CASE ISNULL(IC.IsActive,0) WHEN 'Yes' THEN 1 WHEN 'No' THEN 0 ELSE CAST(ISNULL(IC.IsActive,0) As BIT) END),
			IC.ExternalId, @UserId,
			CASE WHEN IC.CreatedDate IS NULL OR IC.CreatedDate = '' THEN  @Getdate ELSE IC.CreatedDate END,
			@UserId,@Getdate,IC.UserName,IC.Custom1,IC.Custom2,IC.Custom3,IC.Custom4,IC.Custom5,
				(CASE ISNULL(IC.SMSOptIn,0) WHEN 'Yes' THEN 1 WHEN 'No' THEN 0 ELSE CAST(ISNULL(IC.SMSOptIn,0) As BIT) END)
		FROM #InsertCustomer IC 
		INNER JOIN @InsertedAspNetZnodeUser IANZU ON IC.UserName = IANZU.UserName
		INNER JOIN @InsertedASPNetUsers IANU ON IANZU.AspNetZnodeUserId = IANU.UserName 
	  	     
		INSERT INTO AspNetUserRoles (UserId,RoleId)  SELECT AspNetUserId, @RoleID FROM @InsertZnodeUser 
		INSERT INTO ZnodeUserPortal (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		SELECT UserId, @PortalId , @UserId, IZU.CreatedDate,@UserId,@Getdate 
		FROM @InsertZnodeUser IZU

		INSERT INTO ZnodeAccountUserPermission(UserId,AccountPermissionAccessId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT UserId, 4 , @UserId, @Getdate,@UserId,@Getdate 
		FROM @InsertZnodeUser IZU
		
		UPDATE a 
		SET a.Userid = b.UserId
		FROM #GlobalAttributeData1 a 
		INNER JOIN ZnodeUser b ON (b.username = a.Username)  
				
		UPDATE D
		SET D.AttributeValue=A.AttributeValue
		FROM #GlobalAttributeData1 A 
		INNER JOIN ZnodeGlobalAttribute C ON A.AttributeCode=C.AttributeCode
		INNER JOIN ZnodeUser ZU ON LTRIM(RTRIM(a.Username))=LTRIM(RTRIM(ZU.UserName)) 
		INNER JOIN ZnodeUserPortal ZUP on ZUP.UserId=ZU.UserId and ZUP.PortalId=@PortalId
		INNER JOIN ZnodeUserGlobalAttributeValue b ON c.GlobalAttributeId=b.GlobalAttributeId AND ZU.UserId=b.UserId
		INNER JOIN ZnodeUserGlobalAttributeValueLocale d on b.UserGlobalAttributeValueId=d.UserGlobalAttributeValueId

		INSERT INTO ZnodeUserGlobalAttributeValue (UserId,	GlobalAttributeId,	GlobalAttributeDefaultValueId,	AttributeValue,	CreatedBy,	CreatedDate,ModifiedBy,	ModifiedDate)
		SELECT g.Userid,ZGA.GlobalAttributeId,null,null,@UserId,@Getdate,@UserId,@Getdate
		FROM #GlobalAttributeData1 g 
		INNER JOIN ZnodeGlobalAttribute ZGA on ZGA.AttributeCode =g.AttributeCode
		INNER JOIN ZnodeUserPortal ZUP on ZUP.UserId=g.UserId and ZUP.PortalId=@PortalId
		WHERE NOT EXISTS (SELECT top 1 1 FROM ZnodeUserGlobalAttributeValue ZGAV WHERE ZGAV.Userid =g.Userid and ZGA.GlobalAttributeId=ZGAV.GlobalAttributeId)

		INSERT INTO ZnodeUserGlobalAttributeValuelocale(UserGlobalAttributeValueId,	LocaleId,	AttributeValue,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate,	GlobalAttributeDefaultValueId,	MediaId,	MediaPath)
		SELECT UserGlobalAttributeValueId, @LocaleId,g.AttributeValue ,@UserId,@Getdate,@UserId,@Getdate,null,null,null
		FROM ZnodeUserGlobalAttributeValue ZUGAV 
		INNER JOIN #GlobalAttributeData1 g on ZUGAV.userid =g.userid
		INNER JOIN ZnodeUserPortal ZUP on ZUP.UserId=g.UserId and ZUP.PortalId=@PortalId
		INNER JOIN ZnodeGlobalAttribute ZGA on ZGA.AttributeCode =g.AttributeCode and ZGA.GlobalAttributeId = ZUGAV.GlobalAttributeId
		WHERE NOT EXISTS (SELECT Top 1 1 FROM ZnodeUserGlobalAttributeValuelocale z WHERE z.UserGlobalAttributeValueId = ZUGAV.UserGlobalAttributeValueId)

		---------------------------------------------------------------------------------

		DECLARE @Profile table (ProfileId INT)

		INSERT INTO ZnodeProfile (ProfileName,ShowOnPartnerSignup,Weighting,TaxExempt,DefaultExternalAccountNo,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ParentProfileId)
		OUTPUT inserted.ProfileId INTO @Profile(ProfileId)
		SELECT Distinct ProfileName, 0, null,0, REPLACE(LTRIM(RTRIM(ProfileName)),' ','') as DefaultExternalAccountNo, @UserId,@Getdate, @UserId,@Getdate, null as ParentProfileId				
		FROM #InsertCustomer IC
		WHERE NOT EXISTS(SELECT * FROM ZnodeProfile ZP WHERE IC.ProfileName = ZP.ProfileName )
			AND ISNULL(ic.ProfileName,'') <> ''

		INSERT INTO ZnodePortalProfile (PortalId,	ProfileId,	IsDefaultAnonymousProfile,	IsDefaultRegistedProfile,	CreatedBy,	CreatedDate,	ModifiedBy,	ModifiedDate)
		SELECT @PortalId, ProfileId, 0 AS IsDefaultAnonymousProfile, 0 AS IsDefaultRegistedProfile, @UserId,@Getdate, @UserId,@Getdate
		FROM @Profile

		UPDATE ZnodeUserProfile 
		SET ProfileId = COALESCE(ZP.ProfileId,@ProfileId)
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		INNER JOIN ZnodeUserProfile u ON u.UserId = a.UserId
		LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
		--WHERE IC.ProfileName <> ''
				
		INSERT INTO ZnodeUserProfile (ProfileId,UserId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT COALESCE(ZP.ProfileId,@ProfileId)  , a.UserId, 1 , @UserId,a.CreatedDate,@UserId,@Getdate 
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		LEFT join ZnodeProfile ZP on IC.ProfileName = ZP.ProfileName
		WHERE NOT EXISTS (SELECT TOP  1 1 FROM ZnodeUserProfile u WHERE u.UserId = a.UserId )
			AND EXISTS(SELECT * FROM @InsertZnodeUser IZU WHERE A.UserId = IZU.UserId)

		--Updating RoleName if customer has changed the account and RoleName left blank then by default User role assigned to the customer
		UPDATE u 
		set u.RoleId = @RoleId
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		INNER JOIN AspNetUserRoles u on u.UserId = b.Id
		WHERE ISNULL(IC.AccountCode,'') <> '' AND ISNULL(IC.RoleName,'') = ''
			AND EXISTS(SELECT * FROM ZnodeAccount ZA WHERE ISNULL(a.AccountId,0) = ZA.AccountId AND ZA.AccountCode <> IC.AccountCode)

		---to update accountid agaist user
		UPDATE ZU 
		SET ZU.AccountId = ZA.AccountId 
		FROM AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	 
		INNER JOIN #InsertCustomer IC ON ANZU.UserName = IC.UserName
		INNER JOIN ZnodeAccount ZA ON ZA.AccountCode = IC.AccountCode
		WHERE ISNULL(ANZU.PortalId,0) = ISNULL(@PortalId ,0) AND ISNULL(IC.AccountCode,'') <> '' 
				
		UPDATE ZDU 
		set ZDU.DepartmentId = ZD.DepartmentId, 
			ModifiedBy = @UserId, 
			ModifiedDate = @Getdate
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		INNER JOIN ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
		INNER JOIN ZnodeDepartmentUser ZDU on ZDU.UserId = a.UserId
		WHERE ISNULL(IC.DepartmentName,'') <> ''

		INSERT INTO ZnodeDepartmentUser(UserId,DepartmentId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT a.UserId, ZD.DepartmentId, @UserId,a.CreatedDate,@UserId,@Getdate 
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		INNER JOIN ZnodeDepartment ZD on IC.DepartmentName = ZD.DepartmentName
		WHERE NOT EXISTS (SELECT TOP  1 1 FROM ZnodeDepartmentUser u WHERE u.UserId = a.UserId)
			AND ISNULL(IC.DepartmentName,'') <> ''
		
		UPDATE u 
		SET u.RoleId = ZD.Id
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		INNER JOIN AspNetRoles ZD on IC.RoleName = ZD.Name
		INNER JOIN AspNetUserRoles u on u.UserId = b.Id
		WHERE isnull(IC.RoleName,'') <> '' 
		
		--when RoleName and AccountCode is null in update file then If a value was available previously, then it should be removed (along with Department and Role Name) 
		--after the update process is complete.
		DELETE UR 
		FROM AspNetUserRoles UR 
		INNER JOIN ZnodeUser ZC	ON  ZC.AspNetUserId = UR.UserId
		WHERE EXISTS (SELECT * FROM #InsertCustomer IC WHERE IC.UserName = ZC.UserName AND (ISNULL(IC.RoleName,'') = '' AND ISNULL(IC.AccountCode,'') = ''))

		UPDATE ZnodeUser SET AccountId = NULL 
		WHERE EXISTS (SELECT * FROM #InsertCustomer IC WHERE IC.UserName = ZnodeUser.UserName AND ISNULL(IC.AccountCode,'') = '' AND ISNULL(IC.RoleName,'') = '' )		
		
		INSERT INTO AspNetUserRoles(UserId,RoleId)
		SELECT b.Id as ASPNetUserId, CASE WHEN ZD.Id IS NULL THEN @RoleId ELSE ZD.Id END as RoleId
		FROM ZnodeUser a
		INNER JOIN ASPNetUsers b on (b.Id = a.AspNetUserId)
		INNER JOIN AspNetZnodeUser c on (c.AspNetZnodeUserId = b.UserName)
		INNER JOIN #InsertCustomer IC on (IC.UserName = c.UserName)
		LEFT JOIN AspNetRoles ZD on IC.RoleName = ZD.Name
		WHERE NOT EXISTS (SELECT TOP  1 1 FROM AspNetUserRoles u WHERE u.UserId = b.Id)
			AND ISNULL(IC.AccountCode,'') <> ''
			
		--If no value was available previously then no value should be saved after the update process is complete.
		--If a value was available previously, then it should be removed after the update process is complete.
		DELETE DU 
		FROM ZnodeDepartmentUser DU
		INNER JOIN ZnodeUser ZU ON DU.UserId = ZU.UserId
		INNER JOIN ZnodeDepartment ZC ON  ZC.DepartmentId = DU.DepartmentId
		WHERE EXISTS (SELECT * FROM #InsertCustomer IC WHERE IC.UserName = ZU.UserName AND (ISNULL(IC.DepartmentName,'') = '' OR ISNULL(IC.ACCOUNTCODE,'') = ''))

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN A;
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportCustomer @TableName = '+CAST(@TableName AS VARCHAR(max))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@PortalId='+CAST(@PortalId AS VARCHAR(10))+',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));
              	
		 ---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount WITH (NOLOCK) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
			TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount WITH (NOLOCK) WHERE ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

        EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportCustomer',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportCustomerAddress')
	DROP PROC Znode_ImportCustomerAddress
GO

CREATE PROCEDURE [dbo].[Znode_ImportCustomerAddress]
(
	@TableName NVARCHAR(100), 
	@Status BIT OUT, 
	@UserId INT, 
	@ImportProcessLogId INT, 
	@NewGUId NVARCHAR(200), 
	@LocaleId INT= 0,
	@CsvColumnString NVARCHAR(MAX),
	@IsAccountAddress BIT = 0 
)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Customer Address
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay NVARCHAR(100), @SSQL NVARCHAR(max),@IsAllowGlobalLevelUserCreation NVARCHAR(10)

		DECLARE @GETDATE DATETIME= dbo.Fn_GETDATE();
		-- Retrive Value FROM global setting 
		SELECT @IsAllowGlobalLevelUserCreation = FeatureValues FROM ZnodeGlobalsetting WHERE FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category AND brand

		CREATE TABLE #InsertCustomerAddress 
		( 
			RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT,UserName NVARCHAR(512),FirstName VARCHAR(300),
			LastName VARCHAR(300),DisplayName NVARCHAR(1200),Address1 VARCHAR(300),Address2 VARCHAR(300),
			CountryName VARCHAR(3000),StateName VARCHAR(3000),CityName VARCHAR(3000),PostalCode VARCHAR(50),
			PhoneNumber VARCHAR(50),IsDefaultBilling BIT,IsDefaultShipping BIT	,IsActive BIT,ExternalId NVARCHAR(2000),
			CompanyName NVARCHAR(2000), GUID NVARCHAR(400), PortalId INT
		);
	
		SET @SSQL = ' INSERT INTO #InsertCustomerAddress ( RowNumber, ' + @CsvColumnString + ' ,GUID )
		SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		EXEC sys.sp_sqlexec @SSQL;

		UPDATE ICA
		SET ICA.PortalId=ZUP.PortalId
		FROM #InsertCustomerAddress ICA
		INNER JOIN ZnodeUser ZU ON ICA.UserName=ZU.UserName
		INNER JOIN ZnodeUserPortal ZUP ON ZU.UserId=ZUP.UserId
		-- start Functional Validation 
		----------------------------------------------

		IF (@IsAccountAddress = 0)
		BEGIN
			IF @IsAllowGlobalLevelUserCreation = 'true'
			BEGIN
				INSERT INTO ZnodeImportLog
					(ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '106', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
				FROM #InsertCustomerAddress AS ii
				WHERE ii.UserName NOT IN 
				(
					SELECT UserName FROM AspNetZnodeUser WHERE PortalId = ii.PortalId
				);
			END
			ELSE
			BEGIN
				INSERT INTO ZnodeImportLog
					(ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '106', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
				FROM #InsertCustomerAddress AS ii
				WHERE ii.UserName NOT IN 
				(
					SELECT UserName FROM AspNetZnodeUser   
				);

				INSERT INTO ZnodeImportLog
					(ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '8', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
				FROM #InsertCustomerAddress AS ii
				WHERE ISNULL(ltrim(rtrim(ii.UserName)), '') = ''
			END
		END

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '8', 'StateName', StateName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
		FROM #InsertCustomerAddress AS ii
		WHERE NOT EXISTS(SELECT * FROM ZnodeState ZS INNER JOIN ZnodeCountry ZC ON ZS.CountryCode = ZC.CountryCode
						WHERE ii.CountryName = ZC.CountryName AND ZS.StateName = ISNULL(LTRIM(RTRIM(ii.StateName)), ''))

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '8', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
		FROM #InsertCustomerAddress AS ii
		WHERE NOT EXISTS(SELECT * FROM ZnodeCountry ZC WHERE ZC.CountryName = ISNULL(LTRIM(RTRIM(ii.CountryName)), '') )

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '90', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
		FROM #InsertCustomerAddress AS ii
		WHERE ISNULL(ltrim(rtrim(ii.CountryName)), '') <> ''
			AND NOT EXISTS(SELECT * FROM ZnodePortalCountry ZPC INNER JOIN ZnodeCountry ZC ON ZPC.CountryCode = ZC.CountryCode
				WHERE PortalId = ii.PortalId AND LTRIM(RTRIM(ii.CountryName)) = LTRIM(RTRIM(ZC.CountryName)))
				AND ii.PortalId IS NOT NULL

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '134', 'CountryName', CountryName, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
		FROM #InsertCustomerAddress AS ii
		WHERE ISNULL(LTRIM(RTRIM(ii.CountryName)), '') <> ''
			AND NOT EXISTS(SELECT * FROM ZnodePortalCountry ZPC INNER JOIN ZnodeCountry ZC ON ZPC.CountryCode = ZC.CountryCode
				WHERE LTRIM(RTRIM(ii.CountryName)) = LTRIM(RTRIM(ZC.CountryName)))
			AND ii.PortalId IS NULL

		 -- error log when atleast db have 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '63', 'IsDefaultBilling/IsDefaultShipping', IsDefaultBilling, @NewGUId, RowNumber, @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId
		FROM #InsertCustomerAddress IC WHERE EXISTS
			(
				SELECT TOP 1 1  FROM AspNetZnodeUser ANZU 
				INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
				INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
				INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
				INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
				WHERE ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
					AND ZA.IsDefaultShipping =IC.IsDefaultShipping
			)

		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		UPDATE ZIL
		SET ZIL.ColumnName =   ZIL.ColumnName + ' [ UserName - ' + ISNULL(UserName,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertCustomerAddress IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		DELETE FROM #InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber IS NOT NULL
		);

		UPDATE ZA SET ZA.IsDefaultBilling = 0
		FROM AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName --and IC.IsDefaultBilling <> ZA.IsDefaultBilling 
		WHERE IC.IsDefaultBilling = 1 

		UPDATE ZA SET ZA.IsDefaultShipping = 0
		FROM AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
		INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
		INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
		INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
		INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName
		WHERE IC.IsDefaultShipping = 1 

		--DELETE FROM ZnodeImportLog  WHERE ImportProcessLogId = @ImportProcessLogId AND  ErrorDescription = '63'
		-- UPDATE Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT

		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomerAddress

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
	
		DELETE FROM #InsertCustomerAddress 
		WHERE NOT EXISTS
			(SELECT TOP 1 1 FROM 
				(
					SELECT ROW_NUMBER() OVER(PARTITION BY UserName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,StateName,CityName,PostalCode	
						,PhoneNumber,IsDefaultBilling,IsDefaultShipping,ExternalId,CompanyName ORDER BY RowId DESC)	AS rw_nmbr,RowId
					FROM #InsertCustomerAddress
				) abc WHERE rw_nmbr =1 AND abc.RowId = #InsertCustomerAddress.RowId
			)

		----------UPDATE ZnodeAddress
		DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

		SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' AND ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
		FROM ZnodeImportUpdatableColumns a
		INNER JOIN INFORMATION_SCHEMA.COLUMNS b ON a.ColumnName = b.COLUMN_NAME  
		INNER JOIN dbo.Split(@CsvColumnString,',')C ON b.COLUMN_NAME = c.Item
		WHERE b.TABLE_NAME = 'ZnodeAddress' 
		AND EXISTS(SELECT * FROM ZnodeImportHead IH WHERE a.ImportHeadId = IH.ImportHeadId AND IH.Name in ('CustomerAddress','ShippingAddress'))

		SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
		FROM INFORMATION_SCHEMA.COLUMNS a
		INNER JOIN dbo.Split(@CsvColumnString,',')b ON a.COLUMN_NAME = b.Item
		WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
		AND a.TABLE_NAME = 'ZnodeAddress'

		SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item FROM dbo.split(@AddressColumnString,',')
		SET @WhereConditionString = Replace(@WhereConditionString , 'ZA.Address2 =  IC.Address2', 'ISNULL(ZA.Address2 ,'''')=  ISNULL(IC.Address2 ,'''')') 
	
		UPDATE a SET a.StateName =c.StateCode  
		FROM #InsertCustomerAddress a 
		INNER JOIN ZnodeCountry b ON a.CountryName = b.CountryName 
		INNER JOIN ZnodeState c ON b.CountryCode = c.CountryCode AND C.StateName = a.StateName
		
		UPDATE a SET a.CountryName= b.CountryCode FROM  #InsertCustomerAddress a INNER JOIN ZnodeCountry b ON a.CountryName = b.CountryName 
		
		CREATE TABLE #InsertedUserAddress (AddressId  NVARCHAR(256), UserId NVARCHAR(max),UserName nvarchar(300)) 

		IF ( @IsAccountAddress = 1 )
		BEGIN
			UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
			FROM AspNetZnodeUser ANZU 
			INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
			INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
			INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
			INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
			INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
													AND ZA.IsDefaultShipping =IC.IsDefaultShipping

			SET @SSQL = '
				UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
				FROM ZnodeAddress ZA
				INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

			EXEC (@SSQL)

			SET @SSQL = '
				Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
										StateName,CityName,PostalCode,PhoneNumber,
										IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsShipping,IsBilling)		
				OUTPUT INSERTED.AddressId INTO  #InsertedUserAddress (AddressId) 			 
				SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,null,IC.CountryName ,
				IC.StateName,
				,IC.CityName,IC.PostalCode,IC.PhoneNumber,
				isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' , '+CONVERT(VARCHAR(10), @UserId)+' ,'''+CONVERT(NVARCHAR(30),@GetDate,121)+''', 1, 1
				FROM  #InsertCustomerAddress IC
				WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'

			EXEC (@SSQL)

			DECLARE @AccountId INT
			SELECT @AccountId = AccountId FROM ZnodeUser WHERE UserId = @UserId
			INSERT INTO ZnodeAccountAddress ( AccountId, AddressId, CreatedBy, CreatedDate,	ModifiedBy,	ModifiedDate )
			SELECT @AccountId, Addressid ,  @UserId , @GETDATE, @UserId , @GETDATE FROM #InsertedUserAddress UA
			WHERE NOT EXISTS ( SELECT * FROM ZnodeAccountAddress AA WHERE AccountId = @AccountId AND AA.Addressid = UA.Addressid )
		END
		ELSE
		BEGIN
			UPDATE ZnodeAddress SET IsDefaultBilling = 0,  IsDefaultShipping = 0
			FROM AspNetZnodeUser ANZU INNER JOIN ASPNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName 
			INNER JOIN ZnodeUser ZU ON ANU.ID = ZU.AspNetUserId	
			INNER JOIN ZnodeUserAddress ZUA ON ZUA.UserId = ZU.UserId
			INNER JOIN ZnodeAddress ZA ON ZUA.AddressId = ZA.AddressId
			INNER JOIN #InsertCustomerAddress IC ON ANZU.UserName = IC.UserName AND ZA.IsDefaultBilling =IC.IsDefaultBilling 
			AND ZA.IsDefaultShipping =IC.IsDefaultShipping
					
			SET @SSQL = '
				UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+',ModifiedDate = '''+CONVERT(NVARCHAR(30),@GetDate,121)+''', Address3 = IC.UserName '+
				CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
				OUTPUT INSERTED.AddressId,INSERTED.Address3 INTO  #InsertedUserAddress (AddressId,UserName) 
				FROM ZnodeAddress ZA 
				INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END
			
			EXEC (@SSQL)

			UPDATE a SET a.UserId = b.UserId
			FROM #InsertedUserAddress a
			INNER JOIN ZnodeUser b ON LTRIM(RTRIM(A.UserName)) = LTRIM(RTRIM(b.UserName))

			SET @SSQL = '
				Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
											StateName,CityName,PostalCode,PhoneNumber,
											IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsShipping,IsBilling)		
				OUTPUT INSERTED.AddressId, INSERTED.Address3 INTO  #InsertedUserAddress (AddressId, UserId ) 			 
				SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2,convert(nvarchar(100),ZU.UserId),IC.CountryName ,
				IC.StateName 
				,IC.CityName,IC.PostalCode,IC.PhoneNumber,
				isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' , '+CONVERT(VARCHAR(10), @UserId)+' ,'''+CONVERT(NVARCHAR(30),@GetDate,121)+''',1,1
				FROM #InsertCustomerAddress IC INNER JOIN ZnodeUser ZU ON ZU.UserName= IC.UserName
				WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'
			
			print @SSQL

			EXEC (@SSQL)
			INSERT INTO ZnodeUserAddress(UserId,AddressId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT CAST( UserId AS INT ) , Addressid , @UserId , @GETDATE, @UserId , @GETDATE FROM  #InsertedUserAddress
		END
				
		UPDATE ZA SET ZA.CountryName = ZC.CountryCode
		FROM ZnodeAddress ZA
		INNER JOIN ZnodeCountry ZC ON LTRIM(RTRIM(ZA.CountryName)) = LTRIM(RTRIM(ZC.CountryName))

		UPDATE ZA SET ZA.Address3 = null 
		FROM ZnodeAddress ZA INNER JOIN #InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;
		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 
					'EXEC Znode_ImportCustomerAddress 
						@TableName = '+CAST(@TableName AS VARCHAR(max)) +',
						@Status='+ CAST(@Status AS VARCHAR(10))+',
						@UserId = '+CAST(@UserId AS VARCHAR(50))+',
						@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',
						@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',
						@LocaleId='+CAST(@LocaleId AS VARCHAR(max)) +',
						@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max)) +',
						@IsAccountAddress='+CAST(@IsAccountAddress AS VARCHAR(max));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GETDATE
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GETDATE, @UserId, @GETDATE, @ImportProcessLogId

		--Updating total AND fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
			TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportCustomerAddress',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportData')
	DROP PROC Znode_ImportData
GO

CREATE PROCEDURE [dbo].[Znode_ImportData](
	  @TableName varchar(200), @NewGUID nvarchar(max), @TemplateId nvarchar(200), @UserId int, @LocaleId int= 1, @DefaultFamilyId int= 0, @IsDebug bit= 0, @PriceListId int= 0,@CountryCode Nvarchar(100) = '',@PortalId int = 0 ,
	  @IsDoNotCreateJob bit = 0 , @IsDoNotStartJob bit = 0, @StepName nvarchar(50) = 'Import' , @StartStepName nvarchar(50) = 'Import' ,
	  @step_id int  = 1 ,@Nextstep_id  int = 1 , @ERPTaskSchedulerId int = 0, @IsAccountAddress bit = 0,@IsAutoPublish Bit = 0  ,@ImportProcessLogId  int = 0,@PimCatalogId INT = 0, @PromotionTypeId	INT=0  )
AS
/*
    Summary :  Import Process call respective import method from @TemplateId 
    Process :  
	EXEC Znode_ImportValidatePimProductData @TableName = 'tempdb..[##SEODetails_61bbcb4c-5b83-49a0-8bb6-48eaf07f9ce0]',@NewGUID = '61bbcb4c-5b83-49a0-8bb6-48eaf07f9ce0' ,@TemplateId = 9,@UserId = 2,@PortalId = 0,@LocaleId = 1,@IsCategory= 1 ,@DefaultFamilyId = 0 ,@ImportHeadName = 'SEODetails', @ImportProcessLogId = 11, @PriceListId = 0, @CountryCode = ''
*/
BEGIN
BEGIN TRY 
	 DECLARE @ImportHeadName nvarchar(100), @SPScript nvarchar(max), @DatabaseName nvarchar(100), @ServerName nvarchar(100), @SPScript1 nvarchar(max),@UserName nvarchar(100);
	 DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	 DECLARE @SPName nvarchar(100)
	
	 SELECT TOP 1 @ImportHeadName = Name
	 FROM ZnodeImportTemplate AS zit
		 INNER JOIN
		 ZnodeImportHead AS zih
		 ON zit.ImportHeadId = zih.ImportHeadId
	 WHERE zit.ImportTemplateId = @TemplateId;
	 SET @DatabaseName = DB_NAME();
	 SET @ServerName = @@serverName;/*We can use for the customization*/
	 SET @UserName = SYSTEM_USER;
	 
	 If (@ImportHeadName = 'ProductUpdate')
	 Begin
		SET @SPName = 'Znode_ImportPartialValidatePimProductData'
		SET @Nextstep_id = 1 
	 End
	 ELSE
	 Begin
		SET @SPName = 'Znode_ImportValidatePimProductData'
		SET @Nextstep_id = 3 
	 End

	--Generate new process for current import 
	If @ImportProcessLogId   = 0 
	Begin
		If @ERPTaskSchedulerId = 0 
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT @TemplateId, dbo.Fn_GetImportStatus( 0 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate;
		else 
			INSERT INTO ZnodeImportProcessLog( ImportTemplateId, Status, ProcessStartedDate, ProcessCompletedDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate ,ERPTaskSchedulerId)
			   SELECT @TemplateId, dbo.Fn_GetImportStatus( 0 ), @GetDate, NULL, @UserId, @GetDate, @UserId, @GetDate , @ERPTaskSchedulerId;
		SET @ImportProcessLogId = @@IDENTITY;
	
	End
	
	SET @SPScript1 = N' EXEC ' + @SPName + ' @TableName = '''+@TableName+''',@NewGUID = '''+@NewGUID+''' ,@TemplateId = '
					+CONVERT(varchar(100), @TemplateId)+',@UserId = '+CONVERT(varchar(100), @UserId)
					+',@PortalId = '+CONVERT(varchar(100), @PortalId)+
					+',@IsAccountAddress = '+CONVERT(varchar(100), @IsAccountAddress)
					+',@LocaleId = '+CONVERT(varchar(100), @LocaleId)+',@IsCategory= '+CASE
					WHEN @ImportHeadName IN( 'Pricing', 'Product', 'Inventory' ) THEN '0'
					ELSE '1'
					END+' ,@DefaultFamilyId = '+CONVERT(varchar(100), @DefaultFamilyId)+' ,@ImportHeadName = '''+@ImportHeadName+''', @ImportProcessLogId = '
					+CONVERT(varchar(100), @ImportProcessLogId)+', @PriceListId = '+CONVERT(varchar(100), @PriceListId)
					+', @PimCatalogId = '+CONVERT(varchar(100), @PimCatalogId)+ ', @CountryCode = ''' + @CountryCode  + ''', @PromotionTypeId = '+CONVERT(varchar(100), @PromotionTypeId)+'';

	    
	  IF @IsAutoPublish = 1 
	  BEGIN 
			SET @SPScript1 = @SPScript1 + N' 
		   
			DECLARE @PimProductId Transferid 

			INSERT INTO  @PimProductId 
			SELECT DISTINCT  c.PimProductId 
			FROM ZnodeImportSuccessLog a 
			INNER JOIN ZnodePimAttributeValueLocale  b ON (b.AttributeValue = a.ImportedSku)
			INNER JOIN ZnodePimAttributeValue c ON (c.PimAttributeValueId = b.PimAttributeValueId)
			INNER JOIN ZnodePimAttribute d ON (d.PimAttributeId = c.PimAttributeId)
			WHERE d.AttributeCode = ''SKU''
			AND a.ImportedGuId = '''+@NewGUID+'''
			
			Exec [Znode_PublishSingleProductEntity] @PimProductId = @PimProductId  , @UserId = 2 ,  @RevisionType = ''PRODUCTION''  
			,@IsAutoPublish = 1,@ImportGUID = '''+@NewGUID+'''

			UPDATE ZnodeImportSuccessLog 
			SET    IsProductPublish =  1 
			WHERE ImportedGuId = '''+@NewGUID+'''

		'

		print @SPScript1
	  END 

	IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
	BEGIN
	      EXEC sys.sp_sqlexec @SPScript1;
	END;
	ELSE
	BEGIN 
		
		IF @IsDebug = 1
		          BEGIN
		              EXEC sys.sp_sqlexec
		                   @SPScript1;
		              RETURN 0;
		          END;
		--Add a job

		SET @SPScript1 = N' EXEC '+ @SPName + ' @TableName = '''''+@TableName+''''',@NewGUID = '''''+@NewGUID+''''' ,@TemplateId = '+CONVERT(varchar(100), @TemplateId)+',@UserId = '+CONVERT(varchar(100), @UserId)+',@PortalId = '+CONVERT(varchar(100), @PortalId)+',@LocaleId = '+CONVERT(varchar(100), @LocaleId)+',@IsCategory= '+CASE
																																																																										   WHEN @ImportHeadName IN( 'Pricing', 'Product', 'Inventory' ) THEN '0'
																																																																										   ELSE '1'
																																																																										   END
					+' ,@DefaultFamilyId = '+CONVERT(varchar(100), @DefaultFamilyId)+' ,@ImportHeadName = '''''+@ImportHeadName+''''', @ImportProcessLogId = '+CONVERT(varchar(100), @ImportProcessLogId)+', @PriceListId = '+CONVERT(varchar(100), @PriceListId)+',@IsAccountAddress = '+CONVERT(varchar(100), @IsAccountAddress)+', @PimCatalogId = '+CONVERT(varchar(100), @PimCatalogId)
																																																																										   + ', @CountryCode = ''''' + @CountryCode  +''''', @PromotionTypeId = '+CONVERT(varchar(100), @PromotionTypeId)+'';


		
		 IF @IsAutoPublish = 1 
	  BEGIN 
		SET @SPScript1 = @SPScript1 + N' 
		   
			DECLARE @PimProductId Transferid 

			INSERT INTO  @PimProductId 
			SELECT DISTINCT  b.PimProductId 
			FROM ZnodeImportSuccessLog a 
			INNER JOIN View_loadManageProductInternal b ON (b.AttributeValue = a.ImportedSku)
			WHERE b.AttributeCode = ''''SKU''''
			AND a.ImportedGuId = '''''+@NewGUID+'''''
			
			
			Exec [Znode_PublishSingleProductEntity] @PimProductId = @PimProductId  , @UserId = 2 ,  @RevisionType = ''''PRODUCTION''''  
			,@IsAutoPublish = 1,@ImportGUID = '''''+@NewGUID+'''''

						
			UPDATE ZnodeImportSuccessLog 
			SET    IsProductPublish =  1 
			WHERE ImportedGuId = '''''+@NewGUID+'''''
			 '
	  END 

		DECLARE @jobId binary(16);
		
		SET @NewGUID = 'Import_'+REPLACE(@NewGUID, '''', '');
		

		IF @IsDoNotCreateJob =0 
		Begin
			SET @SPScript = N'EXEC msdb.dbo.sp_add_job
				  @job_name = '''+@NewGUID+''' ,
				  @enabled = 1,
				  @notify_level_eventlog = 2,
				  @notify_level_email = 2,
				  @notify_level_netsend = 2,
				  @notify_level_page = 2,
				  @delete_level = 3,
				  @category_name = N''[Uncategorized (Local)]'',
				  @owner_login_name = N'''+ @UserName +'''';

			EXEC sys.sp_sqlexec @SPScript;

			SET @SPScript = N' EXEC msdb.dbo.sp_add_jobserver
				  @job_name = '''+@NewGUID+'''';

			EXEC sys.sp_sqlexec @SPScript;
		END

		SET @SPScript = N' EXEC msdb.dbo.sp_add_jobstep
              @job_name = '''+ @NewGUID +''',
              @step_name = N'''+ @StepName +''',
			  @step_id =  ' + Convert(nvarchar(10),@step_id ) +  ',
			  @cmdexec_success_code = 0,
              @on_success_action = ' + Convert(nvarchar(10),@Nextstep_id ) +  ',
              @on_fail_action = '    + Convert(nvarchar(10),@Nextstep_id ) +  ',
			  @retry_attempts = 0,
              @retry_interval = 0,
              @os_run_priority = 0,
              @subsystem = N''TSQL'',
              @command = N'''+ @SPScript1 +''',
              @database_name = '''+@DatabaseName+''',
              @flags = 0 ';
		PRINT  @SPScript
		EXEC sys.sp_sqlexec @SPScript;

		DECLARE @ReturnCode tinyint= 0; -- 0 (success) or 1 (failure)
		IF @IsDoNotStartJob = 0 
		Begin
			SET @SPScript = N'EXEC @ReturnCode = msdb.dbo.sp_start_job 
				  @job_name = '''+ @NewGUID +''',
				  @server_name = '''+ @ServerName +''',
				  @step_name = N''' + @StartStepName +'''';

			EXEC sys.SP_EXECUTESQL @SPScript, N'@ReturnCode TINYINT OUT', @ReturnCode = @ReturnCode OUT;
		END 
		
		SET @GetDate = dbo.Fn_GetDate();

		IF @ReturnCode = 1
		BEGIN
			UPDATE ZnodeImportProcessLog
			  SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId
		END;
	END;
	END TRY 
	BEGIN CATCH 
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportData @TableName = '''+ISNULL(@TableName,'''''')+''',@NewGUID='''+ISNULL(CAST(@NewGUID AS
		VARCHAR(50)),'''''')+''',@TemplateId='''+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''''')+''',@CountryCode='''+ISNULL(@CountryCode,'''''')+''',
		@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')
            
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportData',
		@ErrorInProcedure = 'Znode_ImportData',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH 
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportHighlight')
	DROP PROC Znode_ImportHighlight
GO

CREATE PROCEDURE [dbo].[Znode_ImportHighlight](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 
		DECLARE @InsertPimAtrribute TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,
			RowNumber int, HighlightCode varchar(300), HighlightName varchar(1000),DisplayPopup varchar(300),Hyperlink varchar(1000),HighlightType varchar(300),IsActive varchar(100),DisplayOrder int,HighlightImage varchar(500),HighlightImagePath varchar(500), Description varchar(max), ShortDescription varchar(max), ImageAltTag varchar(400), GUID nvarchar(400)
		
		);
		DECLARE @InsertedPimAttributeIds TABLE (PimAttributeId int ,PimAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300))
		
		SET @SSQL = 'Select RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID FROM '+@TableName;
		INSERT INTO @InsertPimAtrribute( RowNumber,HighlightCode, HighlightName,DisplayPopup,Hyperlink,HighlightType,IsActive,DisplayOrder,HighlightImage,HighlightImagePath,Description,ShortDescription,ImageAltTag ,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		UPDATE @InsertPimAtrribute  
		SET IsActive=CASE ISNULL(IsActive,0) WHEN 'YES' THEN 1 WHEN 'NO' THEN 0 END


		--@MessageDisplay will use to display validate message for input inventory value  
		DECLARE @HighlightAttributeDefaultCode TABLE
		( 
		   AttributeDefaultCode nvarchar(300)
		);
		INSERT INTO @HighlightAttributeDefaultCode
			   SELECT AttributeDefaultValueCode
			   FROM ZnodePimAttributeDefaultValue ZPADV
			   inner join ZnodePimAttribute ZPA on ZPADV.PimAttributeId = ZPA.PimAttributeId
			   where ZPA.AttributeCode = 'Highlights' 

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '118', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode not in 
			   (
				   SELECT AttributeDefaultCode FROM @HighlightAttributeDefaultCode 
			   );
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'DisplayPopup', DisplayPopup, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.DisplayPopup not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertPimAtrribute AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '103', 'HighlightType', HighlightType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightType NOT in 
			   (
				   SELECT HT.Name  FROM ZnodeHighlightType  HT
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '115', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			FROM @InsertPimAtrribute AS ii
			WHERE (ii.DisplayOrder <> '' OR ii.DisplayOrder IS NOT NULL )AND  ii.DisplayOrder > 999

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '79', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ltrim(rtrim(isnull(ii.HighlightCode,''))) like '% %' 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'HighlightCode', HighlightCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
			   FROM @InsertPimAtrribute AS ii
			   WHERE ii.HighlightCode in 
			   (
				   select HighlightCode  FROM @InsertPimAtrribute  Group BY HighlightCode  having count(*) > 1 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Highlight - ' + ISNULL(HighlightCode,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertPimAtrribute IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL


		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertPimAtrribute
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertPimAtrribute
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		

		DECLARE @MediaId INT
		SET @MediaId = (SELECT TOP 1 MediaId from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName and IPA.HighlightImagePath = ZM.Path)

		if (isnull(@MediaId,0)=0)
			SET @MediaId = (SELECT max(MediaId) from @InsertPimAtrribute IPA INNER JOIN ZnodeMedia ZM ON IPA.HighlightImage = ZM.FileName)

		DECLARE @InsertedZnodeHighlight TABLE(HighlightId INT,HighlightCode VARCHAR(600)) 

			UPDATE ZH SET ZH.DisplayPopup = IPA.DisplayPopup, ZH.Hyperlink = IPA.Hyperlink, ZH.IsActive = CASE WHEN ISNULL(IPA.IsActive,'')<>''THEN IPA.IsActive ELSE ZH.IsActive END,
			       ZH.DisplayOrder = CASE WHEN ISNULL(IPA.DisplayOrder,'')<>'' THEN IPA.DisplayOrder ELSE ZH.DisplayOrder END,ZH.ModifiedBy = @UserId, ZH.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA  
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId

			

			UPDATE ZHL SET ZHL.Name = IPA.HighlightName, ZHL.Description = IPA.Description, ZHL.ShortDescription = IPA.ShortDescription, ZHL.ImageAltTag = IPA.ImageAltTag
			       , ZHL.ModifiedBy = @UserId, ZHL.ModifiedDate = @GetDate 
			FROM @InsertPimAtrribute IPA   
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			INNER JOIN ZnodeHighlight ZH ON IPA.HighlightCode = ZH.HighlightCode and ZHT.HighlightTypeId = ZH.HighlightTypeId
			INNER JOIN ZnodeHighlightLocale ZHL  ON ZH.HighlightId = ZHL.HighlightId 

			INSERT INTO ZnodeHighlight (MediaId,HighlightCode,DisplayPopup,Hyperlink,HighlightTypeId,IsActive,DisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			OUTPUT Inserted.HighlightId,Inserted.HighlightCode INTO @InsertedZnodeHighlight
			SELECT DISTINCT @MediaId,IPA.HighlightCode, IPA.DisplayPopup , IPA.Hyperlink, ZHT.HighlightTypeId,
				   case when IPA.IsActive in ('True','1','Yes') then 1 else 0 end, Case when Isnull(IPA.DisplayOrder,0) = 0 then  999 else IPA.DisplayOrder end  , @UserId , @GetDate ,@UserId , @GetDate 
			FROM @InsertPimAtrribute IPA   
			INNER JOIN ZnodeHighlightType ZHT on IPA.HighlightType = ZHT.Name
			WHERE NOT EXISTS(select * from ZnodeHighlight ZH where ZH.HighlightCode = IPA.HighlightCode and ZH.HighlightTypeId = ZHT.HighlightTypeId)

			INSERT INTO ZnodeHighlightLocale(LocaleId,HighlightId,ImageAltTag,Name,Description,ShortDescription,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT DISTINCT @LocaleId, IZH.HighlightId, IPA.ImageAltTag, IPA.HighlightName, IPA.Description, IPA.ShortDescription, @UserId , @GetDate ,@UserId , @GetDate
			FROM @InsertPimAtrribute IPA 
			INNER JOIN @InsertedZnodeHighlight IZH on IPA.HighlightCode = IZH.HighlightCode 

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportHighlight @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(max));


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportHighlight',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportInsertUpdateAccountGlobalAttributeValue')
	DROP PROC Znode_ImportInsertUpdateAccountGlobalAttributeValue
GO

Create PROCEDURE [dbo].[Znode_ImportInsertUpdateAccountGlobalAttributeValue]
(
    @GlobalEntityValueDetail  [GlobalEntityValueDetail] READONLY,
    @AccountId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0 )
AS
   /*
     Summary : To Insert / Update single Entity with multiple attribute values 
     Update Logic: 
*/
BEGIN
    BEGIN TRAN A;
    BEGIN TRY
		DECLARE @GlobalEntityId INT,
		@MultiSelectGroupAttributeTypeName nvarchar(200)='Select'
		,@MediaGroupAttributeTypeName nvarchar(200)='Media'
        DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @LocaleId INT 
		DECLARE @TBL_Account TABLE (AccountId [int] NULL)
		DECLARE @TBL_DeleteAccount TABLE (AccountId [int] NULL,AccountGlobalAttributeValueId int)
		DECLARE @TBL_AttributeDefaultValueList TABLE 
		(NewAccountGlobalAttributeValueId int,AccountGlobalAttributeValueId int,[AttributeValue] [varchar](300),[GlobalAttributeDefaultValueId] int,
		[GlobalAttributeId] int,MediaId int,AccountGlobalAttributeValueLocaleId int)

		DECLARE @TBL_MediaValueList TABLE 
		(NewAccountGlobalAttributeValueId int,AccountGlobalAttributeValueId int,GlobalAttributeId int,
		MediaId int,MediaPath nvarchar(300),AccountGlobalAttributeValueLocaleId int)
		DECLARE @TBL_InsertGlobalEntityValue TABLE 
		([GlobalAttributeId] [int] NULL,GlobalAttributeDefaultValueId [int] NULL,AccountId [int] NULL,
			AccountGlobalAttributeValueId int null)
		DECLARE @TBL_GlobalEntityValueDetail TABLE ([GlobalAttributeId] [int] NULL,
		[AttributeCode] [varchar](300),[GlobalAttributeDefaultValueId] [int],[GlobalAttributeValueId] [int],
		[LocaleId] [int],AccountId [int],[AttributeValue] [nvarchar](max),AccountGlobalAttributeValueId int,
		NewAccountGlobalAttributeValueId int,GroupAttributeTypeName [varchar](300))

		SELECT TOP 1 @LocaleId = LocaleId FROM @GlobalEntityValueDetail;

		Insert into @TBL_GlobalEntityValueDetail
		([GlobalAttributeId],[AttributeCode],[GlobalAttributeDefaultValueId],
		[GlobalAttributeValueId],[LocaleId],AccountId,[AttributeValue],GroupAttributeTypeName)
		Select dd.[GlobalAttributeId],dd.[AttributeCode],case when [GlobalAttributeDefaultValueId]=0 then null else 
		[GlobalAttributeDefaultValueId] end [GlobalAttributeDefaultValueId],
		case when [GlobalAttributeValueId]=0 then null else 
		[GlobalAttributeValueId] end [GlobalAttributeValueId],[LocaleId],[GlobalEntityValueId],[AttributeValue],ss.GroupAttributeType
		From @GlobalEntityValueDetail dd
		inner join [View_ZnodeGlobalAttribute] ss on ss.GlobalAttributeId=dd.GlobalAttributeId

		Update ss
		Set ss.AccountGlobalAttributeValueId=dd.AccountGlobalAttributeValueId
		From @TBL_GlobalEntityValueDetail ss
		inner join ZnodeAccountGlobalAttributeValue dd on dd.AccountId=ss.AccountId
		and dd.GlobalAttributeId=ss.GlobalAttributeId
				
		insert into @TBL_Account(AccountId)
		Select distinct  AccountId from @TBL_GlobalEntityValueDetail;

        insert into @TBL_DeleteAccount
		Select p.AccountId,a.AccountGlobalAttributeValueId
		from ZnodeAccountGlobalAttributeValue a
		inner join @TBL_Account p on p.AccountId=a.AccountId
		Where not exists(select 1 from @TBL_GlobalEntityValueDetail dd 
		where dd.AccountId=a.AccountId and dd.GlobalAttributeId=a.GlobalAttributeId)
				
				               
		Delete From ZnodeAccountGlobalAttributeValueLocale
		WHere exists (select 1 from @TBL_DeleteAccount dd 
		Where dd.AccountGlobalAttributeValueId=ZnodeAccountGlobalAttributeValueLocale.AccountGlobalAttributeValueId)

		Delete From ZnodeAccountGlobalAttributeValue
		WHere exists (select 1 from @TBL_DeleteAccount dd 
		Where dd.AccountGlobalAttributeValueId=ZnodeAccountGlobalAttributeValue.AccountGlobalAttributeValueId)
							

		INSERT INTO [dbo].[ZnodeAccountGlobalAttributeValue]
		([AccountId],[GlobalAttributeId],[GlobalAttributeDefaultValueId],[CreatedBy],[CreatedDate],
		[ModifiedBy],[ModifiedDate])
			output Inserted.GlobalAttributeId,inserted.[GlobalAttributeDefaultValueId],inserted.AccountId,
			inserted.AccountGlobalAttributeValueId into @TBL_InsertGlobalEntityValue
		Select [AccountId],[GlobalAttributeId],[GlobalAttributeDefaultValueId]
		,@AccountId [CreatedBy],@GetDate [CreatedDate],@AccountId [ModifiedBy],@GetDate [ModifiedDate]
		From @TBL_GlobalEntityValueDetail dd
		WHERE AccountGlobalAttributeValueId IS NULL				

            
		Update dd
		Set dd.NewAccountGlobalAttributeValueId=ss.AccountGlobalAttributeValueId
		From @TBL_GlobalEntityValueDetail dd
		inner join @TBL_InsertGlobalEntityValue ss on dd.[AccountId]=ss.[AccountId]
		and dd.GlobalAttributeId=ss.GlobalAttributeId				

		INSERT INTO [dbo].[ZnodeAccountGlobalAttributeValueLocale]
		([AccountGlobalAttributeValueId],[LocaleId],[AttributeValue],[CreatedBy],[CreatedDate],[ModifiedBy]
		,[ModifiedDate])
		Select NewAccountGlobalAttributeValueId,[LocaleId],[AttributeValue],@AccountId [CreatedBy],@GetDate [CreatedDate],
		@AccountId [ModifiedBy],@GetDate [ModifiedDate]
		From @TBL_GlobalEntityValueDetail dd
		WHERE NewAccountGlobalAttributeValueId IS not NULL
		and isnull([AttributeValue],'') <>''    
		and isnull(GroupAttributeTypeName,'') != @MultiSelectGroupAttributeTypeName
		and isnull(GroupAttributeTypeName,'') != @MediaGroupAttributeTypeName		
				
		Update ss
		Set ss.AttributeValue=dd.AttributeValue,ss.ModifiedDate=@GetDate,ss.ModifiedBy=@AccountId
		From @TBL_GlobalEntityValueDetail dd
		inner join [dbo].[ZnodeAccountGlobalAttributeValueLocale] ss on ss.AccountGlobalAttributeValueId =dd.AccountGlobalAttributeValueId
		Where isnull(GroupAttributeTypeName,'') != @MultiSelectGroupAttributeTypeName
		and isnull(GroupAttributeTypeName,'') != @MediaGroupAttributeTypeName	

		insert into @TBL_AttributeDefaultValueList
		(NewAccountGlobalAttributeValueId,AccountGlobalAttributeValueId,dd.AttributeValue,GlobalAttributeId)
		Select dd.NewAccountGlobalAttributeValueId, dd.AccountGlobalAttributeValueId,ss.Item,dd.GlobalAttributeId
		From @TBL_GlobalEntityValueDetail dd
		cross apply dbo.Split(dd.AttributeValue,',') ss
		Where isnull(GroupAttributeTypeName,'') = @MultiSelectGroupAttributeTypeName

		Update dd
		Set dd.GlobalAttributeDefaultValueId=ss.GlobalAttributeDefaultValueId
		from  @TBL_AttributeDefaultValueList DD
		inner join [ZnodeGlobalAttributeDefaultValue] ss on dd.GlobalAttributeId=ss.GlobalAttributeId
		and dd.AttributeValue=ss.AttributeDefaultValueCode

		Update dd
		Set dd.AccountGlobalAttributeValueLocaleId=ss.AccountGlobalAttributeValueLocaleId
		from  @TBL_AttributeDefaultValueList DD
		inner join [ZnodeAccountGlobalAttributeValueLocale] ss on dd.AccountGlobalAttributeValueId=ss.AccountGlobalAttributeValueId
		and ss.GlobalAttributeDefaultValueId=dd.GlobalAttributeDefaultValueId

		delete ss
		From @TBL_GlobalEntityValueDetail dd
		inner join [ZnodeAccountGlobalAttributeValueLocale] ss on dd.AccountGlobalAttributeValueId=ss.AccountGlobalAttributeValueId
		Where isnull(GroupAttributeTypeName,'') = @MultiSelectGroupAttributeTypeName
		and not exists (Select 1 from @TBL_AttributeDefaultValueList cc 
		where cc.AccountGlobalAttributeValueLocaleId=ss.AccountGlobalAttributeValueLocaleId )

		INSERT INTO [dbo].[ZnodeAccountGlobalAttributeValueLocale]
		([AccountGlobalAttributeValueId],[LocaleId],GlobalAttributeDefaultValueId,[CreatedBy],[CreatedDate],[ModifiedBy]
		,[ModifiedDate])
		Select ss.NewAccountGlobalAttributeValueId,dd.[LocaleId],ss.GlobalAttributeDefaultValueId,@AccountId [CreatedBy],@GetDate [CreatedDate],
		@AccountId [ModifiedBy],@GetDate [ModifiedDate]
		From @TBL_GlobalEntityValueDetail dd
		inner join @TBL_AttributeDefaultValueList ss on dd.GlobalAttributeId=ss.GlobalAttributeId
		and ss.NewAccountGlobalAttributeValueId=dd.NewAccountGlobalAttributeValueId
		WHERE isnull(dd.GroupAttributeTypeName,'') = @MultiSelectGroupAttributeTypeName

		INSERT INTO [dbo].[ZnodeAccountGlobalAttributeValueLocale]
		([AccountGlobalAttributeValueId],[LocaleId],GlobalAttributeDefaultValueId,[CreatedBy],[CreatedDate],[ModifiedBy]
		,[ModifiedDate])
		Select ss.AccountGlobalAttributeValueId,dd.[LocaleId],ss.GlobalAttributeDefaultValueId,@AccountId [CreatedBy],@GetDate [CreatedDate],
		@AccountId [ModifiedBy],@GetDate [ModifiedDate]
		From @TBL_GlobalEntityValueDetail dd
		inner join @TBL_AttributeDefaultValueList ss on dd.GlobalAttributeId=ss.GlobalAttributeId
		and ss.AccountGlobalAttributeValueId=dd.AccountGlobalAttributeValueId				
		WHERE isnull(dd.GroupAttributeTypeName,'') = @MultiSelectGroupAttributeTypeName
		and ss.AccountGlobalAttributeValueLocaleId is null 


		insert into @TBL_MediaValueList
		(NewAccountGlobalAttributeValueId,AccountGlobalAttributeValueId,GlobalAttributeId,MediaId)
		Select dd.NewAccountGlobalAttributeValueId, dd.AccountGlobalAttributeValueId,GlobalAttributeId,ss.Item 
		From @TBL_GlobalEntityValueDetail dd
		cross apply dbo.Split(dd.AttributeValue,',') ss
		Where isnull(GroupAttributeTypeName,'') = @MediaGroupAttributeTypeName

		Update dd
		Set dd.MediaPath=ss.Path
		from  @TBL_MediaValueList DD
		inner join ZnodeMedia ss on dd.MediaId=ss.MediaId

		Update dd
		Set dd.AccountGlobalAttributeValueLocaleId=ss.AccountGlobalAttributeValueLocaleId
		from  @TBL_MediaValueList DD
		inner join [ZnodeAccountGlobalAttributeValueLocale] ss on dd.AccountGlobalAttributeValueId=ss.AccountGlobalAttributeValueId
		and ss.MediaId=dd.MediaId

		delete ss
		From @TBL_GlobalEntityValueDetail dd
		inner join [ZnodeAccountGlobalAttributeValueLocale] ss on dd.AccountGlobalAttributeValueId=ss.AccountGlobalAttributeValueId
		Where isnull(GroupAttributeTypeName,'') = @MediaGroupAttributeTypeName
		and not exists (Select 1 from @TBL_MediaValueList cc 
		where cc.MediaId=ss.MediaId
		and cc.AccountGlobalAttributeValueId=dd.AccountGlobalAttributeValueId )

		INSERT INTO [dbo].[ZnodeAccountGlobalAttributeValueLocale]
		([AccountGlobalAttributeValueId],[LocaleId],MediaId,MediaPath,[CreatedBy],[CreatedDate],[ModifiedBy]
		,[ModifiedDate])
		Select ss.NewAccountGlobalAttributeValueId,dd.[LocaleId],ss.MediaId,ss.MediaPath,@AccountId [CreatedBy],@GetDate [CreatedDate],
		@AccountId [ModifiedBy],@GetDate [ModifiedDate]
		From @TBL_GlobalEntityValueDetail dd
		inner join @TBL_MediaValueList ss on dd.GlobalAttributeId=ss.GlobalAttributeId
		and ss.NewAccountGlobalAttributeValueId=dd.NewAccountGlobalAttributeValueId
		WHERE isnull(dd.GroupAttributeTypeName,'') = @MediaGroupAttributeTypeName

		INSERT INTO [dbo].[ZnodeAccountGlobalAttributeValueLocale]
		([AccountGlobalAttributeValueId],[LocaleId],MediaId,MediaPath,[CreatedBy],[CreatedDate],[ModifiedBy]
		,[ModifiedDate])
		Select ss.AccountGlobalAttributeValueId,dd.[LocaleId],ss.MediaId,ss.MediaPath,@AccountId [CreatedBy],@GetDate [CreatedDate],
		@AccountId [ModifiedBy],@GetDate [ModifiedDate]
		From @TBL_GlobalEntityValueDetail dd
		inner join @TBL_MediaValueList ss on dd.GlobalAttributeId=ss.GlobalAttributeId
		and ss.AccountGlobalAttributeValueId=dd.AccountGlobalAttributeValueId				
		WHERE isnull(dd.GroupAttributeTypeName,'') = @MediaGroupAttributeTypeName
		and ss.AccountGlobalAttributeValueLocaleId is null 

		Update dd 
		Set dd.MediaPath=ss.MediaPath
		from [ZnodeAccountGlobalAttributeValueLocale] dd
        inner join @TBL_MediaValueList ss on 
		ss.AccountGlobalAttributeValueLocaleId =dd.AccountGlobalAttributeValueLocaleId										    
		
		SELECT 0 AS ID,CAST(1 AS BIT) AS Status;    
			   
        COMMIT TRAN A;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE()
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdateGlobalEntity @AccountId = '+CAST(@AccountId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	ROLLBACK TRAN A;
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportInsertUpdateGlobalEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportInsertUpdatePimProduct')
	DROP PROC Znode_ImportInsertUpdatePimProduct
GO

CREATE PROCEDURE [dbo].[Znode_ImportInsertUpdatePimProduct]
(
    @PimProductDetail  PIMPRODUCTDETAIL READONLY,
    @UserId            INT       ,
    @status            BIT    OUT,
    @IsNotReturnOutput BIT    = 0,
	@CopyPimProductId  INT	  = 0 )
AS
   /*
     Summary : To Insert / Update single Product with multiple attribute values 
     Update Logic: 
*/
BEGIN
    BEGIN TRAN A;
    BEGIN TRY
		DECLARE @PimProductId INT;
		DECLARE @TBL_PimProductId TABLE(PimAttributeValueId INT,ZnodePimAttributeValueLocaleId INT );
		DECLARE @TBL_CopyPimProductId TABLE(PimAttributeValueId INT,OldPimAttributeValueId INT);
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId()
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @TBL_DefaultAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
		DECLARE @TBL_MediaAttributeId TABLE (PimAttributeId INT PRIMARY KEY, AttributeCode VARCHAR(600))
		DECLARE @TBL_TextAreaAttributeId TABLE (PimAttributeId INT PRIMARY KEY , AttributeCode VARCHAR(600))
		DECLARE @TBL_MediaAttributeValue TABLE (PimAttributeValueId INT ,LocaleId INT ,AttributeValue VARCHAr(300),MediaId INT)
		DECLARE @TBL_DefaultAttributeValue TABLE (PimAttributeValueId INT , LocaleId INT , AttributeValue INT)
		DECLARE @ZnodePimAttributeValue TABLE (PimAttributeValueId  INT, PimAttributeFamilyId INT,PimAttributeId INT);

		DECLARE @AssociatedProduct VARCHAR(4000);
		DECLARE @ConfigureAttributeId VARCHAR(4000);
		DECLARE @ConfigureFamilyId VARCHAR(4000);
		DECLARE @PimAttributeFamilyId INT;
		DECLARE @LocaleId INT 

		DECLARE @pimSkuAttributeId VARCHAR(50) = [dbo].[Fn_GetProductSKUAttributeId] ()
		DECLARE @pimProductNameAttributeId VARCHAR(50) =[dbo].Fn_GetProductNameAttributeId ()
		DECLARE @PimIsDownlodableAttributeId VARCHAR(50) = [dbo].[Fn_GetIsDownloadableAttributeId]()
		Declare @SKU nvarchar(300),@ProductName nvarchar(300)
		Select * into #PimProductDetail from @PimProductDetail
			
		INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
		SELECT PimAttributeId,AttributeCode FROM  [dbo].[Fn_GetDefaultAttributeId] ()
			 
		INSERT INTO @TBL_MediaAttributeId (PimAttributeId,AttributeCode)
		SELECT PimAttributeId,AttributeCode FROM [dbo].[Fn_GetProductMediaAttributeId]()

		INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId ,AttributeCode)
		SELECT PimAttributeId, AttributeCode   FROM [dbo].[Fn_GetTextAreaAttributeId]()

			 
		SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId
        FROM #PimProductDetail;

		SELECT TOP 1 @LocaleId = LocaleId
        FROM #PimProductDetail;

        -- Retrive input productId from #PimProductDetail table ( having multiple attribute values with common productId) 

        SELECT TOP 1 @PimProductId = PimProductId
        FROM #PimProductDetail;
			
		DECLARE @PublishStateIdForDraft INT =  [dbo].[Fn_GetPublishStateIdForDraftState]()
		DECLARE @PublishStateIdForNotPublished INT = [dbo].[Fn_GetPublishStateIdForForNotPublishedState]()

        IF ISNULL(@PimProductId, 0) = 0
            BEGIN
                INSERT INTO ZnodePimProduct
                (PimAttributeFamilyId,
                CreatedBy,
                CreatedDate,
                ModifiedBy,
                ModifiedDate ,PublishStateId
                )
                    SELECT @PimAttributeFamilyId,
                            @UserId,
                            @GetDate,
                            @UserId,
                            @GetDate,@PublishStateIdForNotPublished ;
                SET @PimProductId = SCOPE_IDENTITY();

				UPDATE #PimProductDetail SET PimProductId = @PimProductId

				If EXISTS (select TOP 1 1 from #PimProductDetail where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
				Begin
						
				Select TOP 1 @SKU  =  AttributeValue from  #PimProductDetail where PimAttributeId =  @pimSkuAttributeId
				Select TOP 1 @ProductName  = AttributeValue from  #PimProductDetail where PimAttributeId =  @pimProductNameAttributeId
				insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 
				End
            END;
        ELSE 
            BEGIN
                UPDATE ZNodePimProduct
                SET
                    PimAttributeFamilyId = @PimAttributeFamilyId,
					PublishStateId = @PublishStateIdForDraft,
                    ModifiedBy = @UserId,
                    ModifiedDate = @GetDate
                WHERE PimProductId = @PimProductId;

			Update ZnodePimProduct SET PublishStateId = 2, IsProductPublish = 0 , ModifiedDate = @GetDate  where PimProductId in
			(select PimProductId  From ZnodePimProductTypeAssociation where PimParentProductId=@PimProductId )
            									
				INSERT INTO @TBL_PimProductId(PimAttributeValueId)
				SELECT ZPAV.PimAttributeValueId
                FROM ZnodePimAttributeValue ZPAV
				INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId AND ( @localeID = @DefaultLocaleId OR ZPA.IsLocalizable = 1 OR EXISTS (SELECT TOP 1 1 FROM [dbo].[Fn_GetProductMediaAttributeId]() FN WHERE FN.PimAttributeId = ZPAV.PimAttributeId)))
				INNER JOIN ZnodePimFamilyGroupMapper ZPFGMI  ON (ZPFGMI.PimAttributeId = ZPAV.PimAttributeId AND ZPFGMI.PimAttributeFamilyId = @PimAttributeFamilyId)
				WHERE ZPAV.PimProductId = @PimProductId
				AND NOT EXISTS
                    (
                        SELECT TOP 1 1
                        FROM #PimProductDetail TBPDI
                        WHERE TBPDI.PimAttributeId = ZPAV.PimAttributeId
                                AND TBPDI.PimProductId = ZPAV.PimProductId
						)

                DELETE FROM ZnodePimAttributeValueLocale
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PimProductId TBPD
                    WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValueLocale.PimAttributeValueId 
								
                ) AND LocaleId = @LocaleId;
				DELETE  ZnodePimProductAttributeDefaultValue 
				WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PimProductId TBPD
                    WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
								
                ) AND LocaleId = @LocaleId;

				DELETE FROM ZnodePimProductAttributeMedia 
				WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PimProductId TBPD
                    WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeMedia.PimAttributeValueId 
								
                ) 
				AND LocaleId = @LocaleId;

				DELETE FROM ZnodePimProductAttributeTextAreaValue
				WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PimProductId TBPD
                    WHERE TBPD.PimAttributeValueId = ZnodePimProductAttributeTextAreaValue.PimAttributeValueId 
								
                ) AND LocaleId = @LocaleId ;

                DELETE FROM ZnodePimAttributeValue
                WHERE EXISTS
                (
                    SELECT TOP 1 1
                    FROM @TBL_PimProductId TBPD
                    WHERE TBPD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId
                )
				AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
				AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeTextAreaValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
				AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeDefaultValue ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId )
				AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeMedia ZPVD WHERE ZPVD.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId );

			If EXISTS (select TOP 1 1 from #PimProductDetail where PimAttributeId = @PimIsDownlodableAttributeId and AttributeValue = 'true'  )
				Begin
				Select TOP 1 @SKU  =  AttributeValue from  #PimProductDetail where PimAttributeId =  @pimSkuAttributeId
				Select TOP 1 @ProductName  = AttributeValue from  #PimProductDetail where PimAttributeId =  @pimProductNameAttributeId

				insert into ZnodePimDownloadableProduct(SKU,ProductName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				Select TOP 1 PD.AttributeValue, @ProductName,@UserId , @GetDate, @UserId , @GetDate from  #PimProductDetail PD where  PD.PimAttributeId = @pimSkuAttributeId 
				AND not exists (select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  =  PD.AttributeValue)
				IF NOT Exists (	select top 1 1 from  ZnodePimDownloadableProduct where  ZnodePimDownloadableProduct.SKU  = @SKU)
					insert into ZnodePimDownloadableProduct(SKU,ProductName,  CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
					Select @SKU, @ProductName, @UserId , @GetDate, @UserId , @GetDate 

				End
            END;

		MERGE INTO ZnodePimAttributeValue TARGET
        USING #PimProductDetail SOURCE
        ON(
		TARGET.PimProductId = @PimProductId
        AND TARGET.PimAttributeId = SOURCE.PimAttributeId)
            WHEN MATCHED
            THEN UPDATE SET
                            TARGET.PimAttributeFamilyId = CASE
                                                            WHEN Source.PimAttributeFamilyId = 0
                                                            THEN NULL
                                                            ELSE Source.PimAttributeFamilyId
                                                        END,
                            TARGET.CreatedBy = @UserId,
                            TARGET.CreatedDate = @GetDate,
                            TARGET.ModifiedBy = @UserId,
                            TARGET.ModifiedDate = @GetDate
            WHEN NOT MATCHED
            THEN INSERT(PimAttributeFamilyId,
                        PimProductId,
                        PimAttributeId,
                        PimAttributeDefaultValueId,
                        --,AttributeValue
                        CreatedBy,
                        CreatedDate,
                        ModifiedBy,
                        ModifiedDate) VALUES
        (CASE
            WHEN Source.PimAttributeFamilyId = 0
            THEN @PimDefaultFamily
            ELSE Source.PimAttributeFamilyId
        END,
        @PimProductId,
        SOURCE.PimAttributeId,
        CASE
            WHEN SOURCE.ProductAttributeDefaultValueId = 0
            THEN NULL
            ELSE SOURCE.ProductAttributeDefaultValueId
        END, 
        @UserId,
        @GetDate,
        @UserId,
        @GetDate
        )
        OUTPUT INSERTED.PimAttributeValueId,
            INSERTED.PimAttributeFamilyId,
            INSERTED.PimAttributeId
            INTO @ZnodePimAttributeValue;
        		
		DECLARE @MediaData Table (MediaId INT , PimProductId INT , PimAttributeId INT ,PimAttributeFamilyId INT,LocaleId INT  )
	    
		INSERT INTO @MediaData (MediaId,PimProductId,PimAttributeId ,PimAttributeFamilyId, LocaleId)
		SELECT sp.item, a.PimProductId, a.PimAttributeId ,PimAttributeFamilyId,a.LocaleId
		FROM #PimProductDetail a
		CROSS APPLY dbo.split(a.AttributeValue,',' ) SP
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId c WHERE c.PimAttributeId = a.PimAttributeId ) 
				
				 
		INSERT INTO @TBL_MediaAttributeValue (PimAttributeValueId,LocaleId , AttributeValue,MediaId)
		SELECT a.PimAttributeValueId,
						b.LocaleId,
							zm.Path AttributeValue
							,ZM.MediaId
		FROM @ZnodePimAttributeValue AS a
		INNER JOIN  @MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
												AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
				INNER JOIN ZnodeMedia ZM ON ( b.MediaId = ZM.MediaId )
		
		DELETE FROM ZnodePimProductAttributeMedia 
		WHERE EXISTS 
			(SELECT TOP 1 1 FROM @TBL_MediaAttributeValue TBLM WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId 
			AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId  AND ZnodePimProductAttributeMedia.Localeid = @LocaleId)

		MERGE INTO ZnodePimProductAttributeMedia TARGET 
		USING @TBL_MediaAttributeValue SOURCE 
		ON (        TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
				AND TARGET.MediaPAth = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
									TARGET.MediaPath = SOURCE.AttributeValue,
							TARGET.MediaId   = SOURCE.MediaId,
									TARGET.CreatedBy = @UserId,
									TARGET.CreatedDate = @GetDate,
									TARGET.ModifiedBy = @UserId,
									TARGET.ModifiedDate = @GetDate
					WHEN NOT MATCHED
					THEN 
			INSERT(PimAttributeValueId,
								LocaleId,
								MediaPath,
								MediaId ,
								CreatedBy,
								CreatedDate,
								ModifiedBy,
								ModifiedDate) 
			VALUES
				(SOURCE.PimAttributeValueId,
				SOURCE.LocaleId,
				SOURCE.AttributeValue,
				SOURCE.MediaId,
				@UserId,
				@GetDate,
				@UserId,
				@GetDate
				);

		;With Cte_TextAreaAttributeValue AS 
			(
		SELECT a.PimAttributeValueId,
						b.LocaleId,
						AttributeValue
		FROM @ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
												AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_TextAreaAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		
		)
		
		MERGE INTO ZnodePimProductAttributeTextAreaValue TARGET 
		USING Cte_TextAreaAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
				AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
									TARGET.AttributeValue = SOURCE.AttributeValue,
									TARGET.CreatedBy = @UserId,
									TARGET.CreatedDate = @GetDate,
									TARGET.ModifiedBy = @UserId,
									TARGET.ModifiedDate = @GetDate
					WHEN NOT MATCHED
					THEN 
			INSERT(PimAttributeValueId,
								LocaleId,
								AttributeValue,
								CreatedBy,
								CreatedDate,
								ModifiedBy,
								ModifiedDate) 
			VALUES
				(SOURCE.PimAttributeValueId,
				SOURCE.LocaleId,
				SOURCE.AttributeValue,
				@UserId,
				@GetDate,
				@UserId,
				@GetDate
				);

		INSERT INTO @TBL_DefaultAttributeValue (PimAttributeValueId,LocaleId,AttributeValue)  
		SELECT a.PimAttributeValueId,
						b.LocaleId,
						d.PimAttributeDefaultValueId  AttributeValue
		FROM @ZnodePimAttributeValue AS a
			INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
												AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
		INNER JOIN @TBL_DefaultAttributeId c ON ( c.PimAttributeId  = b.PimAttributeId )
		INNER JOIN ZnodePimAttributeDefaultValue d ON (EXISTS (SELECT TOP 1 1 FROM dbo.split(b.AttributeValue,',') SP WHERE d.PimAttributeId = b.PimAttributeId AND SP.Item = d.AttributeDefaultValueCode))
	
		DELETE FROM ZnodePimProductAttributeDefaultValue 
		WHERE  EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeValue TBLAV WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId 
												AND TBLAV.AttributeValue   <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId 
													AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId )

		MERGE INTO ZnodePimProductAttributeDefaultValue TARGET 
		USING @TBL_DefaultAttributeValue SOURCE 
		ON (TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
				AND TARGET.PimAttributeDefaultValueId =  SOURCE.AttributeValue
				AND TARGET.LocaleId = SOURCE.LocaleId)
		WHEN MATCHED THEN 
		UPDATE SET
									TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue,
									TARGET.CreatedBy = @UserId,
									TARGET.CreatedDate = @GetDate,
									TARGET.ModifiedBy = @UserId,
									TARGET.ModifiedDate = @GetDate
					WHEN NOT MATCHED
					THEN 
			INSERT(PimAttributeValueId,
								LocaleId,
								PimAttributeDefaultValueId,
								CreatedBy,
								CreatedDate,
								ModifiedBy,
								ModifiedDate) 
			VALUES
				(SOURCE.PimAttributeValueId,
				SOURCE.LocaleId,
				SOURCE.AttributeValue,
				@UserId,
				@GetDate,
				@UserId,
				@GetDate
				);

	MERGE INTO ZnodePimAttributeValueLocale TARGET
        USING
        (
            SELECT a.PimAttributeValueId,
                b.LocaleId,
                AttributeValue
            FROM @ZnodePimAttributeValue AS a
                INNER JOIN #PimProductDetail AS b ON(a.PimAttributeId = b.PimAttributeId
                                                        AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0))
            WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId  )
			AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId  )
			AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId  )
		) SOURCE
        ON(TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
        AND TARGET.LocaleId = SOURCE.LocaleId)
            WHEN MATCHED
            THEN UPDATE SET
                            TARGET.AttributeValue = SOURCE.AttributeValue,
                            TARGET.CreatedBy = @UserId,
                            TARGET.CreatedDate = @GetDate,
                            TARGET.ModifiedBy = @UserId,
                            TARGET.ModifiedDate = @GetDate
            WHEN NOT MATCHED
            THEN INSERT(PimAttributeValueId,
                        LocaleId,
                        AttributeValue,
                        CreatedBy,
                        CreatedDate,
                        ModifiedBy,
                        ModifiedDate) VALUES
        (SOURCE.PimAttributeValueId,
        SOURCE.LocaleId,
        SOURCE.AttributeValue,
        @UserId,
        @GetDate,
        @UserId,
        @GetDate
        );
        SET @AssociatedProduct =
        (
            SELECT MAX(AssociatedProducts)
            FROM #PimProductDetail AS a
        );
        INSERT INTO ZnodePimProductTypeAssociation
        (PimParentProductId,
        PimProductId,
        DisplayOrder,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
        )
            SELECT @PimProductId,
                    Item,
                    ID AS RowId,
                    @UserId,
                    @GetDate,
                    @UserId,
                    @GetDate
            FROM dbo.Split(@AssociatedProduct, ',') AS b
                    INNER JOIN ZNodePimProduct AS q ON(q.PimProductId = b.Item)
					WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation PPT
					WHERE PPT.PimParentProductId = @PimProductId AND PPT.PimProductId = b.Item)


        SET @ConfigureAttributeId =
        (
            SELECT MAX(ConfigureAttributeIds)
            FROM #PimProductDetail AS a
        );
        SET @ConfigureFamilyId =
        (
            SELECT MAX(ConfigureFamilyIds)
            FROM #PimProductDetail AS a
        );
        INSERT INTO [ZnodePimConfigureProductAttribute]
        (PimProductId,
        PimFamilyId,
        PimAttributeId,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
        )
            SELECT @PimProductId,
                    @ConfigureFamilyId,
                    q.PimAttributeId,
                    @UserId,
                    @GetDate,
                    @UserId,
                    @GetDate
            FROM dbo.Split(@ConfigureAttributeId, ',') AS b
                    INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimConfigureProductAttribute RTR  WHERE  RTR.PimProductId = @PimProductId AND RTR.PimAttributeId = q.PimAttributeId);

        IF @IsNotReturnOutput = 0
            SELECT @PimProductId AS Id,
                CAST(1 AS BIT) AS Status;
        SET @status = 1;

		IF @CopyPimProductId > 0 
		BEGIN 
		INSERT INTO ZnodePimAttributeValueLocale  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
		FROM ZnodePimAttributeValueLocale ZPAVL 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
		INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
		WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
		AND ZPAV.PimProductId = @CopyPimProductId

		INSERT INTO ZnodePimProductAttributeDefaultValue  (PimAttributeValueId,LocaleId,PimAttributeDefaultValueId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.PimAttributeDefaultValueId,@UserId,@GetDate,@UserId,@GetDate
		FROM ZnodePimProductAttributeDefaultValue ZPAVL 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
		INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
		WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
		AND ZPAV.PimProductId = @CopyPimProductId


		INSERT INTO ZnodePimProductAttributeTextAreaValue  (PimAttributeValueId,LocaleId,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.AttributeValue,@UserId,@GetDate,@UserId,@GetDate
		FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
		INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
		WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
		AND ZPAV.PimProductId = @CopyPimProductId
			   			   
		INSERT INTO ZnodePimProductAttributeMedia  (PimAttributeValueId,LocaleId,MediaPath,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT ZPAVI.PimAttributeValueId,ZPAVL.LocaleId,ZPAVL.MediaPath,@UserId,@GetDate,@UserId,@GetDate
		FROM ZnodePimProductAttributeMedia ZPAVL 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId )
		INNER JOIN ZnodePimAttributeValue ZPAVI ON (ZPAVI.PimAttributeId = ZPAV.PimAttributeId AND ZPAVI.PimProductId = @PimProductId )
		WHERE ZPAVL.LocaleId <> dbo.Fn_GetDefaultLocaleId()
		AND ZPAV.PimProductId = @CopyPimProductId
			   
		END 

		IF @LocaleId = @DefaultLocaleId
		BEGIN 	 
	
		DECLARE @sqlt NVARCHAr(max) = ''
		DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

		DECLARE Cur_AttributeDataUpdate CURSOR FOR 

		SELECT b.AttributeCode , PimAttributeId 
		FROM INFORMATION_SCHEMA.COLUMNS a 
		INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
		WHERE TABLE_NAME = 'ZnodePimProduct'
		AND IsCategory = 0 
		AND IsShowOnGrid = 1 
		AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail n  WHERE n.ProductAttributeCode = b.AttributeCode  )
		OPEN Cur_AttributeDataUpdate 
		FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
		WHILE @@FETCH_STATUS = 0 
		BEGIN 

		SET @sqlt = 'UPDATE a  
		SET '+@AttributeCodeAtt+'= AttributeValue 
		FROM ZnodePimProduct a 
		INNER JOIN #PimProductDetail m ON(m.PimProductId = a.pimProductId ) 
		WHERE m.ProductAttributeCode = '''+@AttributeCodeAtt+'''
		' 

		EXEC (@sqlt)

		FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
		END 
		CLOSE Cur_AttributeDataUpdate
		DEALLOCATE Cur_AttributeDataUpdate 

END 

        COMMIT TRAN A;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE()
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInsertUpdatePimProduct @UserId = '+CAST(@UserId AS VARCHAR(50))+',@IsNotReturnOutput='+CAST(@IsNotReturnOutput AS VARCHAR(50))+',@CopyPimProductId='+CAST(@CopyPimProductId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	ROLLBACK TRAN A;
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportInsertUpdatePimProduct',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportInventory_Ver1')
	DROP PROC Znode_ImportInventory_Ver1
GO

CREATE PROCEDURE [dbo].[Znode_ImportInventory_Ver1](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Inventory data 
	--		   Input data in XML format Validate data with all scenario 
	-- Unit Testing : 
	--BEGIN TRANSACTION;
	--update ZnodeGlobalSetting set FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff' 
	--    DECLARE @status INT;
	--    EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
	-- <ImportInventoryModel>
	--   <SKU>S1002</SKU>
	--   <Quantity>999998.33</Quantity>
	--   <ReOrderLevel>10</ReOrderLevel>
	--   <RowNumber>1</RowNumber>
	--   <ListCode>TestInventory</ListCode>
	--   <ListName>TestInventory</ListName>
	-- </ImportInventoryModel>
	--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
	--    SELECT @status;
	--    ROLLBACK TRANSACTION;
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100), @MessageDisplayForFloat nvarchar(100);
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 
		SELECT @RoundOffValue = FeatureValues
		FROM ZnodeGlobalSetting
		WHERE FeatureName = 'InventoryRoundOff';
		
		IF OBJECT_ID('tempdb.dbo.#InserInventoryForValidation', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.#InserInventoryForValidation
		
		IF OBJECT_ID('tempdb.dbo.#InsertInventory ', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.#InsertInventory 

		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 123.12345699 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 0.999999 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplayForFloat OUT;
		Create TABLE tempdb..#InserInventoryForValidation 
		( 
				RowNumber int, SKU varchar(600), Quantity varchar(100), ReOrderLevel varchar(100), WarehouseCode varchar(300), GUID nvarchar(200)
		);

		CREATE INDEX IDX_#InserInventoryForValidation_SKU ON #InserInventoryForValidation(SKU)
		
		DECLARE @InventoryListId int;
		SET @SSQL = 'Select RowNumber,SKU,Quantity,ReOrderLevel,WarehouseCode ,GUID FROM '+@TableName;
		INSERT INTO tempdb..#InserInventoryForValidation( RowNumber, SKU, Quantity, ReOrderLevel, WarehouseCode, GUID )
		EXEC sys.sp_sqlexec @SSQL;
		

		UPDATE tempdb..#InserInventoryForValidation
		  SET ReOrderLevel = 0
		WHERE ISNULL(ReOrderLevel,'') = '';

		-- start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '98', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM tempdb..#InserInventoryForValidation  AS ii
		WHERE NOT EXISTS( SELECT * FROM ZnodePimAttributeValue  AS a with(nolock)
			INNER JOIN ZnodePimAttributeValueLocale AS b with(nolock) ON a.PimAttributeValueId = b.PimAttributeValueId
			WHERE exists(Select top 1 PimAttributeId from ZnodePimAttribute zpa Where zpa.AttributeCode = 'SKU' and a.PimAttributeId = zpa.PimAttributeId)
			AND b.AttributeValue = ii.SKU);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '107', 'WarehouseCode', WarehouseCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM tempdb..#InserInventoryForValidation  AS ii
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeWarehouse AS zw WHERE zw.WarehouseCode = ii.WarehouseCode );

		UPDATE ZIL SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InserInventoryForValidation IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		DELETE FROM tempdb..#InserInventoryForValidation 
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  GUID = @NewGUID
		);
		
		DECLARE @TBL_ReadyToInsertInventory TABLE
		( 
			RowNumber int, SKU varchar(300), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), WarehouseId int
		);

		--deleting duplicate rows
		delete  ii
		FROM tempdb..#InserInventoryForValidation  ii
		where ii.RowNumber not IN
			   (
				   SELECT MAX(ii1.RowNumber)
				   FROM tempdb..#InserInventoryForValidation  AS ii1
				   WHERE ii1.WarehouseCode = ii.WarehouseCode AND 
						 ii1.SKU = ii.SKU
			   );

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InserInventoryForValidation
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

		--select 'update started'  
		UPDATE zi SET Quantity = rtii.Quantity, ReOrderLevel = ISNULL(rtii.ReOrderLevel, 0), ModifiedBy = @UserId, ModifiedDate = @GetDate
		FROM ZNodeInventory zi
		INNER JOIN #InserInventoryForValidation rtii ON( zi.SKU = rtii.SKU )
		INNER JOIN ZnodeWarehouse AS zw ON rtii.WarehouseCode = zw.WarehouseCode and zi.WarehouseId = zw.WarehouseId;
			   
		--select 'update End'                
		INSERT INTO ZnodeInventory( WarehouseId, SKU, Quantity, ReOrderLevel, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT zw.WarehouseId, SKU, Quantity, ISNULL(ReOrderLevel, 0), @UserId, @GetDate, @UserId, @GetDate
		FROM #InserInventoryForValidation AS rtii
		INNER JOIN ZnodeWarehouse AS zw on rtii.WarehouseCode = zw.WarehouseCode
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM ZnodeInventory AS zi WHERE zi.WarehouseId = zw.WarehouseId AND zi.SKU = rtii.SKU );
		 
		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH

		ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportInventory_Ver1 @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200));


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportInventory_Ver1',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialPimProductData')
	DROP PROC Znode_ImportPartialPimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialPimProductData]
(
	@TableName			VARCHAR(200),
	@NewGUID			NVARCHAR(200),
	@TemplateId			NVARCHAR(200),
	@ImportProcessLogId INT,
	@UserId				INT,
	@LocaleId			INT,
	@DefaultFamilyId	INT
)
AS 
/*
	Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
	Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
				Create group of product with their attribute code and values and inserted one by one products.
	
	SourceColumnName : CSV file column headers
	TargetColumnName : Attributecode from ZnodePimAttribute Table 

	*** Need to log error if transaction failed during insertion of records into table.
*/
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		--BEGIN TRAN ImportProducts;
		DECLARE @SQLQuery NVARCHAR(MAX);
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
		--Declare error Log Table 


		DECLARE @FamilyAttributeDetail TABLE
		( 
		PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
		);
		SET @DefaultFamilyId = 0 

		IF @DefaultFamilyId = 0
		BEGIN
			INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
			--Call Process to insert data of defeult family with cource column name and target column name 
			--EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
			--UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();
			SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
			FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
			LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
			ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
			WHERE zpa.IsCategory = 0 
		END;
		--Read all attribute details with their datatype 
		IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
		BEGIN
			CREATE TABLE #DefaultAttributeValue (AttributeTypeName VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
			AttributeDefaultValueCode VARCHAR(100));
					
			INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
			--Call Process to insert default data value 
			EXEC Znode_ImportGetPimAttributeDefaultValue;
		END;
		ELSE
		BEGIN
			DROP TABLE #DefaultAttributeValue;
		END;
		EXEC sys.sp_sqlexec @SQLQuery;

		DECLARE @PimProductDetail TABLE 
		(
			PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			ProductAttributeDefaultValueId INT NULL,PimAttributeValueId INT NULL,LocaleId INT,
			PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT
		);

		-- Update Record count in log 
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND ImportProcessLogId = @ImportProcessLogId;
				
		SET @SQLQuery = ' insert into ZnodeImportSuccessLog (ImportedSku,ImportedProductId,ImportedGuId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
		Select SKU, PimProductId , ''' + @NewGUID + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''', '+ Convert(nvarchar(100),@UserId) +',''' + 
		Convert(nvarchar(100),@GetDate) + ''' from ' + @TableName ;
		EXEC	sp_executesql @SQLQuery

		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount
		
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
		-- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
		-- Add PimAttributeDefaultValue 
		DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
		FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail WHERE ISNULL(SourceColumnName, '') <> '';
		OPEN Cr_AttributeDetails;
		FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @NewProductId = 0;
			SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
							(SELECT TOP 1 PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId = '
							+ CONVERT(VARCHAR(100), @AttributeId)+'AND AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
							+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
									
							, RowNumber FROM '+@TableName+' TN';
			INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
		END;
		CLOSE Cr_AttributeDetails;
		DEALLOCATE Cr_AttributeDetails;

		SELECT * INTO #PimProductDetail FROM @PimProductDetail

		UPDATE a 
		SET ConfigureAttributeIds = SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
		FROM #PimProductDetail c 
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
		WHERE IsConfigurable =1 AND c.RowNumber = a.RowNumber FOR XML PATH('')),2,4000) 
		FROM #PimProductDetail a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail ab WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = 'ProductType' 
		AND ab.AttributeValue = 'ConfigurableProduct' )

		-- In case of Yes/No : If value is not TRUE OR 1 then it will be False else True
		--If default Value set not need of hard code for IsActive
		UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'Yes','TRUE','1') THEN 'true' ELSE 'false' END FROM #PimProductDetail ppdti
		INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE dav.AttributeTypeName = 'Yes/No';

		-- Pass product records in bulk
		DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL; --User define table type to pass multiple records of product in single step

		INSERT INTO @PimProductDetailToInsert
			(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
				PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
		SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
			PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds 
		FROM #PimProductDetail

		DELETE FROM @PimProductDetailToInsert WHERE RTRIM(LTRIM(AttributeValue)) = '';
	
		IF EXISTS (SELECT TOP 1 1 FROM @PimProductDetailToInsert)
		BEGIN
			EXEC Znode_ImportPartialInsertUpdateProductAttribute @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
		END
		/*
		-- Pass product records one by one 
		DECLARE @IncrementalId INT= 1;
		DECLARE @SequenceId INT=
		(
			SELECT MAX(RowNumber) FROM #PimProductDetail
		);

		DECLARE @PimProductDetailToInsert PIMPRODUCTDETAIL;  --User define table type to pass multiple records of product in single step
		
		WHILE @IncrementalId <= @SequenceId
		BEGIN
			INSERT INTO @PimProductDetailToInsert(PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,
			PimAttributeValueId,LocaleId,PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds)
			SELECT PimAttributeId,PimAttributeFamilyId,ProductAttributeCode,ProductAttributeDefaultValueId,PimAttributeValueId,LocaleId,
			PimProductId,AttributeValue,AssociatedProducts,ConfigureAttributeIds,ConfigureFamilyIds FROM #PimProductDetail
			WHERE [#PimProductDetail].RowNumber = @IncrementalId; --AND RTRIM(LTRIM(AttributeValue)) <> '';

			Delete from @PimProductDetailToInsert where RTRIM(LTRIM(AttributeValue)) = '';
			--ORDER BY [@PimProductDetail].RowNumber;
			----Call process to finally insert data into 
			----------------------------------------------------------
			--1. [dbo].[ZnodePimProduct]
			--2. [dbo].[ZnodePimAttributeValue]
			--3. [dbo].[ZnodePimAttributeValueLocale]
			if Exists (select TOP 1 1 from @PimProductDetailToInsert)
				EXEC [Znode_ImportPartialInsertUpdatePimProduct] @PimProductDetail = @PimProductDetailToInsert,@UserID = @UserID,@status = @status OUT,@IsNotReturnOutput = 1;
				
			DELETE FROM @PimProductDetailToInsert;
			SET @IncrementalId = @IncrementalId + 1;
		END;
		*/

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- COMMIT TRAN ImportProducts;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialPimProductData @TableName = '+CAST(@TableName AS VARCHAR(max))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200)) +',@TemplateId='+CAST(@TemplateId AS VARCHAR(200)) +',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@DefaultFamilyId='+CAST(@DefaultFamilyId AS VARCHAR(200));
			---Import process updating fail due to database error
		
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
			TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialPimProductData',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;

		ROLLBACK TRAN ImportProducts;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialProcessProductData')
	DROP PROC Znode_ImportPartialProcessProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialProcessProductData]
(@TblGUID       NVARCHAR(255), 
 @UserId        INT, 
 @IsAutoPublish BIT           = 0
)
AS
    BEGIN

/*
	Summary :   Import PimProduct ( for partial attribute import ) 
	Process :   Read table ##ProductUpdate_GUID table, create import template with columns which is exists  in 
	ZnodePimAttribute table call import which is not dependent on family.
  	                  		  
	SourceColumnName: CSV file column headers
	Unit testing 
	drop table ##ProductUpdate_3 
  
	-- 	Create TABLE ##ProductUpdate_3 (SKU nvarchar(max), ProductName nvarchar(100),ProductType nvarchar(100))
	-- 	insert into ##ProductUpdate_3  Values ('apz231','sdsfd','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('gr990', 'test','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('ORRK3456','Test009','SimpleProduct')
	-- 	insert into ##ProductUpdate_3  Values ('hhhhhhh','Test009','dsfsdfsdf')
	-- 	select * from ##ProductUpdate_3
	
	--EXEC [Znode_ImportPartialProcessProductData] @TblGUID = '3', @UserId =2 

	--Select * from View_ManageLinkProductList 
	--select * from ZnodeImportSuccessLog
	--select * from ZnodeImportLog
  
	*/

        BEGIN TRY 
        SET NOCOUNT ON;
        DECLARE @NewuGuId NVARCHAR(255), @SpId BIGINT, @ImportHeadId INT;
        SET @NewuGuId = @TblGUID;-- NEWID()
        DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
        DECLARE @DefaultFamilyId INT= dbo.Fn_GetDefaultPimProductFamilyId();
        DECLARE @LocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @TemplateId INT, @Sql NVARCHAR(MAX)= '', @GlobalTableName NVARCHAR(500);
        DECLARE @ImportProcessLogId INT;

		SELECT @TemplateId = ImportTemplateId FROM ZnodeImportTemplate WHERE TemplateName = 'ProductUpdate'

        SET @SpId = @@SPID;
        SET @GlobalTableName = 'tempdb..[##PartialProductDetail' + CONVERT(NVARCHAR(500), @SpId) + ']';
        IF OBJECT_ID(@GlobalTableName, 'U') IS NOT NULL
            BEGIN
                SET @Sql = 'DROP TABLE ' + @GlobalTableName;
                EXEC sp_executesql 
                     @SQL;
        END;
        DECLARE @GlobalTemporaryTable NVARCHAR(255);
        DECLARE @CreateTableScriptSql NVARCHAR(MAX)= '', @InsertColumnName NVARCHAR(MAX), @UpdateTable2Column NVARCHAR(MAX), @UpdateTable3Column NVARCHAR(MAX), @UpdateTable4Column NVARCHAR(MAX), @ImportTableColumnName NVARCHAR(MAX), @ImportTableName VARCHAR(200), @TableName NVARCHAR(255)= 'tempdb..[##ProductUpdate_' + @TblGUID + ']', @Attribute NVARCHAR(MAX);
        DECLARE @Attributecode TABLE(Attrcode NVARCHAR(255));
        CREATE TABLE #Attributecode(Attrcode NVARCHAR(255));
        CREATE TABLE #ConfigurableAttributecode
        (SKU            NVARCHAR(255), 
         PimAttributeId INT, 
         DefaultValue   NVARCHAR(255), 
         AttributeCode  NVARCHAR(255), 
         ParentSKU      NVARCHAR(255)
        );
        SELECT @ImportHeadId = ImportHeadId
        FROM dbo.ZnodeImportHead
        WHERE Name = 'ProductUpdate';

        DELETE FROM ZnodeImportTemplateMapping
        WHERE ImportTemplateId = @TemplateId

		if (isnull(@TemplateId,0) = 0 ) 
		Begin 
        INSERT INTO ZnodeImportTemplate
        (ImportHeadId,TemplateName, TemplateVersion,PimAttributeFamilyId, IsActive,  CreatedBy, 
         CreatedDate, 
         ModifiedBy, 
         ModifiedDate
        )
        VALUES
        (@ImportHeadId, 
         'ProductUpdate', 
         1, 
         NULL, 
         1, 
         2, 
         @GetDate, 
         2, 
         @GetDate
        );
        SET @TemplateId = @@Identity;
		END
		
        SET @SQL = '
		INSERT INTO ZnodeImportTemplateMapping ( ImportTemplateId, SourceColumnName, TargetColumnName, DisplayOrder, IsActive, IsAllowNull, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		select ' + CONVERT(NVARCHAR(100), @TemplateId) + ', a.name, PA.AttributeCode,1,1,1,' + CONVERT(NVARCHAR(100), @UserId) + ' , ''' + CONVERT(NVARCHAR(100), @GetDate) + ''' , ' + CONVERT(NVARCHAR(100), @UserId) + ', ''' + CONVERT(NVARCHAR(100), @GetDate) + '''  
		from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		inner join ZnodePimAttribute PA on a.name = PA.AttributeCode AND PA.IsCategory =0  
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') ';
        EXEC (@SQL);
        --------------------------------------------


		

        DECLARE @SQLQuery NVARCHAR(MAX);
        IF OBJECT_ID('#WrongData', 'U') IS NOT NULL
            BEGIN
                DROP TABLE #WrongData;
        END;
        CREATE TABLE #WrongData(ColumnName NVARCHAR(100));
        SET @SQLQuery = ' INSERT INTO #WrongData (ColumnName )
		Select a.Name from tempdb.sys.columns a
		inner join tempdb.sys.tables b on a.object_id = b.object_id 
		where b.name in (''##ProductUpdate_' + @TblGUID + ''') 
		and NOT EXISTS (Select TOP 1 1 FROM ZnodePimAttribute PA WHERE a.name = PA.AttributeCode) AND a.Name not in (''SKU'',''guid'') ';
        EXEC sys.sp_sqlexec 
             @SQLQuery;
        SET @ImportProcessLogId = 0;

		
        IF EXISTS
        (
            SELECT TOP 1 1
            FROM #WrongData
        )
            BEGIN
			
                INSERT INTO ZnodeImportProcessLog
                (ImportTemplateId, 
                 STATUS, 
                 ProcessStartedDate, 
                 ProcessCompletedDate, 
                 CreatedBy, 
                 CreatedDate, 
                 ModifiedBy, 
                 ModifiedDate, 
                 ERPTaskSchedulerId
                )
                       SELECT @TemplateId, 
                              dbo.Fn_GetImportStatus(3), 
                              @GetDate, 
                              NULL, 
                              @UserId, 
                              @GetDate, 
                              @UserId, 
                              @GetDate, 
                              NULL;
                SET @ImportProcessLogId = @@IDENTITY;
                SET @SQLQuery = '
			INSERT INTO ZnodeImportLog
					(ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
			Select 19 ,''Attribute '', ColumnName, ''' + @TblGUID + ''',' + CONVERT(NVARCHAR(100), @UserId) + ',''' + CONVERT(NVARCHAR(100), @GetDate) + ''',' + CONVERT(NVARCHAR(100), @UserId) + ',''' + CONVERT(NVARCHAR(100), @GetDate) + ''',' + CONVERT(NVARCHAR(100), @ImportProcessLogId) + ',' + ' NULL  from #WrongData ';
                EXEC sys.sp_sqlexec 
                     @SQLQuery;

                --SELECT	'Job create successfully.'
                --Return 0 

        END;
        --------------------------------------------

        SELECT @InsertColumnName = SUBSTRING(
        (
            SELECT ',[' + [TargetColumnName] + ']'
            FROM [dbo].[ZnodeImportTemplateMapping]
            WHERE [ImportTemplateId] = @TemplateId FOR XML PATH('')
        ), 2, 4000);
	
        SELECT @CreateTableScriptSql = 'CREATE TABLE ' + @GlobalTableName + ' (' + SUBSTRING(
        (
            SELECT ',[' + ISNULL([TargetColumnName], 'NULL') + '] nvarchar(max)'
            FROM [dbo].[ZnodeImportTemplateMapping]
            WHERE [ImportTemplateId] = @TemplateId FOR XML PATH('')
        ), 2, 4000) + ' , GUID nvarchar(255))';
		
        EXEC (@CreateTableScriptSql);
        IF(LEN(@InsertColumnName) > 0)
            BEGIN
                SET @SQL = 'INSERT INTO ' + @GlobalTableName + ' ( ' + @InsertColumnName + ' )	SELECT ' + @InsertColumnName + ' FROM ' + @TableName;
                PRINT @sql;
                EXEC sp_executesql 
                     @SQL;
        END;
		
		
        DECLARE @UpdateTableColumn VARCHAR(MAX);
        SET @Sql = 'UPDATE ' + @GlobalTableName + ' SET GUID= ''' + @NewuGuId + '''';
        EXEC sp_executesql 
             @SQL;

        SET @Sql = 'Update ' + @GlobalTableName + ' SET SKU = Ltrim(Rtrim(SKU)) ';
        EXEC sp_executesql 
             @SQL;

        ---- Import product    
        EXEC Znode_ImportData 
             @TableName = @GlobalTableName, 
             @NewGUID = @TblGUID, 
             @TemplateId = @TemplateId, 
             @UserId = @UserId, 
             @LocaleId = @LocaleId, 
             @DefaultFamilyId = @DefaultFamilyId, 
             @PriceListId = 0, 
             @CountryCode = '',
             --,@IsDoNotCreateJob = 0
             --,@IsDoNotStartJob = 0
             --,@StepName = 'Import'-- 	,@IsDebug = 1  
             @IsAutoPublish = @IsAutoPublish, 
             @ImportProcessLogId = @ImportProcessLogId;
        SELECT 'Job create successfully.';
        END TRY
        BEGIN CATCH 
        DECLARE @Status BIT ;
        select ERROR_MESSAGE ()
        SET @Status = 0;
        DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
        @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialProcessProductData @TblGUID = '''+ISNULL(@TblGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS
        VARCHAR(50)),'''''')+',@IsAutoPublish='+ISNULL(CAST(@IsAutoPublish AS VARCHAR(50)),'''')
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
        EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_ImportPartialProcessProductData',
        @ErrorInProcedure = 'Znode_ImportPartialProcessProductData',
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
        END CATCH 
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPartialValidatePimProductData')
	DROP PROC Znode_ImportPartialValidatePimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPartialValidatePimProductData]
(   @ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0,
	@PromotionTypeId	INT=0 
)
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct ( for partial attribute import ) 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
             --BEGIN TRAN TRN_ImportValidProductData;
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
			    @CsvColumnString nvarchar(max), @FailedRecordCount BIGINT,
				@SuccessRecordCount BIGINT

			DECLARE @TableNameNew NVARCHAR(100);
			SET @TableNameNew = REPLACE(@TableName,']','')+CAST(NEWID() AS NVARCHAR(100))+']'

			SET @SQLQuery='	SELECT * INTO '+@TableNameNew+' FROM '+@TableName+'	';

			--PRINT (@SQLQuery);
			EXEC (@SQLQuery);
			SET @TableName=@TableNameNew;

              --To get the total record count for update purpose in catch block
             SET @SQLQuery = 'SELECT '+CAST(@ImportProcessLogId AS VARCHAR(10))+',COUNT(*) FROM '+@TableName
			 INSERT INTO Znode_ImportCsvRowCount
			 EXEC (@SQLQuery) 

			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus(0)
			WHERE ImportProcessLogId = @ImportProcessLogId AND Status IS NULL;

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             DECLARE @AttributeDetail TABLE
             (PimAttributeId    INT,
              AttributeTypeName VARCHAR(300),
              AttributeCode     VARCHAR(300),
              SourceColumnName  NVARCHAR(600),
              IsRequired        BIT,
              ControlName       VARCHAR(300),
              ValidationName    VARCHAR(100),
              SubValidationName VARCHAR(300),
              ValidationValue   VARCHAR(300),
              RegExp            VARCHAR(300)
             );

             DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
             )
                 CREATE TABLE #InvalidDefaultData
                 (RowNumber  INT,
                  Value      NVARCHAR(MAX),
                  ColumnName NVARCHAR(600)
                 );
             ELSE
             DROP TABLE #InvalidDefaultData;
             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
             )
                 BEGIN

                     SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
					(select database_id from sys.databases where name = ''tempdb''))';
                     CREATE TABLE #GlobalTempTableColumns
                     (ColumnName   NVARCHAR(MAX),
                      TypeOfImport NVARCHAR(100)
                     );
                     INSERT INTO #GlobalTempTableColumns
                     (ColumnName,
                      TypeOfImport
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                 END;

             IF EXISTS
             (
                 SELECT TOP 1 1
                 FROM #GlobalTempTableColumns
                 WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
             )
                 BEGIN
                     INSERT INTO ZnodeImportLog
                     (ErrorDescription,
                      ColumnName,
                      Data,
                      GUID,
                      CreatedBy,
                      CreatedDate,
                      ModifiedBy,
                      ModifiedDate,
                      ImportProcessLogId
                     )
                     VALUES
                     (43,
                      '',
                      '',
                      @newGUID,
                      @UserId,
                      @GetDate,
                      @UserId,
                      @GetDate,
                      @ImportProcessLogId
                     );
                 END;
             SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();
             --Remove old error log 

             IF NOT EXISTS
             (
                 SELECT TOP 1 1  FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )
                 BEGIN
                     IF @ImportHeadName = 'ProductUpdate'
                      BEGIN
						  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
							  SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
						  ELSE 
							 SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
						  EXEC sys.sp_sqlexec @SQLQuery;
			         END;
                     ELSE
                     IF @ImportHeadName = 'Category'
                         BEGIN
							  IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
							  ElSE
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
							  EXEC sys.sp_sqlexec @SQLQuery;
                         END;
                     ELSE
                         BEGIN
							IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
							Else 
								SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
							EXEC sys.sp_sqlexec @SQLQuery;
                         END;;
                 END



			--Retrive PimProductId on the basis of SKU for update product 
			SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
							FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
							(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
							INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
							INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
	
			SET @SQLQuery = 'Select 98 ,''SKU'', SKU, '''+ @newGUID + ''',' + Convert(nvarchar(100),@UserId) + ',''' +  Convert(nvarchar(100),@GetDate) + ''',' + Convert(nvarchar(100),@UserId) + ',''' + Convert(nvarchar(100),@GetDate) + ''',' +  Convert(nvarchar(100),@ImportProcessLogId)  + ',RowNumber   from  '+ @TableName + ' where PimProductId Is null ';
			INSERT INTO ZnodeImportLog
                     (ErrorDescription,ColumnName,Data,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId,RowNumber )
        	EXEC sys.sp_sqlexec	@SQLQuery	 	

			SET @SQLQuery = 'Delete from  '+@TableName+ ' where PimProductId Is null ';
			EXEC sys.sp_sqlexec	@SQLQuery	 	
			
			DECLARE @RecordCount Bigint 
			SET @SQLQuery = ' Select @RecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC sp_executesql @SQLQuery, N'@RecordCount BIGINT out' , @RecordCount=@RecordCount out

             SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

             SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
             IF @ImportHeadName IN('ProductUpdate') AND @RecordCount > 0  
                 BEGIN 
					SET @IsCategory = 0 
				    --Get all default attribute values in attribute 
                    INSERT INTO @FamilyAttributeDetail
                    (PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                    --Call Process to insert data of defeult family with source column name and target column name 
					SELECT distinct zpa.PimAttributeId, zat.AttributeTypeName, zpa.AttributeCode, zitm.SourceColumnName, zpa.IsRequired ,0
					FROM dbo.ZnodePimAttribute AS zpa INNER JOIN dbo.ZnodeAttributeType AS zat ON zat.AttributeTypeId = zpa.AttributeTypeId 
					LEFT OUTER JOIN dbo.ZnodeImportTemplateMapping AS zitm
					ON zpa.AttributeCode = zitm.SourceColumnName AND zitm.ImportTemplateId = @TemplateId
					WHERE zpa.IsCategory = 0 
	             END;
            -- Check attributes are manditory and not provided with source table
		   	if @TABLENAME	like '%tempdb..%'
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
			else 
				SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
		 
		 
     		INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId )
            EXEC sys.sp_sqlexec  @SQLQuery;
            IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM ZnodeImportLog
                 WHERE Guid = @NewGUID
                       AND ErrorDescription IN(43, 42)
                 AND ImportProcessLogId = @ImportProcessLogId
             )  AND @RecordCount > 0  
                 BEGIN
                     --Get all default attribute values in attribute 
                     IF @ImportHeadName IN('ProductUpdate', 'Category')
                         BEGIN
                             -- Check attributes are manditory and not provided with source table

                             -- Read all attribute details with their datatype
                             INSERT INTO @AttributeDetail
                             (PimAttributeId,
                              AttributeTypeName,
                              AttributeCode,
                              SourceColumnName,
                              IsRequired,
                              ControlName,
                              ValidationName,
                              SubValidationName,
                              ValidationValue,
                              RegExp
                             )
                             EXEC Znode_ImportGetTemplateDetails
                                  @TemplateId=@TemplateId,
								  @DefaultFamilyId=@DefaultFamilyId;

							 ---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
							 Delete FAD from @AttributeDetail FAD
							 where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
							 and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
										   inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)

                             DELETE FROM @AttributeDetail
                             WHERE AttributeTypeName = 'Image'
                                   AND ValidationName <> 'IsAllowMultiUpload';
                             IF NOT EXISTS
                             (
                                 SELECT TOP 1 1
                                 FROM INFORMATION_SCHEMA.TABLES
                                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeCode'
                             )
                                 BEGIN
                                     CREATE TABLE #DefaultAttributeCode
                                     (AttributeTypeName          VARCHAR(300),
                                      PimAttributeDefaultValueId INT,
                                      PimAttributeId             INT,
                                      AttributeDefaultValueCode  VARCHAR(100)
                                     );
                                     INSERT INTO #DefaultAttributeCode
                                     (AttributeTypeName,
                                      PimAttributeDefaultValueId,
                                      PimAttributeId,
                                      AttributeDefaultValueCode
                                     )
                                     --Call Process to insert default data value 
                                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                                     DELETE FROM #DefaultAttributeCode
                                     WHERE AttributeTypeName = 'Yes/No';
                                 END;
                             ELSE
                                 BEGIN
                                     DROP TABLE #DefaultAttributeCode;
                                 END;
                         END;

                     --	Check attributes are not mapped with (Default / Other) family of Pim Product

                     DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                     FOR SELECT PimAttributeId,
                                AttributeTypeName,
                                AttributeCode,
                                IsRequired,
                                SourceColumnName,
                                ControlName,
                                ValidationName,
                                SubValidationName,
                                ValidationValue,
                                RegExp
                         FROM @AttributeDetail
                         WHERE ISNULL(SourceColumnName, '') <> '';
                     OPEN Cr_Attribute;
                     FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                     WHILE @@FETCH_STATUS = 0
                         BEGIN
				             IF @AttributeTypeName = 'Number'
                                 BEGIN
							      EXEC Znode_ImportValidateNumber
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check invalid date
							
                             IF @AttributeTypeName = 'Date'
                                 BEGIN
                                     EXEC Znode_ImportValidateDate
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @ImportHeadId = @ImportHeadId,
                                          @ImportProcessLogId = @ImportProcessLogId;
                                 END;
							 -- Check Manditory Data
		 					 IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
								BEGIN
									SET @CheckedSourceColumn = @SourceColumnName;
									EXEC Znode_ImportValidateMandatoryData
									@TableName = @TableName,
									@SourceColumnName = @SourceColumnName,
									@CreateDateString = @CreateDateString,
									@ValidationName = @ValidationName,
									@ControlName = @ControlName,
									@ValidationValue = @ValidationValue,
									@NewGUID = @NewGUID,
									@ImportHeadId = @ImportHeadId;
								END;
							 --END 
							
                             IF @AttributeTypeName = 'Text'
                                 BEGIN
									--For link product
									DECLARE @IsIgnoreProcess BIT = CASE WHEN EXISTS (SELECT TOP 1 1 FROM ZnodePimAttribute WHERE AttributeCode = (SELECT TOP 1 TargetColumnName
								    FROM ZnodeImportTemplateMapping a 
									INNER JOIN ZnodeImportTemplate b ON (b.ImportTemplateId = a.ImportTemplateId )
									WHERE TemplateName = 'ProductUpdate'
									AND a.TargetColumnName <> 'SKU'
								   )
								    AND AttributeTypeId = (SELECT TOP 1 AttributeTypeId FROM ZnodeAttributeType WHERE  AttributeTypeName = 'link' )
								   ) THEN 1 ELSE 0 END 
								 
						              EXEC Znode_ImportValidateManditoryText
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId,
										  @IsIgnoreProcess = @IsIgnoreProcess;
                                 END;
                             IF @AttributeTypeName = 'Image'
                                 BEGIN
                                     EXEC Znode_ImportValidateImageData
                                          @TableName = @TableName,
                                          @SourceColumnName = @SourceColumnName,
                                          @CreateDateString = @CreateDateString,
                                          @ValidationName = @ValidationName,
                                          @ControlName = @ControlName,
                                          @ValidationValue = @ValidationValue,
                                          @NewGUID = @NewGUID,
                                          @LocaleId = @LocaleId,
                                          @DefaultLocaleId = @DefaultLocaleId,
                                          @AttributeId = @AttributeId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @ImportHeadId = @ImportHeadId;
                                 END;

								 --For link product
								 IF @AttributeTypeName = 'Link'
                                 BEGIN
										--To get the product SKU in temp table
										SELECT ZPAV.PimProductId, ZPAVL.AttributeValue as SKU
										INTO #ProductSKU
										FROM ZnodePimAttributeValue ZPAV
										INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId 
										WHERE EXISTS(SELECT * FROM ZnodePimAttribute ZPA WHERE ZPAV.PimAttributeId = zpa.PimAttributeId AND ZPA.AttributeCode = 'SKU')

                                     	SET @SQLQuery = 'SELECT ''98'' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], '+@SourceColumnName+' AS  AttributeValue,RowNumber ,GUID,  '+@CreateDateString+' 
											FROM '+@TableName+' a 
											CROSS APPLY DBO.SPLIT('+@SourceColumnName+','','')S WHERE RowNumber in (SELECT RowNumber FROM '+@TableName+' WHERE  NOT EXISTS  (Select TOP 1 1  FROM #ProductSKU WHERE SKU = S.Item ) 
											)
											';
                     
											INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
											EXEC sys.sp_sqlexec @SQLQuery;
				
                                 END;

                             --Check Default data value is valid 
                             IF @ImportHeadName IN('ProductUpdate', 'Category')
                                 BEGIN
                                     IF @AttributeId IN
                                     (
                                         SELECT PimAttributeId
                                         FROM #DefaultAttributeCode
                                     )
                                         BEGIN
							
                                                   ---Verify Image file is exists in media table or not 
                                             SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
                                             SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
                                             (Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
                                              DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
                                             ' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
                                             )), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
                                             + ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''

						
                                             EXEC sys.sp_sqlexec @SQLQuery;
                                             -- Check Invalid Image 
                                             
											 SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
                                             Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
                                             INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
                                             EXEC sys.sp_sqlexec @SQLQuery;

											 Delete from #InvalidDefaultData

       
                                         END;
                                 END;
							
                             FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                         END;
                     CLOSE Cr_Attribute;
                     DEALLOCATE Cr_Attribute;
                     --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
                 END;
            --COMMIT TRAN TRN_ImportValidProductData;
			 

		IF @ImportHeadName IN('ProductUpdate')
		 BEGIN
		 Declare @SQLQueryNew NVARCHAR(4000)
		 Declare @SourceColumnNameProduct nvarchar(4000)   	 
		 SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
		 AND ImportTemplateId = @TemplateId

            SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  ' +@SourceColumnNameProduct+ '+' + ''' ]'' 
		    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
			WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
            PRINT @SQLQueryNew

			EXEC sys.sp_sqlexec  @SQLQueryNew;
			
		END 

					 	 		 
  			 SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber in (Select Rownumber from ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber is not null)';
             EXEC sys.sp_sqlexec  @SQLQuery;

             IF @ImportHeadName IN('ProductUpdate')
                 BEGIN
                     IF NOT EXISTS
                
					 (
						 SELECT TOP 1 1
						 FROM ZnodeImportLog
						 WHERE Guid = @NewGUID
							   AND ErrorDescription IN (43, 42)
						 AND ImportProcessLogId = @ImportProcessLogId
					 ) AND @RecordCount > 0 
                         BEGIN
                             IF @IsCategory = 0
                                 BEGIN
                                     EXEC Znode_ImportPartialPimProductData
                                          @TableName = @TableName,
                                          @NewGUID = @NewGUID,
                                          @TemplateId = @TemplateId,
                                          @ImportProcessLogId = @ImportProcessLogId,
                                          @UserId = @UserId,
                                          @LocaleId = @LocaleId,
                                          @DefaultFamilyId = @DefaultFamilyId;
	
                                 END;
                            
                         END;

					ELSE 
					BEGIN
					-- Update Record count in log 					
					SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
					EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
					
					SELECT @SuccessRecordCount = 0
					UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
					WHERE ImportProcessLogId = @ImportProcessLogId;
					END

                 END
				
			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
			SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			
			EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out

			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
			WHERE ImportProcessLogId = @ImportProcessLogId;

		   EXEC Znode_ImportReadErrorLog
                  @ImportProcessLogId = @ImportProcessLogId,
                  @NewGUID = @NewGUID;
             DROP TABLE #GlobalTempTableColumns;

             ---- Finally call product insert process if error not found in error log table 

			 SET @GetDate = dbo.Fn_GetDate();
                    --Updating the import process status
					UPDATE ZnodeImportProcessLog
					SET Status = CASE WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
										WHEN ISNULL(FailedRecordcount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
										WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(FailedRecordcount,0) = ISNULL(TotalProcessedRecords,0) THEN dbo.Fn_GetImportStatus( 3 )
									END, 
						ProcessCompletedDate = @GetDate
					WHERE ImportProcessLogId = @ImportProcessLogId;
        END TRY
      
		BEGIN CATCH 
		DECLARE @TempCount TABLE (Id INT)

		Declare @SQL Varchar(max) = 'Select Count(*) As Id From '+@TableName
		INSERT INTO @TempCount
		EXEC (@SQL)

			SET @Status = 0;
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPartialValidatePimProductData @ImportHeadName = '''+ISNULL(@ImportHeadName,'''''')+''',@TableName='''+ISNULL(CAST(@TableName AS
			VARCHAR(50)),'''''')+''',@TemplateId='+ISNULL(CAST(@TemplateId AS VARCHAR(50)),'''')+',@NewGUID='''+ISNULL(@NewGUID,'''''')+''',@UserId='+ISNULL(CAST(@UserId AS VARCHAR(50)),'''')+',@LocaleId='+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''')+',
			@IsCategory='+ISNULL(CAST(@IsCategory AS VARCHAR(50)),'''')+',@DefaultFamilyId='+ISNULL(CAST(@DefaultFamilyId AS VARCHAR(50)),'''')+',@ImportProcessLogId='+ISNULL(CAST(@ImportProcessLogId AS VARCHAR(50)),'''')+',
			@PriceListId='+ISNULL(CAST(@PriceListId AS VARCHAR(50)),'''')+',@CountryCode='''+ISNULL(CAST(@CountryCode AS VARCHAR(50)),'''''')+''',@PimCatalogId='+ISNULL(CAST(@PimCatalogId AS VARCHAR(50)),'''')+',
			@PortalId='+ISNULL(CAST(@PortalId AS VARCHAR(50)),'''')+',@IsAccountAddress='+ISNULL(CAST(@IsAccountAddress AS VARCHAR(50)),'''')

			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;       
			
			---Import process updating fail due to database error
			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;

			---Loging error for Import process due to database error
		    INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		    SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

			--Updating total and fail record count
		    UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		    TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		    WHERE ImportProcessLogId = @ImportProcessLogId;

			EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPartialValidatePimProductData',
			@ErrorInProcedure = 'Znode_ImportPartialValidatePimProductData',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
		END CATCH 

     END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPimCategoryData')
	DROP PROC Znode_ImportPimCategoryData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimCategoryData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS

    /*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inseerted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.

	EXEC Znode_ImportPimCategoryData 
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			 IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

			 IF OBJECT_ID('tempdb.dbo.#DefaultHideCategoryonMenu', 'U') IS NOT NULL   
			 DROP TABLE tempdb.dbo.#DefaultHideCategoryonMenu

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             IF @DefaultFamilyId = 0
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = 1,
						  @DefaultFamilyId=@DefaultFamilyId;
                     UPDATE @FamilyAttributeDetail
                       SET
                           PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @DefaultFamilyId = @DefaultFamilyId,
                          @IsCategory = 1;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
			 --Read all matched CategoryId with respect to their CategoryCode 

             --Read all attribute details with their datatype 

             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue'
             )
                 BEGIN
                     CREATE TABLE #DefaultAttributeValue
                     (AttributeTypeName          VARCHAR(300),
                      PimAttributeDefaultValueId INT,
                      PimAttributeId             INT,
                      AttributeDefaultValueCode  VARCHAR(100)
                     );
                     INSERT INTO #DefaultAttributeValue
                     (AttributeTypeName,
                      PimAttributeDefaultValueId,
                      PimAttributeId,
                      AttributeDefaultValueCode
                     )
                     --Call Process to insert default data value 
                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                 END;
             ELSE
                 BEGIN
                     DROP TABLE #DefaultAttributeValue;
                 END;  
         
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
             DECLARE @PimCategoryDetail TABLE
             ([PimCategoryId]              [INT] NULL,
              [PimAttributeId]             [INT] NULL,
              [PimAttributeValueId]        [INT] NULL,
              [PimAttributeDefaultValueId] [INT] NULL,
              [PimAttributeFamilyId]       [INT] NULL,
              [LocaleId]                   [INT] NULL,
              [AttributeCode]              [VARCHAR](500) NULL,
              [AttributeValue]             [NVARCHAR](MAX) NULL,
              [RowNumber]                  INT 
             );
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimCategoryDetail
             -- Add PimAttributeDefaultValue 

             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,
                        AttributeTypeName,
                        AttributeCode,
                        IsRequired,
                        SourceColumnName,
                        PimAttributeFamilyId
                 FROM @FamilyAttributeDetail
                 WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                     SET @NewProductId = 0;
                     SET @SQLQuery = 'SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId, 0 PimCategoryId,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
						   (SELECT TOP 1 PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '+CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId,'+@SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId,RowNumber FROM '+@TableName+' TN';
                     INSERT INTO @PimCategoryDetail
                     ([PimAttributeFamilyId],
                      [PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeDefaultValueId],
                      AttributeValue,
                      LocaleId,
                      RowNumber
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                     FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
             UPDATE ppdti
               SET
                   ppdti.AttributeValue = CASE
                                              WHEN ppdti.AttributeValue = 'Yes/No'
                                              THEN 'False'
                                          END
             FROM @PimCategoryDetail ppdti
                  INNER JOIN #DefaultAttributeValue dav ON dav.PimAttributeDefaultValueId = ppdti.PimAttributeDefaultValueId
             WHERE ISNULL(ppdti.AttributeValue, '') = '';

			 SELECT PCD.AttributeValue
			 INTO #DuplicateCategory
			 FROM @PimCategoryDetail PCD
			 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
			 where PA.AttributeCode = 'CategoryCode' 
			 GROUP BY PCD.AttributeValue
			 Having Count(*) > 1


			INSERT INTO ZnodeImportLog
			(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
			 SELECT '53' ,'CategoryCode',PCD.AttributeValue,PCD.RowNumber,@NewGUID,2,@GetDate,2,@GetDate,@ImportProcessLogId
			 FROM @PimCategoryDetail PCD
			 WHERE RowNumber IN (SELECT RowNumber frOM #DuplicateCategory DC 
								 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
								 WHERE PA.AttributeCode = 'CategoryCode' 
								 AND PCD.AttributeValue = DC.AttributeValue )

			SELECT PIMDTL.AttributeValue,PA.AttributeCode 
			INTO #DefaultHideCategoryonMenu
			FROM @PimCategoryDetail PIMDTL INNER JOIN ZnodePimAttribute PA ON (PIMDTL.PimAttributeId = PA.PimAttributeId)
			WHERE PA.AttributeCode='HideCategoryonMenu'

			INSERT INTO ZnodeImportLog  
			(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId) 
			SELECT '68' ,'HideCategoryonMenu',PCD.AttributeValue,PCD.RowNumber,@NewGUID,2,@GetDate,2,@GetDate,@ImportProcessLogId  
			FROM @PimCategoryDetail PCD  
			WHERE RowNumber IN (SELECT RowNumber frOM #DefaultHideCategoryonMenu DC   
			INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)  
			WHERE PA.AttributeCode = 'HideCategoryonMenu'   
			AND PCD.AttributeValue = DC.AttributeValue ) AND PCD.AttributeValue NOT IN ('1','0','yes','no','true','false')

			
			 ----update mediaid for CategoryImage
			 select zm.FileName,max(MediaId) as MediaId, PCD.RowNumber
			 into #CategoryImage
			 from ZnodeMedia ZM
			 inner join @PimCategoryDetail PCD on ZM.FileName = PCD.AttributeValue
			 where exists(select * from ZnodePimAttribute c where PCD.PimAttributeId = c.PimAttributeId and c.AttributeCode = 'CategoryImage')
			 group by zm.FileName, PCD.RowNumber 
			 
			update a set a.AttributeValue = b.MediaId
			from @PimCategoryDetail a
			inner join #CategoryImage b on a.AttributeValue = b.FileName and a.RowNumber = b.RowNumber
				
			 ----update PimCategoryId present in znode on basis of CategoryCode
			 update d set  d.PimCategoryId = a.PimCategoryId
			 from ZnodePimCategoryAttributeValue a
			 inner join ZnodePimCategoryAttributeValueLocale b on a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
			 inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
			 inner join @PimCategoryDetail d on d.AttributeValue = b.CategoryValue and c.PimAttributeId = d.PimAttributeId
			 where c.AttributeCode = 'CategoryCode' 

			 ----update PimCategoryId for other attributes if category is present
			 ;WITH CTE_UpdateCategoryId AS
			(
				select PimCategoryId, RowNumber from @PimCategoryDetail where isnull(PimCategoryId,0) <> 0
			)
			UPDATE PCD set PCD.PimCategoryId = UC.PimCategoryId
			FROM @PimCategoryDetail PCD
			INNER JOIN CTE_UpdateCategoryId UC on PCD.RowNumber = UC.RowNumber
			 ---------------------------

             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber)
                 FROM @PimCategoryDetail
             );
             DECLARE @PimCategoryDetailToInsert PIMCATEGORYDETAIL;  --User define table type to pass multiple records of product in single step

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
                     INSERT INTO @PimCategoryDetailToInsert
                     ([PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeValueId],
                      [PimAttributeDefaultValueId],
                      [PimAttributeFamilyId],
                      [LocaleId],
                      [AttributeCode],
                      [AttributeValue]
                     )
                            SELECT [PimCategoryId],
                                   [PimAttributeId],
                                   [PimAttributeValueId],
                                   [PimAttributeDefaultValueId],
                                   [PimAttributeFamilyId],
                                   [LocaleId],
                                   [AttributeCode],
                                   [AttributeValue]
                            FROM @PimCategoryDetail
                            WHERE [@PimCategoryDetail].RowNumber = @IncrementalId AND LTRIM(RTRIM([AttributeValue])) <> '';
                     --ORDER BY [@PimCategoryDetail].RowNumber;
                     ----Call process to finally insert data into 
                     ----------------------------------------------------------
                     --1. [dbo].[ZnodePimProduct]
                     --2. [dbo].[ZnodePimAttributeValue]
                     --3. [dbo].[ZnodePimAttributeValueLocale]

                     EXEC [Znode_ImportInsertUpdatePimCategory]
                          @InsertCategory = @PimCategoryDetailToInsert,
                          @UserID = @UserID,
                          @status = @status OUT,
						  @IsImport=1;--,@IsNotReturnOutput=1;
                     DELETE FROM @PimCategoryDetailToInsert;
                     SET @IncrementalId = @IncrementalId + 1;
                 END;

			
				-- Update Record count in log 
				DECLARE @FailedRecordCount BIGINT
				DECLARE @SuccessRecordCount BIGINT
				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
				EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;
				
			SET @GetDate = dbo.Fn_GetDate();
             --Updating the import process status
			UPDATE ZnodeImportProcessLog
			SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
								WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
								WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
							END, 
				ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;	   	  
            
			IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

			IF OBJECT_ID('tempdb.dbo.#DefaultHideCategoryonMenu', 'U') IS NOT NULL   
			DROP TABLE tempdb.dbo.#DefaultHideCategoryonMenu

         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
 
			 DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPimCategoryData @TableName = '+CAST(@TableName AS VARCHAR(max))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200)) +',@TemplateId='+CAST(@TemplateId AS VARCHAR(200)) +',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@DefaultFamilyId='+CAST(@DefaultFamilyId AS VARCHAR(200));
            ---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportPimCategoryData',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
            
         END CATCH;
     END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPimProductData')
	DROP PROC Znode_ImportPimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportPimProductData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS
    
/*
    Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
    Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inserted one by one products. 	   
    
    SourceColumnName : CSV file column headers
    TargetColumnName : Attributecode from ZnodePimAttribute Table 

	***  Need to log error if transaction failed during insertion of records into table.
*/

BEGIN
	SET NOCOUNT ON
    BEGIN TRY
        BEGIN TRAN ImportProducts;
        DECLARE @SQLQuery NVARCHAR(MAX);
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultLocaleId();
        DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
        --Declare error Log Table 
			    
			
		DECLARE @FamilyAttributeDetail TABLE
		( 
		PimAttributeId int, AttributeTypeName varchar(300), AttributeCode varchar(300), SourceColumnName nvarchar(600), IsRequired bit, PimAttributeFamilyId int
		);
        IF @DefaultFamilyId = 0
            BEGIN
			INSERT INTO @FamilyAttributeDetail( PimAttributeId, AttributeTypeName, AttributeCode, SourceColumnName, IsRequired, PimAttributeFamilyId )
			--Call Process to insert data of defeult family with cource column name and target column name 
			EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId, @IsValidationRules = 0, @IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;
            UPDATE @FamilyAttributeDetail SET PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

			---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;
        ELSE
            BEGIN
                INSERT INTO @FamilyAttributeDetail(PimAttributeId,AttributeTypeName,AttributeCode,SourceColumnName,IsRequired,PimAttributeFamilyId)
                --Call Process to insert data of defeult family with cource column name and target column name 
                EXEC Znode_ImportGetTemplateDetails @TemplateId = @TemplateId,@IsValidationRules = 0,@IsIncludeRespectiveFamily = 1,@DefaultFamilyId = @DefaultFamilyId;

				---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;  
				
		-- Retrive PimProductId on the basis of SKU for update product 
		SET @SQLQuery = 'UPDATE tlb SET tlb.PimProductId = ZPAV.PimProductId 
						FROM ZnodePimAttributeValue AS ZPAV INNER JOIN ZnodePimAttributeValueLocale AS ZPAVL ON 
						(ZPAVL.PimAttributeValueId = ZPAV.PimAttributeValueId) 
						INNER JOIN [dbo].[ZnodePimAttribute] ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId AND ZPA.AttributeCode= ''SKU'' 
						INNER JOIN '+@TableName+' tlb ON ZPAVL.AttributeValue = ltrim(rtrim(tlb.SKU)) ';
		EXEC sys.sp_sqlexec	@SQLQuery	
			 
			 
		SET @SQLQuery='
		INSERT INTO ZnodeImportLog( ErrorDescription,ColumnName, Data, GUID,RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT ''135'',''SKU'', SKU, '''+@NewGUId+''',RowNumber, '+cast(@UserId as varchar(10))+', '''+CONVERT(NVARCHAR(30),@GetDate,121)+''', '+cast(@UserId as varchar(10))+', '''+CONVERT(NVARCHAR(30),@GetDate,121)+''', '+cast(@ImportProcessLogId as varchar(10))+'
		FROM '+@TableName +' WHERE LEN(SKU)>600';
		EXEC sys.sp_sqlexec @SQLQuery;

		SET @SQLQuery='Delete B from '+@TableName +' B WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeImportLog A where B.RowNumber=A.RowNumber and A.ImportProcessLogId 
		='+cast(@ImportProcessLogId as varchar(10))+')'
		EXEC (@SQLQuery)

        --Read all attribute details with their datatype 
        IF NOT EXISTS(SELECT TOP 1 1 FROM INFORMATION_SCHEMA.TABLES WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue')
		BEGIN
				CREATE TABLE #DefaultAttributeValue (AttributeTypeName  VARCHAR(300),PimAttributeDefaultValueId INT,PimAttributeId INT,
				AttributeDefaultValueCode  VARCHAR(100));
					 
			INSERT INTO #DefaultAttributeValue(AttributeTypeName,PimAttributeDefaultValueId,PimAttributeId,AttributeDefaultValueCode)
			--Call Process to insert default data value 
			EXEC Znode_ImportGetPimAttributeDefaultValue;
		END;
        ELSE
        BEGIN
            DROP TABLE #DefaultAttributeValue;
        END;
        EXEC sys.sp_sqlexec
            @SQLQuery;
       
		DECLARE @PimProductDetail TABLE 
		(
			      
			PimAttributeId INT, PimAttributeFamilyId INT,ProductAttributeCode VARCHAR(300) NULL,
			ProductAttributeDefaultValueId INT NULL,PimAttributeValueId  INT NULL,LocaleId INT,
			PimProductId INT NULL,AttributeValue NVARCHAR(MAX) NULL,AssociatedProducts NVARCHAR(4000) NULL,ConfigureAttributeIds VARCHAR(2000) NULL,
			ConfigureFamilyIds VARCHAR(2000) NULL,RowNumber INT  
        );

		-- Update Record count in log 
		DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
		EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

			
        -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimProductDetail
        -- Add PimAttributeDefaultValue 
        DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
        FOR SELECT PimAttributeId,AttributeTypeName,AttributeCode,IsRequired,SourceColumnName,PimAttributeFamilyId FROM @FamilyAttributeDetail  WHERE ISNULL(SourceColumnName, '') <> '';
        OPEN Cr_AttributeDetails;
        FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        WHILE @@FETCH_STATUS = 0
        BEGIN
			SET @NewProductId = 0;
			SET @SQLQuery = ' SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId , PimProductId PimProductId,'''+'['+@AttributeCode+']'+''' ProductAttributeCode ,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
							(SELECT TOP 1  PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '
							+ CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.['+@SourceColumnName+'] ) PimAttributeDefaultValueId ,['
							+ @SourceColumnName+'],'+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId
						, RowNumber FROM '+@TableName+' TN';
						print @SQLQuery
			INSERT INTO @PimProductDetail( PimAttributeFamilyId, PimProductId,ProductAttributeCode, PimAttributeId, ProductAttributeDefaultValueId, AttributeValue, LocaleId, RowNumber )
					
			EXEC sys.sp_sqlexec @SQLQuery;
			FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
        END;
        CLOSE Cr_AttributeDetails;
        DEALLOCATE Cr_AttributeDetails;
			 
			
		if object_id('tempdb..#PimProductDetail1') is not null
		drop table #PimProductDetail1

		Select * into #PimProductDetail1 from @PimProductDetail

		DELETE FROM #PimProductDetail1 WHERE RTRIM(LTRIM(ISNULL(AttributeValue, ''))) = '';

		UPDATE a 
		SET ConfigureAttributeIds =  SUBSTRING((SELECT ','+CAST(c.PimAttributeId As VARCHAR(100)) 
		FROM #PimProductDetail1 c 
		INNER JOIN ZnodePimAttribute b ON (b.PimAttributeId = c.PimAttributeId)
		WHERE IsConfigurable =1  AND c.RowNumber = a.RowNumber  FOR XML PATH('')),2,4000) 
		FROM #PimProductDetail1 a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 ab  WHERE ab.RowNumber = a.RowNumber AND	ab.ProductAttributeCode = '[ProductType]' 
		AND ab.AttributeValue = 'ConfigurableProduct' )
				
        -- In case of Yes/No : If value is not TRUE OR  1 then it will be  False else True
		--If default Value set not need of hard code for IsActive
		UPDATE ppdti SET ppdti.AttributeValue = CASE WHEN Upper(ISNULL(ppdti.AttributeValue, '')) in ( 'TRUE','1')  THEN 'true'  ELSE 'false' END FROM #PimProductDetail1 ppdti
        INNER JOIN #DefaultAttributeValue dav ON ppdti.PimAttributeId = dav.PimAttributeId WHERE   dav.AttributeTypeName = 'Yes/No';
   	
		-----------Added Performance patch 
		DECLARE @PublishStateIdForDraft INT= [dbo].[Fn_GetPublishStateIdForDraftState]();
		DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
		DECLARE @pimSkuAttributeId VARCHAR(50)= [dbo].[Fn_GetProductSKUAttributeId]();
		DECLARE @PimIsDownlodableAttributeId VARCHAR(50)= [dbo].[Fn_GetIsDownloadableAttributeId]();
		DECLARE @PublishStateIdForNotPublished INT= [dbo].[Fn_GetPublishStateIdForForNotPublishedState]();
        
		CREATE INDEX Inx_PimProductDetail_Bulk1 ON #PimProductDetail1(RowNumber);

		------------------------------------Bulk Row Process
		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		---- Count of total rows for import
		SELECT @MaxCount = COUNT(*) FROM #PimProductDetail1;
		
		---- Count of rows in loop for import
		SELECT @Rows = (select top 1 FeatureValues from ZnodeGlobalSetting where FeatureName = 'ProductImportBulk')  --ceiling(@MaxCount/100.0)
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
			DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
					MinRow = 1, 
					MaxRow = cast(@Rows as int)
			UNION ALL
			SELECT RowId + 1, 
					MinRow + cast(@Rows as int), 
					MaxRow + cast(@Rows as int)
			FROM cte
			WHERE RowId + 1 <= @MaxCount
		)
		SELECT RowId, MinRow, MaxRow
		INTO #Temp_ImportLoop
		FROM cte
		option (maxrecursion 0);

		--while @MaxCount <= @minRow
		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
		FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop;

		OPEN cur_BulkData;
		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		BEGIN TRAN ImportProducts;

		if object_id ('tempdb..#PimProductDetail_Bulk_Process')is not null
				drop table tempdb..#PimProductDetail_Bulk_Process

		CREATE TABLE #PimProductDetail_Bulk_Process
		([PimAttributeId]                 [INT] NULL, 
			[PimAttributeFamilyId]           [INT] NULL, 
			[ProductAttributeCode]           [VARCHAR](300) NULL, 
			[ProductAttributeDefaultValueId] [INT] NULL, 
			[PimAttributeValueId]            [INT] NULL, 
			[LocaleId]                       [INT] NULL, 
			[PimProductId]                   [INT] NULL, 
			[AttributeValue]                 [NVARCHAR](MAX) NULL, 
			[AssociatedProducts]             [NVARCHAR](4000) NULL, 
			[ConfigureAttributeIds]          [VARCHAR](2000) NULL, 
			[ConfigureFamilyIds]             [VARCHAR](2000) NULL, 
			[RowNumber]                      [INT] NULL, 
			SKU1                             VARCHAR(600),
			Id Int Identity(1,1)Primary Key
		);

		CREATE INDEX Inx_PimProductDetail_Bulk_Process ON #PimProductDetail_Bulk_Process(ProductAttributeCode, PimProductId);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process1 ON #PimProductDetail_Bulk_Process(RowNumber);
		CREATE INDEX Inx_PimProductDetail_Bulk_Process2 ON #PimProductDetail_Bulk_Process(ProductAttributeCode)
		CREATE INDEX Inx_PimProductDetail_Bulk_Process3 ON #PimProductDetail_Bulk_Process(PimAttributeId, PimProductId);
		
		---- Insert rows for import in bulk
		INSERT INTO #PimProductDetail_Bulk_Process
		([PimAttributeId], 
			[PimAttributeFamilyId], 
			[ProductAttributeCode], 
			[ProductAttributeDefaultValueId], 
			[PimAttributeValueId], 
			[LocaleId], 
			[PimProductId], 
			[AttributeValue], 
			[AssociatedProducts], 
			[ConfigureAttributeIds], 
			[ConfigureFamilyIds], 
			[RowNumber]
		)
		SELECT [PimAttributeId], 
				[PimAttributeFamilyId], 
				[ProductAttributeCode], 
				[ProductAttributeDefaultValueId], 
				[PimAttributeValueId], 
				[LocaleId], 
				[PimProductId], 
				ltrim(rtrim([AttributeValue])), 
				[AssociatedProducts], 
				[ConfigureAttributeIds], 
				[ConfigureFamilyIds], 
				[RowNumber]
		FROM #PimProductDetail1 a
		WHERE a.[RowNumber] BETWEEN @MinRow AND @MaxRow;

		--select * from @PimProductDetail

		--select * from #PimProductDetail1

			    

		---------------------------Start Importing 
		if object_id ('tempdb..#TBL_DefaultAttributeId')is not null
			drop table #TBL_DefaultAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeId')is not null
			drop table #TBL_MediaAttributeId

		if object_id ('tempdb..#TBL_TextAreaAttributeId')is not null
			drop table #TBL_TextAreaAttributeId

		if object_id ('tempdb..#TBL_MediaAttributeValue')is not null
			drop table #TBL_MediaAttributeValue

		if object_id ('tempdb..#TBL_DefaultAttributeValue')is not null
			drop table #TBL_DefaultAttributeValue

		if object_id ('tempdb..#ZnodePimAttributeValue')is not null
			drop table #ZnodePimAttributeValue

				
		CREATE TABLE #TBL_DefaultAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_MediaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );

		CREATE TABLE #TBL_TextAreaAttributeId ( PimAttributeId INT PRIMARY KEY, AttributeCode  VARCHAR(600) );
           
		CREATE TABLE #TBL_MediaAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue VARCHAR(300), MediaId INT );

		CREATE TABLE #TBL_DefaultAttributeValue ( PimAttributeValueId INT, LocaleId INT, AttributeValue INT );

		CREATE TABLE #ZnodePimAttributeValue (PimAttributeValueId  INT, PimAttributeFamilyId INT, PimAttributeId INT, PimProductId INT );

		DECLARE @ConfigureFamilyId VARCHAR(4000);

		INSERT INTO #TBL_DefaultAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetDefaultAttributeId]();

		INSERT INTO #TBL_MediaAttributeId (PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetProductMediaAttributeId]();

		INSERT INTO #TBL_TextAreaAttributeId ( PimAttributeId, AttributeCode )
		SELECT PimAttributeId, AttributeCode
		FROM [dbo].[Fn_GetTextAreaAttributeId]();

		SELECT TOP 1 @PimAttributeFamilyId = PimAttributeFamilyId FROM #PimProductDetail_Bulk_Process;

		if object_id ('tempdb..#cte')is not null
			drop table #cte

		SELECT AttributeValue AS SKU, RowNumber
		INTO #cte
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]';
              
		CREATE INDEX Inx_cte_RowNumber ON #cte(RowNumber);
		UPDATE a SET a.SKU1 = B.SKU
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #cte b ON a.RowNumber = b.RowNumber;

		SELECT TOP 1 @LocaleId = LocaleId FROM #PimProductDetail_Bulk_Process;

		----Update ZNodePimProduct 
		UPDATE ZNodePimProduct
		SET PimAttributeFamilyId = DP.PimAttributeFamilyId, 
			PublishStateId = @PublishStateIdForDraft, 
			ModifiedBy = @UserId, 
			ModifiedDate = @GetDate
		FROM ZNodePimProduct ZPP
		INNER JOIN #PimProductDetail_Bulk_Process DP ON ZPP.PimProductId = DP.PimProductId;
      
		if object_id ('tempdb..#ZnodePimProduct')is not null
			drop table #ZnodePimProduct

		CREATE TABLE #ZnodePimProduct(PimProductId INT,ExternalId INT  Primary key)

		--create index Idx_ZnodePimProduct_ExternalId on #ZnodePimProduct(ExternalId)

		----Insert into ZNodePimProduct 
		INSERT INTO ZnodePimProduct
		(PimAttributeFamilyId, 
			ExternalId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate, 
			PublishStateId
		)
		output inserted.PimProductId, inserted.ExternalId into #ZnodePimProduct(PimProductId,ExternalId)
		SELECT PimAttributeFamilyId, 
				RowNumber, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate, 
				@PublishStateIdForNotPublished
		FROM #PimProductDetail_Bulk_Process
		WHERE ProductAttributeCode = '[SKU]'
		AND PimProductId IS NULL;
            
		----Update newly created productIds
		UPDATE a SET a.PimProductId = b.PimProductId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #ZnodePimProduct b ON a.RowNumber = b.ExternalId;

		----Insert Downloadable products into ZnodePimDownloadableProduct
		INSERT INTO ZnodePimDownloadableProduct (SKU, ProductName, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT PDSKU.AttributeValue, PDProdName.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
		FROM #PimProductDetail_Bulk_Process PDSKU
		INNER JOIN #PimProductDetail_Bulk_Process PDProdName ON PDProdName.RowNumber = PDSKU.RowNumber
		INNER JOIN #PimProductDetail_Bulk_Process PDDownload ON PDDownload.RowNumber = PDSKU.RowNumber
		WHERE PDSKU.ProductAttributeCode = @pimSkuAttributeId
		AND PDProdName.ProductAttributeCode = '[SKU]'
		AND PDDownload.PimAttributeId = @PimIsDownlodableAttributeId
		AND PDDownload.AttributeValue = 'true'
		AND NOT EXISTS ( SELECT TOP 1 1 FROM ZnodePimDownloadableProduct WHERE ZnodePimDownloadableProduct.SKU = PDSKU.AttributeValue );

		---- update ZnodePimAttributeValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeFamilyId = CASE
												WHEN Source.PimAttributeFamilyId = 0
												THEN NULL
												ELSE Source.PimAttributeFamilyId
											END, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate, 
				TARGET.PimProductId = SOURCE.PimProductId
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		FROM ZnodePimAttributeValue TARGET
		INNER JOIN #PimProductDetail_Bulk_Process SOURCE ON TARGET.PimProductId = SOURCE.PimProductId AND TARGET.PimAttributeId = SOURCE.PimAttributeId;
             
		---- Inserting attribute data for Product 
		INSERT INTO ZnodePimAttributeValue 
		( 
			PimAttributeFamilyId, 
			PimProductId, PimAttributeId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate 
		)
		OUTPUT INSERTED.PimAttributeValueId, 
				INSERTED.PimAttributeFamilyId, 
				INSERTED.PimAttributeId, 
				INSERTED.PimProductId
				INTO #ZnodePimAttributeValue
		SELECT 
			CASE
				WHEN Source.PimAttributeFamilyId = 0
				THEN @PimDefaultFamily
				ELSE Source.PimAttributeFamilyId
			END, 
			SOURCE.PimProductId, 
			ISNULL(SOURCE.PimAttributeId, 0),
			CASE
				WHEN SOURCE.ProductAttributeDefaultValueId = 0
				THEN NULL
				ELSE SOURCE.ProductAttributeDefaultValueId
			END, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #PimProductDetail_Bulk_Process SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValue TARGET
			WHERE TARGET.PimProductId = SOURCE.PimProductId
					AND TARGET.PimAttributeId = SOURCE.PimAttributeId
		);
		-------------------------
		if object_id ('tempdb..#MediaData')is not null
			drop table #MediaData

		CREATE TABLE #MediaData (MediaId INT, PimProductId INT, PimAttributeId INT, PimAttributeFamilyId INT, LocaleId INT );

		---- Get Product Media Data
		INSERT INTO #MediaData ( MediaId , PimProductId , PimAttributeId , PimAttributeFamilyId , LocaleId )
		SELECT SP.Item, a.PimProductId, a.PimAttributeId, PimAttributeFamilyId, a.LocaleId
		FROM #PimProductDetail_Bulk_Process a
		INNER JOIN #TBL_MediaAttributeId c ON(c.PimAttributeId = a.PimAttributeId)
		CROSS APPLY dbo.split(a.AttributeValue, ',') SP;

		---- Get product media attribute data
		INSERT INTO #TBL_MediaAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue, MediaId )
		SELECT a.PimAttributeValueId, b.LocaleId, zm.Path AttributeValue, ZM.MediaId
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #MediaData AS b ON(a.PimAttributeId = b.PimAttributeId
										AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
										AND a.PimProductId = b.PimProductId)
		INNER JOIN ZnodeMedia ZM ON(b.MediaId = ZM.MediaId);
     
		---- Deleting product media attribute
		DELETE FROM ZnodePimProductAttributeMedia
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_MediaAttributeValue TBLM
			WHERE ZnodePimProductAttributeMedia.PimAttributeValueId = TBLM.PimAttributeValueId
					AND TBLM.MediaId <> ZnodePimProductAttributeMedia.MediaId
					AND ZnodePimProductAttributeMedia.Localeid = @LocaleId
		);

		---- update ZnodePimProductAttributeMedia : attribute data for Product
		UPDATE TARGET
			SET 
				TARGET.MediaPath = SOURCE.AttributeValue, 
				TARGET.MediaId = SOURCE.MediaId, 
				TARGET.ModifiedBy = @UserId, 
				TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeMedia TARGET
		INNER JOIN #TBL_MediaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
													AND TARGET.MediaPAth = SOURCE.AttributeValue
													AND TARGET.LocaleId = SOURCE.LocaleId;
    
		---- inserting Media attribute data for Product
		INSERT INTO ZnodePimProductAttributeMedia 
		( 
			PimAttributeValueId, 
			LocaleId, MediaPath, 
			MediaId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				SOURCE.MediaId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #TBL_MediaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeMedia TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.MediaPAth = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		--------------------------
		if object_id ('tempdb..#Cte_TextAreaAttributeValue')is not null
			drop table #Cte_TextAreaAttributeValue

		---- Getting text area data in temp #Cte_TextAreaAttributeValue
		SELECT a.PimAttributeValueId, 
				b.LocaleId, 
				AttributeValue
		INTO #Cte_TextAreaAttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
														AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
														AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_TextAreaAttributeId c ON(c.PimAttributeId = b.PimAttributeId);

		---- update ZnodePimProductAttributeTextAreaValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.CreatedBy = @UserId, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeTextAreaValue TARGET
		INNER JOIN #Cte_TextAreaAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																	AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting TextAreaValue attribute data for Product
		INSERT INTO ZnodePimProductAttributeTextAreaValue
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT SOURCE.PimAttributeValueId, 
				SOURCE.LocaleId, 
				SOURCE.AttributeValue, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #Cte_TextAreaAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeTextAreaValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
           
		---- Getting attribute default values for product
		INSERT INTO #TBL_DefaultAttributeValue ( PimAttributeValueId, LocaleId, AttributeValue )
		SELECT a.PimAttributeValueId, b.LocaleId, d.PimAttributeDefaultValueId AttributeValue
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		INNER JOIN #TBL_DefaultAttributeId c ON(c.PimAttributeId = b.PimAttributeId)
		CROSS APPLY dbo.split(b.AttributeValue, ',') SP
		INNER JOIN ZnodePimAttributeDefaultValue d ON d.PimAttributeId = b.PimAttributeId
														AND SP.Item = d.AttributeDefaultValueCode;
		---- Deleting prodyuct attribute default value
		DELETE FROM ZnodePimProductAttributeDefaultValue
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM #TBL_DefaultAttributeValue TBLAV
			WHERE TBLAV.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
					AND TBLAV.AttributeValue <> ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId
					AND ZnodePimProductAttributeDefaultValue.LocaleId = @LocaleId
		);

		---- update ZnodePimProductAttributeDefaultValue : attribute data for Product
		UPDATE TARGET
		SET TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimProductAttributeDefaultValue TARGET
				INNER JOIN #TBL_DefaultAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
																AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
																AND TARGET.LocaleId = SOURCE.LocaleId;

		---- insert ZnodePimProductAttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimProductAttributeDefaultValue
		(
			PimAttributeValueId, 
			LocaleId, 
			PimAttributeDefaultValueId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #TBL_DefaultAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimProductAttributeDefaultValue TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.PimAttributeDefaultValueId = SOURCE.AttributeValue
					AND TARGET.LocaleId = SOURCE.LocaleId
		);
               

		IF OBJECT_ID('tempdb..#cte_ZnodePimAttributeValue') IS NOT NULL
			DROP TABLE #cte_ZnodePimAttributeValue;

		CREATE TABLE #cte_ZnodePimAttributeValue(PimAttributeValueId int, LocaleId int, AttributeValue nvarchar(max))

		CREATE INDEX Idx_cte_ZnodePimAttributeValue on #cte_ZnodePimAttributeValue(PimAttributeValueId, LocaleId)

		INSERT INTO #cte_ZnodePimAttributeValue (PimAttributeValueId, LocaleId, AttributeValue)
		SELECT a.PimAttributeValueId, b.LocaleId,AttributeValue                
		FROM #ZnodePimAttributeValue AS a
		INNER JOIN #PimProductDetail_Bulk_Process AS b ON(a.PimAttributeId = b.PimAttributeId
															AND ISNULL(a.PimAttributeFamilyId, 0) = ISNULL(b.PimAttributeFamilyId, 0)
															AND a.PimProductId = b.PimProductId)
		WHERE NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_DefaultAttributeId TBLDA WHERE TBLDA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_MediaAttributeId TBLMA WHERE TBLMA.PimAttributeId = b.PimAttributeId )
		AND NOT EXISTS ( SELECT TOP 1 1 FROM #TBL_TextAreaAttributeId TBLTA WHERE TBLTA.PimAttributeId = b.PimAttributeId );

		---- update ZnodePimAttributeValueLocale : attribute data for Product
		UPDATE TARGET
		SET TARGET.AttributeValue = SOURCE.AttributeValue, 
			TARGET.ModifiedBy = @UserId, 
			TARGET.ModifiedDate = @GetDate
		FROM ZnodePimAttributeValueLocale TARGET
		INNER JOIN #cte_ZnodePimAttributeValue SOURCE ON TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
														AND TARGET.LocaleId = SOURCE.LocaleId;

		---- inserting AttributeDefaultValue : attribute data for Product
		INSERT INTO ZnodePimAttributeValueLocale
		(
			PimAttributeValueId, 
			LocaleId, 
			AttributeValue, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT 
			SOURCE.PimAttributeValueId, 
			SOURCE.LocaleId, 
			SOURCE.AttributeValue, 
			@UserId, 
			@GetDate, 
			@UserId, 
			@GetDate
		FROM #cte_ZnodePimAttributeValue SOURCE
		WHERE NOT EXISTS
		(
			SELECT *
			FROM ZnodePimAttributeValueLocale TARGET
			WHERE TARGET.PimAttributeValueId = SOURCE.PimAttributeValueId
					AND TARGET.LocaleId = SOURCE.LocaleId
		);

		---- Inserting configurable products into ZnodePimConfigureProductAttribute
		INSERT INTO [ZnodePimConfigureProductAttribute]
		(PimProductId, 
			PimFamilyId, 
			PimAttributeId, 
			CreatedBy, 
			CreatedDate, 
			ModifiedBy, 
			ModifiedDate
		)
		SELECT DISTINCT PD.PimProductId, 
				NULL, 
				q.PimAttributeId, 
				@UserId, 
				@GetDate, 
				@UserId, 
				@GetDate
		FROM #PimProductDetail_Bulk_Process PD
			CROSS APPLY dbo.Split([ConfigureAttributeIds], ',') AS b
			INNER JOIN ZnodePimAttribute AS q ON(q.PimAttributeId = b.Item)
		WHERE NOT EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimConfigureProductAttribute RTR
			WHERE RTR.PimProductId = PD.PimProductId
					AND RTR.PimAttributeId = q.PimAttributeId
		);

		IF @LocaleId = @DefaultLocaleId
		BEGIN 	 
			DECLARE @sqlt NVARCHAr(max) = ''
			DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

			DECLARE Cur_AttributeDataUpdate CURSOR FOR 

			SELECT b.AttributeCode , PimAttributeId 
			FROM INFORMATION_SCHEMA.COLUMNS a 
			INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
			WHERE TABLE_NAME = 'ZnodePimProduct'
			AND IsCategory = 0 
			AND IsShowOnGrid = 1 
			AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail_Bulk_Process n  WHERE Replace(Replace(n.ProductAttributeCode, '[',''), ']','') = b.AttributeCode  )

			OPEN Cur_AttributeDataUpdate 
			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			WHILE @@FETCH_STATUS = 0 
			BEGIN 

			SET @sqlt = 'UPDATE a  
			SET '+@AttributeCodeAtt+'= AttributeValue 
			FROM ZnodePimProduct a 
			INNER JOIN #PimProductDetail_Bulk_Process m ON(m.PimProductId = a.pimProductId ) 
			WHERE  Replace(Replace(m.ProductAttributeCode, ''['',''''), '']'','''') = '''+@AttributeCodeAtt+'''
			' 

			EXEC (@sqlt)

			FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
			END 
			CLOSE Cur_AttributeDataUpdate
			DEALLOCATE Cur_AttributeDataUpdate 

		END 



		COMMIT TRAN ImportProducts;

		FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
		END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;
		-----------Added Performance patch end

		

		---- Update family of Product in table ZnodePimConfigureProductAttribute 
		UPDATE ZnodePimConfigureProductAttribute
		SET PimFamilyId = b.PimAttributeFamilyId
		FROM ZnodePimConfigureProductAttribute a
				INNER JOIN ZnodePimProduct b ON a.PimProductId = b.PimProductId;

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN ImportProducts;

		DELETE FROM ZnodePimConfigureProductAttribute  
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePimAttributeValue  a WHERE a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND a.PimAttributeID = ZnodePimConfigureProductAttribute.PimAttributeID )
		--AND EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValue a 
		--INNER JOIN ZnodePimAttribute ty ON (ty.PimAttributeId = a.PimAttributeId)
		--INNER JOIN ZnodePimProductAttributeDefaultValue t ON (t.PimAttributeValueId = a.PimAttributeValueId )
		--INNER JOIN ZnodePimAttributeDefaultValue y ON (y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
		--INNER JOIN View_loadmanageProductInternal  TU ON (TU.AttributeCode = 'SKU' AND TU.PimProductId = a.PimProductId  )
		--WHERE ty.AttributeCode = 'ProductType' AND y.AttributeDefaultValueCode = 'ConfigurableProduct'
		--AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		AND EXISTS (SELECT TOP 1 1 FROM #PimProductDetail1 TM WHERE TM.PimProductId = ZnodePimConfigureProductAttribute.PimProductId )
   			
		----Delete simple products if inserted in table ZnodePimConfigureProductAttribute 
		DELETE FROM ZnodePimConfigureProductAttribute
		WHERE EXISTS
		(
			SELECT TOP 1 1
			FROM ZnodePimAttributeValue a
					INNER JOIN ZnodePimAttribute ty ON(ty.PimAttributeId = a.PimAttributeId)
					INNER JOIN ZnodePimProductAttributeDefaultValue t ON(t.PimAttributeValueId = a.PimAttributeValueId)
					INNER JOIN ZnodePimAttributeDefaultValue y ON(y.PimAttributeDefaultValueId = t.PimAttributeDefaultValueId)
			WHERE ty.AttributeCode = 'ProductType'
					AND y.AttributeDefaultValueCode = 'SimpleProduct'
					AND a.PimProductId = ZnodePimConfigureProductAttribute.PimProductId
		);

	END TRY
    BEGIN CATCH
		ROLLBACK TRAN ImportProducts;
		INSERT INTO ZnodeImportLog(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
		Select  46,ERROR_PROCEDURE(),ERROR_MESSAGE(),ERROR_LINE(),@newGUID,@UserId,@GetDate,@UserId,@GetDate, @ImportProcessLogId  
		
		SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;

		EXEC sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
		--SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS  NULL AND  ImportProcessLogId = @ImportProcessLogId;
		SELECT @SuccessRecordCount = 0
									
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZnodeImportProcessLog
		SET STATUS = dbo.Fn_GetImportStatus(3), 
		ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

        SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
		-- UPDATE ZnodeImportProcessLog SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate WHERE ImportProcessLogId = @ImportProcessLogId;
		-- ROLLBACK TRAN ImportProducts;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPriceList')
	DROP PROC Znode_ImportPriceList
GO

CREATE PROCEDURE [dbo].[Znode_ImportPriceList]
(
	@TableName nvarchar(100),
	@Status bit OUT, 
	@UserId int, 
	@ImportProcessLogId int,
	@NewGUId nvarchar(200),
	@PriceListId int )
AS 
	/*
	----Summary:  Import RetailPrice List 
	----		  Input XML data extracted in table format (table variable name:  #InsertPriceForValidation) by using  @xml.nodes 
	----		  Validate data column wise and store error log into @ErrorLogForInsertPrice table 
	----          Remove wrong data from table #InsertPriceForValidation and inserted correct data into @InsertPrice table for 
	----		  further processing (Importing to target database )
	---- Version 1 : Required Validation 
	---- UomName should not be null 
	---- Data for this RetailPrice list is already available  
	---- Version 2 : Required Validation 
	---- If UomName will be null then insert first record from UomTable and If UomName is wrong then raise error
	---- SKU with retailprice data is available with price list id will insert 
	---- multiple SKU with retail price is available then updated last sku details to price table and price tier table for respective price list
	----1. Import functionality should be provided only for single price list (Validate - Pending) 
	----  Tier price : TierStartQuantity should not between TierStartQuantity and TierEndQuantity for already existing SKU 
	----  In case of update details for SKU if any kind of price value will null then avoid it to update on existing value. 
	----2. From XML only SKU and RetailPrice is mandatory
	----3. SKUActivation date sholud be less than SKUExpriration date
	----4. Activation date sholud be less than Expiration date
	----5. If Tier RetailPrice has values and TierSartQuantity /TierEndQuantity or both has null value then it should not get updated/created.
	----6. ActivationDate and ExpirationDate value for tier price will be SKUActivationDate SKUExprirationDate 
	--- Change History : 
	--Remove column which is used to store range of qunatity by single column Quantity from table ZnodeTierProduct 
	--Manditory Retail price in Znodepricetable 
	-- SKUActivationfrom date and to date will used for tier price will store in single table ZnodePrice
	--Unit Testing   
	
*/
BEGIN
	BEGIN TRAN A;
	BEGIN TRY
	    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		
		IF OBJECT_ID('#InsertPriceForValidation', 'U') IS NOT NULL 
			DROP TABLE #InsertPriceForValidation
		ELSE 
			CREATE TABLE #InsertPriceForValidation 
			(SKU varchar(300) NULL, TierStartQuantity varchar(300) NULL, RetailPrice varchar(300) NULL, SalesPrice varchar(300) NULL, TierPrice varchar(300) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
			Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL,CostPrice varchar(100), RowNumber varchar(300) NULL)

		IF OBJECT_ID('#InsertPrice', 'U') IS NOT NULL 
			DROP TABLE #InsertPrice
		ELSE 
			CREATE TABLE #InsertPrice 
			( 
				SKU varchar(300), TierStartQuantity numeric(28, 6) NULL, RetailPrice numeric(28, 6) NULL, SalesPrice numeric(28, 6) NULL, TierPrice numeric(28, 6) NULL, SKUActivationDate varchar(300) NULL, SKUExpirationDate varchar(300) NULL,
				Custom1 varchar(300) NULL, Custom2 varchar(300) NULL, Custom3 varchar(300) NULL,CostPrice numeric(28, 6), RowNumber varchar(300)
			);
	
	
		DECLARE @SKU TABLE
		( 
				SKU nvarchar(300)
		);
		INSERT INTO @SKU
			   SELECT b.AttributeValue
			   FROM ZnodePimAttributeValue AS a
					INNER JOIN
					ZnodePimAttributeValueLocale AS b
					ON a.PimAttributeId = dbo.Fn_GetProductSKUAttributeId() AND 
					   a.PimAttributeValueId = b.PimAttributeValueId;


		DECLARE @RoundOffValue int, @MessageDisplay nvarchar(100); 
		-- Retrive RoundOff Value from global setting 

		SELECT @RoundOffValue = FeatureValues FROM ZnodeGlobalSetting WHERE FeatureName = 'PriceRoundOff';
	
		--@MessageDisplay will use to display validate message for input inventory value  

		DECLARE @sSql nvarchar(max);
		SET @sSql = ' Select @MessageDisplay_new = Convert(Numeric(28, '+CONVERT(nvarchar(200), @RoundOffValue)+'), 999999.000000000 ) ';
		EXEC SP_EXecutesql @sSql, N'@MessageDisplay_new NVARCHAR(100) OUT', @MessageDisplay_new = @MessageDisplay OUT;
		

		SET @SSQL = 'Select SKU,TierStartQuantity ,RetailPrice,SalesPrice,TierPrice,SKUActivationDate ,SKUExpirationDate ,
		 Custom1, Custom2, Custom3,CostPrice, RowNumber FROM '+@TableName;
		INSERT INTO #InsertPriceForValidation( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3,CostPrice, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '113', 'TierPrice', TierPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE  CONVERT(varchar(100), TierPrice) ='' AND CONVERT(varchar(100), TierStartQuantity) <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '114', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE  CONVERT(varchar(100), TierStartQuantity) ='' AND CONVERT(varchar(100), TierPrice) <> ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'TierPrice', TierPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(TierPrice)=0  
				or exists(select * from ZnodeCulture where Symbol is not null and TierPrice like '%'+Symbol+'%')) and ISNULL(TierPrice,'')<>''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'SalesPrice', SalesPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(SalesPrice)=0	or exists(select * from ZnodeCulture where Symbol is not null and SalesPrice like '%'+Symbol+'%'))
				and ISNULL(SalesPrice,'')<>''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'RetailPrice', RetailPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(RetailPrice)=0 or exists(select * from ZnodeCulture where Symbol is not null and RetailPrice like '%'+Symbol+'%')) and ISNULL(RetailPrice,'')<>''
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '2', 'CostPrice', CostPrice, @NewGUId, RowNumber , @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertPriceForValidation
				WHERE (isnumeric(CostPrice)=0	or exists(select * from ZnodeCulture where Symbol is not null and CostPrice like '%'+Symbol+'%'))
				and ISNULL(CostPrice,'')<>''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	        SELECT '53', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	        FROM #InsertPriceForValidation 
			   WHERE TierStartQuantity IN
			   (
				   select TierStartQuantity from #InsertPriceForValidation
					group by TierStartQuantity
					having count(1)>1
			   ) AND ISNULL(TierStartQuantity,'') <> ''

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertPriceForValidation IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL
			   			  	
	    --- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPriceForValidation
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
		-- 1)  Validation for SKU is pending Proper data not found and 
		--Discussion still open for Publish version where we create SKU and use the SKU code for validation 
		--------------------------------------------------------------------------------------
		--2)  Start Data Type Validation for XML Data  
		--------------------------------------------------------------------------------------			
		---------------------------------------------------------------------------------------
		---------If UOM will blank then retrive top -- Finctionality pending 
		---Validate 
		
		INSERT INTO #InsertPrice( SKU, TierStartQuantity, RetailPrice, SalesPrice, TierPrice, SKUActivationDate, SKUExpirationDate,
		 Custom1, Custom2, Custom3,CostPrice, RowNumber )
			   SELECT SKU,
					  CASE
					  WHEN CONVERT(Varchar(100),TierStartQuantity) = '' THEN 0
					  ELSE CONVERT(numeric(28, 6), TierStartQuantity)
					  END, CONVERT(numeric(28, 6), RetailPrice),
															  CASE
															  WHEN SalesPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), SalesPrice)
															  END,
															  CASE
															  WHEN TierPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), TierPrice)
															  END, SKUActivationDate, SKUExpirationDate,
															   Custom1, Custom2, Custom3,
															   CASE
															  WHEN CostPrice = '' THEN NULL
															  ELSE CONVERT(numeric(28, 6), CostPrice)
															  END, RowNumber
			   FROM #InsertPriceForValidation;
			 
		--------------------------------------------------------------------------------------
		--- start Functional Validation 
		--------------------------------------------------------------------------------------
		--- Verify SKU is present or not 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '98', 'SKU', SKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertPrice AS ii
		WHERE ii.SKU NOT IN
		(
			SELECT SKU
			FROM @SKU
		);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '39', 'SKUActivationDate', SKUActivationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPrice AS IP
			   WHERE cast(SKUActivationDate as datetime) > cast(SKUExpirationDate as datetime) AND 
					 ISNULL(SKUExpirationDate, '') <> '';
					 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '108', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation
			   WHERE( TierPrice IS NULL OR TierPrice = '0') AND  TierStartQuantity  = '';
			  
			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '109', 'TierPrice', TierPrice, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation WHERE( TierPrice IS NULL OR  TierPrice = '') AND TierStartQuantity  <> 0;

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation IPV
			   WHERE TierStartQuantity = ''  
				AND	( TierPrice <> ''  OR TierPrice IS NULL ) 

			  
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '26', 'TierStartQuantity', TierStartQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM #InsertPriceForValidation IPV
			   WHERE TierStartQuantity <> '' AND 
			    ISNULL(CAST(TierStartQuantity AS numeric(28, 6)), 0) <= 0 
				AND	( TierPrice <> ''  OR TierPrice IS NULL ) 
		
		
				  
		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SKU - ' + ISNULL(SKU,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN #InsertPrice IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

			 
 	
		-- End Function Validation 	
		---------------------------
		--- Delete Invalid Data after functional validation 
		DELETE FROM #InsertPrice
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND 
				  Guid = @NewGUId
		);
		
		DECLARE @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT 
	
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = COUNT(DISTINCT ROWNUMBER) FROM #InsertPrice WHERE 	ROWNUMBER IS NOT NULL ;

		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;

		UPDATE ZP
				SET ZP.SalesPrice = IP.SalesPrice, ZP.RetailPrice = CASE
				WHEN CONVERT(varchar(100), ISNULL(IP.RetailPrice, '')) <> '' THEN IP.RetailPrice
				END, ZP.ActivationDate = CASE
				WHEN ISNULL(IP.SKUActivationDate, '') <> '' THEN IP.SKUActivationDate
				ELSE NULL
				END, ZP.ExpirationDate = CASE
				WHEN ISNULL(IP.SKUExpirationDate, '') <> '' THEN IP.SKUExpirationDate
				ELSE NULL
				END, ZP.ModifiedBy = @UserId, ZP.ModifiedDate = @GetDate,
				ZP.CostPrice =IP.CostPrice
		FROM #InsertPrice IP INNER JOIN ZnodePrice ZP ON ZP.PriceListId = @PriceListId AND  ZP.SKU = IP.SKU  
			 --Retrive last record from price list of specific SKU ListCode and Name 									
		WHERE IP.RowNumber IN
		(
			SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU 
		);
		INSERT INTO ZnodePrice( PriceListId, SKU, SalesPrice, RetailPrice, ActivationDate, ExpirationDate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,CostPrice )
			   SELECT @PriceListId, IP.SKU, IP.SalesPrice, IP.RetailPrice,
																						   CASE
																						   WHEN ISNULL(IP.SKUActivationDate, '') = '' THEN NULL
																						   ELSE IP.SKUActivationDate
																						   END,
																						   CASE
																						   WHEN ISNULL(IP.SKUExpirationDate, '') = '' THEN NULL
																						   ELSE IP.SKUExpirationDate
																						   END, @UserId, @GetDate, @UserId, @GetDate,IP.CostPrice
			   FROM #InsertPrice AS IP
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodePrice
				   WHERE ZnodePrice.PriceListId = @PriceListId AND 
						 ZnodePrice.SKU = IP.SKU 
			   ) AND 
					 IP.RowNumber IN
			   (
					SELECT MAX(IPI.RowNumber)
					FROM #InsertPrice AS IPI
					WHERE IPI.SKU = IP.SKU 
			   );

			 

		IF EXISTS
		(
			SELECT TOP 1 1
			FROM #InsertPrice
			WHERE CONVERT(varchar(100), TierStartQuantity) <> '' AND 
				  (CONVERT(varchar(100), TierPrice) <> '' OR CONVERT (varchar(100), TierPrice) IS NOT NULL)
		)
		BEGIN
		
			UPDATE ZPT
			  SET ZPT.Price = IP.TierPrice, ZPT.ModifiedBy = @UserId, ZPT.ModifiedDate = @GetDate,
			  ZPT.Custom1 = IP.Custom1,ZPT.Custom2 = IP.Custom2, ZPT.Custom3 = IP.Custom3 
			FROM #InsertPrice IP INNER JOIN ZnodePriceTier ZPT ON ZPT.PriceListId = @PriceListId AND  ZPT.SKU = IP.SKU AND ZPT.Quantity = IP.TierStartQuantity 
		    --Retrive last record from price list of specific SKU ListCode and Name 
			WHERE IP.RowNumber IN
			(
				SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND IPI.TierStartQuantity = IP.TierStartQuantity 
			);

			INSERT INTO ZnodePriceTier( PriceListId, SKU, Price, Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, Custom1, Custom2, Custom3 )
				   SELECT @PriceListId, IP.SKU, IP.TierPrice, IP.TierStartQuantity,  @UserId, @GetDate, @UserId, @GetDate, Custom1, Custom2, Custom3
				   FROM #InsertPrice AS IP 
				   WHERE NOT EXISTS
				   (
					   SELECT TOP 1 1 FROM ZnodePriceTier WHERE ZnodePriceTier.PriceListId = @PriceListId AND  ZnodePriceTier.SKU = IP.SKU AND 
							 ZnodePriceTier.Quantity = IP.TierStartQuantity
				   ) AND  IP.RowNumber IN
				   (
					   SELECT MAX(IPI.RowNumber) FROM #InsertPrice AS IPI WHERE IPI.SKU = IP.SKU AND  IPI.TierStartQuantity = IP.TierStartQuantity
				   );
		END;  

		SET @Status = 1;
		
		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPriceList @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PriceListId='+CAST(@PriceListId AS VARCHAR(max));
		
		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportPriceList',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportProcessPriceData')
	DROP PROC Znode_ImportProcessPriceData
GO

CREATE PROCEDURE [dbo].[Znode_ImportProcessPriceData](@TblGUID nvarchar(255) = '',@ERPTaskSchedulerId int  )  
AS  
BEGIN  
  
--EXEC [Znode_ImportProcessPriceData] @TblGUID = '93519c74-f252-40ec-bed9-37ae8270d4da',@ERPTaskSchedulerId  = 14  
--select * from [TPRICE_93519c74-f252-40ec-bed9-37ae8270d4da]  
--EXEC Znode_ImportProcessPriceData](@TblGUID nvarchar(255) = '',@ERPTaskSchedulerId int  )  
--select * into [TPRICE_93519c74-f252-40ec-bed9-37ae8270d4da] from [##TPRICE_93519c74-f252-40ec-bed9-37ae8270d4da]  
--Select * from Tempdb..sysobjects where name  like  '%TPR%'  
  
 SET NOCOUNT ON;  
 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
 Declare @NewuGuId nvarchar(255)  
 set @NewuGuId = newid()  
 Declare @CurrencyId int  
 DECLARE @TemplateId INT , @PortalId INT  
 DECLARE @LocaleId  int = dbo.Fn_GetDefaultLocaleId()  
 SELECT TOP 1 @PortalId  = PortalId FROM dbo.ZnodePortal  
 Select @CurrencyId = CurrencyId  from ZnodeCulture where CultureCode in (Select FeatureValues from   ZnodeGlobalSetting where FeatureName = 'Currency')  
 IF OBJECT_ID('tempdb.dbo.##PriceDetail', 'U') IS NOT NULL  
    DROP TABLE ##PriceDetail  
  
 DECLARE @CreateTableScriptSql NVARCHAR(MAX) = '',  
      @InsertColumnName NVARCHAR(MAX),  
   @ImportTableColumnName NVARCHAR(MAX),  
   @TableName NVARCHAR(500) = 'TPRICE',  
   @Sql NVARCHAR(MAX) = '',  
   @PriceListId int,  
   @ListCode nvarchar(255),  
   @RowNum int,  
   @MaxRowNum int,  
   @FirstStep nvarchar(255),  
   @PriceTableName  nvarchar(255)  
  
  
 SELECT @TableName = ImportTableName FROM ZnodeImportTableDetail WHERE ImportTableNature = 'Insert' AND ImportHeadId =2 --AND ImportTableName = 'PRDH'  
 SET @TableName = 'tempdb..[##' + @TableName + '_' + @TblGUID + ']'  
 --SET @TableName = '[' + @TableName + '_' + @TblGUID + ']'  
  
 IF OBJECT_ID('tempdb.dbo.##PriceListcode', 'U') IS NOT NULL  
  DROP TABLE #PriceListcode  
 CREATE TABLE #PriceListcode (RowNum int Identity, ListCode nvarchar(255), ListName nvarchar(255) , CurrencyId int)  
  
 SET @SQL =  
 'INSERT INTO #PriceListcode ( ListCode,ListName,CurrencyId )  
 SELECT  Distinct ltrim(rtrim(Replace(PRD.PricelistCode,''"'',''''))),ltrim(rtrim(Replace(PRD.PricelistCode,''"'',''''))), '+ Convert (nvarchar(30),@CurrencyId ) + '  FROM ' +@TableName+ ' PRD '  
 EXEC sp_executesql @SQL  
  
 SET @SQL =  
 'INSERT INTO ZnodePriceList ( ListCode,ListName,CurrencyId , CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
 SELECT  Distinct PRD.ListCode,PRD.ListCode,'+ Convert (nvarchar(30),@CurrencyId ) + ',2,'''+CONVERT(NVARCHAR(30),@GetDate,121)+''',2,'''+CONVERT(NVARCHAR(30),@GetDate,121)+''' FROM  #PriceListcode PRD  
 WHERE NOT EXISTS ( SELECT TOP 1 1  FROM ZnodePriceList ZPL WHERE ZPL.ListCode = PRD.ListCode ) AND PRD.ListCode is not null '  
 EXEC sp_executesql @SQL  
  
 SET @Rownum  =1  
  
 Select  @MaxRowNum = count(RowNum) from #PriceListcode TPLC INNER JOIN ZnodePriceList ZPL On  
 TPLC.ListCode = ZPL.ListCode  where ZPL.ListCode    is not null  
 AND  Isnull(TPLC.ListCode,'') <> ''  
  
 DECLARE Cur_ListCode CURSOR FOR SELECT ZPL.PriceListId, TPLC.ListCode  
 FROM #PriceListcode TPLC INNER JOIN ZnodePriceList ZPL On  
 TPLC.ListCode = ZPL.ListCode  where ZPL.ListCode    is not null  Order by  TPLC.RowNum  
    OPEN Cur_ListCode  
    FETCH NEXT FROM Cur_ListCode INTO @PriceListId, @ListCode  
    WHILE ( @@FETCH_STATUS = 0 )  
 BEGIN  
  
      SET @InsertColumnName = ''  
   SET @ImportTableColumnName = ''  
   SET @CreateTableScriptSql = ''  
  
      IF OBJECT_ID('tempdb.dbo.##' + @ListCode , 'U') IS NOT NULL  
   BEGIN  
    SET @Sql = 'DROP TABLE tempdb.dbo.##' + @ListCode  
    EXEC sp_executesql @SQL  
   END  
   SELECT @TemplateId= ImportTemplateId FROM dbo.ZnodeImportTemplate WHERE TemplateName = 'PriceTemplate'  
  
   --Create Temp table for price with respective their code  
   SELECT @CreateTableScriptSql = 'CREATE TABLE tempdb..##' + @ListCode + '('+SUBSTRING ((Select ',' +  ISNULL([TargetColumnName] ,'NULL')+ ' nvarchar(max)'  
   FROM [dbo].[ZnodeImportTemplateMapping]  
   WHERE [ImportTemplateId]= @TemplateId FOR XML PATH ('')),2,4000)+' , GUID nvarchar(255) )'  
  
   EXEC ( @CreateTableScriptSql )  
  
   SET @Sql = '  
   SELECT @InsertColumnName = SUBSTRING ((Select '','' +  ISNULL(''[''+ ITCD.BaseImportColumn +'']''  ,''NULL'')  
   FROM [ZnodeImportTableColumnDetail] ITCD INNER JOIN [ZnodeImportTableDetail] ITD  
   ON ITCD.ImportTableId = ITD.ImportTableId  
   WHERE  ITD.ImportTableName = ''TPRICE'' AND ITCD.BaseImportColumn is not null FOR XML PATH ('''')),2,4000)  
  
   SELECT @ImportTableColumnName = SUBSTRING ((Select '','' +  ISNULL(''[''+ ImportTableColumnName +'']''  ,''NULL'')  
   FROM [ZnodeImportTableColumnDetail] ITCD INNER JOIN [ZnodeImportTableDetail] ITD  
   ON ITCD.ImportTableId = ITD.ImportTableId  
   WHERE  ITD.ImportTableName = ''TPRICE''  AND ITCD.BaseImportColumn is not null FOR XML PATH ('''')),2,4000)'  
  
   EXEC sp_executesql @SQL, N'@TableName VARCHAR(200),@InsertColumnName NVARCHAR(MAX) OUTPUT, @ImportTableColumnName  NVARCHAR(MAX) OUTPUT', @TableName = @TableName, @InsertColumnName = @InsertColumnName OUTPUT, @ImportTableColumnName = @ImportTableColumnName OUTPUT  
  
   IF( LEN(@InsertColumnName) > 0 )  
   BEGIN  
    SET @SQL = 'INSERT INTO tempdb..##' + @ListCode+'  ( '+@InsertColumnName+',GUID )  
     SELECT '+ @ImportTableColumnName +',''' + @TblGUID  + '''  
     FROM '+ @TableName + ' PRD  
     WHERE  
     ltrim(rtrim(replace(PRD.PricelistCode,''"'',''''))) = ''' +  @ListCode + ''' AND  
     EXISTS ( SELECT TOP 1 1  FROM ZnodePriceList ZPL WHERE  
     ZPL.ListCode = ltrim(rtrim(replace(PRD.PricelistCode,''"'',''''))) )'  
    EXEC sp_executesql @SQL  
  
    SET @PriceTableName  ='tempdb..[##' + @ListCode +']'  

    If @RowNum = 1  
     Begin  
      IF @RowNum <> @MaxRowNum  
      BEGIN  
       --Print 'Create Job  ' + Convert(nvarchar(100),@RowNum)  
       EXEC Znode_ImportData @TableName = @PriceTableName,@NewGUID = @TblGUID ,@TemplateId = @TemplateId,  
        @UserId = 2,@PortalId = @PortalId, @LocaleId = @LocaleId, @DefaultFamilyId = 0,@PriceListId = @PriceListId, @CountryCode = ''--, @IsDebug =1  
       ,@IsDoNotCreateJob = 0 , @IsDoNotStartJob = 1, @StepName = @ListCode,@ERPTaskSchedulerId  =@ERPTaskSchedulerId  
       SET @FirstStep = @ListCode  
      END  
      ELSE If  @MaxRowNum = 1  
      BEGIN  
       --Print 'Start Job in case of single  ' + Convert(nvarchar(100),@RowNum)  
       EXEC Znode_ImportData @TableName = @PriceTableName,@NewGUID = @TblGUID ,@TemplateId = @TemplateId,  
        @UserId = 2,@PortalId = @PortalId, @LocaleId = @LocaleId, @DefaultFamilyId = 0,@PriceListId = @PriceListId, @CountryCode = ''--, @IsDebug =1  
       ,@IsDoNotCreateJob = 0 , @IsDoNotStartJob = 0,  
        @ERPTaskSchedulerId  = @ERPTaskSchedulerId  

      END  
     END  
    ELSE If @RowNum = @MaxRowNum  
     Begin  
      EXEC Znode_ImportData @TableName = @PriceTableName, @NewGUID =  @TblGUID ,@TemplateId = @TemplateId,  
       @UserId = 2,@PortalId = @PortalId, @LocaleId = @LocaleId, @DefaultFamilyId = 0,@PriceListId = @PriceListId, @CountryCode = ''--, @IsDebug =1  
      ,@IsDoNotCreateJob = 1 , @IsDoNotStartJob = 0, @StepName = @ListCode, @StartStepName  = @FirstStep ,@step_id = @RowNum --, @IsDebug =1  
      ,@Nextstep_id  = 1,@ERPTaskSchedulerId  = @ERPTaskSchedulerId  
     END  
    ELSE  
     BEGIN   
      EXEC Znode_ImportData @TableName = @PriceTableName , @NewGUID = @TblGUID ,@TemplateId = @TemplateId,  
      @UserId = 2,@PortalId = @PortalId, @LocaleId = @LocaleId, @DefaultFamilyId = 0,@PriceListId = @PriceListId, @CountryCode = ''--, @IsDebug =1  
      ,@IsDoNotCreateJob = 1 , @IsDoNotStartJob = 1, @StepName = @ListCode ,@step_id = @RowNum  
      ,@ERPTaskSchedulerId  = @ERPTaskSchedulerId  
     END  
   SET @RowNum = @RowNum +1  
   END  
  
  FETCH NEXT FROM Cur_ListCode INTO  @PriceListId, @ListCode  
 END  
  select 'Job Successfully Started'  
 CLOSE Cur_ListCode  
 DEALLOCATE Cur_ListCode  
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportProcessProductData')
	DROP PROC Znode_ImportProcessProductData
GO

--  [dbo].[Znode_ImportProcessProductData] '1928de37-30d3-4cc1-b5e3-0c498c0da183'
CREATE PROCEDURE [dbo].[Znode_ImportProcessProductData](@TblGUID nvarchar(255),@ERPTaskSchedulerId int )
AS
BEGIN
	SET NOCOUNT ON;
	SET TEXTSIZE 2147483647;
	DECLARE @NewuGuId nvarchar(255),@ImportHeadId INT 
	set @NewuGuId = newid()
    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @DefaultFamilyId  INT = dbo.Fn_GetDefaultPimProductFamilyId();
	DECLARE @LocaleId  INT = dbo.Fn_GetDefaultLocaleId()
	DECLARE @TemplateId INT , @PortalId INT 
	DECLARE @WebsiteCode Varchar(100) 
	SET  @WebsiteCode = 'b9001'
	SELECT TOP 1 @PortalId  = PortalId   FROM dbo.ZnodePortal

	IF OBJECT_ID('tempdb.dbo.##ProductDetail', 'U') IS NOT NULL 
		DROP TABLE ##ProductDetail

	IF OBJECT_ID('tempdb.dbo.#Attributecode', 'U') IS NOT NULL 
		DROP TABLE #Attributecode
	
	IF OBJECT_ID('tempdb.dbo.#ConfigurableAttributecode', 'U') IS NOT NULL 
		DROP TABLE #ConfigurableAttributecode 
	
	IF OBJECT_ID('tempdb.dbo.#DefaultAttributeCode', 'U') IS NOT NULL 
		DROP TABLE #DefaultAttributeCode 

    IF OBJECT_ID('tempdb.dbo.[##ProductAssociation]', 'U') IS NOT NULL 
		DROP TABLE tempdb.dbo.[##ProductAssociation]

		
	Declare @GlobalTemporaryTable nvarchar(255)
	DECLARE @CreateTableScriptSql NVARCHAR(MAX) = '', 
		    @InsertColumnName   NVARCHAR(MAX), 
			@UpdateTable2Column NVARCHAR(MAX),
			@UpdateTable3Column NVARCHAR(MAX),
			@UpdateTable4Column NVARCHAR(MAX),
			@ImportTableColumnName NVARCHAR(MAX),
			@ImportTableName VARCHAR(200),
			@TableName4 NVARCHAR(255) = 'tempdb..[##PRDDA_' + @TblGUID + ']',
			@Sql NVARCHAR(MAX) = '',
			@Attribute NVARCHAR(MAX)

	DECLARE @Attributecode TABLE ( Attrcode NVARCHAR(255) )

	CREATE TABLE #Attributecode ( Attrcode NVARCHAR(255) )
	CREATE TABLE #ConfigurableAttributecode (SKU NVARCHAR(255) , PimAttributeId  int , DefaultValue nvarchar(255) ,AttributeCode nvarchar(255) ,ParentSKU nvarchar(255)) 
	
	SELECT @TemplateId= ImportTemplateId FROM dbo.ZnodeImportTemplate WHERE TemplateName = 'ProductTemplate'
	SELECT @ImportHeadId= ImportHeadId FROM dbo.ZnodeImportHead WHERE Name = 'Product'
	SET @Sql = '
	INSERT INTO ZnodeImportTemplateMapping ( ImportTemplateId, SourceColumnName, TargetColumnName, DisplayOrder, IsActive, IsAllowNull, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
	SELECT Distinct 1 AS ImportTemplateId,  PA.AttributeCode AS SourceColumnName,  PA.AttributeCode AS TargetColumnName, 0 AS DisplayOrder, 0 AS IsActive, 0 AS IsAllowNull, 2 AS CreatedBy, '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' AS CreatedDate, 2 AS ModifiedBy, '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' AS ModifiedDate
	FROM '+@TableName4+' PRD
	INNER JOIN ZnodePimAttribute PA ON PRD.Attribute = PA.AttributeCode
	WHERE NOT EXISTS ( SELECT * FROM ZNODEIMPORTTEMPLATEMAPPING ITM WHERE ImportTemplateId = ' + CONVERT(NVARCHAR(100), @TemplateId ) + ' AND PRD.ATTRIBUTE =  ITM.SOURCECOLUMNNAME )'


	EXEC ( @Sql )
	
	SELECT @CreateTableScriptSql = 'CREATE TABLE ##ProductDetail ('+SUBSTRING ((Select ',' +  ISNULL([TargetColumnName] ,'NULL')+ ' nvarchar(max)' 
	FROM [dbo].[ZnodeImportTemplateMapping]
	WHERE [ImportTemplateId]= @TemplateId FOR XML PATH ('')),2,4000)+' , ParentStyle NVARCHAR(MAX),GUID nvarchar(255), BaseProductType nvarchar(255) )'

	EXEC ( @CreateTableScriptSql )
	


	--Merge all the tables which is type is inserted / updated 
	DECLARE Cur_InsertProduct CURSOR FOR
	
	SELECT ImportTableName FROM ZnodeImportTableDetail WHERE ImportTableNature = 'Insert' AND ImportHeadId = @ImportHeadId --AND ImportTableName = 'PRDH'
	
	OPEN Cur_InsertProduct 

	FETCH NEXT FROM Cur_InsertProduct INTO @ImportTableName

	WHILE ( @@FETCH_STATUS = 0 )
	BEGIN
	    SET @GlobalTemporaryTable = 'tempdb..[##' + @ImportTableName + '_' + @TblGUID + ']' 
		--1 simple 
		    SET @Sql = ' 
			SELECT @InsertColumnName = SUBSTRING ((Select '','' +  ISNULL(''[''+ ITCD.BaseImportColumn +'']''  ,''NULL'')
			FROM [ZnodeImportTableColumnDetail] ITCD INNER JOIN [ZnodeImportTableDetail] ITD 
			ON ITCD.ImportTableId = ITD.ImportTableId
			WHERE  ITD.ImportTableName = @ImportTableName 
			AND ITD.ImportHeadId = ' + convert(nvarchar(100),@ImportHeadId)+ '
			  AND ITCD.BaseImportColumn is not null FOR XML PATH ('''')),2,4000)

			SELECT @ImportTableColumnName = SUBSTRING ((Select '','' +  ISNULL(''[''+ ImportTableColumnName +'']''  ,''NULL'') 
			FROM [ZnodeImportTableColumnDetail] ITCD INNER JOIN [ZnodeImportTableDetail] ITD 
			ON ITCD.ImportTableId = ITD.ImportTableId
			WHERE  ITD.ImportTableName = @ImportTableName  AND ITD.ImportHeadId =  
			' + convert(nvarchar(100),@ImportHeadId)+    '
			AND ITCD.BaseImportColumn is not null FOR XML PATH ('''')),2,4000)'


		EXEC sp_executesql @SQL, N'@ImportTableName VARCHAR(200),@InsertColumnName NVARCHAR(MAX) OUTPUT, @ImportTableColumnName  NVARCHAR(MAX) OUTPUT', @ImportTableName = @ImportTableName, @InsertColumnName = @InsertColumnName OUTPUT, @ImportTableColumnName = @ImportTableColumnName OUTPUT

			
		IF( LEN(@InsertColumnName) > 0 )
		BEGIN
			SET @SQL = 'INSERT INTO ##ProductDetail ( ParentStyle, '+@InsertColumnName+' )	SELECT [Parent Style], '+@ImportTableColumnName +' FROM '+@GlobalTemporaryTable
			SET @SQL = @SQL + ' Where Website = ''' + @WebsiteCode + '''' 
			EXEC sp_executesql @SQL
		END
		
		SELECT @InsertColumnName ='', @GlobalTemporaryTable=''

		FETCH NEXT FROM Cur_InsertProduct INTO @ImportTableName
	END

	CLOSE Cur_InsertProduct
	DEALLOCATE Cur_InsertProduct

	
	DECLARE @UpdateTableColumn varchar(max)


	SET @Sql = 
		'SELECT @UpdateTableColumn = 
		 COALESCE(@UpdateTableColumn + '','', '''') + ''[''+BaseImportColumn+''] = B.[''+BaseImportColumn+'']''
		 FROM [ZnodeImportTableColumnDetail] ITCD INNER JOIN [ZnodeImportTableDetail] ITD 
		 ON ITCD.ImportTableId = ITD.ImportTableId
		 WHERE  ITD.ImportTableName = ''PRDH''  AND ITCD.BaseImportColumn IS NOT NULL AND ITCD.BaseImportColumn <> ''SKU'''

	EXEC sp_executesql @SQL, N'@UpdateTableColumn VARCHAR(200) OUTPUT', @UpdateTableColumn = @UpdateTableColumn OUTPUT
	
	SET @Sql = 
		';WITH CTE AS
		(
			SELECT * FROM ##ProductDetail WHERE ProductName IS NOT NULL
		)
		UPDATE A 
		SET '+@UpdateTableColumn+'
		FROM ##ProductDetail A 
		INNER JOIN CTE B ON B.ParentStyle = A.ParentStyle'
	EXEC ( @Sql )
    
	SET @Sql = 'INSERT INTO #Attributecode ( Attrcode ) SELECT DISTINCT ltrim(rtrim([Attribute])) FROM '+ @TableName4
	 + ' where ltrim(rtrim([Attribute]))  in (Select AttributeCode from ZnodePimAttribute where IsCategory = 0 ) AND RowNumber = ''' + @WebsiteCode + ''''
	EXEC ( @Sql )

	DECLARE Cur_AttributeCode CURSOR FOR SELECT Attrcode FROM #Attributecode where Attrcode is not null 
    OPEN Cur_AttributeCode
    FETCH NEXT FROM Cur_AttributeCode INTO @Attribute
    WHILE ( @@FETCH_STATUS = 0 )
	BEGIN
		SET @SQL = ''
		SET @SQL =  'UPDATE PD SET PD.' + @Attribute  + '= ' +
		 ' Replace(Replace(PDD.[Attribute Value], ''/'', ''''), '' '', '''')' +
		 ' FROM ##ProductDetail PD inner join '+ @TableName4 + ' PDD on PD.SKU = PDD.SKU# WHERE PDD.Attribute =  '''+@Attribute + ''' 
		 AND PDD.RowNumber = ''' + @WebsiteCode + ''''

		EXEC sp_executesql @SQL
		FETCH NEXT FROM Cur_AttributeCode INTO @Attribute
	END
	CLOSE Cur_AttributeCode
	DEALLOCATE Cur_AttributeCode
	
	SET @Sql = 'UPDATE ##ProductDetail SET GUID= '''+@NewuGuId  + ''', BaseProductType = ProductType'
	EXEC sp_executesql @SQL
	
	SET @Sql = 'UPDATE ##ProductDetail SET ProductType =  CASE when [ParentStyle] = SKU 
	then ''ConfigurableProduct'' ELSE ''SimpleProduct'' END ,
	MinimumQuantity = 1 , MaximumQuantity = 10 ,ShippingCostRules = ''WeightBasedRate'',OutOfStockOptions = ''DontTrackInventory''
	,ProductCode = CASE When ProductCode Is Null then SKU ELSE ProductCode  END , 
	IsActive = CASE when Isnull(IsActive,'''') = '''' then 1 END'
	EXEC sp_executesql @SQL
	
	DELETE  FROM ##ProductDetail where isnull(SKU,'') = ''
	---- Read All default data 
	
	-- Product Association data prepartion 
	Create TABLE tempdb..[##ProductAssociation] (ParentSKU nvarchar(255),ChildSKU nvarchar(255), DisplayOrder int,GUID nvarchar(100) )
	SET @Sql = '
	insert into tempdb..[##ProductAssociation]  (ParentSKU ,ChildSKU , DisplayOrder,GUID )
	select [ParentStyle], SKU  ,1, ''' + @NewuGuId + ''' from ##ProductDetail  where [ParentStyle] <>  SKU and [ParentStyle] is not null 
	'
	EXEC (@Sql)
	
	-- Configrable Attributes
	SET @Sql = 'INSERT INTO #ConfigurableAttributecode (PimAttributeId ,DefaultValue ,AttributeCode,ParentSKU)
	            SELECT Distinct ZPA.PimAttributeId,[Attribute Value]	 ,ltrim(rtrim(PDA.[Attribute])), PDA.[Parent Style]  FROM '+ @TableName4
	 + ' PDA Inner join  tempdb..##ProductDetail PD  ON PDA.[SKU#]= PD.SKU and PD.BaseProductType = ''C''
	 AND PDA.Rownumber = ''' + @WebsiteCode + ''' 
	  Inner join ZnodePimAttribute ZPA ON ZPA.AttributeCode = ltrim(rtrim(PDA.[Attribute])) AND ZPA.IsCategory = 0 and ZPA.IsConfigurable =1 '
	EXEC ( @Sql )

	-- Update default vaule of confi attribute in main template
	
	DECLARE @DefaultValue nvarchar(255),@ParentSKU  nvarchar(255),@AttributeName nvarchar(255)
	DECLARE Cur_ConfigAttributeCode CURSOR FOR SELECT DefaultValue, AttributeCode,ParentSKU 
	FROM #ConfigurableAttributecode  where DefaultValue is not null 
    OPEN Cur_ConfigAttributeCode
    FETCH NEXT FROM Cur_ConfigAttributeCode INTO @DefaultValue, @AttributeName,@ParentSKU
    WHILE ( @@FETCH_STATUS = 0 )
	BEGIN
		SET @SQL = ''
		SET @SQL =  'UPDATE ##ProductDetail SET ' + @AttributeName  + ' = ''' +  Replace(Replace(@DefaultValue, '/', ''), ' ', '') + 
		''' WHERE SKU  =  '''+	@ParentSKU + ''''
		EXEC sp_executesql @SQL
		FETCH NEXT FROM Cur_ConfigAttributeCode INTO @DefaultValue, @AttributeName,@ParentSKU
	END
	CLOSE Cur_ConfigAttributeCode
	DEALLOCATE Cur_ConfigAttributeCode
		
	SET @Sql = 'Alter TABLE ##ProductDetail drop column [ParentStyle],[BaseProductType]'
	EXEC sp_executesql @SQL
	

	SELECT @TemplateId= ImportTemplateId FROM dbo.ZnodeImportTemplate WHERE TemplateName = 'ProductTemplate'
	---- Import product    
	EXEC Znode_ImportData @TableName = 'tempdb..[##ProductDetail]',	@NewGUID = @TblGUID ,@TemplateId = @TemplateId,
	      @UserId = 2,@PortalId = @PortalId,@LocaleId = @LocaleId,@DefaultFamilyId = @DefaultFamilyId,@PriceListId = 0, @CountryCode = ''
		 ,@IsDoNotCreateJob = 0 , @IsDoNotStartJob = 1, @StepName = 'Import' ,@ERPTaskSchedulerId  = @ERPTaskSchedulerId 

	If Exists (select TOP 1 1 from #ConfigurableAttributecode ) 
	BEGIN
			SELECT @TemplateId= ImportTemplateId FROM dbo.ZnodeImportTemplate WHERE TemplateName = 'ProductAssociation'

			EXEC Znode_ImportData @TableName = 'tempdb..[##ProductAssociation]',	@NewGUID =  @TblGUID ,@TemplateId = @TemplateId,
			 @UserId = 2,@PortalId = @PortalId,@LocaleId = @LocaleId,@DefaultFamilyId = 0,@PriceListId = 0, @CountryCode = ''--, @IsDebug =1 
			,@IsDoNotCreateJob = 1 , @IsDoNotStartJob = 0, @StepName = 'Import1', @StartStepName  ='Import',@step_id = 2 
			,@Nextstep_id  = 1,@ERPTaskSchedulerId  = @ERPTaskSchedulerId  
		
	END
	 select 'Job create successfully.' 
	
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPromotions')
	DROP PROC Znode_ImportPromotions
GO

CREATE PROCEDURE [dbo].[Znode_ImportPromotions]
(
	@TableName			NVARCHAR(100),
	@Status				BIT,
	@UserId				INT,
	@ImportProcessLogId	INT,
	@NewGUId			NVARCHAR(200),
	@LocaleId			INT=1,
	@CsvColumnString	NVARCHAR(MAX),
	@PromotionTypeId	INT , 
	@IsGenerateErrorLog	BIT = 1
)
AS 
/*
	Summary :  Made a provision to import Promotions details.
	
	Unit Testing: 
		EXEC dbo.Znode_ImportPromotions @TableName='',@Status=0,@UserId=2,@ImportProcessLogId=1,@NewGUId='',@LocaleId=1,
			@CsvColumnString=,@PromotionTypeId=17

	SELECT @TableName='##Temp',@Status=0,@UserId=2,@ImportProcessLogId=1,@NewGUId=NEWID(),@LocaleId=1,
			@CsvColumnString='PromoCode,Name,Description,StartDate,EndDate,DisplayOrder,Store,Profile,IsCouponRequired,IsAllowedWithOtherCoupons,PromotionMessage,Code,AvailableQuantity
				,DiscountAmount,MinimumQuantity,MinimumOrderAmount,Brand',
			@PromotionTypeId=17
*/
BEGIN
	SET NOCOUNT ON;
	DECLARE @MessageDisplay NVARCHAR(100), @SSQL NVARCHAR(MAX);

	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	DECLARE @GetDate1 VARCHAR(100) = CONVERT(VARCHAR(30),@GetDate,121)
	DECLARE @ImportProcessLogId1 VARCHAR(100) = CAST(@ImportProcessLogId AS VARCHAR(15))
	DECLARE @UserId1 VARCHAR(15) = CAST(@UserId AS VARCHAR(15))

	IF ISNULL(@LocaleId,0)=0
	BEGIN
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
	END

	DECLARE @LocaleId1 VARCHAR(15) = CAST(@LocaleId AS VARCHAR(15))

	IF OBJECT_ID('tempdb..##Promotions') IS NOT NULL
		DROP TABLE ##Promotions;

	SET @SSQL='CREATE TABLE ##Promotions (RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT , '+
		REPLACE(TRIM(LTRIM(@CsvColumnString)), ',' ,' NVARCHAR(MAX),') + CASE WHEN @CsvColumnString = '' THEN '' ELSE ' NVARCHAR(MAX)' END+', GUID NVARCHAR(400)) 
		INSERT INTO ##Promotions (RowNumber,' + @CsvColumnString + ',GUID) 
		SELECT ROW_NUMBER() OVER (ORDER BY PromoCode) As RowNumber,' + @CsvColumnString + ','''+@NewGUId+''' As GUID FROM '+ @TableName +'
		'
		
	EXEC (@SSQL)
	IF NOT EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='PortalId') AND @IsGenerateErrorLog = 1 
	BEGIN
		ALTER TABLE ##Promotions ADD PortalId INT

		UPDATE P
		SET P.PortalId = CASE WHEN LTRIM(TRIM(P.Store))='All Stores' THEN NULL ELSE ISNULL(ZP.PortalId,0) END
		FROM ##Promotions P
		LEFT JOIN ZnodePortal ZP ON P.Store=ZP.StoreCode
	END

	IF NOT EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='ProfileId') AND @IsGenerateErrorLog = 1 
	BEGIN
		ALTER TABLE ##Promotions ADD ProfileId INT

		UPDATE P
		SET P.ProfileId = CASE WHEN LTRIM(TRIM(P.Profile))='All Profiles' THEN NULL ELSE ISNULL(ZP.ProfileId,0) END
		FROM ##Promotions P
		LEFT JOIN ZnodeProfile ZP ON P.Profile=ZP.DefaultExternalAccountNo
	END

	IF NOT EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='PromotionTypeId')
	BEGIN
		ALTER TABLE ##Promotions ADD PromotionTypeId INT
		UPDATE ##Promotions
		SET PromotionTypeId = @PromotionTypeId
	END

	IF NOT EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='IsUnique')
	BEGIN
		ALTER TABLE ##Promotions ADD IsUnique BIT
		UPDATE ##Promotions
		SET IsUnique = 0
	END

	IF NOT EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='InitialQuantity')
	BEGIN
		ALTER TABLE ##Promotions ADD InitialQuantity FLOAT
		UPDATE ##Promotions
		SET InitialQuantity = AvailableQuantity
	END

	UPDATE ##Promotions
	SET IsCouponRequired=0
	WHERE ISNULL(IsCouponRequired,'')='' OR ISNULL(IsCouponRequired,'')='No';

	UPDATE ##Promotions
	SET IsAllowedWithOtherCoupons=0
	WHERE ISNULL(IsAllowedWithOtherCoupons,'')='' OR ISNULL(IsAllowedWithOtherCoupons,'')='No';

	UPDATE ##Promotions
	SET IsCouponRequired=1
	WHERE ISNULL(IsCouponRequired,'')='Yes';

	UPDATE ##Promotions
	SET IsAllowedWithOtherCoupons=1
	WHERE ISNULL(IsAllowedWithOtherCoupons,'')='Yes';

	-- Code for not consider Discount Information for specific Promotion Type
	DECLARE @PromotionTypeName NVARCHAR(50);

	SELECT TOP 1 @PromotionTypeName = [Name] FROM ZnodePromotionType WHERE PromotionTypeId = @PromotionTypeId;

	IF @PromotionTypeName IN ('Amount Off Displayed Product Price','Percent Off Displayed Product Price')
	BEGIN
		UPDATE ##Promotions
		SET IsAllowedWithOtherCoupons=0, IsCouponRequired=0, PromotionMessage='';
	END
	ELSE IF @PromotionTypeName IN ('Call For Pricing')
	BEGIN
		SET @SSQL='
		UPDATE ##Promotions
		SET IsAllowedWithOtherCoupons=0, IsCouponRequired=0, 
			PromotionMessage = '+CASE WHEN @IsGenerateErrorLog = 1 THEN ' CallForPriceMessage ' ELSE 'PromotionMessage' END;
		
		EXEC (@SSQL);
	END
	
	BEGIN TRAN Promotions;
	BEGIN TRY
		-- Start Functional Validation
		-----------------------------------------------
		IF @IsGenerateErrorLog = 1 
		BEGIN
			INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'PromoCode', PromoCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.PromoCode,'')=''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '82', 'PromoCode', PromoCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE LEN(LTRIM(RTRIM(ii.PromoCode))) > 300 AND ISNULL(ii.PromoCode,'')<>''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'Name', [Name], @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.[Name],'')=''
				AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '78', 'Name', [Name], @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE LEN(LTRIM(RTRIM(ii.[Name]))) > 100 AND ISNULL(ii.[Name],'')<>''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '78', 'Description', Description, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE LEN(LTRIM(RTRIM(ii.Description))) > 100 AND ISNULL(ii.Description,'')<>''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '5', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISDATE(ii.StartDate)=0 AND LEN(ii.StartDate)>0

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '150', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE (ISDATE(ii.StartDate)=1 AND CONVERT(DATETIME,ii.StartDate,111)<CONVERT(DATETIME,CONVERT(VARCHAR(10),@GetDate,111),111))

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '151', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE (ISDATE(ii.StartDate)=1 AND ISDATE(ii.EndDate)=1 AND CONVERT(DATETIME,ii.StartDate,111)>CONVERT(DATETIME,ii.EndDate,111))

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.StartDate,'')=''
				AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '5', 'EndDate', EndDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISDATE(ii.EndDate)=0 AND LEN(ii.EndDate)>0

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '152', 'EndDate', EndDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE (ISDATE(ii.StartDate)=1 AND ISDATE(ii.EndDate)=1 AND CONVERT(DATETIME,ii.StartDate,111)>CONVERT(DATETIME,ii.EndDate,111))

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'EndDate', EndDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.EndDate,'')=''
				AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
		
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE (ISNULL(ii.DisplayOrder,0)=0 OR ISNULL(ii.DisplayOrder,'')='')
				AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '149', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNUMERIC(ii.DisplayOrder)=0 AND LEN(ii.DisplayOrder)>0

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '115', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE (ISNUMERIC(ii.DisplayOrder)=1 AND (CAST(ii.DisplayOrder As INT))>999)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '120', 'Store', Store, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.Store,'')<>''
				AND NOT EXISTS (SELECT * FROM ZnodePortal WHERE PortalId=ii.PortalId)
				AND ISNULL(ii.Store,'')<>'All Stores'

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'Store', Store, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.Store,'')=''
				AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '157', 'Store', Store, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.Store,'')<>''
				AND EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode AND ISNULL(PortalId,0)<>ISNULL(ii.PortalId,0))

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '153', 'Profile', [Profile], @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.Profile,'')<>''
				AND (NOT EXISTS (SELECT * FROM ZnodePortalProfile WHERE ProfileId=ii.ProfileId AND PortalId=ii.PortalId)
					AND ISNULL(ii.Store,'')<>'All Stores' AND ISNULL(ii.Profile,'')<>'All Profiles')
				OR (NOT EXISTS (SELECT * FROM ZnodeProfile WHERE DefaultExternalAccountNo=ii.Profile)
					AND ISNULL(ii.Profile,'')<>'All Profiles' AND ISNULL(ii.Profile,'')<>'')

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '78', 'Profile', [Profile], @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE LEN(LTRIM(RTRIM(ii.Profile))) > 100 AND ISNULL(ii.Profile,'')<>''

			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
			SELECT '8', 'Profile', [Profile], @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			FROM ##Promotions AS ii
			WHERE ISNULL(ii.Profile,'')=''
				AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)

			IF @PromotionTypeName NOT IN ('Amount Off Displayed Product Price','Percent Off Displayed Product Price','Call For Pricing')
			BEGIN
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '142', 'IsCouponRequired', IsCouponRequired, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.IsCouponRequired,'') NOT IN ('True','1','Yes','FALSE','0','No')
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '142', 'IsAllowedWithOtherCoupons', IsAllowedWithOtherCoupons, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.IsAllowedWithOtherCoupons,'') NOT IN ('True','1','Yes','FALSE','0','No')
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '154', 'IsAllowedWithOtherCoupons', IsAllowedWithOtherCoupons, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.IsAllowedWithOtherCoupons,'') IN ('True','1','Yes')
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') NOT IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '142', 'PromotionMessage', PromotionMessage, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.PromotionMessage,'')<>''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') NOT IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '82', 'PromotionMessage', PromotionMessage, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE (ISNULL(ii.PromotionMessage,'')<>'' AND LEN(LTRIM(RTRIM(ii.PromotionMessage)))>300)
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '138', 'Code', Code, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.Code,'')<>''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')
					AND EXISTS (SELECT * FROM ZnodePromotionCoupon WHERE Code=ii.Code)

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '138', 'Code', Code, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.Code,'')<>''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')
					AND NOT EXISTS (SELECT * FROM ##Promotions L
									WHERE RowID IN (SELECT MAX(RowId) FROM ##Promotions X WHERE X.Code= L.Code GROUP BY X.Code)
										AND ii.Code= L.Code and ii.PromoCode = L.PromoCode 
									)

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '139', 'Code', Code, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE (ISNULL(ii.Code,'')<>'' AND LEN(LTRIM(RTRIM(ii.Code)))>20)
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '8', 'Code', Code, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.Code,'')=''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '108', 'AvailableQuantity', AvailableQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.AvailableQuantity)=0)
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '141', 'AvailableQuantity', AvailableQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.AvailableQuantity)=1 AND (ii.AvailableQuantity) LIKE '%.%')
					--(ISNUMERIC(ii.AvailableQuantity)=1 AND LEN(PARSENAME(ii.AvailableQuantity,1))>1)
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT '140', 'AvailableQuantity', AvailableQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.AvailableQuantity)=1 AND (ISNULL(CAST(ii.AvailableQuantity AS FLOAT),0)<0 OR ISNULL(CAST(ii.AvailableQuantity AS FLOAT),0)>9999))
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
					AND ISNULL(ii.IsCouponRequired,'') IN ('True','1','Yes')
			END
		END 

		IF @IsGenerateErrorLog = 1 
		BEGIN
			DECLARE @Query NVARCHAR(MAX);

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='DiscountAmount')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''109'', ''DiscountAmount'', DiscountAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ((ISNUMERIC(ii.DiscountAmount)=0 AND LEN(ii.DiscountAmount)>0) OR CAST(ii.DiscountAmount As FLOAT)<0)

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''137'', ''DiscountAmount'', DiscountAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.DiscountAmount)=1 AND (LEN(PARSENAME(ii.DiscountAmount,1))>2 AND (ii.DiscountAmount) LIKE ''%.%'' AND CAST(ii.DiscountAmount As FLOAT)>0))
		
				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''136'', ''DiscountAmount'', DiscountAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.DiscountAmount)=1 AND (CAST(ii.DiscountAmount As FLOAT))>100)
					AND '''+@PromotionTypeName+''' LIKE ''%Percent%''

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''161'', ''DiscountAmount'', DiscountAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.DiscountAmount)=1 AND ((CAST(ii.DiscountAmount As FLOAT))>9999999 OR (CAST(ii.DiscountAmount As FLOAT))<0.01))
					AND '''+@PromotionTypeName+''' NOT LIKE ''%Percent%''

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''8'', ''DiscountAmount'', DiscountAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.DiscountAmount,'''')=''''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='MinimumQuantity')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''108'', ''MinimumQuantity'', MinimumQuantity, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.MinimumQuantity)=0 AND LEN(ii.MinimumQuantity)>0) OR CAST(ii.MinimumQuantity As FLOAT)<0

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''141'', ''MinimumQuantity'', MinimumQuantity, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.MinimumQuantity)=1 AND (ii.MinimumQuantity) LIKE ''%.%'')

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''136'', ''MinimumQuantity'', MinimumQuantity, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.MinimumQuantity)=1 AND (CAST(ii.MinimumQuantity As FLOAT))>100)

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''8'', ''MinimumQuantity'', MinimumQuantity, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.MinimumQuantity,'''')=''''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='MinimumOrderAmount')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''109'', ''MinimumOrderAmount'', MinimumOrderAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ((ISNUMERIC(ii.MinimumOrderAmount)=0 AND LEN(ii.MinimumOrderAmount)>0) OR CAST(ii.MinimumOrderAmount As FLOAT)<0)

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''137'', ''MinimumOrderAmount'', MinimumOrderAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.MinimumOrderAmount)=1 AND (LEN(PARSENAME(ii.MinimumOrderAmount,1))>2 AND (ii.MinimumOrderAmount) LIKE ''%.%'' AND CAST(ii.MinimumOrderAmount As FLOAT)>0))

				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''136'', ''MinimumOrderAmount'', MinimumOrderAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE (ISNUMERIC(ii.MinimumOrderAmount)=1 AND (CAST(ii.MinimumOrderAmount As FLOAT))>100)
		
				INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''8'', ''MinimumOrderAmount'', MinimumOrderAmount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ISNULL(ii.MinimumOrderAmount,'''')=''''
					AND NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode=ii.PromoCode)
				'
				EXEC SP_EXECUTESQL @Query;
			END
		
			IF EXISTS (SELECT TOP 1 1 FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='CallForPriceMessage')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''CallForPriceMessage'', CallForPriceMessage, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.CallForPriceMessage))) > 100
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Brand')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''143'', ''Brand'', Brand, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE NOT EXISTS (SELECT * FROM ZnodeBrandDetails BD INNER JOIN ZnodePortalBrand PB ON BD.BrandId = PB.BrandId AND PB.PortalId = ii.PortalId WHERE BD.BrandCode=ii.Brand)
					AND ISNULL(ii.Brand,'''')<>''''
					AND ISNULL(ii.Store,'''')<>''All Stores''
					OR (NOT EXISTS (SELECT * FROM ZnodeBrandDetails BD WHERE BD.BrandCode=ii.Brand) AND ISNULL(ii.Brand,'''')<>'''')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''Brand'', Brand, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.Brand))) > 100
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Catalog')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''144'', ''Catalog'', Catalog, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE NOT EXISTS (	SELECT * FROM ZnodePimCatalog PC
									INNER JOIN ZnodePimCatalog PbC ON PC.PimCatalogId=PbC.PimCatalogId
									INNER JOIN ZnodePortalCatalog PtC ON PbC.pimCatalogId=Ptc.PublishCatalogId AND PtC.PortalId = ii.PortalId
									WHERE PC.CatalogCode = ii.Catalog)
					AND ISNULL(ii.Catalog,'''')<>''''
					AND ISNULL(ii.Store,'''')<>''All Stores''
					OR (NOT EXISTS (SELECT * FROM ZnodePimCatalog PC WHERE PC.CatalogCode = ii.Catalog) AND ISNULL(ii.Catalog,'''')<>'''')

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''Catalog'', Catalog, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.Catalog))) > 100
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Category')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''145'', ''Category'', Category, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE NOT EXISTS (	SELECT * FROM ZnodePimCategory PC
									INNER JOIN ZnodePimCategoryAttributeValue PCAV ON PC.PimCategoryId=PCAV.PimCategoryId
									INNER JOIN ZnodePimCategoryAttributeValueLocale PCAVL ON PCAV.PimCategoryAttributeValueId=PCAVL.PimCategoryAttributeValueId
									INNER JOIN ZnodePimAttribute PA ON PCAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''CategoryCode''
									INNER JOIN ZnodePimCategoryHierarchy PCH ON PC.PimCategoryId=PCH.PimCategoryId
									INNER JOIN ZnodePimCatalog PCt ON PCH.PimCatalogId=PCt.PimCatalogId
									INNER JOIN ZnodePortalCatalog PtC ON PCt.PImCatalogId=Ptc.PublishCatalogId AND PtC.PortalId = ii.PortalId
									WHERE LocaleId='+@LocaleId1+' AND PCAVL.CategoryValue=ii.Category)
					AND ISNULL(ii.Category,'''')<>''''
					AND ISNULL(ii.Store,'''')<>''All Stores''
					OR (NOT EXISTS (SELECT * FROM ZnodePimCategoryAttributeValueLocale PCAVL WHERE PCAVL.CategoryValue=ii.Category) AND ISNULL(ii.Category,'''')<>'''')
				
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''Category'', Category, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.Category))) > 100
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Shipping')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''148'', ''Shipping'', Shipping, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE NOT EXISTS (	SELECT * FROM ZnodeShipping SP
									INNER JOIN ZnodePortalShipping PS ON SP.ShippingId=PS.ShippingId
									WHERE SP.ShippingCode=ii.Shipping AND PS.PortalId=ii.PortalId)
					AND ISNULL(ii.Shipping,'''')<>''''
					AND ISNULL(ii.Store,'''')<>''All Stores''
					OR (NOT EXISTS (SELECT * FROM ZnodeShipping SP WHERE SP.ShippingCode=ii.Shipping) AND ISNULL(ii.Shipping,'''')<>'''')
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''Shipping'', Shipping, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.Shipping))) > 100
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='ProductToDiscount')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''156'', ''ProductToDiscount'', ProductToDiscount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE NOT EXISTS (	SELECT * FROM ZnodePimAttributeValueLocale PAVL
									INNER JOIN ZnodePimAttributeValue PAV ON PAVL.PimAttributeValueId=PAV.PimAttributeValueId
									INNER JOIN ZnodePimAttribute PA ON PAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''SKU''
									INNER JOIN ZnodePimCategoryProduct PCP ON PAV.PimProductId=PCP.PimProductId
									INNER JOIN ZnodePimCategoryHierarchy PCH ON PCP.PimCategoryId=PCH.PimCategoryId
									INNER JOIN ZnodePimCatalog PC ON PCH.PimCatalogId=PC.PimCatalogId
									WHERE LocaleId='+@LocaleId1+' AND PAVL.AttributeValue=ii.ProductToDiscount AND PC.PortalId=ii.PortalId)
					AND ISNULL(ii.ProductToDiscount,'''')<>''''
					AND ISNULL(ii.Store,'''')<>''All Stores''
					OR (NOT EXISTS (SELECT * FROM ZnodePimAttributeValueLocale PAVL WHERE PAVL.AttributeValue=ii.ProductToDiscount) AND ISNULL(ii.ProductToDiscount,'''')<>'''')
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''ProductToDiscount'', ProductToDiscount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.ProductToDiscount))) > 100
			
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''147'', ''ProductToDiscount'', ProductToDiscount, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ((LTRIM(RTRIM(ii.ProductToDiscount))) LIKE ''%,%'' OR (LTRIM(RTRIM(ii.ProductToDiscount))) LIKE ''% %'')
					AND ISNULL(ii.ProductToDiscount,'''')<>''''
				'
				EXEC SP_EXECUTESQL @Query;
			END

			IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='RequiredProduct')
			BEGIN
				SET @Query='
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''156'', ''RequiredProduct'', RequiredProduct, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE NOT EXISTS (	SELECT * FROM ZnodePimAttributeValueLocale PAVL
									INNER JOIN ZnodePimAttributeValue PAV ON PAVL.PimAttributeValueId=PAV.PimAttributeValueId
									INNER JOIN ZnodePimAttribute PA ON PAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''SKU''
									INNER JOIN ZnodePimCategoryProduct PCP ON PAV.PimProductId=PCP.PimProductId
									INNER JOIN ZnodePimCategoryHierarchy PCH ON PCP.PimCategoryId=PCH.PimCategoryId
									INNER JOIN ZnodePimCatalog PC ON PCH.PimCatalogId=PC.PimCatalogId
									WHERE LocaleId='+@LocaleId1+' AND PAVL.AttributeValue=ii.RequiredProduct AND PC.PortalId=ii.PortalId)
					AND ISNULL(ii.RequiredProduct,'''')<>''''
					AND ISNULL(ii.Store,'''')<>''All Stores''
					OR (NOT EXISTS (SELECT * FROM ZnodePimAttributeValueLocale PAVL WHERE PAVL.AttributeValue=ii.RequiredProduct) AND ISNULL(ii.RequiredProduct,'''')<>'''')
				
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''78'', ''RequiredProduct'', RequiredProduct, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE LEN(LTRIM(RTRIM(ii.RequiredProduct))) > 100
			
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId)
				SELECT ''147'', ''RequiredProduct'', RequiredProduct, '''+@NewGUId+''', RowNumber, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+''', '+@ImportProcessLogId1+'
				FROM ##Promotions AS ii
				WHERE ((LTRIM(RTRIM(ii.RequiredProduct))) LIKE ''%,%'' OR (LTRIM(RTRIM(ii.RequiredProduct))) LIKE ''% %'')
					AND ISNULL(ii.RequiredProduct,'''')<>''''
				'
				EXEC SP_EXECUTESQL @Query;
			END

			UPDATE ZIL
			SET ZIL.ColumnName =   ZIL.ColumnName --+ ' [ Promotion - ' + ISNULL(PromoCode,'') + ' ] '
			FROM ZnodeImportLog ZIL 
			INNER JOIN ##Promotions IPA ON (ZIL.RowNumber = IPA.RowNumber)
			WHERE ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

			--Delete Invalid Data after functional validation
			DELETE FROM ##Promotions
			WHERE RowNumber IN
			(
				SELECT DISTINCT RowNumber
				FROM ZnodeImportLog
				WHERE ImportProcessLogId = @ImportProcessLogId AND RowNumber IS NOT NULL
			);

			-- Update Record count in log
			DECLARE @FailedRecordCount BIGINT;
			DECLARE @SuccessRecordCount BIGINT;

			SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber)
			FROM ZnodeImportLog 
			WHERE RowNumber IS NOT NULL AND ImportProcessLogId = @ImportProcessLogId;

			SELECT @SuccessRecordCount = COUNT(DISTINCT RowNumber) 
			FROM ##Promotions

			UPDATE ZnodeImportProcessLog
			SET FailedRecordcount = @FailedRecordCount ,
				SuccessRecordCount = @SuccessRecordCount ,
				TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
			WHERE ImportProcessLogId = @ImportProcessLogId;
		END

		--To identify duplicate records
		IF OBJECT_ID('tempdb..#DuplicatePromotionsData') IS NOT NULL
			DROP TABLE #DuplicatePromotionsData;

		SELECT PromoCode,RowId,ROW_NUMBER() OVER (PARTITION BY PromoCode ORDER BY RowId DESC) As Rn
		INTO #DuplicatePromotionsData
		FROM ##Promotions;

		IF EXISTS(SELECT * FROM tempdb.sys.columns WHERE [name] = N'DiscountAmount' AND [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
		BEGIN
			SET @Query='
			EXEC tempdb.sys.sp_rename ''tempdb.dbo.##Promotions.DiscountAmount'', ''Discount'' , ''COLUMN''
			'
			EXEC SP_EXECUTESQL @Query;
			PRINT @Query
		END
		
		IF EXISTS(SELECT * FROM tempdb.sys.columns WHERE [name] = N'MinimumQuantity' AND [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
		BEGIN
			SET @Query='
			EXEC tempdb.sys.sp_rename ''tempdb.dbo.##Promotions.MinimumQuantity'', ''QuantityMinimum'' , ''COLUMN''
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS(SELECT * FROM tempdb.sys.columns WHERE [name] = N'MinimumOrderAmount' AND [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
		BEGIN
			SET @Query='
			EXEC tempdb.sys.sp_rename ''tempdb.dbo.##Promotions.MinimumOrderAmount'', ''OrderMinimum'' , ''COLUMN''
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS(SELECT * FROM tempdb.sys.columns WHERE [name] = N'ProductQuantity' AND [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
		BEGIN
			SET @Query='
			EXEC tempdb.sys.sp_rename ''tempdb.dbo.##Promotions.ProductQuantity'', ''PromotionProductQuantity'' , ''COLUMN''
			'
			EXEC SP_EXECUTESQL @Query;
		END

		--For Update Promotions Data
		DECLARE @UpdateColumns NVARCHAR (MAX);

		IF @IsGenerateErrorLog = 1 
		BEGIN
			SELECT @UpdateColumns=STRING_AGG(('ZP.'+COLUMN_NAME+'=CASE WHEN ISNULL(P.'+COLUMN_NAME+','''')='''' THEN ZP.'+COLUMN_NAME+' ELSE P.'+COLUMN_NAME+' END'),',')
			--'ZP.'+COLUMN_NAME+'=P.'+COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME='ZnodePromotion'
				AND COLUMN_NAME IN (SELECT name FROM tempdb.sys.columns WHERE [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
				AND COLUMN_NAME NOT IN ('PromoCode','PromotionTypeId','IsCouponRequired','IsAllowedWithOtherCoupons','IsUnique','ProfileId','PortalId')
				--AND COLUMN_NAME NOT IN ('DiscountAmount','MinimumQuantity','MinimumOrderAmount');
         END
		 ELSE
		 BEGIN 
			SELECT @UpdateColumns=STRING_AGG(('ZP.'+COLUMN_NAME+'=CASE WHEN ISNULL(P.'+COLUMN_NAME+','''')='''' THEN P.'+COLUMN_NAME+' ELSE P.'+COLUMN_NAME+' END'),',')
			--'ZP.'+COLUMN_NAME+'=P.'+COLUMN_NAME
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME='ZnodePromotion'
				AND COLUMN_NAME IN (SELECT name FROM tempdb.sys.columns WHERE [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
				AND COLUMN_NAME NOT IN ('PromoCode','PromotionTypeId','IsUnique','ProfileId')
				-- AND COLUMN_NAME NOT IN ('DiscountAmount','MinimumQuantity','MinimumOrderAmount');
		END

		IF OBJECT_ID('tempdb..#UpdatedPromotions') IS NOT NULL
			DROP TABLE #UpdatedPromotions;

		CREATE TABLE #UpdatedPromotions (PromotionId INT,PromoCode VARCHAR(300),PromotionTypeId INT);

		SET @Query='
		UPDATE ZP SET '+@UpdateColumns+'
		OUTPUT INSERTED.PromotionId, INSERTED.PromoCode, INSERTED.PromotionTypeId
		INTO #UpdatedPromotions (PromotionId, PromoCode, PromotionTypeId)
		FROM ##Promotions P
		INNER JOIN ZnodePromotion ZP ON LTRIM(RTRIM(P.PromoCode)) = ZP.PromoCode
		INNER JOIN #DuplicatePromotionsData DP ON LTRIM(RTRIM(P.PromoCode)) = DP.PromoCode AND DP.Rn=1 AND P.RowId=DP.RowId
		'
		EXEC SP_EXECUTESQL @Query;

		--For Insert Promotions Data
		DECLARE @MatchesColumns NVARCHAR (MAX);

		SELECT @MatchesColumns=STRING_AGG(COLUMN_NAME,',') FROM INFORMATION_SCHEMA.COLUMNS 
		WHERE TABLE_NAME='ZnodePromotion'
			AND COLUMN_NAME IN (SELECT name FROM tempdb.sys.columns WHERE [object_id] = OBJECT_ID(N'tempdb.dbo.##Promotions'))
			AND COLUMN_NAME NOT IN ('ProfileId');

		IF OBJECT_ID('tempdb..#InsertedPromotions') IS NOT NULL
			DROP TABLE #InsertedPromotions;

		CREATE TABLE #InsertedPromotions (PromotionId INT,PromoCode VARCHAR(300),PromotionTypeId INT);

		-- Import New Promotions
		SET @MatchesColumns='
		INSERT INTO ZnodePromotion
			('+@MatchesColumns+',CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			)
		OUTPUT INSERTED.PromotionId, INSERTED.PromoCode, INSERTED.PromotionTypeId
		INTO #InsertedPromotions (PromotionId, PromoCode, PromotionTypeId)
		SELECT DISTINCT P.'+@MatchesColumns+','+CAST(@UserId AS VARCHAR(15))+','''+CONVERT(NVARCHAR(30),@GetDate,121)+''','+CAST(@UserId AS VARCHAR(15))+','''+CONVERT(NVARCHAR(30),@GetDate,121)+'''
		FROM ##Promotions P
		INNER JOIN #DuplicatePromotionsData DP ON LTRIM(RTRIM(P.PromoCode)) = DP.PromoCode AND DP.Rn=1 AND P.RowId=DP.RowId
		WHERE NOT EXISTS (SELECT * FROM ZnodePromotion WHERE PromoCode = LTRIM(RTRIM(P.PromoCode)))
		'

		EXEC SP_EXECUTESQL @MatchesColumns;

		DECLARE @checkTable TABLE (Code VARCHAR(1000) , valued NVARCHAR(max))

		DECLARE @InsertData int = 1 
		IF @IsGenerateErrorLog = 0  
		BEGIN 
		    
			SET @InsertData= CASE WHEN NOT EXISTS (SELECT TOP 1 1  FROM #UpdatedPromotions)  THEN 1 ELSE 0 END 
 
			INSERT INTO #InsertedPromotions (PromotionId,PromoCode,PromotionTypeId)
			SELECT PromotionId,PromoCode,PromotionTypeId
			FROM #UpdatedPromotions a 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM #InsertedPromotions b WHERE b.PromoCode = a.PromoCode)

			DELETE FROM ZnodePromotionProfileMapper WHERE PromotionId IN (SELECT PromotionId FROM #InsertedPromotions )

			DELETE FROM ZnodePromotionCoupon WHERE  PromotionId IN (SELECT PromotionId FROM #InsertedPromotions )

			IF @PromotionTypeName IN ('Percent Off X If Y Purchased','Amount Off X If Y Purchased')
			BEGIN
				DELETE FROM ZnodePromotionProduct
					WHERE PromotionId IN (SELECT PromotionId FROM #InsertedPromotions)
						AND (SELECT TOP 1 ProductToDiscount FROM ##Promotions) <> ''
			
				DELETE FROM ZnodePromotionBrand WHERE  PromotionId IN (SELECT PromotionId FROM #InsertedPromotions ) 
				AND (SELECT TOP 1 brand FROM ##Promotions ) <> ''

				DELETE FROM ZnodePromotionCategory WHERE  PromotionId IN (SELECT PromotionId FROM #InsertedPromotions ) 
				AND (SELECT TOP 1 category FROM ##Promotions ) <> ''

				DELETE FROM ZnodePromotionCatalogs WHERE  PromotionId IN (SELECT PromotionId FROM #InsertedPromotions ) 
				AND (SELECT TOP 1 catalog FROM ##Promotions ) <> ''
				DELETE FROM ZnodePromotionShipping WHERE  PromotionId IN (SELECT PromotionId FROM #InsertedPromotions ) 
				AND (SELECT TOP 1 Shipping FROM ##Promotions ) <> ''

				SET @InsertData = 1 
			END

			INSERT INTO @checkTable 
			SELECT 'brand' ,(SELECT TOP 1 brand FROM ##Promotions )
			UNION ALL 
			SELECT 'catalog' ,(SELECT TOP 1 catalog FROM ##Promotions )
			UNION ALL 
			SELECT 'category' ,(SELECT TOP 1 category FROM ##Promotions )
			UNION ALL 
			SELECT 'Shipping' ,(SELECT TOP 1 Shipping FROM ##Promotions )
			UNION ALL
			SELECT 'ProductToDiscount' ,(SELECT TOP 1 ProductToDiscount FROM ##Promotions )
			UNION ALL
			SELECT 'RequiredProduct' ,(SELECT TOP 1 RequiredProduct FROM ##Promotions )
		END 
		
		--SELECT 1 
		-- Insert for ZnodePromotionProfileMapper
		--SET @Query='
		--INSERT INTO ZnodePromotionProfileMapper
		--	(PromotionId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		--SELECT DISTINCT IPs.PromotionId, CASE WHEN ISNULL(p.Profile,'''') <> '''' THEN IIF(p.Profile=0,NULL,p.Profile) ELSE    P.Profileid END ,'+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
		--FROM #InsertedPromotions IPs 
		--INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
		--WHERE NOT EXISTS (SELECT * FROM ZnodePromotionProfileMapper WHERE Promotionid = IPs.PromotionId AND ISNULL(Profileid,0)=CASE WHEN ISNULL(p.Profile,'''') <> '''' THEN p.Profile ELSE    P.Profileid END )  
		--'
		--PRINT @Query 
		--EXEC SP_EXECUTESQL @Query;

		SET @Query='
		INSERT INTO ZnodePromotionProfileMapper
			(PromotionId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT IPs.PromotionId, P.ProfileId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
		FROM #InsertedPromotions IPs 
		INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
		WHERE NOT EXISTS (SELECT * FROM ZnodePromotionProfileMapper
				WHERE Promotionid = IPs.PromotionId AND ISNULL(ProfileId,0)=ISNULL(P.ProfileId,0))
		'
		EXEC SP_EXECUTESQL @Query;

		IF @IsGenerateErrorLog = 1
		BEGIN 
			-- Update for ZnodePromotionProfileMapper
			SET @Query='
			DELETE FROM ZnodePromotionProfileMapper WHERE PromotionId IN (SELECT PromotionId FROM #UpdatedPromotions) AND ProfileId IS NULL

			DELETE PPM
			FROM ZnodePromotionProfileMapper PPM
			INNER JOIN #UpdatedPromotions IPs ON PPM.Promotionid = IPs.PromotionId
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode AND P.ProfileId IS NULL

			INSERT INTO ZnodePromotionProfileMapper
				(PromotionId,ProfileId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, P.ProfileId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #UpdatedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			WHERE NOT EXISTS (SELECT * FROM ZnodePromotionProfileMapper
					WHERE Promotionid = IPs.PromotionId AND ISNULL(ProfileId,0)=ISNULL(P.ProfileId,0)) AND ISNULL(P.Profile,'''')<>''''
			'
			EXEC SP_EXECUTESQL @Query;
		END

		-- Insert for ZnodePromotionCoupon
		SET @Query='
		INSERT INTO ZnodePromotionCoupon
			(PromotionId,Code,InitialQuantity,AvailableQuantity,IsActive,IsCustomCoupon,CustomCouponCode,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT DISTINCT IPs.PromotionId, P.Code, P.InitialQuantity, P.AvailableQuantity, 1, 0, '''', '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
		FROM #InsertedPromotions IPs 
		INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			'+ CASE WHEN @IsGenerateErrorLog = 1  THEN '
				INNER JOIN #DuplicatePromotionsData DP ON LTRIM(RTRIM(P.PromoCode)) = DP.PromoCode AND DP.Rn=1 AND P.RowId=DP.RowId
			' ELSE '' END +'
		WHERE ISNULL(P.IsCouponRequired,'''') IN (''True'',''1'',''Yes'')
			AND NOT EXISTS (SELECT * FROM ZnodePromotionCoupon WHERE Code = P.Code)
		'
		EXEC SP_EXECUTESQL @Query;
	
		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Brand' AND @IsGenerateErrorLog = 1 )  OR (@IsGenerateErrorLog = 0 AND (SELECT TOP 1  valued FROM @checkTable WHERE code = 'Brand') <> '' )
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionBrand (PromotionId,BrandId,BrandCode,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, BD.BrandId, BD.BrandCode, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #InsertedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodeBrandDetails BD ON (' +CASE WHEN @IsGenerateErrorLog = 1 THEN ' P.Brand=BD.BrandCode ' ELSE ' BD.BrandId IN (  '+(SELECT TOP 1 Brand FROM ##Promotions )+') ' END +' )  
			WHERE ISNULL(BD.BrandId,0)<>0   '+CASE WHEN @IsGenerateErrorLog = 0 AND @InsertData = 0 THEN ' AND 1=0 ' ELSE '' END 
			
			EXEC SP_EXECUTESQL @Query; 
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Brand' AND @IsGenerateErrorLog = 1 )
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionBrand (PromotionId,BrandId,BrandCode,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, BD.BrandId, BD.BrandCode, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #UpdatedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodeBrandDetails BD ON P.Brand=BD.BrandCode
			WHERE NOT EXISTS (SELECT * FROM ZnodePromotionBrand	WHERE Promotionid = IPs.PromotionId AND BrandId=BD.BrandId)
			'
			EXEC SP_EXECUTESQL @Query; 
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Catalog' AND @IsGenerateErrorLog = 1) OR (@IsGenerateErrorLog = 0 AND (SELECT TOP 1  valued FROM @checkTable WHERE code = 'Catalog') <> '' )
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionCatalogs (PromotionId,PublishCatalogId,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, PbC.PimCatalogId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #InsertedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
		   '+ CASE WHEN @IsGenerateErrorLog = 1  THEN '
			INNER JOIN ZnodePimCatalog PC     ON  (  P.Catalog=PC.CatalogCode  ) 
			' ELSE '' END +'
			INNER JOIN ZnodePimcatalog PbC  ON  (' + CASE WHEN @IsGenerateErrorLog = 1 THEN ' PC.PimCatalogId=PbC.PimCatalogId ' ELSE ' PbC.PimCatalogId IN (  '+(SELECT TOP 1 Catalog FROM ##Promotions )+') ' END +' )  
			WHERE ISNULL(PbC.PimCatalogId,0)<>0
			'+CASE WHEN @IsGenerateErrorLog = 0 AND @InsertData = 0 THEN ' AND 1=0 ' ELSE '' END 

			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Catalog' AND @IsGenerateErrorLog = 1)
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionCatalogs (PromotionId,PublishCatalogId,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, PC.PimCatalogId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #UpdatedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodePimCatalog PC ON (P.Catalog=PC.CatalogCode) 
			WHERE NOT EXISTS (SELECT * FROM ZnodePromotionCatalogs WHERE Promotionid = IPs.PromotionId AND PublishCatalogId=PC.PimCatalogId)
			'
			EXEC SP_EXECUTESQL @Query;
		END
		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Category' AND @IsGenerateErrorLog = 1) OR (@IsGenerateErrorLog = 0 AND (SELECT TOP 1 valued FROM @checkTable WHERE code = 'Category') <> '' )
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionCategory (PromotionId,PublishCategoryId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT  DISTINCT IPs.PromotionId, PbC.PimCategoryHierarchyId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #InsertedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			'+ CASE WHEN @IsGenerateErrorLog = 1 THEN +'
			INNER JOIN ZnodePimCategoryAttributeValueLocale PCAVL  ON P.Category=PCAVL.CategoryValue
			INNER JOIN ZnodePimCategoryAttributeValue PCAV ON PCAVL.PimCategoryAttributeValueId=PCAV.PimCategoryAttributeValueId
			INNER JOIN ZnodePimAttribute PA ON PCAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''CategoryCode''
			INNER JOIN ZnodePimCategory PC ON PCAV.PimCategoryId=PC.PimCategoryId 
			' ELSE '' END +'
			INNER JOIN ZnodePimCategoryHierarchy PbC ON  (' + CASE WHEN @IsGenerateErrorLog = 1 THEN ' PC.PimCategoryId=PbC.PimCategoryId ' ELSE ' PbC.PimCategoryHierarchyId IN (  '+(SELECT TOP 1 Category FROM ##Promotions )+') ' END +' )
			WHERE ISNULL(PbC.PimCategoryId,0)<>0 '+CASE WHEN @IsGenerateErrorLog = 0 AND @InsertData = 0 THEN ' AND 1=0 ' ELSE '' END +'
			GROUP BY IPs.PromotionId,PbC.PimCategoryHierarchyId
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Category' AND @IsGenerateErrorLog = 1)
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionCategory (PromotionId,PublishCategoryId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, PbC.PimCategoryHierarchyId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #UpdatedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodePimCategoryAttributeValueLocale PCAVL  ON P.Category=PCAVL.CategoryValue
			INNER JOIN ZnodePimCategoryAttributeValue PCAV ON PCAVL.PimCategoryAttributeValueId=PCAV.PimCategoryAttributeValueId
			INNER JOIN ZnodePimAttribute PA ON PCAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''CategoryCode''
			INNER JOIN ZnodePimCategory PC ON PCAV.PimCategoryId=PC.PimCategoryId 
			INNER JOIN ZnodePimCategoryHierarchy PbC ON PC.PimCategoryId=PbC.PimCategoryId
			WHERE NOT EXISTS (SELECT * FROM ZnodePromotionCategory WHERE Promotionid = IPs.PromotionId AND PublishCategoryId=PbC.PimCategoryHierarchyId)
			GROUP BY IPs.PromotionId,PbC.PimCategoryHierarchyId
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Shipping' AND @IsGenerateErrorLog = 1 ) OR (@IsGenerateErrorLog = 0 AND (SELECT TOP 1 valued FROM @checkTable WHERE code = 'Shipping') <> '' )
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionShipping (PromotionId,ShippingId,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, SP.ShippingId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #InsertedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodeShipping SP ON   (' + CASE WHEN @IsGenerateErrorLog = 1 THEN '   P.Shipping=SP.ShippingCode ' ELSE ' sp.shippingId  IN (  '+(SELECT TOP 1 Shipping FROM ##Promotions )+') ' END +' ) 
			
			WHERE ISNULL(SP.ShippingId,0)<>0 
			'+CASE WHEN @IsGenerateErrorLog = 0 AND @InsertData = 0 THEN ' AND 1=0 ' ELSE '' END
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='Shipping' AND @IsGenerateErrorLog = 1)
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionShipping (PromotionId,ShippingId,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, SP.ShippingId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #UpdatedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodeShipping SP ON P.Shipping=SP.ShippingCode 
			WHERE NOT EXISTS (SELECT * FROM ZnodePromotionShipping WHERE Promotionid = IPs.PromotionId AND ShippingId=SP.ShippingId)
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='ProductToDiscount' AND @IsGenerateErrorLog = 1  )  OR (@IsGenerateErrorLog = 0 AND (SELECT TOP 1  valued FROM @checkTable WHERE code = 'ProductToDiscount')  <> '' )
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionProduct (PromotionId,PublishProductId,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, PP.PimProductId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #InsertedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			'+ CASE WHEN @IsGenerateErrorLog = 1 THEN '
			INNER JOIN ZnodePimAttributeValueLocale PAVL ON LTRIM(RTRIM(P.ProductToDiscount))=PAVL.AttributeValue
			INNER JOIN ZnodePimAttributeValue PAV ON PAVL.PimAttributeValueId=PAV.PimAttributeValueId
			INNER JOIN ZnodePimAttribute PA ON PAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''SKU''
			' ELSE '' END + '
			INNER JOIN ZnodePimProduct PP  ON   (' + CASE WHEN @IsGenerateErrorLog = 1 THEN '   PAV.PimProductId=PP.PimProductId ' ELSE ' PP.PimProductId  IN (  '+(SELECT TOP 1 ProductToDiscount FROM ##Promotions )+') ' END +' )  
			WHERE ISNULL(PP.PimProductId,0)<>0 '+CASE WHEN @IsGenerateErrorLog = 0 AND @InsertData = 0 THEN ' AND 1=0 ' ELSE '' END +'
			GROUP BY IPs.PromotionId,PP.PimProductId
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='ProductToDiscount' AND @IsGenerateErrorLog = 1)
		BEGIN
			SET @Query='
			INSERT INTO ZnodePromotionProduct (PromotionId,PublishProductId,CreatedBy,CreatedDate,ModifedBy,ModifiedDate)
			SELECT DISTINCT IPs.PromotionId, PP.PimProductId, '+@UserId1+', '''+@GetDate1+''', '+@UserId1+', '''+@GetDate1+'''
			FROM #UpdatedPromotions IPs 
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			INNER JOIN ZnodePimAttributeValueLocale PAVL ON LTRIM(RTRIM(P.ProductToDiscount))=PAVL.AttributeValue
			INNER JOIN ZnodePimAttributeValue PAV ON PAVL.PimAttributeValueId=PAV.PimAttributeValueId
			INNER JOIN ZnodePimAttribute PA ON PAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''SKU''
			INNER JOIN ZnodePimProduct PP  ON PAV.PimProductId=PP.PimProductId 
			WHERE NOT EXISTS (SELECT * FROM ZnodePromotionProduct WHERE Promotionid = IPs.PromotionId AND PublishProductId=PP.PimProductId)
			GROUP BY IPs.PromotionId,PP.PimProductId
			'
			EXEC SP_EXECUTESQL @Query;
		END

		IF EXISTS (SELECT * FROM Tempdb.Sys.Columns WHERE OBJECT_ID = OBJECT_ID('tempdb..##Promotions') AND name='RequiredProduct'  AND @IsGenerateErrorLog = 1 )  OR (@IsGenerateErrorLog = 0 AND (SELECT TOP 1  valued FROM @checkTable WHERE code = 'RequiredProduct')<> '' )
		BEGIN
			SET @Query='
			UPDATE ZP
			SET ZP.PromotionProductQuantity=P.PromotionProductQuantity, ZP.ReferralPublishProductId=PP.PimProductId, ModifiedDate='''+@GetDate1+'''
			FROM ZnodePromotion ZP
			INNER JOIN #InsertedPromotions IPs ON ZP.PromotionId=IPs.PromotionId
			INNER JOIN ##Promotions P ON IPs.PromoCode=P.PromoCode
			'+ CASE WHEN @IsGenerateErrorLog = 1  THEN '
			INNER JOIN ZnodePimAttributeValueLocale PAVL ON LTRIM(RTRIM(P.RequiredProduct))=PAVL.AttributeValue
			INNER JOIN ZnodePimAttributeValue PAV ON PAVL.PimAttributeValueId=PAV.PimAttributeValueId
			INNER JOIN ZnodePimAttribute PA ON PAV.PimAttributeId=PA.PimAttributeId AND PA.AttributeCode=''SKU''
			' ELSE '' END +'
			INNER JOIN ZnodePimProduct PP ON   (' + CASE WHEN @IsGenerateErrorLog = 1 THEN '   PAV.PimProductId=PP.PimProductId ' ELSE ' PP.PimProductId  IN (  '+(SELECT TOP 1 RequiredProduct FROM ##Promotions )+') ' END +' )  
			'
			EXEC SP_EXECUTESQL @Query;
		END

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		DROP TABLE IF EXISTS ##Promotions;

		COMMIT TRAN Promotions;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN Promotions

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPromotions
					@TableName = '+CAST(@TableName AS VARCHAR(MAX)) +',
					@Status='+ CAST(@Status AS VARCHAR(10))+',
					@UserId = '+CAST(@UserId AS VARCHAR(50))+',
					@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',
					@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',
					@LocaleId='+CAST(@LocaleId AS VARCHAR(200))+',
					@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(MAX))+',
					@PromotionTypeId='+CAST(@PromotionTypeId AS VARCHAR(20))+',
					@IsGenerateErrorLog='+CAST(@IsGenerateErrorLog AS VARCHAR(10));

		IF @IsGenerateErrorLog = 1
		BEGIN
			---Import process updating fail due to database error
			UPDATE ZnodeImportProcessLog
			SET Status = dbo.Fn_GetImportStatus(3), ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;

			---Loging error for Import process due to database error
			INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

			--Updating total and fail record count
			UPDATE ZnodeImportProcessLog 
			SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , 
				SuccessRecordCount = 0,
				TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
			WHERE ImportProcessLogId = @ImportProcessLogId;
		END

		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportPromotions',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportSEODetails')
	DROP PROC Znode_ImportSEODetails
GO

CREATE PROCEDURE [dbo].[Znode_ImportSEODetails]
(  
   @TableName NVARCHAR(100), 
   @Status BIT OUT, 
   @UserId INT, 
   @ImportProcessLogId INT, 
   @NewGUId NVARCHAR(200), 
   @LocaleId INT= 1,
   @PortalId INT ,
   @CsvColumnString NVARCHAR(max)
)  
AS  
 --------------------------------------------------------------------------------------  
 -- Summary :  Import SEO Details  
   
 -- Unit Testing :   
 --------------------------------------------------------------------------------------  
  
BEGIN  
BEGIN TRAN A;  
BEGIN TRY  
   
	DECLARE @MessageDisplay NVARCHAR(100), @SSQL NVARCHAR(max);  
	DECLARE @GetDate DATETIME= dbo.Fn_GetDate();  
    
    
	DECLARE @CMSSEOTypeProduct INT ,@CMSSEOTypeCategory INT  
  
	SELECT @CMSSEOTypeProduct = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Product'  
	SELECT @CMSSEOTypeCategory = CMSSEOTypeId FROM ZnodeCMSSEOType WHERE Name = 'Category'  
  
  
	-- Three type of import required three table varible for product , category AND brAND  
	DECLARE @InsertSEODetails TABLE  
	(   
		RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, ImportType varchar(20), Code NVARCHAR(300),   
		IsRedirect BIT ,MetaInformation NVARCHAR(max),PortalId INT ,SEOUrl NVARCHAR(max),IsActive varchar(10),  
		SEOTitle NVARCHAR(max),SEODescription NVARCHAR(max),SEOKeywords NVARCHAR(max),   
		RedirectFROM NVARCHAR(max),RedirectTo NVARCHAR(max), EnableRedirection BIT, CanonicalURL VARCHAR(200),   
		RobotTag VARCHAR(50), GUID NVARCHAR(400)  
	);  
  
	DECLARE @InsertSEODetailsOFProducts TABLE  
	(   
		RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, ImportType varchar(20), Code NVARCHAR(300),   
		IsRedirect BIT ,MetaInformation NVARCHAR(max),PortalId INT ,SEOUrl NVARCHAR(max),IsActive varchar(10),  
		SEOTitle NVARCHAR(max),SEODescription NVARCHAR(max),SEOKeywords NVARCHAR(max),  
		RedirectFROM NVARCHAR(max),RedirectTo NVARCHAR(max), EnableRedirection BIT, CanonicalURL VARCHAR(200),  
		RobotTag VARCHAR(50),GUID NVARCHAR(400) 
	);  
  
	DECLARE @InsertSEODetailsOFCategory TABLE  
	(   
		RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, ImportType varchar(20), Code NVARCHAR(300),   
		IsRedirect BIT ,MetaInformation NVARCHAR(max),PortalId INT ,SEOUrl NVARCHAR(max),IsActive varchar(10),  
		SEOTitle NVARCHAR(max),SEODescription NVARCHAR(max),SEOKeywords NVARCHAR(max),  
		RedirectFROM NVARCHAR(max),RedirectTo NVARCHAR(max), EnableRedirection BIT, CanonicalURL VARCHAR(200), 
		RobotTag VARCHAR(50),GUID NVARCHAR(400)
	);  
  
	DECLARE @InsertSEODetailsOFBrAND TABLE  
	(   
		RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, ImportType varchar(20), Code NVARCHAR(300),   
		IsRedirect BIT ,MetaInformation NVARCHAR(max),PortalId INT ,SEOUrl NVARCHAR(max),IsActive varchar(10),  
		SEOTitle NVARCHAR(max),SEODescription NVARCHAR(max),SEOKeywords NVARCHAR(max),   
		RedirectFROM NVARCHAR(max),RedirectTo NVARCHAR(max), EnableRedirection BIT, CanonicalURL VARCHAR(200),  
		RobotTag VARCHAR(50),GUID NVARCHAR(400) 
	);  
  
    
	DECLARE @InsertedZnodeCMSSEODetail TABLE  
	(   
		CMSSEODetailId INT , SEOCode Varchar(4000), CMSSEOTypeId INT  
	);  
    
	--SET @SSQL = 'SELECT RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,GUID  FROM '+@TableName;  
	SET @SSQL = 'SELECT RowNumber,'+@CsvColumnString+',GUID  FROM '+@TableName;  
  
	INSERT INTO @InsertSEODetails(RowNumber,ImportType,Code,IsRedirect,MetaInformation,SEOUrl,IsActive,SEOTitle,SEODescription,SEOKeywords,RedirectFrom,RedirectTo,EnableRedirection,CanonicalURL,RobotTag,GUID )  
	EXEC sys.sp_sqlexec @SSQL;  
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '30', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii   
	WHERE ii.SEOURL IN (SELECT ISD.SEOURL FROM @InsertSEODetails ISD Group by ISD.SEOUrl having count(*) > 1 ) 
	    
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '10', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii   
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail ZCSD WHERE ZCSD.SEOUrl = ii.SEOUrl AND ZCSD.PortalId = @PortalId
	AND ZCSD.SEOCode <> ii.Code  AND EXISTS  
	(SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale dl WHERE dl.CMSSEODetailId = ZCSD.CMSSEODetailId AND dl.LocaleId = @LocaleId  
	AND dl.SEODescription = ii.SEODescription AND dl.SEOTitle = ii.SEOTitle AND dl.SEOKeywords = ii.SEOKeywords))   
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '53', 'RedirectFrom', RedirectFrom, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii   
	WHERE ii.RedirectFROM IN (SELECT ISD.RedirectFROM FROM @InsertSEODetails ISD Group by ISD.RedirectFROM having count(*) > 1 )   
	AND (ii.RedirectFROM <> '' )

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '35', 'RedirectFrom\RedirectTo', RedirectFROM + '  ' + RedirectTo  , @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii   
	WHERE ii.RedirectFROM = ii.RedirectTo  
	AND (ii.RedirectFROM <> '' AND ii.RedirectTo <> '' )
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '133', 'SEOUrl', SEOUrl, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii  
	WHERE LTRIM(RTRIM(ISNULL(ii.SEOUrl,''))) like '% %' -----space not allowed  
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '103', 'ImportType', ImportType, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii  
	WHERE ii.ImportType NOT IN   
	(  
		SELECT NAME FROM ZnodeCMSSEOType WHERE NAME NOT IN ('Content Page','BlogNews','Brand')  
	);  

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii  
	WHERE ii.IsActive not IN ('True','1','Yes','FALSE','0','No')
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '9', 'RobotTag', RobotTag, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetails AS ii  
	WHERE ii.RobotTag not IN ( 'INDEX_FOLLOW','NOINDEX_NOFOLLOW','NOINDEX_FOLLOW','INDEX_NOFOLLOW','1','2','3','4') 
	AND ISNULL(ii.RobotTag,'')<>''

	UPDATE ZIL
	SET ZIL.ColumnName =   ZIL.ColumnName + ' [ SEOCode - ' + ISNULL(Code,'') + ' ] '
	FROM ZnodeImportLog ZIL 
	INNER JOIN @InsertSEODetails IPA ON (ZIL.RowNumber = IPA.RowNumber)
	WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

	
	-------------------------------------------------------------------------------------------------------------------------------  
  
	INSERT INTO @InsertSEODetailsOFProducts(  RowNumber , ImportType , Code ,   
	IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
	SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID )  
	SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
	CASE WHEN IsActive IN ('True','1','Yes') 
	Then 1 
	ELSE 0
	END as IsActive, SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
	FROM @InsertSEODetails WHERE ImportType = 'Product'  
  
  
	INSERT INTO @InsertSEODetailsOFCategory( RowNumber , ImportType , Code ,   
	IsRedirect ,MetaInformation,SEOUrl ,IsActive ,  
	SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag , GUID )  
	SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl , 
		CASE WHEN IsActive IN ('True','1','Yes') Then 1 ELSE 0 END as IsActive, SEOTitle ,
		SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
	FROM @InsertSEODetails WHERE ImportType = 'Category'  
  
	INSERT INTO @InsertSEODetailsOFBrand( RowNumber , ImportType , Code ,   
	IsRedirect ,MetaInformation ,SEOUrl ,IsActive ,  
	SEOTitle ,SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag , GUID )  
	SELECT RowNumber , ImportType , Code , IsRedirect ,MetaInformation ,SEOUrl ,
		CASE WHEN IsActive IN ('True','1','Yes') Then 1 ELSE 0 END as IsActive, SEOTitle ,
		SEODescription ,SEOKeywords, RedirectFrom, RedirectTo,EnableRedirection, CanonicalURL, RobotTag, GUID  
	FROM @InsertSEODetails WHERE ImportType = 'Brand'  
  
  
	-- start Functional Validation   
	--1. Product  
	--2. Category  
	--3. Content Page  
	--4. BrAND  
	-----------------------------------------------  
  
    
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '103', 'SKU', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetailsOFProducts AS ii  
	WHERE ii.CODE NOT IN   
	(  
		SELECT ZPAVL.AttributeValue  
		FROM ZnodePimAttributeValue ZPAV   
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId  
		INNER JOIN ZnodePimAttribute ZPA on ZPAV.PimAttributeId = ZPA.PimAttributeId  
		WHERE ZPA.AttributeCode = 'SKU' AND ZPAVL.AttributeValue IS NOT NULL   
	)  AND ImportType = 'Product';  
  

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '103', 'Category', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetailsOFCategory AS ii  
	WHERE ii.CODE NOT IN   
	(  
		SELECT ZPCAVL.CategoryValue  
		FROM ZnodePimCategoryAttributeValue ZPCAV   
		INNER JOIN ZnodePimCategoryAttributeValueLocale ZPCAVL on ZPCAV.PimCategoryAttributeValueId = ZPCAVL.PimCategoryAttributeValueId  
		INNER JOIN ZnodePimAttribute ZPA on ZPCAV.PimAttributeId = ZPA.PimAttributeId  
		WHERE ZPA.AttributeCode = 'CategoryCode' AND ZPCAVL.CategoryValue IS NOT NULL  
	)  AND ImportType = 'Category';  
  
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
	SELECT '103', 'Brand', CODE, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
	FROM @InsertSEODetailsOFBrAND AS ii  
	WHERE ii.CODE NOT IN   
	(  
		SELECT BrandCode FROM ZnodeBrandDetails WHERE BrandCode IS NOT NULL  
	)  AND ImportType = 'Brand';  
    
	
	--Note : Content page import is not required   
    
	-- End Function Validation    
	-----------------------------------------------  
	--- Delete Invalid Data after functional validatin    
 
	DELETE FROM @InsertSEODetails  
	WHERE RowNumber IN  
	(  
		SELECT DISTINCT   
		RowNumber  
		FROM ZnodeImportLog  
		WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber is not null   
	);  


	DELETE FROM @InsertSEODetailsOFProducts  
	WHERE RowNumber IN  
	(  
		SELECT DISTINCT   
		RowNumber  
		FROM ZnodeImportLog  
		WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber is not null   
	);  
  
	DELETE FROM @InsertSEODetailsOFCategory  
	WHERE RowNumber IN  
	(  
		SELECT DISTINCT   
		RowNumber  
		FROM ZnodeImportLog  
		WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber is not null   
	);  
  
	DELETE FROM @InsertSEODetailsOFBrAND  
	WHERE RowNumber IN  
	(  
		SELECT DISTINCT   
		RowNumber  
		FROM ZnodeImportLog  
		WHERE ImportProcessLogId = @ImportProcessLogId  AND RowNumber is not null   
	);  
  
 
	-- Insert Product Data   
	IF EXISTS (SELECT TOP 1 1 FROM @InsertSEODetailsOFProducts)  
	BEGIN  
		UPDATE ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
			ZCSD.MetaInformation =  ISD.MetaInformation,  
			ZCSD.SEOUrl=  ISD.SEOUrl,  
			ZCSD.IsPublish = 0  
		FROM @InsertSEODetailsOFProducts ISD    
		INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
		INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
		WHERE  ZCSD.PortalId  =@PortalId;  
     
		UPDATE ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
			,ZCSDL.SEODescription = ISD.SEODescription  
			,ZCSDL.SEOKeywords= ISD.SEOKeywords
			,ZCSDL.CanonicalURL = ISD.CanonicalURL
			,ZCSDL.RobotTag = ISD.RobotTag  
		FROM @InsertSEODetailsOFProducts ISD    
		INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code  
		INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
		WHERE  ZCSD.PortalId = @PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
		----Making product as draft if SEOUrl is changed for part of partial publish
		UPDATE ZPP SET ZPP.PublishStateId = (SELECT TOP 1 PublishStateId FROM ZnodePublishState WHERE StateName = 'Draft')
		FROM ZnodePimProduct ZPP
		INNER JOIN ZnodePimAttributeValue ZPAV ON ZPP.PimProductId = ZPAV.PimProductId
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE EXISTS (SELECT * FROM ZnodePimAttribute zpa WHERE zpa.AttributeCode = 'SKU' AND ZPAV.PimAttributeId = zpa.PimAttributeId)
		AND EXISTS(SELECT * FROM @InsertSEODetailsOFProducts ISD    
			INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code
			WHERE ZPAVL.AttributeValue = ZCSD.SEOCode)
     
		INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
		SELECT DISTINCT CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate, CanonicalURL,RobotTag  
		FROM ZnodeCMSSEODetail CSD  
		INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeProduct   
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
		AND CSD.portalId = @PortalId  
  
     
		DELETE FROM @InsertedZnodeCMSSEODetail  

		INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
		OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
		SELECT DISTINCT @CMSSEOTypeProduct,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate FROM   
		@InsertSEODetailsOFProducts ISD    
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail ZCSD WHERE ZCSD.CMSSEOTypeId = @CMSSEOTypeProduct AND ZCSD.SEOCode = ISD.Code AND  ZCSD.PortalId =@PortalId   );  
    
		INSERT INTO ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
		SELECT DISTINCT IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag   
		FROM @InsertedZnodeCMSSEODetail IZCSD   
		INNER JOIN @InsertSEODetailsOFProducts ISD ON IZCSD.SEOCode = ISD.Code   

		----Making product as draft if SEOUrl is inserted for part of partial publish
		UPDATE ZPP SET ZPP.PublishStateId = (SELECT TOP 1 PublishStateId FROM ZnodePublishState WHERE StateName = 'Draft')
		FROM ZnodePimProduct ZPP
		INNER JOIN ZnodePimAttributeValue ZPAV ON ZPP.PimProductId = ZPAV.PimProductId
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE EXISTS (SELECT * FROM ZnodePimAttribute zpa WHERE zpa.AttributeCode = 'SKU' AND ZPAV.PimAttributeId = zpa.PimAttributeId)
		AND EXISTS(SELECT * FROM @InsertedZnodeCMSSEODetail IZCSD WHERE ZPAVL.AttributeValue = IZCSD.SEOCode)
  
		-----RedirectUrlInsert  
		INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
		SELECT RedirectFrom,RedirectTo,
		EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
		FROM @InsertSEODetailsOFProducts SDP  
		WHERE IsRedirect = 1
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
			WHERE ZCR.RedirectFROM = SDP.RedirectFROM AND ZCR.RedirectTo = SDP.RedirectTo)
			AND (SDP.RedirectFROM <> '' AND SDP.RedirectTo <> '' )
  
	END  
  
	-- Insert Category Data   
	IF EXISTS (SELECT TOP 1 1 FROM @InsertSEODetailsOFCategory)  
	BEGIN  
  
		UPDATE ZCSD SET ZCSD.IsRedirect = ISD.IsRedirect ,  
			ZCSD.MetaInformation =  ISD.MetaInformation,  
			ZCSD.SEOUrl=  ISD.SEOUrl,  
			ZCSD.IsPublish = 0  
		FROM @InsertSEODetailsOFCategory ISD    
		INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
		INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
		WHERE  ZCSD.PortalId  =@PortalId;  
     
     
		UPDATE ZCSDL SET ZCSDL.SEOTitle = ISD.SEOTitle  
			,ZCSDL.SEODescription = ISD.SEODescription  
			,ZCSDL.SEOKeywords= ISD.SEOKeywords 
			,CanonicalURL = ISD.CanonicalURL
			,RobotTag = ISD.RobotTag
		FROM @InsertSEODetailsOFCategory ISD    
		INNER JOIN ZnodeCMSSEODetail ZCSD ON  ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode = ISD.Code  
		INNER JOIN ZnodeCMSSEODetailLocale ZCSDL ON ZCSD.CMSSEODetailId = ZCSDL.CMSSEODetailId  
		WHERE  ZCSD.PortalId  =@PortalId AND ZCSDL.LocaleId = @LocaleId;   
  
		INSERT INTO ZnodeCMSSEODetailLocale (CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
		SELECT DISTINCT CSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag  
		FROM ZnodeCMSSEODetail CSD  
		INNER JOIN @InsertSEODetailsOFProducts ISD ON CSD.SEOCode = ISD.Code AND CSD.CMSSEOTypeId = @CMSSEOTypeCategory   
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetailLocale CSDL WHERE CSDL.LocaleId = @LocaleId AND CSD.CMSSEODetailId = CSDL.CMSSEODetailId )  
		AND CSD.portalId = @PortalId  
  
  
		DELETE FROM @InsertedZnodeCMSSEODetail  

		INSERT INTO ZnodeCMSSEODetail(CMSSEOTypeId,SEOCode,IsRedirect,MetaInformation,PortalId,SEOUrl,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)    
		OUTPUT Inserted.CMSSEODetailId,Inserted.SEOCode,Inserted.CMSSEOTypeId INTO @InsertedZnodeCMSSEODetail    
		SELECT DISTINCT @CMSSEOTypeCategory,ISD.Code , ISD.IsRedirect,ISD.MetaInformation,@PortalId,ISD.SEOUrl,@USerId, @GetDate,@USerId, @GetDate   
		FROM @InsertSEODetailsOFCategory ISD    
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEODetail ZCSD WHERE ZCSD.CMSSEOTypeId = @CMSSEOTypeCategory AND ZCSD.SEOCode  = ISD.Code AND ZCSD.PortalId = @PortalId );  
  
		INSERT INTO ZnodeCMSSEODetailLocale(CMSSEODetailId,LocaleId,SEOTitle,SEODescription,SEOKeywords,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CanonicalURL,RobotTag)  
		SELECT DISTINCT IZCSD.CMSSEODetailId,@LocaleId,ISD.SEOTitle,ISD.SEODescription,ISD.SEOKeywords,@USerId, @GetDate,@USerId, @GetDate,CanonicalURL,RobotTag   
		FROM @InsertedZnodeCMSSEODetail IZCSD   
		INNER JOIN @InsertSEODetailsOFCategory ISD ON IZCSD.SEOCode = ISD.Code   
		WHERE IZCSD.CMSSEOTypeId =@CMSSEOTypeCategory    

		-----RedirectUrlInsert  
		INSERT INTO ZnodeCMSUrlRedirect ( RedirectFrom,RedirectTo,IsActive,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
		SELECT RedirectFrom,RedirectTo,
		EnableRedirection,@PortalId as PortalId ,2 as CreatedBy,@GetDate as CreatedDate,2 as ModifiedBy,@GetDate as ModifiedDate  
		FROM @InsertSEODetailsOFCategory SDP  
		WHERE IsRedirect = 1 
		AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSUrlRedirect ZCR 
			WHERE ZCR.RedirectFROM = SDP.RedirectFROM AND ZCR.RedirectTo = SDP.RedirectTo)
			AND (SDP.RedirectFROM <> '' AND SDP.RedirectTo <> '' )
	END  

	-- UPDATE Record count IN log 
	DECLARE @FailedRecordCount BIGINT
	DECLARE @SuccessRecordCount BIGINT
	SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
	SELECT @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertSEODetails
	UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount , 
	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
	WHERE ImportProcessLogId = @ImportProcessLogId;

	SET @GetDate = dbo.Fn_GetDate();
	--Updating the import process status
	UPDATE ZnodeImportProcessLog
	SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
						WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
						WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
					END, 
		ProcessCompletedDate = @GetDate
	WHERE ImportProcessLogId = @ImportProcessLogId; 
  
COMMIT TRAN A;  
END TRY  
BEGIN CATCH  
ROLLBACK TRAN A;

	SET @Status = 0;  
	SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE(); 

	DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportSEODetails @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(max)) +',@PortalId='+CAST(@PortalId AS VARCHAR(max)) +',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max)) ;

	---Import process updating fail due to database error
	UPDATE ZnodeImportProcessLog
	SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
	WHERE ImportProcessLogId = @ImportProcessLogId;

	---Loging error for Import process due to database error
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

	--Updating total AND fail record count
	UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
	TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId)
	WHERE ImportProcessLogId = @ImportProcessLogId;

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_ImportSEODetails',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
    
END CATCH;  
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportStoreLocatorAddress')
	DROP PROC Znode_ImportStoreLocatorAddress
GO

CREATE PROCEDURE [dbo].[Znode_ImportStoreLocatorAddress](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @CsvColumnString nvarchar(max))
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@IsAllowGlobalLevelUserCreation nvarchar(10)

		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive Value from global setting 
		Select @IsAllowGlobalLevelUserCreation = FeatureValues from ZnodeGlobalsetting where FeatureName = 'AllowGlobalLevelUserCreation'
		-- Three type of import required three table varible for product , category and brand

		CREATE TABLE #InsertCustomerAddress 
		( 
			 RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,PortalCode	nvarchar(600),StoreLocatorName	nvarchar(600)
			,FirstName	varchar	(300),LastName	varchar	(300),DisplayName	nvarchar(1200),Address1	varchar	(300),Address2	varchar	(300)
			,CountryName	varchar	(3000),StateName	varchar	(3000),CityName	varchar	(3000),PostalCode	varchar	(50)
			,PhoneNumber	varchar	(50),
			IsDefaultBilling	bit 
			,IsDefaultShipping	bit	,IsActive	bit	,ExternalId	nvarchar(2000),CompanyName nvarchar(2000), GUID NVARCHAR(400),
			DisplayOrder int ,Latitude decimal, Longitude decimal
		);
		
		SET @SSQL = 'INSERT INTO #InsertCustomerAddress( RowNumber,' + @CsvColumnString + ' ,GUID )
		SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		--INSERT INTO @InsertCustomerAddress( RowNumber,PortalCode,StoreLocatorName,FirstName,LastName,DisplayName,Address1,Address2,CountryName,
		--									StateName,CityName,PostalCode,PhoneNumber,
		--									IsDefaultBilling,IsActive,IsDefaultShipping,ExternalId,CompanyName,DisplayOrder,Latitude,Longitude,GUID )
		--print @SSQL
		EXEC sys.sp_sqlexec @SSQL;

		-- start Functional Validation 
		-----------------------------------------------
		--,PortalCode	,StoreName,IsStoreActive

				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '110', 'PortalCode', PortalCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertCustomerAddress AS ii
				WHERE ii.PortalCode NOT IN 
				(
					SELECT StoreCode FROM ZnodePortal 
				);
			
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
				SELECT '8', 'StoreLocatorName', StoreLocatorName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
				FROM #InsertCustomerAddress AS ii
				WHERE ISnull(ltrim(rtrim(ii.StoreLocatorName)), '') = ''


		DELETE FROM #InsertCustomerAddress
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM #InsertCustomerAddress
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount 
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End

				--DECLARE #InsertedUserAddress TABLE (AddressId  nvarchar(256), PortalId nvarchar(max), PortalCode nvarchar(max)) 
				CREATE TABLE #InsertedUserAddress (AddressId  nvarchar(256), PortalId nvarchar(max), PortalCode nvarchar(max)) 
				
				----------update ZnodeAddress				
				DECLARE @AddressColumnString VARCHAR(1000), @WhereConditionString VARCHAR(1000), @UpdateColumnString VARCHAR(1000)

				SELECT @AddressColumnString = COALESCE(@AddressColumnString + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
				FROM ZnodeImportUpdatableColumns a
				INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
				INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
				WHERE b.TABLE_NAME = 'ZnodeAddress' 
				AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name = 'StoreLocator')
				
				SELECT @UpdateColumnString = COALESCE(@UpdateColumnString + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
				FROM INFORMATION_SCHEMA.COLUMNS a
				INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
				WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString,',') c WHERE a.COLUMN_NAME = c.Item )
				AND a.TABLE_NAME = 'ZnodeAddress'

				SELECT @WhereConditionString = COALESCE(@WhereConditionString + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString,',')

				SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+', ModifiedDate = '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' '+CASE WHEN ISNULL(@UpdateColumnString,'') = '' THEN '' ELSE ','+@UpdateColumnString END+' 
						FROM ZnodeAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END

				EXEC (@SSQL)
								
				SET @SSQL = '		
				Insert into ZnodeAddress (FirstName,LastName,DisplayName,Address1,Address2,Address3,CountryName,
										StateName,CityName,PostalCode,PhoneNumber,
										IsDefaultBilling,IsDefaultShipping,IsActive,ExternalId,CompanyName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)		
				OUTPUT INSERTED.AddressId , inserted.Address3 INTO  #InsertedUserAddress (AddressId,PortalCode) 			 
				SELECT IC.FirstName,IC.LastName,IC.DisplayName,IC.Address1,IC.Address2, IC.PortalCode +  ''~'' + IC.StoreLocatorName,IC.CountryName,
				IC.StateName,IC.CityName,IC.PostalCode,IC.PhoneNumber,
				isnull(IC.IsDefaultBilling,0),isnull(IC.IsDefaultShipping,0),isnull(IC.IsActive,0),IC.ExternalId,IC.CompanyName, '+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' , '+CONVERT(VARCHAR(10), @UserId)+' ,'''+CONVERT(NVARCHAR(30),@GetDate,121)+'''  
				FROM  #InsertCustomerAddress IC
				WHERE NOT EXISTS(SELECT * FROM ZnodeAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString END +')'
				--print @SSQL
				EXEC (@SSQL)
				
				DECLARE @AddressColumnString1 VARCHAR(1000), @WhereConditionString1 VARCHAR(1000), @UpdateColumnString1 VARCHAR(1000)

				SELECT @AddressColumnString1 = COALESCE(@AddressColumnString1 + ',', '')+a.ColumnName --COALESCE(@CsvColumnString + ' and ', '') +'ZA.'+ColumnName+' =  IC.'+ColumnName
				FROM ZnodeImportUpdatableColumns a
				INNER JOIN INFORMATION_SCHEMA.COLUMNS b on a.ColumnName = b.COLUMN_NAME  
				INNER JOIN dbo.Split(@CsvColumnString,',')C on b.COLUMN_NAME = c.Item
				WHERE b.TABLE_NAME = 'ZnodePortalAddress' 
				AND EXISTS(SELECT * FROM ZnodeImportHead IH where a.ImportHeadId = IH.ImportHeadId and IH.Name = 'StoreLocator')

				--print @AddressColumnString

				SELECT @UpdateColumnString1 = COALESCE(@UpdateColumnString1 + ' , ', '') +'ZA.'+a.COLUMN_NAME+' =  IC.'+a.COLUMN_NAME  
				FROM INFORMATION_SCHEMA.COLUMNS a
				INNER JOIN dbo.Split(@CsvColumnString,',')b on a.COLUMN_NAME = b.Item
				WHERE NOT EXISTS (SELECT * FROM dbo.Split(@AddressColumnString1,',') c WHERE a.COLUMN_NAME = c.Item )
				AND a.TABLE_NAME = 'ZnodePortalAddress'

				SELECT @WhereConditionString1 = COALESCE(@WhereConditionString1 + ' AND ', '') +'ZA.'+item+' =  IC.'+item from dbo.split(@AddressColumnString1,',')

				DECLARE @AccountId INT
				SELECT @AccountId = AccountId FROM ZnodeUser where UserId = @UserId

				SET @SSQL = '
						UPDATE ZA set ModifiedBy = '+CONVERT(VARCHAR(10), @UserId)+' ,ModifiedDate = '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' '+CASE WHEN ISNULL(@UpdateColumnString1,'') = '' THEN '' ELSE ','+@UpdateColumnString1 END+' 
						FROM ZnodePortalAddress ZA
						INNER JOIN #InsertCustomerAddress IC ON '+CASE WHEN ISNULL(@WhereConditionString1,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString1 END
				--print @SSQL		
				EXEC (@SSQL)

				SET @SSQL = '
				INSERT INTO ZnodePortalAddress ( PortalId,AddressId,MediaId,StoreName,DisplayOrder,Latitude,Longitude
				,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
				Select ZP.PortalId ,IUA.AddressId,NULL,IC.StoreLocatorName, IC.DisplayOrder,IC.Latitude,IC.Longitude 
				,'+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+''' '+' , '+CONVERT(VARCHAR(10), @UserId)+' , '''+CONVERT(NVARCHAR(30),@GetDate,121)+'''    
				from #InsertCustomerAddress IC INNER JOIN #InsertedUserAddress IUA ON 
				IC.PortalCode + ''~'' + IC.StoreLocatorName  = IUA.PortalCode
				INNER JOIN ZnodePortal ZP on IC.PortalCode = ZP.Code
				WHERE NOT EXISTS ( SELECT * FROM ZnodePortalAddress ZA WHERE '+CASE WHEN ISNULL(@WhereConditionString1,'') = '' THEN ' 1 = 0 ' ELSE @WhereConditionString1 END +')'
				--print @SSQL
				EXEC (@SSQL)
				
				UPDATE ZA SET ZA.Address3 = null 
				From ZnodeAddress ZA INNER JOIN #InsertedUserAddress IUA ON ZA.AddressId = IUA.AddressId 

		SET @GetDate = dbo.Fn_GetDate();	
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportStoreLocatorAddress @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportStoreLocatorAddress',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		
	END CATCH;
END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportSynonyms')
	DROP PROC Znode_ImportSynonyms
GO

CREATE PROCEDURE [dbo].[Znode_ImportSynonyms]
(
	@TableName nvarchar(100), 
	@Status bit OUT, 
	@UserId int, 
	@ImportProcessLogId int, 
	@NewGUId nvarchar(200)
)
AS
--------------------------------------------------------------------------------------
-- Summary :  This procedure is used to import the synonyms
	
-- Unit Testing: 

--------------------------------------------------------------------------------------
BEGIN
BEGIN TRAN A;
BEGIN TRY
	DECLARE @SSQL nvarchar(max);
	DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
	SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();

	DECLARE @InsertSearchSynonyms TABLE
	( 
		RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int, CatalogCode varchar(max), SynonymCode varchar(max), RenameSynonymCode varchar(max), OriginalTerm varchar(max), ReplacedBy varchar(max),IsBidirectional varchar(100), GUID nvarchar(400)		
	);
	
	SET @SSQL = 'Select RowNumber,CatalogCode,SynonymCode,RenameSynonymCode,OriginalTerm,ReplacedBy,IsBidirectional ,GUID FROM '+@TableName;
	INSERT INTO @InsertSearchSynonyms( RowNumber,CatalogCode,SynonymCode,RenameSynonymCode,OriginalTerm,ReplacedBy,IsBidirectional ,GUID)
	EXEC sys.sp_sqlexec @SSQL;

	--Getting existing catalog
	DECLARE @CatalogCode TABLE 
	( 
		CatalogCode nvarchar(100), PublishCatalogId INT
	);
	INSERT INTO @CatalogCode
	SELECT CatalogCode,PublishCatalogId
	FROM ZnodePimCatalog a
	INNER JOIN ZnodePublishCatalog b on a.PimCatalogId = b.PimCatalogId

	-- Start Functional Validation on columns
	-----------------------------------------------
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '95', 'CatalogCode', CatalogCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE not exists(select * from @CatalogCode c where ii.CatalogCode = isnull(c.CatalogCode,'')) AND ISNULL(ii.RenameSynonymCode,'') = '' 
		AND NOT EXISTS(SELECT * FROM ZnodeSearchSynonyms i WHERE i.SynonymCode = ii.SynonymCode)

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '84', 'SynonymCode', SynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE isnull(ii.SynonymCode,'') = ''

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '79', 'SynonymCode', SynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE (isnull(ii.SynonymCode,'') LIKE '%[^a-zA-Z0-9]%')

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '78', 'SynonymCode', SynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE len(ii.SynonymCode) > 100 AND isnull(ii.SynonymCode,'') <> ''

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '96', 'RenameSynonymCode', RenameSynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE exists(select * from ZnodeSearchSynonyms i where i.SynonymCode = ii.RenameSynonymCode) AND ISNULL(ii.RenameSynonymCode,'') <> ''
	AND exists(select * from ZnodeSearchSynonyms i where i.SynonymCode = ii.SynonymCode)

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '78', 'RenameSynonymCode', RenameSynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE len(ltrim(rtrim(ii.RenameSynonymCode))) > 100 AND ISNULL(ii.RenameSynonymCode,'') <> ''

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '79', 'RenameSynonymCode', RenameSynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE (isnull(ii.RenameSynonymCode,'') LIKE '%[^a-zA-Z0-9]%') and isnull(ii.RenameSynonymCode,'') <> ''
		
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '84', 'OriginalTerm', OriginalTerm, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE isnull(ii.OriginalTerm,'') = '' AND  NOT EXISTS(SELECT * FROM ZnodeSearchSynonyms i WHERE i.SynonymCode = ii.SynonymCode)

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '78', 'OriginalTerm - '+Case when LEN(i.Item) >100 then i.Item else '' end, OriginalTerm, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	CROSS APPLY DBO.Split(OriginalTerm,'|') i
	WHERE isnull(ii.OriginalTerm,'') <> '' AND LEN(i.Item) > 100

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '97', 'OriginalTerm', OriginalTerm, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	CROSS APPLY DBO.Split(OriginalTerm,'|') i
	WHERE isnull(ii.OriginalTerm,'') <> ''
	GROUP BY SynonymCode, OriginalTerm, RowNumber
	HAVING COUNT(i.Item) > 20

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '84', 'ReplacedBy', ReplacedBy, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE isnull(ii.ReplacedBy,'') = '' AND  NOT EXISTS(SELECT * FROM ZnodeSearchSynonyms i WHERE i.SynonymCode = ii.SynonymCode)

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '78', 'ReplacedBy - '+Case when LEN(i.Item) >100 then i.Item else '' end, ReplacedBy, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	CROSS APPLY DBO.Split(ReplacedBy,'|') i
	WHERE isnull(ii.ReplacedBy,'') <> '' AND LEN(i.Item) > 100

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '97', 'ReplacedBy', ReplacedBy, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	CROSS APPLY DBO.Split(ReplacedBy,'|') i
	WHERE isnull(ii.ReplacedBy,'') <> ''
	GROUP BY SynonymCode, ReplacedBy, RowNumber
	HAVING COUNT(i.Item) > 20

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '84', 'IsBidirectional', IsBidirectional, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE isnull(ii.IsBidirectional,'') = '' AND  NOT EXISTS(SELECT * FROM ZnodeSearchSynonyms i WHERE i.SynonymCode = ii.SynonymCode)

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '68', 'IsBidirectional', IsBidirectional, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
	WHERE ii.IsBidirectional not in ('1','0','True','False','Yes','No') AND ii.IsBidirectional <> ''

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '53', 'SynonymCode', SynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
			   WHERE ii.SynonymCode IN
			   (
				   select SynonymCode from @InsertSearchSynonyms
					group by SynonymCode
					having count(1)>1
			   );

	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '53', 'RenameSynonymCode', RenameSynonymCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
	FROM @InsertSearchSynonyms AS ii
			   WHERE ii.RenameSynonymCode IN
			   (
				   select RenameSynonymCode from @InsertSearchSynonyms
					group by RenameSynonymCode
					having count(1)>1
			   ) AND ISNULL(ii.RenameSynonymCode,'') <> ''

	UPDATE ZIL
	SET ZIL.ColumnName =   ZIL.ColumnName + ' [ Synonym - ' + ISNULL(SynonymCode,'') + ' ] '
	FROM ZnodeImportLog ZIL 
	INNER JOIN @InsertSearchSynonyms IPA ON (ZIL.RowNumber = IPA.RowNumber)
	WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

	-- End Function Validation 	
	-----------------------------------------------
	-- Delete Invalid Data after functional validatin  
	DELETE FROM @InsertSearchSynonyms
	WHERE RowNumber IN
	(
	SELECT DISTINCT 
	RowNumber
	FROM ZnodeImportLog
	WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
	);
		
	-- Update Record count in log 
	DECLARE @FailedRecordCount BIGINT
	DECLARE @SuccessRecordCount BIGINT
	SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
	Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertSearchSynonyms
	UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
	TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
	WHERE ImportProcessLogId = @ImportProcessLogId;

	--Update existing search synonym 
	UPDATE ZSS 
	SET ZSS.SynonymCode = CASE WHEN ISNULL(IPS.RenameSynonymCode,'') <> '' THEN IPS.RenameSynonymCode ELSE ZSS.SynonymCode END , ZSS.OriginalTerm = CASE WHEN ISNULL(IPS.OriginalTerm,'') = '' THEN ZSS.OriginalTerm ELSE IPS.OriginalTerm END,
	ZSS.ReplacedBy =CASE WHEN ISNULL(IPS.ReplacedBy,'') = '' THEN ZSS.ReplacedBy ELSE IPS.ReplacedBy END,
	ZSS.IsBidirectional= CASE WHEN ISNULL (IPS.IsBidirectional,'') = '' THEN ZSS.IsBidirectional ELSE CASE WHEN IPS.IsBidirectional = 'YES' THEN '1' WHEN IPS.IsBidirectional = 'NO' THEN '0' ELSE IPS.IsBidirectional END END,
	ZSS.ModifiedBy = @UserId, ZSS.ModifiedDate = @GetDate
	FROM ZnodeSearchSynonyms ZSS
	INNER JOIN @InsertSearchSynonyms IPS ON ZSS.SynonymCode = IPS.SynonymCode
		
	--- Insert data into base table ZnodeSearchSynonyms
	INSERT INTO ZnodeSearchSynonyms (PublishCatalogId,OriginalTerm,ReplacedBy,IsBidirectional,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,SynonymCode)
	SELECT B.PublishCatalogId, A.OriginalTerm, A.ReplacedBy, CASE WHEN A.IsBidirectional = 'YES' THEN '1' WHEN A.IsBidirectional = 'NO' THEN '0' ELSE A.IsBidirectional END, @LocaleId,@UserId,@GetDate,@UserId,@GetDate,a.SynonymCode
	FROM @InsertSearchSynonyms A
	INNER JOIN @CatalogCode B ON A.CatalogCode = B.CatalogCode
	WHERE NOT EXISTS(SELECT * FROM ZnodeSearchSynonyms ZSS WHERE A.SynonymCode = ZSS.SynonymCode OR (A.RenameSynonymCode = ZSS.SynonymCode))
		
	SET @GetDate = dbo.Fn_GetDate();	
	--Updating the import process status
	UPDATE ZnodeImportProcessLog
	SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
			WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
			WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
		END, 
	ProcessCompletedDate = @GetDate
	WHERE ImportProcessLogId = @ImportProcessLogId;

COMMIT TRAN A;
END TRY
BEGIN CATCH
ROLLBACK TRAN A;

	SET @Status = 0;
	SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
	DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAttributes @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200));


	---Import process updating fail due to database error
	UPDATE ZnodeImportProcessLog
	SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
	WHERE ImportProcessLogId = @ImportProcessLogId;

	---Loging error for Import process due to database error
	INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
	SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

	--Updating total and fail record count
	UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
	TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
	WHERE ImportProcessLogId = @ImportProcessLogId;

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_ImportSynonyms',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;

END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportUserApproval')
	DROP PROC Znode_ImportUserApproval
GO

CREATE PROCEDURE [dbo].[Znode_ImportUserApproval]
(
	  @TableName nvarchar(100), 
	  @Status bit OUT, 
	  @UserId int, 
	  @ImportProcessLogId int, 
	  @NewGUId nvarchar(200), 
	  @LocaleId int= 0,
	  @PortalId int ,
	  @CsvColumnString nvarchar(max)
	  )
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import SEO Details
	
	-- Unit Testing : 
	--------------------------------------------------------------------------------------

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max),@AspNetZnodeUserId nvarchar(256),@ASPNetUsersId nvarchar(256),
		@PasswordHash nvarchar(max),@SecurityStamp nvarchar(max),@RoleId nvarchar(256),@IsAllowGlobalLevelUserCreation nvarchar(10)
		Declare @ProfileId  int 
	
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		-- Retrive RoundOff Value from global setting 

		-- Three type of import required three table varible for product , category and brand
		DECLARE @InsertZnodeUserApprovers TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY, RowNumber int,UserName nvarchar(512),LevelCode VARCHAR(200) ,ApproverUserName nvarchar(512),ApproverOrder int ,
			IsNotifyEmail  bit ,IsMandatory bit,Custom1 nvarchar(max) ,Custom2 nvarchar(max),Custom3 nvarchar(max),Custom4 nvarchar(max),Custom5 nvarchar(max),
			FromBudgetAmount Numeric(28,6),ToBudgetAmount Numeric(28,6) ,IsNoLimit bit 			, GUID NVARCHAR(400)
		);


		SET @SSQL = 'SELECT RowNumber,' + @CsvColumnString + ',GUID FROM '+ @TableName;
		INSERT INTO @InsertZnodeUserApprovers( RowNumber ,UserName ,LevelCode  ,ApproverUserName ,ApproverOrder  ,
			IsNotifyEmail   ,IsMandatory ,Custom1  ,Custom2 ,Custom3 ,Custom4 ,Custom5 ,
			FromBudgetAmount ,ToBudgetAmount ,IsNoLimit  			, GUID )
		EXEC sys.sp_sqlexec @SSQL;
		
		-- start Functional Validation 

		-----------------------------------------------
		If @IsAllowGlobalLevelUserCreation = 'true'
			BEGIN 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '14', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertZnodeUserApprovers AS ii
					   WHERE ii.UserName not in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   where PortalId = @PortalId
					   );
		 END 
		Else 
		BEGIN 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '14', 'UserName', UserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertZnodeUserApprovers AS ii
					   WHERE ii.UserName not in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
         END 
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '14', 'ApproverUserName', ApproverUserName, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertZnodeUserApprovers AS ii
					   WHERE ii.ApproverUserName not in 
					   (
						   SELECT UserName FROM AspNetZnodeUser   
					   );
				INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
					   SELECT '14', 'LevelCode', LevelCode, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId
					   FROM @InsertZnodeUserApprovers AS ii
					   WHERE ii.LevelCode not in 
					   (
						   SELECT LevelCode FROM ZnodeApproverLevel   
					   );

			SELECT * FROM ZnodeMessage

		
		--Note : Content page import is not required 
		
		-- End Function Validation 	
		-----------------------------------------------
		--- Delete Invalid Data after functional validatin  
		
		DELETE FROM @InsertZnodeUserApprovers
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
			--AND GUID = @NewGUID
		);

		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertZnodeUserApprovers
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- End
		SELECT DISTINCT UserId , m.UserName 
		INTO #ZnodeUser
		FROM AspNetZnodeUser m 
		INNER JOIN AspNetUsers a ON (a.UserName = m.AspNetZnodeUserId) 
		INNER JOIN ZnodeUser b ON (b.AspNetUserId  = a.id)	
		WHERE EXISTS (SELECT TOP 1 1 FROM @InsertZnodeUserApprovers Y WHERE Y.UserName = M.UserName )
			 OR EXISTS (SELECT TOP 1 1 FROM @InsertZnodeUserApprovers Y WHERE Y.ApproverUserName = M.UserName )

		UPDATE a 
		SET a.UserName = (SELECT TOP 1 UserId FROM  #ZnodeUser m WHERE m.UserName = a.UserName )
		, a.ApproverUserName = (SELECT TOP 1 UserId FROM  #ZnodeUser m WHERE m.UserName = a.ApproverUserName )
		, a.LevelCode = (SELECT TOP 1 ApproverLevelId FROM ZnodeApproverLevel m WHERE m.LevelCode = a.LevelCode)
		FROM @InsertZnodeUserApprovers a 
	  
	    UPDATE  ZUA
		SET  ApproverOrder = IZUA.ApproverOrder
		,IsNotifyEmail = IZUA.IsNotifyEmail
		,IsMandatory = IZUA.IsMandatory
		,Custom1 = IZUA.Custom1
		,Custom2 = IZUA.Custom2
		,Custom3 = IZUA.Custom3
		,Custom4 = IZUA.Custom4
		,Custom5 = IZUA.Custom5 
		,ModifiedBy= @UserId
		,ModifiedDate = @GetDate
		,FromBudgetAmount = IZUA.FromBudgetAmount
		,ToBudgetAmount = IZUA.ToBudgetAmount
		,IsNoLimit = IZUA.IsNoLimit
		FROM ZnodeUserApprovers ZUA
		INNER JOIN @InsertZnodeUserApprovers IZUA ON (IZUA.Username = ZUA.UserId AND IZUA.ApproverUsername = ZUA.ApproverUserId AND IZUA.LevelCode = ZUA.ApproverLevelId)
		-- Insert Product Data 
		INSERT INTO ZnodeUserApprovers
				(UserId,ApproverLevelId,ApproverUserId,ApproverOrder,IsNotifyEmail,IsMandatory,Custom1,Custom2,Custom3,Custom4,Custom5
					,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,FromBudgetAmount,ToBudgetAmount,IsNoLimit)
		SELECT Username,LevelCode,ApproverUsername,ApproverOrder,IsNotifyEmail,IsMandatory,Custom1,Custom2,Custom3,Custom4,Custom5
					,@UserId,@GetDate,@UserId,@GetDate,FromBudgetAmount,ToBudgetAmount,IsNoLimit
		FROM @InsertZnodeUserApprovers
				
		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();
		
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportUserApproval @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(max)) +',@PortalId='+CAST(@PortalId AS VARCHAR(max)) +',@CsvColumnString='+CAST(@CsvColumnString AS VARCHAR(max)) ;


		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportUserApproval',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportValidatePimProductData')
	DROP PROC Znode_ImportValidatePimProductData
GO

CREATE PROCEDURE [dbo].[Znode_ImportValidatePimProductData]
(   
	@ImportHeadName     VARCHAR(200),
    @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         INT,
    @UserId             INT,
    @LocaleId           INT           = 1,
    @IsCategory         INT           = 0,
    @DefaultFamilyId    INT           = 0,
    @ImportProcessLogId INT,
    @PriceListId        INT,
	@CountryCode VARCHAR(100) = '',
	@PimCatalogId         INT    = 0 ,
	@PortalId int = 0,
	@IsAccountAddress bit = 0,
	@PromotionTypeId	INT=0
)
AS
     SET NOCOUNT ON;

/*
    Summary :   Import PimProduct / Price / Inventory / Category / Category Associated Data 
    Process :   Admin site will upload excel / csv file in database and create global temporary table
				Procedure Znode_ImportValidatePimProductData will validate data with attribute validation rule
				If datatype validation issue found in input daata will logged into table "ZnodeImportLog"
				If Data is correct and record count in table ZnodeImportLog will be 0 then process for import data into Base tables
				To import data call procedure "Znode_ImportPimProductData"
    		  
				SourceColumnName: CSV file column headers
				TargetColumnName: Attributecode from ZnodePimAttribute Table (Consider those Attributecodes configured with default family only)
*/

BEGIN
    BEGIN TRY
        SET NOCOUNT ON;
        --BEGIN TRAN TRN_ImportValidProductData;
        DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
        DECLARE @SQLQuery NVARCHAR(MAX), @AttributeTypeName NVARCHAR(100), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @ControlName VARCHAR(300), @ValidationName VARCHAR(100), @SubValidationName VARCHAR(300), @ValidationValue VARCHAR(300), @RegExp VARCHAR(300), @CreateDateString NVARCHAR(300), @DefaultLocaleId INT, @ImportHeadId INT, @CheckedSourceColumn NVARCHAR(600)= '', @Status BIT= 0,
		@CsvColumnString nvarchar(max),
		@FailedRecordCount BIGINT,
		@SuccessRecordCount BIGINT
    --To get the total record count for update purpose in catch block
    SET @SQLQuery = 'SELECT '+CAST(@ImportProcessLogId AS VARCHAR(10))+',COUNT(*) FROM '+@TableName
	INSERT INTO Znode_ImportCsvRowCount
	EXEC (@SQLQuery) 

        DECLARE @FamilyAttributeDetail TABLE
        (PimAttributeId       INT,
        AttributeTypeName    VARCHAR(300),
        AttributeCode        VARCHAR(300),
        SourceColumnName     NVARCHAR(600),
        IsRequired           BIT,
        PimAttributeFamilyId INT
        );
        DECLARE @AttributeDetail TABLE
        (PimAttributeId    INT,
        AttributeTypeName VARCHAR(300),
        AttributeCode     VARCHAR(300),
        SourceColumnName  NVARCHAR(600),
        IsRequired        BIT,
        ControlName       VARCHAR(300),
        ValidationName    VARCHAR(100),
        SubValidationName VARCHAR(300),
        ValidationValue   VARCHAR(300),
        RegExp            VARCHAR(300)
        );

	CREATE TABLE #DefaultAttributeCode
	(AttributeTypeName          VARCHAR(300),
	PimAttributeDefaultValueId INT,
	PimAttributeId             INT,
	AttributeDefaultValueCode  VARCHAR(100)
	);

	IF( @ImportHeadName = 'B2BCustomer' )
	BEGIN
		EXEC ZnodeB2BCustomerMapping @ImportHeadName = @ImportHeadName, @TableName = @TableName
	END
		
        DECLARE @GlobalTempTableColumns TABLE(ColumnName NVARCHAR);
        IF NOT EXISTS
        (
            SELECT TOP 1 1
            FROM INFORMATION_SCHEMA.TABLES
            WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#InvalidDefaultData'
        )
            CREATE TABLE #InvalidDefaultData
            (RowNumber  INT,
            Value      NVARCHAR(MAX),
            ColumnName NVARCHAR(600)
            );
        ELSE
        DROP TABLE #InvalidDefaultData;
        IF NOT EXISTS
        (
            SELECT TOP 1 1
            FROM INFORMATION_SCHEMA.TABLES
            WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#GlobalTempTableColumns'
        )
            BEGIN

                SET @SQLQuery = 'SELECT Column_Name, '''+@ImportHeadName+''' AS ImportHeadName  from tempdb.INFORMATION_SCHEMA.COLUMNS	where table_name = object_name(object_id('''+@TableName+'''),
			(select database_id from sys.databases where name = ''tempdb''))';
                CREATE TABLE #GlobalTempTableColumns
                (ColumnName   NVARCHAR(MAX),
                TypeOfImport NVARCHAR(100)
                );
                INSERT INTO #GlobalTempTableColumns
                (ColumnName,
                TypeOfImport
                )
                EXEC sys.sp_sqlexec
                    @SQLQuery;
            END;

        IF EXISTS
        (
            SELECT TOP 1 1
            FROM #GlobalTempTableColumns
            WHERE ColumnName IN('PimCategoryId', 'PimProductId', 'RowNumber')
        )
            BEGIN
                INSERT INTO ZnodeImportLog
                (ErrorDescription,
                ColumnName,
                Data,
                GUID,
                CreatedBy,
                CreatedDate,
                ModifiedBy,
                ModifiedDate,
                ImportProcessLogId
                )
                VALUES
                (43,
                '',
                '',
                @newGUID,
                @UserId,
                @GetDate,
                @UserId,
                @GetDate,
                @ImportProcessLogId
                );
            END;
        SET @DefaultLocaleId = dbo.Fn_GetDefaultLocaleId();

        IF NOT EXISTS
        (
            SELECT TOP 1 1  FROM ZnodeImportLog
            WHERE Guid = @NewGUID
                AND ErrorDescription IN(43, 42)
            AND ImportProcessLogId = @ImportProcessLogId
        )
            BEGIN
                IF @ImportHeadName = 'Product'
                BEGIN
					IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
						SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null ';
					ELSE 
						SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimProductId int null Primary KEY CLUSTERED(RowNumber)';
						 
					EXEC sys.sp_sqlexec @SQLQuery;
			    END;
                ELSE
                IF @ImportHeadName = 'Category'
                    BEGIN
						IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
						SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null ';
						ElSE
						SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1),PimCategoryId int null Primary KEY CLUSTERED(RowNumber) ';
						  
						EXEC sys.sp_sqlexec @SQLQuery;
                    END;
                ELSE
                    BEGIN
					IF @@VERSION LIKE '%Azure%' OR @@VERSION LIKE '%Express Edition%'
						SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) ';
					Else 
						SET @SQLQuery = 'Alter table '+@TableName+' Add  RowNumber BIGINT Identity(1,1) Primary KEY CLUSTERED(RowNumber)';
							
					EXEC sys.sp_sqlexec @SQLQuery;
                    END;;
            END;

        SET @CreateDateString = CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''','+CONVERT(VARCHAR(100), @UserId)+','''+CONVERT(VARCHAR(100), @GetDate)+''', '+CONVERT(VARCHAR(100), @ImportProcessLogId);

        SELECT TOP 1 @ImportHeadId = ImportHeadId FROM ZnodeImportTemplate WHERE ImportTemplateId = @TemplateId;
        IF @DefaultFamilyId = 0
        AND @ImportHeadName IN('Product', 'Category')
            BEGIN 
                --Get all default attribute values in attribute 
                INSERT INTO @FamilyAttributeDetail
                (PimAttributeId,
                AttributeTypeName,
                AttributeCode,
                SourceColumnName,
                IsRequired,
                PimAttributeFamilyId
                )
                --Call Process to insert data of defeult family with source column name and target column name 
                EXEC Znode_ImportGetTemplateDetails
                    @TemplateId = @TemplateId,
                    @IsValidationRules = 0,
                    @IsIncludeRespectiveFamily = 1,
                    @IsCategory = @IsCategory,
                    @DefaultFamilyId = @DefaultFamilyId;

			---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;
        ELSE
        IF @ImportHeadName IN('Product', 'Category')
            BEGIN
				 
                --Get all default attribute values in attribute 
                INSERT INTO @FamilyAttributeDetail
                (PimAttributeId,
                AttributeTypeName,
                AttributeCode,
                SourceColumnName,
                IsRequired,
                PimAttributeFamilyId
                )
                --Call Process to insert data of defeult family with source column name and target column name 
                EXEC Znode_ImportGetTemplateDetails
                    @TemplateId = @TemplateId,
                    @IsValidationRules = 0,
                    @IsIncludeRespectiveFamily = 1,
                    @IsCategory = @IsCategory,
                    @DefaultFamilyId = @DefaultFamilyId;

			---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
			Delete FAD from @FamilyAttributeDetail FAD
			where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
			and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					        inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
            END;      
        -- Check attributes are manditory and not provided with source table
		   	 
	if @TABLENAME	like '%tempdb..%'
		SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from tempdb.sys.columns where object_id = object_id('''+@TABLENAME+'''));';
	else 
		SET @SQLQuery = 'SELECT 42 AS ErrorDescription , SourceColumnName , '''' , '''+@NewGUID+''','+@CreateDateString+' from ZnodeImportTemplateMapping where ImportTemplateId = '+CONVERT(VARCHAR(100), @TemplateId)+' and ltrim(rtrim(SourceColumnName)) <> '''' AND ltrim(rtrim(SourceColumnName)) not in ( select isnull(Name ,'''') from sys.columns where object_id = object_id('''+@TABLENAME+'''));';
	 
	Declare @Tbl_CsvDynamicColulmns TABLE (ColumnName nvarchar(300), SequenceNumber int, DataType nvarchar(50),IsRequired bit )
	IF @ImportHeadName = 'Promotions'
	BEGIN
			
		INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName)
		EXEC Znode_ImportGetDefaultFamilyAttribute @importHeadId=@importHeadId,@PimAttributeFamilyId=0,@PromotionTypeId=@PromotionTypeId
	END
	ELSE
	BEGIN
		INSERT INTO @Tbl_CsvDynamicColulmns(ColumnName , SequenceNumber , DataType ,IsRequired)
		SELECT DISTINCT ZITM.SourceColumnName ,ZIAV.SequenceNumber, ZIAV.AttributeTypeName, ZIAV.IsRequired
		FROM ZnodeImportAttributeValidation ZIAV LEFT OUTER JOIN 
		ZnodeImportTemplate  ZIT ON ZIT.ImportHeadId =  ZIAV.ImportHeadId AND ZIT.ImportTemplateId  = @TemplateId
		LEFT OUTER JOIN ZnodeImportTemplateMapping  ZITM ON ZITM.ImportTemplateId = ZIT.ImportTemplateId  
		and ZIAV.AttributeCode = ZITM.TargetColumnName
		AND ZITM.ImportTemplateId  = @TemplateId
		WHERE ZIAV.ImportHeadId = @ImportHeadId
		AND ISNULL(ZITM.SourceColumnName,'') <> ''--ORDER BY ZIAV.SequenceNumber
	END

	SELECT @CsvColumnString = SUBSTRING ((Select ',' +  ISNULL(ColumnName ,'NULL') from @Tbl_CsvDynamicColulmns ORDER BY SequenceNumber FOR XML PATH ('')),2,4000) 


    INSERT INTO ZnodeImportLog(ErrorDescription, ColumnName, Data, GUID,CreatedBy, CreatedDate,  ModifiedBy,ModifiedDate,ImportProcessLogId
        )
        EXEC sys.sp_sqlexec  @SQLQuery;
        IF NOT EXISTS
        (
            SELECT TOP 1 1
            FROM ZnodeImportLog
            WHERE Guid = @NewGUID
                AND ErrorDescription IN(43, 42)
            AND ImportProcessLogId = @ImportProcessLogId
        )
            BEGIN
                --Get all default attribute values in attribute 
                IF @ImportHeadName IN('Product', 'Category')
                    BEGIN
                        -- Check attributes are manditory and not provided with source table
                        INSERT INTO ZnodeImportLog
                        (ErrorDescription,
                        ColumnName,
                        Data,
                        GUID,
                        CreatedBy,
                        CreatedDate,
                        ModifiedBy,
                        ModifiedDate,
                        ImportProcessLogId
                        )
                            SELECT '14' AS ErrorDescription,
                                    AttributeCode,
                                    '',
                                    @NewGUID,
                                    @UserId,
                                    @GetDate,
                                    @UserId,
                                    @GetDate,
                                    @ImportProcessLogId
                            FROM @FamilyAttributeDetail
                            WHERE ISNULL(SourceColumnName, '') = ''
                                    AND IsRequired = 1;  

                        -- Read all attribute details with their datatype
                        INSERT INTO @AttributeDetail
                        (PimAttributeId,
                        AttributeTypeName,
                        AttributeCode,
                        SourceColumnName,
                        IsRequired,
                        ControlName,
                        ValidationName,
                        SubValidationName,
                        ValidationValue,
                        RegExp
                        )
                        EXEC Znode_ImportGetTemplateDetails
                            @TemplateId=@TemplateId,
							@DefaultFamilyId=@DefaultFamilyId;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @AttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
									inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode) 

                        DELETE FROM @AttributeDetail
                        WHERE AttributeTypeName = 'Image'
                            AND ValidationName <> 'IsAllowMultiUpload';
					DELETE FROM @AttributeDetail
                        WHERE AttributeTypeName = 'File'
                            AND ValidationName <> 'IsAllowMultiUpload';

                                INSERT INTO #DefaultAttributeCode
                                (AttributeTypeName,
                                PimAttributeDefaultValueId,
                                PimAttributeId,
                                AttributeDefaultValueCode
                                )
                                --Call Process to insert default data value 
                                EXEC Znode_ImportGetPimAttributeDefaultValue;

                                DELETE FROM #DefaultAttributeCode
                                WHERE AttributeTypeName = 'Yes/No';

                    END;
                ELSE
                    BEGIN
					
					
                        --Read all attribute details with their datatype
                        INSERT INTO @AttributeDetail
                        (AttributeTypeName,
                        AttributeCode,
                        SourceColumnName,
                        IsRequired,
                        ControlName,
                        ValidationName,
                        SubValidationName,
                        ValidationValue,
                        RegExp
                        )
                        EXEC [Znode_ImportGetOtherTemplateDetails]
                            @TemplateId = @TemplateId,
                            @ImportHeadId = @ImportHeadId;

					IF @ImportHeadName IN('B2BCustomer')
					BEGIN

						INSERT INTO @AttributeDetail
							(PimAttributeId,
							AttributeTypeName,
							AttributeCode,
							SourceColumnName,
							IsRequired,
							ControlName,
							ValidationName,
							SubValidationName,
							ValidationValue,
							RegExp
							)
							EXEC [Znode_ImportGetGlobalTemplateDetails]
								@TemplateId = @TemplateId,
								@ImportHeadId = @ImportHeadId;

								
						INSERT INTO #DefaultAttributeCode
						(AttributeTypeName,
						PimAttributeDefaultValueId,
						PimAttributeId,
						AttributeDefaultValueCode
						)
						--Call Process to insert default data value 
						EXEC Znode_ImportGetGlobalAttributeDefaultValue;

						DELETE FROM #DefaultAttributeCode
						WHERE AttributeTypeName = 'Yes/No';

					END
						
                        --Check attributes are not mapped with any family of Pim Product
                        INSERT INTO ZnodeImportLog
                        (ErrorDescription,
                        ColumnName,
                        Data,
                        GUID,
                        CreatedBy,
                        CreatedDate,
                        ModifiedBy,
                        ModifiedDate,
                        ImportProcessLogId
                        )
                            SELECT DISTINCT
                                    '14' AS ErrorDescription,
                                    AttributeCode,
                                    '',
                                    @NewGUID,
                                    @UserId,
                                    @GetDate,
                                    @UserId,
                                    @GetDate,
                                    @ImportProcessLogId
                            FROM @AttributeDetail
                            WHERE ISNULL(SourceColumnName, '') = ''   AND IsRequired = 1;  ;

                    END;
						
                --	Check attributes are not mapped with (Default / Other) family of Pim Product
                --	INSERT INTO ZnodeImportLog ( ErrorDescription , ColumnName , Data , GUID , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , ImportProcessLogId)
                --	SELECT '1' AS ErrorDescription , SourceColumnName , '' , @NewGUID , @UserId , @GetDate , @UserId , @GetDate , @ImportProcessLogId
                --	FROM @AttributeDetail WHERE PimAttributeId NOT IN ( SELECT zpfgm.PimAttributeId FROM dbo.ZnodePimFamilyGroupMapper AS zpfgm);
                --	Verify data in global temporary table (column wise)
					
                DECLARE Cr_Attribute CURSOR LOCAL FAST_FORWARD
                FOR SELECT PimAttributeId,
                        AttributeTypeName,
                        AttributeCode,
                        IsRequired,
                        SourceColumnName,
                        ControlName,
                        ValidationName,
                        SubValidationName,
                        ValidationValue,
                        RegExp
                    FROM @AttributeDetail
                    WHERE ISNULL(SourceColumnName, '') <> '';
                OPEN Cr_Attribute;
                FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                WHILE @@FETCH_STATUS = 0
                    BEGIN
				        IF @AttributeTypeName = 'Number'
                            BEGIN
							EXEC Znode_ImportValidateNumber
                                    @TableName = @TableName,
                                    @SourceColumnName = @SourceColumnName,
                                    @CreateDateString = @CreateDateString,
                                    @ValidationName = @ValidationName,
                                    @ControlName = @ControlName,
                                    @ValidationValue = @ValidationValue,
                                    @NewGUID = @NewGUID,
                                    @ImportHeadId = @ImportHeadId,
                                    @ImportProcessLogId = @ImportProcessLogId;
                            END;
						-- Check invalid date
							
                        IF @AttributeTypeName = 'Date'
                            BEGIN
                                EXEC Znode_ImportValidateDate
                                    @TableName = @TableName,
                                    @SourceColumnName = @SourceColumnName,
                                    @CreateDateString = @CreateDateString,
                                    @ValidationName = @ValidationName,
                                    @ControlName = @ControlName,
                                    @ValidationValue = @ValidationValue,
                                    @NewGUID = @NewGUID,
                                    @ImportHeadId = @ImportHeadId,
                                    @ImportProcessLogId = @ImportProcessLogId;
                            END;
						-- Check Manditory Data
		 				IF @IsRequired = 1 AND @CheckedSourceColumn <> @SourceColumnName
						BEGIN
							SET @CheckedSourceColumn = @SourceColumnName;
							EXEC Znode_ImportValidateMandatoryData
							@TableName = @TableName,
							@SourceColumnName = @SourceColumnName,
							@CreateDateString = @CreateDateString,
							@ValidationName = @ValidationName,
							@ControlName = @ControlName,
							@ValidationValue = @ValidationValue,
							@NewGUID = @NewGUID,
							@ImportHeadId = @ImportHeadId;
						END;
						--END 
							
                        IF @AttributeTypeName = 'Text'
                            BEGIN
								 
						        EXEC Znode_ImportValidateManditoryText
                                    @TableName = @TableName,
                                    @SourceColumnName = @SourceColumnName,
                                    @CreateDateString = @CreateDateString,
                                    @ValidationName = @ValidationName,
                                    @ControlName = @ControlName,
                                    @ValidationValue = @ValidationValue,
                                    @NewGUID = @NewGUID,
                                    @LocaleId = @LocaleId,
                                    @DefaultLocaleId = @DefaultLocaleId,
                                    @AttributeId = @AttributeId,
                                    @ImportProcessLogId = @ImportProcessLogId,
                                    @ImportHeadId = @ImportHeadId;
                            END;
                        IF @AttributeTypeName in ( 'Image','File')
                            BEGIN
                                EXEC Znode_ImportValidateImageData
                                    @TableName = @TableName,
                                    @SourceColumnName = @SourceColumnName,
                                    @CreateDateString = @CreateDateString,
                                    @ValidationName = @ValidationName,
                                    @ControlName = @ControlName,
                                    @ValidationValue = @ValidationValue,
                                    @NewGUID = @NewGUID,
                                    @LocaleId = @LocaleId,
                                    @DefaultLocaleId = @DefaultLocaleId,
                                    @AttributeId = @AttributeId,
                                    @ImportProcessLogId = @ImportProcessLogId,
                                    @ImportHeadId = @ImportHeadId;
                            END;

					

                        --Check Default data value is valid 
                        IF @ImportHeadName IN('Product', 'Category','B2BCustomer')
                            BEGIN
                                IF @AttributeId IN
                                (
                                    SELECT PimAttributeId
                                    FROM #DefaultAttributeCode
                                )
                                    BEGIN
							
                                    IF  @AttributeTypeName = 'Multi Select'
										BEGIN
										 	---Verify Image file is exists in media table or not 
											SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
											SELECT ROWNUMBER , (Select TOP 1 Item from dbo.split(' + @SourceColumnName + ','','')  SP WHERE NOT EXISTS 
											(Select ToP 1 1 FROM #DefaultAttributeCode DAC WHERE 
											DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
											' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.Item) ) = DAC.AttributeDefaultValueCode
											)), ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
											+ ' Where ISnull(' + @SourceColumnName +  ','''') <> '''''
										EXEC sys.sp_sqlexec @SQLQuery;
										END
										ELSE IF @AttributeTypeName = 'Simple Select'
										BEGIN
						
										---Verify Image file is exists in media table or not 
											SET @SQLQuery = ' INSERT INTO #InvalidDefaultData (RowNumber, Value, ColumnName) 
											SELECT ROWNUMBER , ' + @SourceColumnName + ' , ''' + @SourceColumnName + ''' as [ColumnName]  FROM ' + @TableName
											+ ' SP Where ISnull(' + @SourceColumnName +  ','''') <> '''' AND 
											NOT EXISTS 
											(Select TOP 1 1 FROM #DefaultAttributeCode DAC WHERE 
											DAC.AttributeTypeName <> ''Yes/No'' AND DAC.AttributeDefaultValueCode IS NOT NULL AND DAC.PimAttributeId = 
											' + CONVERT(VARCHAR(100), @AttributeId) + ' AND ltrim(rtrim(SP.' + @SourceColumnName + ') ) = DAC.AttributeDefaultValueCode ) '
							
										EXEC sys.sp_sqlexec @SQLQuery;
										END   
										-- Check Invalid Image 
											SET @SQLQuery = 'SELECT ''9 '' ErrorDescription,'''+@SourceColumnName+''' as [ColumnName], 
											Value AS  AttributeValue,RowNumber ,'''+@NewGUID+''',  '+@CreateDateString+' FROM #InvalidDefaultData Where Value IS NOT NULL'
											INSERT INTO ZnodeImportLog (ErrorDescription, ColumnName, Data, RowNumber, GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
											EXEC sys.sp_sqlexec @SQLQuery;
											Delete from #InvalidDefaultData

       
                                    END;
                            END;
							
                        FETCH NEXT FROM Cr_Attribute INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @ControlName, @ValidationName, @SubValidationName, @ValidationValue, @RegExp;
                    END;
                CLOSE Cr_Attribute;
                DEALLOCATE Cr_Attribute;
                --SELECT top 1 1 FROM @FamilyAttributeDetail where  iSNULL(SourceColumnName,'') = ''  and IsRequired = 1
            END;
             
			 
			  
------------------------------------------------------------------------------------------
	Declare @SQLQueryNew NVARCHAR(4000)
	Declare @SourceColumnNameProduct nvarchar(4000) 
    IF @ImportHeadName IN('Product','Pricing','ProductAssociation','Inventory')
	BEGIN
		 	 
	SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
	AND ImportTemplateId = @TemplateId


	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;			
END
ELSE IF @ImportHeadName IN('ProductAttribute')
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeCode'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Attribute - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'ZipCode'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'ZIP'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  ZIPCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'Category'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryCode'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'CategoryAssociation'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'CategoryName'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  CategoryName - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;

END
ELSE IF @ImportHeadName IN ('Customer','CustomerAddress')
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'UserName'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  UserName - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'SEODetails'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'Code'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  Code - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'Highlight'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'HighlightCode'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  HighlightCode - '' + ' + ' cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'AddonAssociation'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'SKU'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  SKU - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''  
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'AttributeDefaultValue'
BEGIN
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'AttributeDefaultValueCode'
AND ImportTemplateId = @TemplateId

	SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  AttributeDefaultValueCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]'' 
	FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber 
	WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';
    PRINT @SQLQueryNew
	EXEC sys.sp_sqlexec  @SQLQueryNew;
END
ELSE IF @ImportHeadName = 'Brands'  
BEGIN  
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'BrandCode'  
AND ImportTemplateId = @TemplateId  
  
    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  BrandCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(50)) +' + ''' ]''   
    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber   
    WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';  
    PRINT @SQLQueryNew  
    EXEC sys.sp_sqlexec  @SQLQueryNew;  
END  

ELSE IF @ImportHeadName = 'Promotions'  
BEGIN  
SELECT @SourceColumnNameProduct =  SourceColumnName from ZnodeImportTemplateMapping where TargetColumnName = 'PromoCode'  
AND ImportTemplateId = @TemplateId  
  
    SET @SQLQueryNew = 'Update ZIL SET ZIL.ColumnName =   ZIL.ColumnName ' + '  ' + ' + ' + ' '  + ''' [  PromoCode - '' + ' + '  cast( ' + @SourceColumnNameProduct + ' as varchar(300)) +' + ''' ]''   
    FROM  '+@TableName+' T Inner join  ZnodeImportLog  ZIL ON T.Rownumber = ZIL.RowNumber   
    WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND ZIL.Rownumber IS NOT NULL';  
    PRINT @SQLQueryNew  
    EXEC sys.sp_sqlexec  @SQLQueryNew;  
END 
-------------------------------------------------------------------------------------------------------------
	
--------------------------------------------------------------------------------------------------------------------
			 
SET @SQLQuery = 'Delete FROM  '+@TableName+' Where Rownumber IN (Select Rownumber FROM ZnodeImportLog  WHERE ImportProcessLogId = '+CONVERT(VARCHAR(100), @ImportProcessLogId)+' AND Rownumber IS NOT NULL)';
EXEC sys.sp_sqlexec  @SQLQuery;
			 			
   
        IF @ImportHeadName IN('Product', 'Category')
            BEGIN
                IF NOT EXISTS
                (
                    SELECT TOP 1 1
                    FROM @FamilyAttributeDetail
                    WHERE ISNULL(SourceColumnName, '') = ''
                        AND IsRequired = 1
                ) AND NOT EXISTS
				(
					SELECT TOP 1 1
					FROM ZnodeImportLog
					WHERE Guid = @NewGUID
						AND ErrorDescription IN(43, 42)
					AND ImportProcessLogId = @ImportProcessLogId
				)
                    BEGIN
                        IF @IsCategory = 0
                            BEGIN

                                EXEC Znode_ImportPimProductData
                                    @TableName = @TableName,
                                    @NewGUID = @NewGUID,
                                    @TemplateId = @TemplateId,
                                    @ImportProcessLogId = @ImportProcessLogId,
                                    @UserId = @UserId,
                                    @LocaleId = @LocaleId,
                                    @DefaultFamilyId = @DefaultFamilyId;

                            END;
                        ELSE
                            BEGIN
                                EXEC Znode_ImportPimCategoryData
                                    @TableName = @TableName,
                                    @NewGUID = @NewGUID,
                                    @TemplateId = @TemplateId,
                                    @ImportProcessLogId = @ImportProcessLogId,
                                    @UserId = @UserId,
                                    @LocaleId = @LocaleId,
                                    @DefaultFamilyId = @DefaultFamilyId;
                            END;
                    END
					ELSE
					BEGIN
						-- Update Record count in log 
								
							
						--SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
						--EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
						--UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
						--WHERE ImportProcessLogId = @ImportProcessLogId;

						SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
						SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
						EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount out
						UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
						WHERE ImportProcessLogId = @ImportProcessLogId;
					END

            END;
		IF NOT EXISTS
				(
					SELECT TOP 1 1
					FROM ZnodeImportLog
					WHERE Guid = @NewGUID
						AND ErrorDescription IN(43, 42)
					AND ImportProcessLogId = @ImportProcessLogId
				)
        BEGIN
            IF @ImportHeadName = 'Pricing'
                BEGIN
                    EXEC [Znode_ImportPriceList]
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID,
                        @PriceListId = @PriceListId;
                END;

            IF @ImportHeadName = 'Inventory'
                BEGIN
				
                    EXEC Znode_ImportInventory_Ver1
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID;
                END;
            IF @ImportHeadName = 'ZipCode'
                BEGIN
					EXEC Znode_ImportZipCode
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID,
						@CountryCode = @CountryCode;
                END;
				IF @ImportHeadName = 'CategoryAssociation'
                BEGIN
					EXEC Znode_ImportCatalogCategory
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID,
						@PimCatalogId = @PimCatalogId;
                END;
				IF @ImportHeadName = 'ProductAssociation'
                BEGIN
					EXEC Znode_ImportAssociateProducts
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID
                END;
			
				IF @ImportHeadName = 'SEODetails' AND @PortalId > 0 
                BEGIN
					EXEC Znode_ImportSEODetails
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
						@LocaleId = @LocaleId,
						@PortalId =@PortalId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID,
						@CsvColumnString = @CsvColumnString 

				
                END;
				
				IF @ImportHeadName = 'ProductAttribute' 
                BEGIN
					EXEC Znode_ImportAttributes
                        @TableName = @TableName,
                        @Status = @Status,
                        @UserId = @UserId,
						@ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID = @NewGUID
				
                END;

				IF @ImportHeadName = 'Customer' AND @PortalId > 0 
                BEGIN
					
					EXEC Znode_ImportCustomer
                        @TableName = @TableName,
                        @Status	 = @Status,
                        @UserId	 = @UserId,
						@LocaleId	 = @LocaleId,
						@PortalId  = @PortalId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID	 = @NewGUID,
						@CsvColumnString =@CsvColumnString
				
                END;
					 
				IF @ImportHeadName = 'UserApprovers' AND @PortalId > 0 
                BEGIN
					EXEC Znode_ImportUserApproval
                        @TableName = @TableName,
                        @Status	 = @Status,
                        @UserId	 = @UserId,
						@LocaleId	 = @LocaleId,
						@PortalId  = @PortalId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID	 = @NewGUID,
						@CsvColumnString =@CsvColumnString
				
                END;

				IF @ImportHeadName = 'B2BCustomer' AND @PortalId > 0 
                BEGIN

						EXEC Znode_ImportB2BCustomer
                        @TableName = @TableName,
                        @Status	 = @Status,
                        @UserId	 = @UserId,
						@LocaleId	 = @LocaleId,
						@PortalId  = @PortalId,
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID	 = @NewGUID,
						@CsvColumnString =@CsvColumnString
				
                END;

				IF @ImportHeadName = 'CustomerAddress' --AND @PortalId > 0 
                BEGIN
					EXEC Znode_ImportCustomerAddress
                        @TableName = @TableName,
                        @Status	 = @Status,
                        @UserId	 = @UserId,
						@LocaleId	 = @LocaleId,
						--@PortalId  = 7, -- not implemented from forntend 
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID	 = @NewGUID,
						@CsvColumnString =@CsvColumnString,
						@IsAccountAddress = @IsAccountAddress
				
                END;
				IF @ImportHeadName = 'ShippingAddress' --AND @PortalId > 0 
                BEGIN
					EXEC Znode_ImportCustomerAddress
                        @TableName = @TableName,
                        @Status	 = @Status,
                        @UserId	 = @UserId,
						@LocaleId	 = @LocaleId,
						--@PortalId  = 7, -- not implemented from forntend 
                        @ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID	 = @NewGUID,
						@CsvColumnString =@CsvColumnString,
						@IsAccountAddress = @IsAccountAddress
				
                END;
				IF @ImportHeadName = 'StoreLocator' --AND @PortalId > 0 
                BEGIN
					EXEC Znode_ImportStoreLocatorAddress
                        @TableName = @TableName,
                        @Status	 = @Status,
                        @UserId	 = @UserId,
						@ImportProcessLogId = @ImportProcessLogId,
                        @NewGUID	 = @NewGUID,
						@CsvColumnString =@CsvColumnString
                END;

			IF @ImportHeadName = 'Highlight'
			BEGIN
			EXEC Znode_ImportHighlight 
			@TableName = @TableName, 
			@Status = @Status, 
			@UserId = @UserId, 
			@ImportProcessLogId = @ImportProcessLogId, 
			@NewGUID = @NewGUID 
			END;

			IF @ImportHeadName = 'AddonAssociation'
			BEGIN
			EXEC Znode_ImportAddonAssociation 
			@TableName = @TableName, 
			@Status = @Status, 
			@UserId = @UserId, 
			@ImportProcessLogId = @ImportProcessLogId, 
			@NewGUID = @NewGUID,
			@PimCatalogId = @PimCatalogId
			END;

			IF @ImportHeadName = 'AttributeDefaultValue'
			BEGIN
			EXEC Znode_ImportAttributeDefaultValue 
			@TableName = @TableName, 
			@Status = @Status, 
			@UserId = @UserId, 
			@ImportProcessLogId = @ImportProcessLogId, 
			@NewGUID = @NewGUID
					
			END;

			IF @ImportHeadName = 'Voucher'
			BEGIN
				EXEC Znode_ImportVoucher 
				@TableName = @TableName, 
				@Status = @Status, 
				@UserId = @UserId, 
				@ImportProcessLogId = @ImportProcessLogId, 
				@NewGUID = @NewGUID
					
			END;

			IF @ImportHeadName = 'Account'
			BEGIN
						
				EXEC Znode_ImportAccount 
				@TableName = @TableName, 
				@Status = @Status, 
				@UserId = @UserId, 
				@ImportProcessLogId = @ImportProcessLogId, 
				@NewGUID = @NewGUID,
				@CsvColumnString = @CsvColumnString,
				@PortalId = @PortalId
					
			END;

			IF @ImportHeadName = 'Synonyms'
			BEGIN
				EXEC Znode_ImportSynonyms 
				@TableName = @TableName, 
				@Status = @Status, 
				@UserId = @UserId, 
				@ImportProcessLogId = @ImportProcessLogId, 
				@NewGUID = @NewGUID
			END

			IF @ImportHeadName = 'CatalogCategoryAssociation'
			BEGIN
				EXEC Znode_ImportCatalogCategoryHierarchyAssociation 
				@TableName = @TableName, 
				@Status = @Status, 
				@UserId = @UserId, 
				@ImportProcessLogId = @ImportProcessLogId, 
				@NewGUID = @NewGUID,
				@PimCatalogId = @PimCatalogId
			END
				 

            IF @ImportHeadName = 'Brands'
			BEGIN
				EXEC Znode_ImportBrands 
				@TableName = @TableName, 
				@Status = @Status, 
				@UserId = @UserId, 
				@ImportProcessLogId = @ImportProcessLogId, 
				@NewGUID = @NewGUID,
				@LocaleId	 = @LocaleId,
                @CsvColumnString = @CsvColumnString
			END;

			IF @ImportHeadName = 'Promotions'
			BEGIN
				EXEC Znode_ImportPromotions 
				@TableName = @TableName,
				@Status = @Status, 
				@UserId = @UserId, 
				@ImportProcessLogId = @ImportProcessLogId, 
				@NewGUID = @NewGUID,
				@LocaleId	 = @LocaleId,
                @CsvColumnString = @CsvColumnString,
				@PromotionTypeId = @PromotionTypeId
			END;
				 
        END
		ELSE 
			BEGIN
			-- Update Record count in log 	
			SET @SQLQuery = ' Select @FailedRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
			EXEC	sp_executesql @SQLQuery , N'@FailedRecordCount BIGINT out' , @FailedRecordCount =@FailedRecordCount out
			SELECT @SuccessRecordCount = 0
									
			UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
			WHERE ImportProcessLogId = @ImportProcessLogId;

			END

        EXEC Znode_ImportReadErrorLog
            @ImportProcessLogId = @ImportProcessLogId,
            @NewGUID = @NewGUID;
        DROP TABLE #GlobalTempTableColumns;

        -- Finally call product insert process if error not found in error log table 
        IF EXISTS
        (
            SELECT TOP 1 1
            FROM ZnodeImportLog
            WHERE ImportProcessLogId = @ImportProcessLogId
                AND Guid = @NewGUID
        )
            BEGIN

			SET @GetDate = dbo.Fn_GetDate();
            --Updating the import process status
			UPDATE ZnodeImportProcessLog
			SET Status = CASE WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
								WHEN ISNULL(FailedRecordcount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
								WHEN ISNULL(FailedRecordcount,0) > 0 AND ISNULL(FailedRecordcount,0) = ISNULL(TotalProcessedRecords,0) THEN dbo.Fn_GetImportStatus( 3 )
							END, 
				ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;
            END;
			SET @SQLQuery = 'IF Object_id(''+@TableName+'') IS NOT NULL  DROP TABLE ' + @TableName
            EXEC sys.sp_sqlexec @SQLQuery;

			print 'end';
    END TRY
    BEGIN CATCH
		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE()
		DECLARE @TempCount TABLE (Id INT)

		Declare @SQL Varchar(max) = 'Select Count(*) As Id From '+@TableName
		INSERT INTO @TempCount
		EXEC (@SQL)

			SELECT ERROR_MESSAGE(),
				ERROR_LINE(),
				ERROR_PROCEDURE();
			EXEC Znode_ImportReadErrorLog
				@ImportProcessLogId = @ImportProcessLogId,
				@NewGUID = @NewGUID; 
             
			---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		SET @SQLQuery = 'Drop Table ' + @TableName
		EXEC sys.sp_sqlexec @SQLQuery;
			--ROLLBACK TRAN TRN_ImportValidProductData;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportVoucher')
	DROP PROC Znode_ImportVoucher
GO

CREATE PROCEDURE [dbo].[Znode_ImportVoucher](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @PimCatalogId int= 0)
AS
	--------------------------------------------------------------------------------------
	-- Summary :  Import Attribute Code Name and their default input validation rule other 
	--			  flag will be inserted as default we need to modify front end
	
	-- Unit Testing: 

	--------------------------------------------------------------------------------------
BEGIN
	BEGIN TRAN Voucher;
	BEGIN TRY
		DECLARE @MessageDisplay nvarchar(100), @SSQL nvarchar(max);
		DECLARE @GetDate datetime= dbo.Fn_GetDate(), @LocaleId int  ;
		SELECT @LocaleId = DBO.Fn_GetDefaultLocaleId();
		-- Retrive RoundOff Value from global setting 

		DECLARE @InsertVoucherData TABLE
		( 
			RowId int IDENTITY(1, 1) PRIMARY KEY,RowNumber int, StoreCode varchar(400),VoucherName varchar(600), VoucherNumber varchar(600),
			VoucherAmount varchar(600),UserName varchar(600), ExpirationDate Datetime,IsActive varchar(100),RemainingAmount varchar(600),
			RestrictVoucherToACustomer varchar(100), StartDate datetime, GUID nvarchar(400)
		);
		
		SET @SSQL = 'Select RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
						IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID FROM '+@TableName;
		INSERT INTO @InsertVoucherData( RowNumber,StoreCode, VoucherName,VoucherNumber,VoucherAmount,UserName,ExpirationDate,
										IsActive,RemainingAmount,RestrictVoucherToACustomer,StartDate,GUID)
		EXEC sys.sp_sqlexec @SSQL;

		select ANZU.UserName, ANU.Id, ZU.UserId
		into #TempUserData
		from AspNetZnodeUser ANZU 
		inner join AspNetUsers ANU ON ANZU.AspNetZnodeUserId = ANU.UserName
		inner join ZnodeUser ZU ON ANU.Id = ZU.AspNetUserId

		select ZUP.PortalId, ZUP.UserId, ZP.StoreCode
		into #TempUserPortal
		from ZnodeUserPortal ZUP 
		INNER JOIN ZnodePortal ZP ON ZUP.PortalId = ZP.PortalId

		update @InsertVoucherData set VoucherNumber = [dbo].[Fn_RandomString](10)
		where isnull(ltrim(rtrim(VoucherNumber)),'') = ''

		-- Start Functional Validation 
		-----------------------------------------------
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '120', 'StoreCode', StoreCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE ii.StoreCode not in 
			   (
				   SELECT StoreCode FROM ZnodePortal 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE (ii.ExpirationDate < ii.StartDate OR ii.ExpirationDate < @GetDate)

		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '65', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertVoucherData AS ii
		--	   WHERE ii.ExpirationDate < @GetDate

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'StartDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.StartDate,'') = ''

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '8', 'ExpirationDate', StartDate, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE isnull(ii.ExpirationDate,'') = ''
		
		--INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		--	   SELECT '67', 'UserName', UserName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		--	   FROM @InsertVoucherData AS ii
		--	   WHERE isnull(ii.UserName,'') <> '' and not exists ( SELECT VoucherNumber FROM #TempUserData U where ii.UserName = U.UserName);
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '67', 'UserName', UserName, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii			 
			   WHERE isnull(ii.UserName,'') <> '' 
			   and not exists ( SELECT * FROM #TempUserData U   
			   inner join  #TempUserPortal UP on U.UserId = UP.UserId where  ii.UserName = U.UserName and ii.StoreCode = UP.StoreCode)
			 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '71', 'VoucherNumber', VoucherNumber, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @InsertVoucherData AS ii
			   WHERE len(ltrim(rtrim(ii.VoucherNumber))) <> 10 
	
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'IsActive', IsActive, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.IsActive not in ('True','1','Yes','FALSE','0','No','')
		
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'ExpirationDate', ExpirationDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.ExpirationDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '5', 'StartDate', StartDate, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE isdate(ii.StartDate) = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '69', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.VoucherAmount <> ii.RemainingAmount

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT '68', 'RestrictVoucherToACustomer', RestrictVoucherToACustomer, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			WHERE ii.RestrictVoucherToACustomer not in ('True','1','Yes','FALSE','0','No','')

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT distinct '2', 'VoucherAmount', VoucherAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii  
			CROSS APPLY ZnodeCulture b
			WHERE  VoucherAmount like '%[a-z]%' or VoucherAmount like '%'+b.Symbol+'%'
			and b.Symbol is not null 

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )  
			SELECT distinct '2', 'RemainingAmount', RemainingAmount, @NewGUId, RowNumber, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId  
			FROM @InsertVoucherData AS ii
			CROSS APPLY ZnodeCulture b
			WHERE  RemainingAmount like '%[a-z]%' or RemainingAmount like '%'+b.Symbol+'%'
			and b.Symbol is not null 


		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ VoucherName - ' + ISNULL(VoucherName,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @InsertVoucherData IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		-- End Function Validation 	
		-----------------------------------------------
		-- Delete Invalid Data after functional validatin  
		DELETE FROM @InsertVoucherData
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber is not null 
		);
		
		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @InsertVoucherData
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;
	
		UPDATE ZGC set ExpirationDate = ICD.ExpirationDate, UserId = ZU.UserId, ModifiedBy = @UserId, ModifiedDate = @GetDate, IsActive = ICD.IsActive,
				RemainingAmount = ICD.RemainingAmount, RestrictToCustomerAccount = ICD.RestrictVoucherToACustomer, Name = ICD.VoucherName, StartDate = ICD.StartDate
				
		from ZnodeGiftCard ZGC
		inner join @InsertVoucherData ICD ON ICD.VoucherNumber = ZGC.CardNumber
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode and ZGC.PortalId = ZP.PortalId
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName

		insert into ZnodeGiftCard(PortalId,Name,CardNumber,Amount,UserId,ExpirationDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,IsActive,RemainingAmount,RestrictToCustomerAccount,StartDate)
		select ZP.PortalId, ICD.VoucherName, ICD.VoucherNumber, ICD.VoucherAmount,ZU.UserId, ICD.ExpirationDate, @UserId, @Getdate, @UserId, @Getdate, ICD.IsActive, ICD.RemainingAmount, ICD.RestrictVoucherToACustomer, ICD.StartDate
		From @InsertVoucherData ICD 
		inner join ZnodePortal ZP ON ICD.StoreCode = ZP.StoreCode 
		left join #TempUserData ZU ON ICD.UserName = ZU.UserName
		where not exists(select * from ZnodeGiftCard ZGC where ICD.VoucherNumber = ZGC.CardNumber )

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN Voucher;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN Voucher

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		 DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportVoucher @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(max));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportVoucher',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportZipCode')
	DROP PROC Znode_ImportZipCode
GO

CREATE PROCEDURE [dbo].[Znode_ImportZipCode](
	  @TableName nvarchar(100), @Status bit OUT, @UserId int, @ImportProcessLogId int, @NewGUId nvarchar(200), @CountryCode nvarchar(100))
AS 
	
/*
	----Summary:  Import Zip Code data List 
    */

BEGIN
	BEGIN TRAN A;
	BEGIN TRY
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @sSql nvarchar(max);

		DECLARE @ZipCode TABLE
		( 
		   ZIPCode nvarchar(300)
		);
		INSERT INTO @ZipCode(ZIPCode)
			   SELECT ZIP
			   FROM ZnodeCity 


		DECLARE @Tlb_ZnodeCity TABLE
		( 
			[RowNumber] [int] NOT NULL, [CityName] [nvarchar](255) NULL, [CityType] [nvarchar](50) NULL, [ZIP] [nvarchar](50) NULL, [ZIPType] [nvarchar](50) NULL, [CountyCode] [varchar](255) NULL,  [StateCode] [nvarchar](255) NULL, [Latitude] [decimal](9, 6) NULL, [Longitude] [decimal](9, 6) NULL, [CountyFIPS] [varchar](50) NULL, [StateFIPS] [varchar](50) NULL, [MSACode] [varchar](50) NULL, [TimeZone] [varchar](50) NULL, [UTC] [decimal](3, 1) NULL, [DST] [char](1) NULL PRIMARY KEY([RowNumber])
		);
		SET @SSQL = 'Select CityName,CityType,ZIP,ZIPType,CountyCode,StateCode,Latitude,Longitude,CountyFIPS,StateFIPS,MSACode,TimeZone,UTC ,RowNumber FROM '+@TableName;
		INSERT INTO @Tlb_ZnodeCity( CityName, CityType, ZIP, ZIPType, CountyCode, StateCode, Latitude, Longitude, CountyFIPS, StateFIPS, MSACode, TimeZone, UTC, RowNumber )
		EXEC sys.sp_sqlexec @SSQL;
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '112', 'StateCode', StateCode, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			   FROM @Tlb_ZnodeCity
			   WHERE StateCode NOT IN
			   (
				   SELECT StateCode
				   FROM ZnodeState
				   WHERE CountryCode = @CountryCode
			   );

	   INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '53', 'ZIPCode', ZIP, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			  FROM @Tlb_ZnodeCity AS ii
			   WHERE ii.ZIP IN 
			   (
				   SELECT ZIP  FROM @Tlb_ZnodeCity  Group BY ZIP  HAVING COUNT(*) > 1 
			   );

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
			   SELECT '10', 'ZIPCode', ZIP, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
			  FROM @Tlb_ZnodeCity AS ii
			   WHERE ii.ZIP in 
			   (
				   SELECT ZIPCode FROM @ZipCode  where ZIPCode IS NOT NULL 
			   );

		UPDATE ZIL
			   SET ZIL.ColumnName =   ZIL.ColumnName + ' [ ZIPCode - ' + ISNULL(ZIP,'') + ' ] '
			   FROM ZnodeImportLog ZIL 
			   INNER JOIN @Tlb_ZnodeCity IPA ON (ZIL.RowNumber = IPA.RowNumber)
			   WHERE  ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL

		DELETE FROM @Tlb_ZnodeCity
		WHERE RowNumber IN
		(
			SELECT DISTINCT 
				   RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId  and RowNumber IS NOT NULL 
		);

		-- Update Record count in log 
        DECLARE @FailedRecordCount BIGINT
		DECLARE @SuccessRecordCount BIGINT
		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
		Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM @Tlb_ZnodeCity
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount ,
		TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0)) 
		WHERE ImportProcessLogId = @ImportProcessLogId;


		INSERT INTO ZnodeCity( CityName, CityType, ZIP, ZIPType, CountyCode, CountryCode, StateCode, Latitude, Longitude, CountyFIPS, StateFIPS, MSACode, TimeZone, UTC, DST, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
			   SELECT CityName, CityType, ZIP, ZIPType, [CountyCode], @CountryCode, StateCode, Latitude, Longitude, CountyFIPS, StateFIPS, MSACode, TimeZone, UTC, DST, 2, @GetDate, 2, @GetDate
			   FROM @Tlb_ZnodeCity AS tzc
			   WHERE NOT EXISTS
			   (
				   SELECT TOP 1 1
				   FROM ZnodeCity
				   WHERE  CountryCode = @CountryCode AND 
						  StateCode = tzc.StateCode AND 
						  CityName = TZC.CityName AND 
						  ZIP = TZC.ZIP
			   ) --AND 
					 --tzc.RowNumber =
			   --(
				  -- SELECT MAX(ii1.RowNumber)
				  -- FROM @Tlb_ZnodeCity AS ii1
				  -- WHERE ii1.StateCode = tzc.StateCode
			   --);
		UPDATE ZC
		  SET ZC.CityType = TZC.CityType, ZC.CountyCode = TZC.CountyCode, ZC.Latitude = TZC.Latitude, ZC.Longitude = TZC.Longitude, ZC.CountyFIPS = TZC.CountyFIPS, ZC.StateFIPS = TZC.StateFIPS, ZC.MSACode = TZC.MSACode, ZC.TimeZone = TZC.TimeZone, ZC.UTC = TZC.UTC, ZC.DST = TZC.DST, ZC.ModifiedBy = @UserId, ZC.ModifiedDate = @GetDate
		FROM ZnodeCity ZC
			 INNER JOIN
			 @Tlb_ZnodeCity TZC
			 ON ZC.CountryCode = @CountryCode AND 
				ZC.StateCode = TZC.StateCode AND 
				ZC.CityName = TZC.CityName AND 
				ZC.ZIP = TZC.ZIP;
		SET @Status = 1;
		
		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
							WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
							WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
						END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		-- COMMIT TRAN ImportProducts;
		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
	ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportZipCode @TableName = '+CAST(@TableName AS VARCHAR(max)) +',@Status='+ CAST(@Status AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',@CountryCode='+CAST(@CountryCode AS VARCHAR(max));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportZipCode',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		
	END CATCH;
END;



GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertSaveCartLineItemsForReOrder')
	DROP PROC Znode_InsertSaveCartLineItemsForReOrder
GO

CREATE PROCEDURE [dbo].[Znode_InsertSaveCartLineItemsForReOrder] 
(
	@OmsOrderId INT, 
	@OmsSavedCartId INT ,
	@UserId INT ,
	@OmsOrderLineItemsId INT = 0,
	@Status BIT = 0 OUT
)
AS 
BEGIN 
BEGIN TRY 
  SET NOCOUNT ON 
  DECLARE @TBL_ZnodeOmsSavedCartLineItem TABLE (OmsSavedCartLineItemId INT , RowId INT)
  DECLARE @GetDate DATETIME = dbo.FN_getDate() , @DefaultLocaleId INT = dbo.fn_getDefaultLocaleId ()
  DECLARE @AddOnOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Addons')

   DECLARE @BundleOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Bundles')

   DECLARE @GroupOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Group')
    DECLARE @versionId INT = (
    SELECT TOP 1 a.VersionId FROM  ZnodePublishVersionEntity a with(nolock) 
    INNER JOIN ZnodePortalCatalog b with(nolock) ON (b.PublishCatalogId = a.ZnodeCatalogId)
    INNER JOIN ZnodeOmsOrderDetails c with(nolock) ON (c.PortalId = b.PortalId)
    INNER JOIN ZnodeOmsOrder d with(nolock) ON (d.OmsOrderId = c.OmsOrderId AND (c.OmsOrderId = @OmsOrderId OR @OmsOrderId = 0  ) ) 
	INNER JOIN ZnodeOmsOrderLineItems f with(nolock) ON (f.OmsOrderDetailsId = c.OmsOrderDetailsId AND (f.OmsOrderLineItemsId = @OmsOrderLineItemsId OR @OmsOrderLineItemsId = 0 ) )
    WHERE a.LocaleId =@DefaultLocaleId
	AND a.RevisionType = (SELECT TOP 1 PublishStateCode FROM ZnodePublishState t WHERE t.PublishStateId = d.PublishStateId ) ) 

   DECLARE @OmsOrderStateId_RETURNED INT = (SELECT TOP 1 ZOOS.OmsOrderStateId FROM ZnodeOmsOrderState ZOOS WHERE ZOOS.OrderStateName = 'RETURNED')
   DECLARE @OmsOrderStateId_CANCELED INT = (SELECT TOP 1 ZOOS.OmsOrderStateId FROM ZnodeOmsOrderState ZOOS WHERE ZOOS.OrderStateName = 'CANCELED')

   CREATE TABLE #ZnodeOmsOrderLineItems_temp (OmsOrderLineItemsId INT ,ParentOmsOrderLineItemsId INT,OmsOrderDetailsId INT , SKU  NVARCHAr(2000),
   OrderLineItemRelationshipTypeID INT ,AutoAddonSKU NVARCHAR(400),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX),Custom3 NVARCHAR(MAX),Custom4 NVARCHAR(MAX)
   ,Custom5 NVARCHAR(MAX), GroupId nvarchar(MAX),ProductName NVARCHAr(2000), Description nvarchar(MAX),Quantity NUMERIC(28,6), ROWID INT, ParentRowID INT)

  IF EXISTS (SELECT TOP 1 OmsOrderDetailsId  FROM ZnodeOmsOrderDetails WHERE  OmsOrderId =  @OmsOrderId AND IsActive =1 )
  BEGIN 

	  ;WITH CTE_OrderData AS
	  (
		  SELECT MIN(ZOOLI.OmsOrderLineItemsId) AS OmsOrderLineItemsId, MIN(ZOOLI.ParentOmsOrderLineItemsId) AS ParentOmsOrderLineItemsId,ZOOLI.OmsOrderDetailsId,ZOOLI.SKU,ZOOLI.OrderLineItemRelationshipTypeID,ZOOLI.AutoAddonSKU,
			  ZOOLI.Custom1,ZOOLI.Custom2,ZOOLI.Custom3,ZOOLI.Custom4,
			  ZOOLI.Custom5,ZOOLI.GroupId,ZOOLI.ProductName,ZOOLI.Description,SUM(ZOOLI.Quantity) AS Quantity
		  FROM ZnodeOmsOrderLineItems ZOOLI WITH (NOLOCK)
		  INNER JOIN ZnodeOmsOrderDetails ZOOD WITH (NOLOCK) ON ZOOLI.OmsOrderDetailsId = ZOOD.OmsOrderDetailsId
		  WHERE  ZOOD.OmsOrderId =  @OmsOrderId AND ZOOD.IsActive =1 AND Exists(Select TOP 1 1 From ZnodePublishProductEntity ZPP With(NOLOCK) Where ZPP.SKU= ZOOLI.Sku AND ZPP.IsActive=1 AND ZPP.VersionId = @versionId)
  

		  AND CASE WHEN ZOOD.OmsOrderStateId = @OmsOrderStateId_CANCELED THEN 0 ELSE  ZOOLI.OrderLineItemStateId END  <> CASE WHEN ZOOD.OmsOrderStateId = @OmsOrderStateId_CANCELED THEN 1 ELSE  @OmsOrderStateId_RETURNED END 
		  GROUP BY ZOOLI.OmsOrderDetailsId,ZOOLI.SKU,ZOOLI.OrderLineItemRelationshipTypeID,ZOOLI.AutoAddonSKU,
			ZOOLI.Custom1,ZOOLI.Custom2,ZOOLI.Custom3,ZOOLI.Custom4, ZOOLI.Custom5,ZOOLI.GroupId,ZOOLI.ProductName,ZOOLI.Description
	  )
	  INSERT INTO #ZnodeOmsOrderLineItems_temp
	  SELECT *
		,Row_number()Over(Order By OmsOrderLineItemsId )  RowId, NULL ParentRowId
	  FROM CTE_OrderData
	  ORDER BY OmsOrderLineItemsId 
  END

  ELSE 
  BEGIN
		;WITH CTE_OrderData AS
		  (
			  SELECT MIN(OmsOrderLineItemsId) AS OmsOrderLineItemsId, MIN(ParentOmsOrderLineItemsId) AS ParentOmsOrderLineItemsId,
				  ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
				  ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4,
				  ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description,SUM(ZOO.Quantity) AS Quantity
			  FROM ZnodeOmsOrderLineItems ZOO WITH (NOLOCK)
			  WHERE ( ZOO.OmsOrderLineItemsId = @OmsOrderLineItemsId OR ZOO.ParentOmsOrderLineItemsId = @OmsOrderLineItemsId ) 
			  AND Exists(Select TOP 1 1 From ZnodePublishProductEntity ZPP With(NOLOCK) Where ZPP.SKU= ZOO.Sku AND ZPP.IsActive=1 AND ZPP.VersionId = @versionId)
			  AND NOT EXISTS(SELECT * FROM ZnodeOmsOrderState ZOOS WHERE ZOO.OrderLineItemStateId = ZOOS.OmsOrderStateId AND ZOOS.OrderStateName IN ( 'RETURNED'))
			  GROUP BY ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
				ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4, ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description
		 )
		 INSERT INTO #ZnodeOmsOrderLineItems_temp
		 SELECT *,Row_number()Over(Order By OmsOrderLineItemsId )   RowId, NULL ParentRowId
		 FROM CTE_OrderData

		INSERT INTO #ZnodeOmsOrderLineItems_temp 
		SELECT MIN(ZOO.OmsOrderLineItemsId) AS OmsOrderLineItemsId,MIN(ZOO.ParentOmsOrderLineItemsId) AS ParentOmsOrderLineItemsId,
		ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
		ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4,
		ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description,SUM(ZOO.Quantity) AS Quantity
		,0 RowId, NULL ParentRowId
		FROM ZnodeOmsOrderLineItems ZOO WITH (NOLOCK)
		WHERE ZOO.OmsOrderLineItemsId = (SELECT TOP 1 ParentOmsOrderLineItemsId FROM #ZnodeOmsOrderLineItems_temp TY WHERE TY.ParentOmsOrderLineItemsId IS NOT NULL 
		AND TY.OrderLineItemRelationshipTypeID <> @AddOnOrderLineItemRelationshipTypeId )
		AND ZOO.ParentOmsOrderLineItemsId  IS NULL
		AND NOT EXISTS(SELECT * FROM ZnodeOmsOrderState ZOOS WHERE OrderLineItemStateId = ZOOS.OmsOrderStateId AND ZOOS.OrderStateName IN ( 'RETURNED'))
		AND NOT EXISTS(SELECT * FROM #ZnodeOmsOrderLineItems_temp tem WHERE tem.OmsOrderLineItemsId = ZOO.OmsOrderLineItemsId )
		GROUP BY ZOO.OmsOrderDetailsId,ZOO.SKU,ZOO.OrderLineItemRelationshipTypeID,ZOO.AutoAddonSKU,
			ZOO.Custom1,ZOO.Custom2,ZOO.Custom3,ZOO.Custom4,ZOO.Custom5,ZOO.GroupId,ZOO.ProductName,ZOO.Description;

  END

     CREATE TABLE #TBL_OmsSavedCartOld (SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAR(MAX) )

	 CREATE TABLE #TBL_OmsSavedCartNew (SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAR(MAX) )

	 
	 SELECT SKU , OmsOrderLineItemsId, ParentOmsOrderLineItemsId, OrderLineItemRelationshipTypeID,Quantity 
	 INTO #ZnodeOmsSavedCartLineItemOld
	 FROM #ZnodeOmsOrderLineItems_temp a 

	 SELECT OmsOrderLineItemsId, PersonalizeCode, PersonalizeValue  
	 INTO #ZnodeOmsPersonalizeCartItemOld
	 FROM ZnodeOmsPersonalizeItem a WITH (NOLOCK)
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsOrderLineItems_temp t WHERE t.OmsOrderLineItemsId = a.OmsOrderLineItemsId)

	 SELECT SKU , OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OrderLineItemRelationshipTypeID, Quantity
	 INTO #ZnodeOmsSavedCartLineItemNew
	 FROM ZnodeOmsSavedCartLineItem a WITH (NOLOCK)
	 WHERE OmsSavedCartId = @OmsSavedCartId 


	 SELECT OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue   
	 INTO #ZnodeOmsPersonalizeCartItemNew
	 FROM ZnodeOmsPersonalizeCartItem a WITH (NOLOCK)
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)

	 INSERT INTO #TBL_OmsSavedCartOld (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	 SELECT SKU , OmsOrderLineItemsId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemOld TBL_B WHERE TBL_B.OmsOrderLineItemsId = ISNULL(TBL_A.ParentOmsOrderLineItemsId,0)  ) ParentSKU
				, ParentOmsOrderLineItemsId
	 FROM #ZnodeOmsSavedCartLineItemOld TBL_A
	 WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId

	 ;With Cte_UpdateOld AS 
	 (
		SELECT ParentOmsOrderLineItemsId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsOrderLineItemsId = a.ParentOmsOrderLineItemsId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsOrderLineItemsId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsOrderLineItemsId = a.ParentOmsOrderLineItemsId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemOld a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM #TBL_OmsSavedCartOld TBL_O 
	 INNER JOIN Cte_UpdateOld TBL_ON ON (TBL_ON.ParentOmsOrderLineItemsId  = TBL_O.OmsSavedCartLineItemId )

	  INSERT INTO #TBL_OmsSavedCartNew (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	  SELECT SKU , OmsSavedCartLineItemId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemNew TBL_B WHERE TBL_B.OmsSavedCartLineItemId = ISNULL( TBL_A.ParentOmsSavedCartLineItemId,0)   ) ParentSKU
				, ParentOmsSavedCartLineItemId
	  FROM #ZnodeOmsSavedCartLineItemNew TBL_A
	  WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId
	 
	 ;With Cte_UpdateNew AS 
	 (
		SELECT ParentOmsSavedCartLineItemId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsSavedCartLineItemId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemNew a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )	 
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM #TBL_OmsSavedCartNew TBL_O 
	 INNER JOIN Cte_UpdateNew TBL_ON ON (TBL_ON.ParentOmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )

	  UPDATE TBL_O
	  SET TBL_O.PersonalizeCode = SUBSTRING((SELECT ','+TBL_ON.PersonalizeCode FROM #ZnodeOmsPersonalizeCartItemNew TBL_ON WHERE TBL_ON.OmsSavedCartLineItemId  = TBL_O.ParentOmsSavedCartLineItemId   FOR XML PATH ('')),2,4000) 
		,TBL_O.PersonalizeValue =  SUBSTRING((SELECT ','+TBL_ON.PersonalizeValue FROM #ZnodeOmsPersonalizeCartItemNew TBL_ON WHERE TBL_ON.OmsSavedCartLineItemId  = TBL_O.ParentOmsSavedCartLineItemId   FOR XML PATH ('')),2,4000)  
	  FROM #TBL_OmsSavedCartNew TBL_O 
	

	  UPDATE TBL_O
	  SET TBL_O.PersonalizeCode = SUBSTRING((SELECT ','+TBL_ON.PersonalizeCode FROM #ZnodeOmsPersonalizeCartItemOld TBL_ON WHERE  TBL_ON.OmsOrderLineItemsId  = TBL_O.ParentOmsSavedCartLineItemId  FOR XML PATH ('')),2,4000)
		,TBL_O.PersonalizeValue =  SUBSTRING((SELECT ','+TBL_ON.PersonalizeValue FROM #ZnodeOmsPersonalizeCartItemOld TBL_ON WHERE  TBL_ON.OmsOrderLineItemsId  = TBL_O.ParentOmsSavedCartLineItemId  FOR XML PATH ('')),2,4000) 
	  FROM #TBL_OmsSavedCartOld TBL_O 

	  UPDATE a 
	  SET   a.PersonalizeCode = ISNULL((SELECT TOP 1 PersonalizeCode FROM #TBL_OmsSavedCartOld RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeCode)
	  ,a.PersonalizeValue = ISNULL((SELECT TOP 1 PersonalizeValue FROM #TBL_OmsSavedCartOld RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeValue)
	  FROM #TBL_OmsSavedCartOld a 
	  WHERE a.ParentOmsSavedCartLineItemId IS NOT NULL 

	  UPDATE a 
	  SET   a.PersonalizeCode = ISNULL((SELECT TOP 1 PersonalizeCode FROM #TBL_OmsSavedCartNew RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeCode)
	  ,a.PersonalizeValue = ISNULL((SELECT TOP 1 PersonalizeValue FROM #TBL_OmsSavedCartNew RT WHERE RT.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId  ),a.PersonalizeValue)
	  FROM #TBL_OmsSavedCartNew a 
	  WHERE a.ParentOmsSavedCartLineItemId IS NOT NULL 

	 UPDATE a 
	 SET  a.Quantity =  a.Quantity+d.Quantity 
	 FROM ZnodeOmsSavedCartLineItem a 
	 INNER JOIN #TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
	 INNER JOIN #TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
	 INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsOrderLineItemsId = c.OmsSavedCartLineItemId)

	 ;WITH CTE_UpdateOrder 
	 AS 
	 (
	   SELECT Sequence,  ROW_NUMBER()Over(order BY OmsSavedCartLineItemId ASC) RowId
	   FROM ZnodeOmsSavedCartLineItem WITH (NOLOCK)
	   WHERE  OmsSavedCartId = @OmsSavedCartId
	 
	 ) 
	 UPDATE CTE_UpdateOrder 
	 SET Sequence = RowId

		DECLARE @DeletedId TABLE (OmsSavedCartLineItemId INT )

	
		DELETE  FROM #ZnodeOmsOrderLineItems_temp OUTPUT DELETED.OmsOrderLineItemsId INTO @DeletedId WHERE OmsOrderLineItemsId IN (SELECT c.OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem a 
		INNER JOIN #TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		INNER JOIN #TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
		INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsOrderLineItemsId = c.OmsSavedCartLineItemId))


		DELETE FROM #ZnodeOmsOrderLineItems_temp WHERE ParentOmsOrderLineItemsId IN (SELECT OmsSavedCartLineItemId FROM @DeletedId)

		DELETE TR FROM #ZnodeOmsOrderLineItems_temp TR 
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsOrderLineItems_temp YU WHERE TR.OmsOrderLineItemsId = YU.ParentOmsOrderLineItemsId  ) 
		AND TR.ParentOmsOrderLineItemsId IS NULL 

		UPDATE B
		SET B.ParentRowID = A.ROWID
		FROM #ZnodeOmsOrderLineItems_temp A
		INNER JOIN #ZnodeOmsOrderLineItems_temp B ON A.OmsOrderLineItemsId = B.ParentOmsOrderLineItemsId
		WHERE A.ParentOmsOrderLineItemsId IS NULL

		UPDATE B
		SET B.ParentRowID = A.ParentRowID
		FROM #ZnodeOmsOrderLineItems_temp A
		INNER JOIN #ZnodeOmsOrderLineItems_temp B ON (A.OrderLineItemRelationshipTypeID=B.OrderLineItemRelationshipTypeID)
		WHERE A.ParentOmsOrderLineItemsId IS NOT NULL AND B.ParentRowID IS NULL

		UPDATE B
		SET B.ParentRowID = A.ROWID
		FROM #ZnodeOmsOrderLineItems_temp A
		INNER JOIN #ZnodeOmsOrderLineItems_temp B ON (A.OmsOrderLineItemsId=B.ParentOmsOrderLineItemsId AND B.OrderLineItemRelationshipTypeID IS NOT NULL)
		WHERE A.ParentOmsOrderLineItemsId IS NOT NULL AND B.ParentRowID IS NULL AND B.OrderLineItemRelationshipTypeID=@AddOnOrderLineItemRelationshipTypeId

	BEGIN TRANSACTION ReorderSaveCart
		INSERT INTO ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId,CustomText,CartAddOnDetails
											,Sequence,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AutoAddon,OmsOrderId,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId
											,ProductName,Description)
		OUTPUT INSERTED.OmsSavedCartLineItemId,INSERTED.Sequence INTO @TBL_ZnodeOmsSavedCartLineItem 
		SELECT NULL,@OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId,NULL CustomText, NULL CartAddOnDetails
											,RowId,@UserId,@GetDate,@UserId,@GetDate,AutoAddonSKU,NULL OmsOrderId,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId
											,ProductName,Description
		FROM #ZnodeOmsOrderLineItems_temp 
		ORDER BY OmsOrderLineItemsId 

		UPDATE ab 
		SET ab.ParentOmsSavedCartLineItemId = 
			(SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_ZnodeOmsSavedCartLineItem av WHERE av.RowId = b.ParentRowID)
		FROM ZnodeOmsSavedCartLineItem ab 
		INNER JOIN @TBL_ZnodeOmsSavedCartLineItem a ON (a.OmsSavedCartLineItemId = ab.OmsSavedCartLineItemId) 
		INNER JOIN #ZnodeOmsOrderLineItems_temp b ON  (b.RowId = a.RowId) 

		INSERT INTO ZnodeOmsPersonalizeCartItem (OmsSavedCartLineItemId,PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL)
		SELECT c.OmsSavedCartLineItemId,PersonalizeCode,PersonalizeValue,@UserId,@GetDate,@UserId,@GetDate,DesignId,ThumbnailURL
		FROM ZnodeOmsPersonalizeItem  a 
		INNER JOIN #ZnodeOmsOrderLineItems_temp b ON (a.OmsOrderLineItemsId = b.OmsOrderLineItemsId)
		INNER JOIN @TBL_ZnodeOmsSavedCartLineItem c ON (c.RowId = b.RowId)

		UPDATE ZOSCLI1 set Quantity = null
		from ZnodeOmsSavedCartLineItem ZOSCLI1
		where ParentOmsSavedCartLineItemId is null and OmsSavedCartId = @OmsSavedCartId
		and Quantity is not null
		and not exists(select * from ZnodeOmsSavedCartLineItem ZOSCLI where OrderLineItemRelationshipTypeId IN (@BundleOrderLineItemRelationshipTypeId,@GroupOrderLineItemRelationshipTypeId ) and ZOSCLI1.OmsSavedCartLineItemId = ZOSCLI.ParentOmsSavedCartLineItemId )

		--Update Qty for Parentlineitem except simple product
		UPDATE ZOSCLI
		SET Quantity = ZOSCLI.Quantity+Old.Quantity
		FROM ZnodeOmsSavedCartLineItem ZOSCLI
		INNER JOIN #ZnodeOmsSavedCartLineItemNew New ON (ZOSCLI.OmsSavedCartLineItemId = New.OmsSavedCartLineItemId)
		INNER JOIN #ZnodeOmsSavedCartLineItemOld Old ON (New.SKU = Old.SKU)
		WHERE ZOSCLI.ParentOmsSavedCartLineItemId IS NULL AND OmsSavedCartId = @OmsSavedCartId AND ZOSCLI.Quantity IS NOT NULL
	    --AND EXISTS(SELECT * FROM ZnodeOmsSavedCartLineItem ZOSCLI WHERE OrderLineItemRelationshipTypeId=@BundleOrderLineItemRelationshipTypeId)

		SET @GetDate = dbo.Fn_GetDate();

		UPDATE ZnodeOmsSavedCart
		SET ModifiedDate = @GetDate
		WHERE OmsSavedCartId = @OmsSavedCartId
	COMMIT TRANSACTION ReorderSaveCart
	SET @status = 1 
   
	END TRY 
	BEGIN CATCH 
		ROLLBACK TRANSACTION ReorderSaveCart
		SELECT ERROR_MESSAGE()
		SET @status = 0 

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertSaveCartLineItemsForReOrder @OmsOrderId = '+CAST(@OmsOrderId AS VARCHAR(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@OmsSavedCartId='+CAST(@OmsSavedCartId AS VARCHAR(50))+',@OmsOrderLineItemsId='+CAST(@OmsOrderLineItemsId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_InsertSaveCartLineItemsForReOrder',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
	END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateAttributeDefaultValue')
	DROP PROC Znode_InsertUpdateAttributeDefaultValue
GO

--CREATE TABLE ZnodePimAttributeDefaultXML 
--(
-- PimAttributeDefaultXMLId INT IDENTITY(1,1) CONSTRAINT PK_ZnodePimAttributeDefaultXML PRIMARY KEY 
-- ,PimAttributeDefaultValueId INT 
-- ,AttributeDefaultValueCode VARCHAr(300)
-- ,DefaultValueXML NVARCHAR(4000)
-- ,LocaleId		  INT
-- ,CreatedBy    INT NOT NULL 
-- ,CreatedDate  DATETIME NOT NULL 
-- ,ModifiedBy   INT NOT NULL 
-- ,ModifiedDate DATETIME NOT NULL 
--)


CREATE PROCEDURE [dbo].[Znode_InsertUpdateAttributeDefaultValue] 
(
@PimAttributeDefaultValueId INT
 )
AS
BEGIN 
 BEGIN TRY 
    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	;With Cte_DefaultValue AS
	(
	SELECT ZPADV.PimAttributeDefaultValueId,ZPADV.AttributeDefaultValueCode,ZPADVL.AttributeDefaultValue,ZPADV.DisplayOrder,ZPADV.IsEditable,ZPADV.SwatchText,ZM.[Path],LocaleId 
	FROM ZnodePimAttributeDefaultValue ZPADV 
	INNER JOIN ZnodePimAttributeDefaultValueLocale ZPADVL ON (ZPADVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId )
	LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPADV.MediaId)
	)
    
	MERGE INTO ZnodePimAttributeDefaultXML TARGET
    USING (SELECT PimAttributeDefaultValueId,AttributeDefaultValueCode,'<SelectValuesEntity>'+'<Value>'+ISNULL((SELECT ''+AttributeDefaultValue FOR XML PATH('')),'')+'</Value>'+'<Code>'
	+ISNULL(AttributeDefaultValueCode,'')+'</Code>'+'<Path>'+ISNULL([Path],'')+'</Path>'+'<SwatchText>'+ISNULL(SwatchText,'')+'</SwatchText>'+'<DisplayOrder>'+CAST(ISNULL(DisplayOrder,0) AS VARCHAR(50))
	+'</DisplayOrder>'+'</SelectValuesEntity>' AttributeValue ,LocaleId 
	FROM Cte_DefaultValue ) SOURCE 
	ON (
	    TARGET.PimAttributeDefaultValueId = SOURCE.PimAttributeDefaultValueId
		AND TARGET.LocaleId = SOURCE.LocaleId 
	)
	WHEN MATCHED THEN 
	UPDATE 
	SET 
	   TARGET.DefaultValueXML = SOURCE.AttributeValue
	   ,TARGET.LocaleId = SOURCE.LocaleId
	   ,ModifiedDate = @GetDate
	WHEN NOT MATCHED THEN 
	INSERT (PimAttributeDefaultValueId
			,AttributeDefaultValueCode
			,DefaultValueXML
			,LocaleId
			,CreatedBy
			,CreatedDate
			,ModifiedBy
			,ModifiedDate)
	VALUES ( SOURCE.PimAttributeDefaultValueId
			,SOURCE.AttributeDefaultValueCode
			,SOURCE.AttributeValue
			,SOURCE.LocaleId
			,2
			,@GetDate
			,2
			,@GetDate);
			
 END TRY 
 BEGIN CATCH 
 SELECT ERROR_MESSAGE()
 END CATCH 

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateAttributeDefaultValueJson')
	DROP PROC Znode_InsertUpdateAttributeDefaultValueJson
GO

CREATE  PROCEDURE [dbo].[Znode_InsertUpdateAttributeDefaultValueJson] 
(
@PimAttributeDefaultValueId INT
 )
AS
BEGIN 
 BEGIN TRY 
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
    
	SELECT ZPADV.PimAttributeDefaultValueId,ZPADV.AttributeDefaultValueCode,ZPADVL.AttributeDefaultValue,ZPADV.DisplayOrder,ZPADV.IsEditable,ZPADV.SwatchText,ZM.[Path],LocaleId 
	into #TBL_DefaultValue FROM ZnodePimAttributeDefaultValue ZPADV 
	INNER JOIN ZnodePimAttributeDefaultValueLocale ZPADVL ON (ZPADVL.PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId )
	LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPADV.MediaId)
    
	MERGE INTO ZnodePimAttributeDefaultJson TARGET
    USING (
	
	--SELECT PimAttributeDefaultValueId,AttributeDefaultValueCode,
	
	--'<SelectValuesEntity>'
	--+'<Value>'+ISNULL((SELECT ''+AttributeDefaultValue FOR XML PATH('')),'')+'</Value>'
	--+'<Code>'+ISNULL(AttributeDefaultValueCode,'')+'</Code>'
	--+'<Path>'+ISNULL([Path],'')+'</Path>'
	--+'<SwatchText>'+ISNULL(SwatchText,'')+'</SwatchText>'
	--+'<DisplayOrder>'+CAST(ISNULL(DisplayOrder,0) AS VARCHAR(50))	+'</DisplayOrder>'+
	--'</SelectValuesEntity>' AttributeValue ,
	
	--LocaleId 
	--FROM Cte_DefaultValue
		select  B.PimAttributeDefaultValueId AS PimAttributeDefaultValueId ,  B.AttributeDefaultValueCode AS AttributeDefaultValueCode,B.LocaleId,  
		(select 
		A.AttributeDefaultValueCode AS 'Code', 
		Isnull(A.LocaleId,0 ) 'LocaleId',
		A.AttributeDefaultValue 'Value',
		A.AttributeDefaultValue 'AttributeDefaultValue',
		Isnull(A.DisplayOrder,0)  'DisplayOrder',
		Isnull(A.IsEditable,'false') 'IsEditable',
		A.SwatchText  AS 'SwatchText',
		A.Path  AS 'Path'
		from #TBL_DefaultValue A  where 
		A.PimAttributeDefaultValueId = B.PimAttributeDefaultValueId  and A.AttributeDefaultValueCode = B.AttributeDefaultValueCode and 
		A.LocaleId = B.LocaleId
		For JSON path ,WITHOUT_ARRAY_WRAPPER
		) 
		as AttributeValue
		from #TBL_DefaultValue B 


	 ) SOURCE 
	ON (
	    TARGET.PimAttributeDefaultValueId = SOURCE.PimAttributeDefaultValueId
		AND TARGET.LocaleId = SOURCE.LocaleId 
	
	)
	WHEN MATCHED THEN 
	UPDATE 
	SET 
	   TARGET.DefaultValueJSON = SOURCE.AttributeValue
	   ,TARGET.LocaleId = SOURCE.LocaleId
	   ,ModifiedDate = @GetDate
	WHEN NOT MATCHED THEN 
	INSERT (PimAttributeDefaultValueId
			,AttributeDefaultValueCode
			,DefaultValueJSON
			,LocaleId
			,CreatedBy
			,CreatedDate
			,ModifiedBy
			,ModifiedDate)
	VALUES ( SOURCE.PimAttributeDefaultValueId
			,SOURCE.AttributeDefaultValueCode
			,SOURCE.AttributeValue
			,SOURCE.LocaleId
			,2
			,@GetDate
			,2
			,@GetDate);
			
 END TRY 
 BEGIN CATCH 
 SELECT ERROR_MESSAGE()
 END CATCH 

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateCustomeFieldJson')
	DROP PROC Znode_InsertUpdateCustomeFieldJson
GO


CREATE Procedure [dbo].[Znode_InsertUpdateCustomeFieldJson] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
    
	;With Cte_CustomeAttributeValue AS
	(
			

				SELECT ZPCF.PimProductId, ZPCF.CustomCode,
				( Select  ZPCF.CustomCode AS 'AttributeCode', 
					ZPCFL1.CustomKey AS AttributeName, 
					ZPCFL1.CustomKeyValue AS AttributeValues,
					'false' AS IsUseInSearch  ,
					'false' AS IsHtmlTags,
					'false' AS IsComparable, 
					'false' AS IsFacets,
					'Text Area' AS AttributeTypeName,
					'false' AS IsPersonalizable,
					'True' AS IsCustomField,
					'false' AS IsConfigurable,
					'false' AS IsSwatch,
				Isnull(DisplayOrder,0) AS DisplayOrder
			from ZnodePimCustomFieldLocale ZPCFL1 where (ZPCFL1.PimCustomFieldId = ZPCF.PimCustomFieldId)
			For Json Path,WITHOUT_ARRAY_WRAPPER
			)  AS AttributeValue ,ZPCFL.LocaleId  
			FROM ZnodePimCustomField ZPCF Inner join ZnodePimCustomFieldLocale ZPCFL  On ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId
	)

  MERGE INTO ZnodePimCustomeFieldJSON TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledJson = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = @GetDate

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledJson
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,@GetDate
				,2
				,@GetDate)
				WHEN NOT MATCHED BY SOURCE THEN 
	DELETE;

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateCustomeFieldXML')
	DROP PROC Znode_InsertUpdateCustomeFieldXML
GO

CREATE Procedure [dbo].[Znode_InsertUpdateCustomeFieldXML] 
(
 @PimProductId VARCHAR(2000)
)
AS
BEGIN 
  BEGIN TRY 
    DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

	;With Cte_CustomeAttributeValue AS
	(

			SELECT PimProductId ,ZPCF.CustomCode,'<AttributeCode>'+ISNULL((SELECT ''+ZPCF.CustomCode FOR XML PATH('')),'') +'</AttributeCode>'+'<AttributeName>'+ISNULL((SELECT ''+ZPCFL.CustomKey FOR XML PATH('')),'')+'</AttributeName>'
			+'<AttributeValues>'+ISNULL((SELECT ''+ZPCFL.CustomKeyValue FOR XML PATH('')),'')+'</AttributeValues>'+'<IsUseInSearch>0</IsUseInSearch>
			<IsHtmlTags>0</IsHtmlTags>
			<IsComparable>0</IsComparable>
			<IsFacets>0</IsFacets>
			<AttributeTypeName>Text Area</AttributeTypeName>
			<IsPersonalizable>0</IsPersonalizable>
			<IsCustomField>1</IsCustomField>
			<IsConfigurable>0</IsConfigurable>
			<IsSwatch>0</IsSwatch>
			<DisplayOrder>'+Convert(nvarchar(100),Isnull(DisplayOrder,0))+'</DisplayOrder>
			' AttributeValue,ZPCFL.LocaleId 
			FROM ZnodePimCustomField ZPCF
			INNER JOIN ZnodePimCustomFieldLocale ZPCFL ON (ZPCFL.PimCustomFieldId = ZPCF.PimCustomFieldId) 
	)

  MERGE INTO ZnodePimCustomeFieldXML TARGET
  USING Cte_CustomeAttributeValue SOURCE 
  ON (TARGET.PimProductId = SOURCE.PimProductId
    AND  TARGET.LocaleId = SOURCE.LocaleId
	AND TARGET.CustomCode = SOURCE.CustomCode
  )
  WHEN MATCHED THEN 
  UPDATE 
   SET TARGET.CustomeFiledXML = SOURCE.AttributeValue
       ,TARGET.ModifiedBy      = 2 
	   ,TARGET.ModifiedDAte   = @GetDate

  WHEN NOT MATCHED THEN 
  INSERT (PimProductId
				,CustomCode
				,CustomeFiledXML
				,LocaleId
				,CreatedBy
				,CreatedDate
				,ModifiedBy
				,ModifiedDate)
				  VALUES (SOURCE.PimProductId
				  ,SOURCE.CustomCode
				,Source.AttributeValue
				,SOURCE.LocaleId
				,2
				,@GetDate
				,2
				,@GetDate)
				WHEN NOT MATCHED BY SOURCE THEN 
	DELETE;

  END TRY 
  BEGIN CATCH 
  SELECT ERROR_MESSAGE()
  END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateGlobalEntityMapper')
	DROP PROC Znode_InsertUpdateGlobalEntityMapper
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateGlobalEntityMapper]  
(  
	@EntiryMapper XML,  
	@UserId INT,  
	@Action nvarchar(50),  
	@Status INT = 0 OUT    
)  
AS  
BEGIN  
 BEGIN TRY    
 BEGIN TRAN SaveOrUpdateEntityMapper;   
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate()
	DECLARE @GlobalEntityId INT;

	IF OBJECT_ID('tempdb..#EntityMapper') IS NOT NULL     
	DROP TABLE #EntityMapper  
    
	--Getting xml data into table    
	SELECT     
	Tbl.Col.value ('GlobalAttributeId[1]' , 'INT') AS AttributeFamilyId,   
	Tbl.Col.value ('GlobalAttributeGroupId[1]' , 'INT') AS AttributeGroupId,    
	Tbl.Col.value ('AttributeDisplayOrder[1]' , 'INT') AS GroupDisplayOrder  
	INTO #EntityMapper    
	FROM @EntiryMapper.nodes ( '//ArrayOfGlobalAttributeGroupMapperModel/GlobalAttributeGroupMapperModel'  ) AS Tbl(Col)   

	SELECT @GlobalEntityId=GlobalEntityId
	FROM ZnodeGlobalAttributeFamily
	WHERE GlobalAttributeFamilyId=(SELECT DISTINCT AttributeFamilyId FROM #EntityMapper);
  
	IF @action='Insert'  
	BEGIN  
		INSERT INTO ZnodeGlobalFamilyGroupMapper(GlobalAttributeFamilyId,GlobalAttributeGroupId,AttributeGroupDisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
		SELECT AttributeFamilyId,AttributeGroupId,GroupDisplayOrder,@UserId,@GetDate,@UserId,@GetDate 
		FROM #EntityMapper hmapper
		LEFT JOIN ZnodeGlobalFamilyGroupMapper tmapper ON hmapper.AttributeFamilyId=tmapper.GlobalAttributeFamilyId AND hmapper.AttributeGroupId=tmapper.GlobalAttributeGroupId
		WHERE tmapper.GlobalAttributeFamilyId is null and tmapper.GlobalAttributeGroupId is null;
  
		INSERT INTO ZnodeGlobalGroupEntityMapper(GlobalEntityId,GlobalAttributeGroupId,AttributeGroupDisplayOrder,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)  
		SELECT @GlobalEntityId,AttributeGroupId,GroupDisplayOrder,@UserId,@GetDate,@UserId,@GetDate  
		FROM #EntityMapper;
		SET @Status = 1  
		SELECT 1 AS ID,CAST(@Status AS BIT) AS Status;     
	END  
	IF @action='Update'  
	BEGIN   
		UPDATE ZnodeGlobalFamilyGroupMapper SET AttributeGroupDisplayOrder=hmapper.GroupDisplayOrder,ModifiedBy=@UserId,ModifiedDate=@GetDate
		FROM ZnodeGlobalFamilyGroupMapper tmapper  
		INNER JOIN #EntityMapper hmapper on tmapper.GlobalAttributeFamilyId=hmapper.AttributeFamilyId AND tmapper.GlobalAttributeGroupId=hmapper.AttributeGroupId  
		--WHERE tmapper.GlobalAttributeFamilyId=hmapper.AttributeFamilyId AND tmapper.GlobalAttributeGroupId=hmapper.AttributeGroupId  
  
		UPDATE ZnodeGlobalGroupEntityMapper SET AttributeGroupDisplayOrder=hmapper.GroupDisplayOrder,ModifiedBy=@UserId,ModifiedDate=@GetDate FROM ZnodeGlobalGroupEntityMapper tmapper  
		INNER JOIN #EntityMapper hmapper on tmapper.GlobalEntityId=hmapper.AttributeFamilyId AND tmapper.GlobalAttributeGroupId=hmapper.AttributeGroupId  
		--WHERE tmapper.GlobalEntityId=hmapper.AttributeFamilyId AND tmapper.GlobalAttributeGroupId=hmapper.AttributeGroupId  
		SET @Status = 1  
		SELECT 1 AS ID,CAST(@Status AS BIT) AS Status;     
	END  
COMMIT TRAN SaveOrUpdateEntityMapper;  
END TRY    
BEGIN CATCH                      
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),    
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_SaveOrUpdateEntityMapper @entiryMapper = '+ cast(@entiryMapper as varchar(2000));    
	SET @Status = 0                  
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                        
	ROLLBACK TRAN SaveOrUpdateEntityMapper;       
	EXEC Znode_InsertProcedureErrorLog    
	@ProcedureName = 'Znode_SaveOrUpdateEntityMapper',    
	@ErrorInProcedure = @Error_procedure,    
	@ErrorMessage = @ErrorMessage,    
	@ErrorLine = @ErrorLine,    
	@ErrorCall = @ErrorCall;    
END CATCH;    
  
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateOmsOrder')
	DROP PROC Znode_InsertUpdateOmsOrder
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateOmsOrder]
(
	@OrderXML XML,
	@UserId INT
)
AS
BEGIN
SET NOCOUNT ON;
BEGIN TRY

	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @OMSOrder TABLE(OmsOrderId INT,OrderNumber VARCHAR(200))
	DECLARE @OMSOrderDetail TABLE(OmsOrderId INT,OmsOrderDetailsId INT)
	DECLARE @OmsOrderLineItems TABLE(RowId INT IDENTITY(1,1),OmsOrderDetailsId INT,OmsOrderLineItemsId INT, Sku VARCHAR(600), ParentOmsOrderLineItemsId INT, GroupId NVARCHAR(MAX),OrderLineItemRelationshipTypeId INT,ParentSku VARCHAR(600), GroupIdentifier INT)
	DECLARE @OmsParentOrderLineItems TABLE(RowId INT IDENTITY(1,1),OmsOrderDetailsId INT,OmsOrderLineItemsId INT, Sku VARCHAR(600), ParentOmsOrderLineItemsId INT, GroupId NVARCHAR(MAX), OrderLineItemRelationshipTypeId INT, GroupIdentifier INT)

	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'AddOns'
	);

	DECLARE @OrderLineItemRelationshipTypeIdSimple int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Simple'
	);

	DECLARE @OrderLineItemRelationshipTypeIdBundles int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Bundles'
	);

	DECLARE @OrderLineItemRelationshipTypeIdGroup int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Group'
	);

	DECLARE @OrderLineItemRelationshipTypeIdConfig int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Configurable'
	);


	CREATE TABLE #TempOrderData
	(
		RowId INT IDENTITY(1,1),OrderNumber VARCHAR(200), PublishStateId INT,OmsOrderId INT,OmsOrderStateId INT,
		DiscountAmount NUMERIC(28,6),SalesTax NUMERIC(28,6),TaxRate NUMERIC(28,6),IsOldOrder BIT,VAT NUMERIC(28,6),GST NUMERIC(28,6),
		PST NUMERIC(28,6),HST NUMERIC(28,6),Total NUMERIC(28,6),BillingAddressId INT,ShippingAddressId INT,ShippingId INT,
		PortalId INT,ShippingNumber NVARCHAR(max),TrackingNumber NVARCHAR(1000),CouponCode NVARCHAR(1000),
		PromoDescription NVARCHAR(max),ReferralUserId int,PurchaseOrderNumber NVARCHAR(1000),OmsPaymentStateId int,
		WebServiceDownloadDate datetime,PaymentSettingId int,PaymentTransactionToken NVARCHAR(600),ShipDate datetime,ReturnDate datetime,
		AddressId int,PoDocument NVARCHAR(600),IsActive bit,ExternalId NVARCHAR(1000),PaymentTypeId INT,CreatedBy INT,CreatedDate datetime,ModifiedBy INT,
		ModifiedDate datetime,CreditCardNumber VARCHAR(4),IsShippingCostEdited bit,IsTaxCostEdited bit,ShippingDifference NUMERIC(28,6),
		EstimateShippingCost NUMERIC(28,6),TransactionId NVARCHAR(800),Custom1 NVARCHAR(MAX),Custom2 NVARCHAR(MAX),Custom3 NVARCHAR(MAX),
		Custom4 NVARCHAR(MAX),Custom5 NVARCHAR(MAX),FirstName NVARCHAR(200),LastName NVARCHAR(200),CardType VARCHAR(50),CreditCardExpMonth INT,
		CreditCardExpYear INT,TotalAdditionalCost NUMERIC(28,6),PaymentDisplayName NVARCHAR(2000),PaymentExternalId NVARCHAR(2000),
		CultureCode VARCHAR(200),DisplayName NVARCHAR(2000),InHandDate datetime,IpAddress VARCHAR(100),JobName NVARCHAR(200),
		ShippingConstraintCode NVARCHAR(100),ShippingDiscount NUMERIC(28,6),ShippingHandlingCharges NUMERIC(28,6),ReturnCharges NUMERIC(28,6),
		IsCalculateTaxAfterDiscount bit,Email VARCHAR(50),PhoneNumber VARCHAR(50),OrderTotalWithoutVoucher NUMERIC(28,6),ImportDuty NUMERIC(28,6),
		TaxCost NUMERIC(28,6),ShippingCost NUMERIC(28,6), SubTotal NUMERIC(28,6),CurrencyCode VARCHAR(100),OverDueAmount NUMERIC(28,6), ShippingTypeId INT,
		AccountNumber NVARCHAR(4000),ShippingMethod NVARCHAR(4000),PaymentCode NVARCHAR(400) ,PaymentStatusId Int, RemainingOrderAmount NUMERIC(28,6),AvataxIsSellerImporterOfRecord bit,
		AccountId INT
	)

	CREATE TABLE #TempOrderBillingAddress
	(
		AddressId INT,BillingFirstName VARCHAR(300),BillingLastName VARCHAR(300),BillingCountry VARCHAR(3000),BillingStateCode VARCHAR(300),
		BillingPostalCode VARCHAR(50),BillingPhoneNumber VARCHAR(50),BillingEmailId VARCHAR(50),BillingStreet1 VARCHAR(300),BillingStreet2 VARCHAR(300),
		BillingCity VARCHAR(3000),BillingCompanyName NVARCHAR(1200)
	)
	
	CREATE TABLE #TempParentLineItemDetails
	(
		RowId INT IDENTITY(1,1),OrderLineItemRelationshipTypeId INT,OmsOrderDetailsId INT,OmsOrderShipmentId INT,RmaReasonForReturnId INT,Sku NVARCHAR(600),ProductName NVARCHAR(1000),
		Description NVARCHAR(max),Quantity NUMERIC(28,6),Price NUMERIC(28,6),Weight NUMERIC(28,6),DownloadLink NVARCHAR(max),DiscountAmount NUMERIC(28,6),
		ShipSeparately bit,ShipDate datetime,ReturnDate datetime,ShippingCost NUMERIC(28,6),PromoDescription NVARCHAR(max),TransactionNumber NVARCHAR(max),
		PaymentStatusId int,TrackingNumber NVARCHAR(max),IsAutoGeneratedTracking bit,OrderLineItemStateId int,IsRecurringBilling bit,RecurringBillingPeriod NVARCHAR(100),
		RecurringBillingCycles int,RecurringBillingFrequency NVARCHAR(100),RecurringBillingAmount NUMERIC(28,6),AppliedPromo NVARCHAR(max),CouponsApplied NVARCHAR(100),
		ExternalId NVARCHAR(1000),IsActive bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,AutoAddonSKU NVARCHAR(max),IsShippingReturn bit,
		PartialRefundAmount NUMERIC(28,6),Custom1 NVARCHAR(max),Custom2 NVARCHAR(max),Custom3 NVARCHAR(max),Custom4 NVARCHAR(max),Custom5 NVARCHAR(max),
		GroupId NVARCHAR(max),BundleQuantity int, TaxRuleId INT,TaxTransactionNumber NVARCHAR(1200),Comments NVARCHAR(MAX),SalesTax NUMERIC(28,6),VAT NUMERIC(28,6),
		GST NUMERIC(28,6),PST NUMERIC(28,6),HST NUMERIC(28,6),ImportDuty NUMERIC(28,6), GroupIdentifier INT
	)

	CREATE TABLE #TempChildLineItemDetails
	(
		RowId INT IDENTITY(1,1),OrderLineItemRelationshipTypeId INT,OmsOrderDetailsId INT,OmsOrderShipmentId INT,RmaReasonForReturnId INT,Sku NVARCHAR(600),ProductName NVARCHAR(1000),
		Description NVARCHAR(max),Quantity NUMERIC(28,6),Price NUMERIC(28,6),Weight NUMERIC(28,6),DownloadLink NVARCHAR(max),DiscountAmount NUMERIC(28,6),
		ShipSeparately bit,ShipDate datetime,ReturnDate datetime,ShippingCost NUMERIC(28,6),PromoDescription NVARCHAR(max),TransactionNumber NVARCHAR(max),
		PaymentStatusId int,TrackingNumber NVARCHAR(max),IsAutoGeneratedTracking bit,OrderLineItemStateId int,IsRecurringBilling bit,RecurringBillingPeriod NVARCHAR(100),
		RecurringBillingCycles int,RecurringBillingFrequency NVARCHAR(100),RecurringBillingAmount NUMERIC(28,6),AppliedPromo NVARCHAR(max),CouponsApplied NVARCHAR(100),
		ExternalId NVARCHAR(1000),IsActive bit,CreatedBy int,CreatedDate datetime,ModifiedBy int,ModifiedDate datetime,AutoAddonSKU NVARCHAR(max),IsShippingReturn bit,
		PartialRefundAmount NUMERIC(28,6),Custom1 NVARCHAR(max),Custom2 NVARCHAR(max),Custom3 NVARCHAR(max),Custom4 NVARCHAR(max),Custom5 NVARCHAR(max),
		GroupId NVARCHAR(max),BundleQuantity int, TaxRuleId INT,TaxTransactionNumber NVARCHAR(1200),Comments NVARCHAR(MAX),SalesTax NUMERIC(28,6),VAT NUMERIC(28,6),
		GST NUMERIC(28,6),PST NUMERIC(28,6),HST NUMERIC(28,6),ImportDuty NUMERIC(28,6), ParentSku NVARCHAR(600), GroupIdentifier INT
	)

	CREATE TABLE #TempOrderAttribute
	(
		AttributeCode NVARCHAR(1000),AttributeValue NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,
		ModifiedDate DATETIME,AttributeValueCode NVARCHAR(1000), Sku VARCHAR(600), GroupId NVARCHAR(max), GroupIdentifier INT
	)

	CREATE TABLE #OmsPersonalizeItem
	(
		PersonalizeCode NVARCHAR(400),PersonalizeValue NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,ModifiedBy INT,
		ModifiedDate DATETIME,DesignId NVARCHAR(4000),ThumbnailURL NVARCHAR(MAX), Sku VARCHAR(600), GroupId NVARCHAR(max),
		GroupIdentifier INT
	)

	CREATE TABLE #OmsOrderDiscount
	(
		OmsDiscountTypeId INT,DiscountCode VARCHAR(MAX),DiscountAmount NUMERIC(28,6),Description NVARCHAR(MAX),CreatedBy INT,CreatedDate DATETIME,
		ModifiedBy INT,ModifiedDate DATETIME,PerQuantityDiscount NUMERIC(28,6),DiscountMultiplier NUMERIC(28,6),ParentOmsOrderLineItemsId INT,
		DiscountLevelTypeId INT,PromotionName NVARCHAR(1200),PromotionTypeId INT,DiscountAppliedSequence INT,PromotionMessage NVARCHAR(MAX),Sku VARCHAR(600),
		GroupId NVARCHAR(max)
	)

	--------Getting Order details
	INSERT INTO #TempOrderData
	(
		OrderNumber, PublishStateId ,OmsOrderId ,OmsOrderStateId ,DiscountAmount ,SalesTax ,TaxRate ,IsOldOrder ,
		VAT ,GST ,PST ,HST ,Total ,BillingAddressId ,ShippingAddressId ,ShippingId ,PortalId,
		ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId
		,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,AddressId,PoDocument,IsActive
		,ExternalId,PaymentTypeId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited
		,ShippingDifference,EstimateShippingCost,TransactionId,Custom1,Custom2,Custom3,Custom4,Custom5,FirstName,LastName
		,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName,PaymentExternalId,CultureCode
		,DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges
		,IsCalculateTaxAfterDiscount,Email,PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,TaxCost,ShippingCost, SubTotal,
		CurrencyCode,OverDueAmount, ShippingTypeId, AccountNumber, ShippingMethod, PaymentCode, PaymentStatusId,RemainingOrderAmount,AvataxIsSellerImporterOfRecord
		,AccountId
	)
	SELECT
		CASE WHEN Tbl.Col.value( 'OrderNumber[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderNumber[1]', 'NVARCHAR(Max)' ) END  AS OrderNumber,
		CASE WHEN Tbl.Col.value( 'PublishStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PublishStateId[1]', 'NVARCHAR(Max)' ) END AS PublishStateId,
		CASE WHEN Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderId,
		CASE WHEN Tbl.Col.value( 'OmsOrderStateId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderStateId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderStateId,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		CASE WHEN Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE  Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) END AS SalesTax,
		CASE WHEN Tbl.Col.value( 'TaxRate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'TaxRate[1]', 'NVARCHAR(Max)' ) END AS TaxRate,
		CASE WHEN Tbl.Col.value('IsOldOrder[1]', 'NVARCHAR(2000)') = '' THEN NULL ELSE Tbl.Col.value('IsOldOrder[1]', 'NVARCHAR(2000)') END AS IsOldOrder,
		CASE WHEN Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE  Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) END AS VAT,
		CASE WHEN Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) END AS GST,
		CASE WHEN Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) END  AS PST,
		CASE WHEN Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) END AS HST,
		CASE WHEN Tbl.Col.value( 'Total[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Total[1]', 'NVARCHAR(Max)' ) END AS Total,
		CASE WHEN Tbl.Col.value( 'BillingAddressId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'BillingAddressId[1]', 'NVARCHAR(Max)' ) END AS BillingAddressId,
		CASE WHEN Tbl.Col.value( 'ShippingAddressId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ShippingAddressId[1]', 'NVARCHAR(Max)' ) END AS ShippingAddressId,
		CASE WHEN (Tbl.Col.value( 'ShippingId[1]', 'NVARCHAR(Max)' )) = '' THEN NULL ELSE (Tbl.Col.value( 'ShippingId[1]', 'NVARCHAR(Max)' )) END  AS ShippingId,
		CASE WHEN Tbl.Col.value( 'PortalId[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'PortalId[1]', 'NVARCHAR(Max)' ) END AS PortalId,
		Tbl.Col.value( 'ShippingNumber[1]', 'NVARCHAR(Max)' ) AS ShippingNumber,
		Tbl.Col.value( 'TrackingNumber[1]', 'NVARCHAR(Max)' ) AS TrackingNumber,
		Tbl.Col.value( 'CouponCode[1]', 'NVARCHAR(Max)' ) AS CouponCode,
		Tbl.Col.value( 'PromoDescription[1]', 'NVARCHAR(Max)' ) AS PromoDescription,
		CASE WHEN Tbl.Col.value( 'ReferralUserId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ReferralUserId[1]', 'NVARCHAR(Max)' ) END  AS ReferralUserId,
		Tbl.Col.value( 'PurchaseOrderNumber[1]', 'NVARCHAR(Max)' ) AS PurchaseOrderNumber,
		CASE WHEN Tbl.Col.value( 'OmsPaymentStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsPaymentStateId[1]', 'NVARCHAR(Max)' ) END AS OmsPaymentStateId,
		Tbl.Col.value( 'WebServiceDownloadDate[1]', 'NVARCHAR(Max)' ) AS WebServiceDownloadDate,
		CASE WHEN Tbl.Col.value( 'PaymentSettingId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentSettingId[1]', 'NVARCHAR(Max)' ) END AS PaymentSettingId,
		Tbl.Col.value( 'PaymentTransactionToken[1]', 'NVARCHAR(Max)' ) AS PaymentTransactionToken,
		CASE WHEN Tbl.Col.value( 'ShipDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE @GetDate END AS ShipDate,
		CASE WHEN Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) END AS ReturnDate,
		CASE WHEN Tbl.Col.value( 'AddressId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'AddressId[1]', 'NVARCHAR(Max)' ) END AS AddressId,
		Tbl.Col.value( 'PoDocument[1]', 'NVARCHAR(Max)' ) AS PoDocument,
		CASE WHEN Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) END  AS IsActive,
		Tbl.Col.value( 'ExternalId[1]', 'NVARCHAR(Max)' ) AS ExternalId,
		CASE WHEN Tbl.Col.value( 'PaymentTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentTypeId[1]', 'NVARCHAR(Max)' ) END  AS PaymentTypeId,
		@UserId AS CreatedBy,
		@GetDate AS CreatedDate,
		@UserId AS ModifiedBy,
		@GetDate AS ModifiedDate,
		Tbl.Col.value( 'CreditCardNumber[1]', 'NVARCHAR(Max)' ) AS CreditCardNumber,
		CASE WHEN Tbl.Col.value( 'IsShippingCostEdited[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsShippingCostEdited[1]', 'NVARCHAR(Max)' ) END AS IsShippingCostEdited,
		CASE WHEN Tbl.Col.value( 'IsTaxCostEdited[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsTaxCostEdited[1]', 'NVARCHAR(Max)' ) END AS IsTaxCostEdited,
		Tbl.Col.value( 'ShippingDifference[1]', 'NVARCHAR(Max)' ) AS ShippingDifference,
		CASE WHEN Tbl.Col.value( 'EstimateShippingCost[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'EstimateShippingCost[1]', 'NVARCHAR(Max)' ) END AS EstimateShippingCost,
		Tbl.Col.value( 'TransactionId[1]', 'NVARCHAR(Max)' ) AS TransactionId,
		Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
		Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
		Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
		Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
		Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
		Tbl.Col.value( 'FirstName[1]', 'NVARCHAR(Max)' ) AS FirstName,
		Tbl.Col.value( 'LastName[1]', 'NVARCHAR(Max)' ) AS LastName,
		Tbl.Col.value( 'CardType[1]', 'NVARCHAR(Max)' ) AS CardType,
		Tbl.Col.value( 'CreditCardExpMonth[1]', 'NVARCHAR(Max)' ) AS CreditCardExpMonth,
		Tbl.Col.value( 'CreditCardExpYear[1]', 'NVARCHAR(Max)' ) AS CreditCardExpYear,
		CASE WHEN Tbl.Col.value( 'TotalAdditionalCost[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'TotalAdditionalCost[1]', 'NVARCHAR(Max)' ) END AS TotalAdditionalCost,
		Tbl.Col.value( 'PaymentDisplayName[1]', 'NVARCHAR(Max)' ) AS PaymentDisplayName,
		Tbl.Col.value( 'PaymentExternalId[1]', 'NVARCHAR(Max)' ) AS PaymentExternalId,
		Tbl.Col.value( 'CultureCode[1]', 'NVARCHAR(Max)' ) AS CultureCode,
		Tbl.Col.value( 'DisplayName[1]', 'NVARCHAR(Max)' ) AS DisplayName,
		Tbl.Col.value( 'InHandDate[1]', 'NVARCHAR(Max)' ) AS InHandDate,
		Tbl.Col.value( 'IpAddress[1]', 'NVARCHAR(Max)' ) AS IpAddress,
		Tbl.Col.value( 'JobName[1]', 'NVARCHAR(Max)' ) AS JobName,
		Tbl.Col.value( 'ShippingConstraintCode[1]', 'NVARCHAR(Max)' ) AS ShippingConstraintCode,
		Tbl.Col.value( 'ShippingDiscount[1]', 'NVARCHAR(Max)' ) AS ShippingDiscount,
		Tbl.Col.value( 'ShippingHandlingCharges[1]', 'NVARCHAR(Max)' ) AS ShippingHandlingCharges,
		CASE WHEN Tbl.Col.value( 'ReturnCharges[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'ReturnCharges[1]', 'NVARCHAR(Max)' ) END AS ReturnCharges,
		CASE WHEN Tbl.Col.value( 'IsCalculateTaxAfterDiscount[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsCalculateTaxAfterDiscount[1]', 'NVARCHAR(Max)' ) END AS IsCalculateTaxAfterDiscount,
		Tbl.Col.value( 'Email[1]', 'NVARCHAR(Max)' ) AS Email,
		Tbl.Col.value( 'PhoneNumber[1]', 'NVARCHAR(Max)' ) AS PhoneNumber,
		CASE WHEN Tbl.Col.value( 'OrderTotalWithoutVoucher[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'OrderTotalWithoutVoucher[1]', 'NVARCHAR(Max)' )  END AS OrderTotalWithoutVoucher,
		CASE WHEN Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' )='' THEN '' ELSE Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' ) END AS ImportDuty,
		CASE WHEN Tbl.Col.value( 'TaxCost[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'TaxCost[1]', 'NVARCHAR(Max)' ) END  AS TaxCost,
		CASE WHEN Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) END AS ShippingCost,
		CASE WHEN Tbl.Col.value( 'SubTotal[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'SubTotal[1]', 'NVARCHAR(Max)' ) END AS SubTotal,
		Tbl.Col.value( 'CurrencyCode[1]', 'NVARCHAR(Max)' ) AS CurrencyCode,
		CASE WHEN Tbl.Col.value( 'OverDueAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OverDueAmount[1]', 'NVARCHAR(Max)' ) END AS OverDueAmount,
		CASE WHEN Tbl.Col.value( 'ShippingTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ShippingTypeId[1]', 'NVARCHAR(Max)' ) END AS ShippingTypeId,
		Tbl.Col.value( 'AccountNumber[1]', 'NVARCHAR(Max)' ) AS AccountNumber,
		Tbl.Col.value( 'ShippingMethod[1]', 'NVARCHAR(Max)' ) AS ShippingMethod,
		Tbl.Col.value( 'PaymentCode[1]', 'NVARCHAR(Max)' ) AS PaymentCode,
		CASE WHEN Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) END AS PaymentStatusId,
		CASE WHEN Tbl.Col.value( 'RemainingOrderAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RemainingOrderAmount[1]', 'NVARCHAR(Max)' ) END AS RemainingOrderAmount,
		CASE WHEN Tbl.Col.value( 'AvataxIsSellerImporterOfRecord[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'AvataxIsSellerImporterOfRecord[1]', 'NVARCHAR(Max)' ) END AS AvataxIsSellerImporterOfRecord,
		Tbl.Col.value( 'AccountId[1]', 'NVARCHAR(Max)' ) AS AccountId
	FROM @OrderXML.nodes( '//PlaceOrderModel' ) AS Tbl(Col);


	--Getting billing address info
	INSERT INTO #TempOrderBillingAddress
	(
		AddressId,BillingFirstName,BillingLastName,BillingCompanyName,BillingStreet1,BillingStreet2,
		BillingCity,BillingStateCode,BillingPostalCode,BillingCountry,BillingPhoneNumber,BillingEmailId
	)
	SELECT
		Tbl.Col.value( 'AddressId[1]', 'NVARCHAR(Max)' ) AS AddressId,
		Tbl.Col.value( 'FirstName[1]', 'NVARCHAR(Max)' ) AS FirstName,
		Tbl.Col.value( 'LastName[1]', 'NVARCHAR(Max)' ) AS LastName,
		Tbl.Col.value( 'CompanyName[1]', 'NVARCHAR(Max)' ) AS CompanyName,
		Tbl.Col.value( 'Street1[1]', 'NVARCHAR(Max)' ) AS Street1 ,
		Tbl.Col.value( 'Street2[1]', 'NVARCHAR(Max)' ) AS Street2,
		Tbl.Col.value( 'City[1]', 'NVARCHAR(Max)' ) AS City,
		Tbl.Col.value( 'StateCode[1]', 'NVARCHAR(Max)' ) AS StateCode,
		Tbl.Col.value( 'PostalCode[1]', 'NVARCHAR(Max)' ) AS PostalCode,
		Tbl.Col.value( 'Country[1]', 'NVARCHAR(Max)' ) AS Country,
		Tbl.Col.value( 'PhoneNumber[1]', 'NVARCHAR(Max)' ) AS PhoneNumber,
		Tbl.Col.value( 'EmailId[1]', 'NVARCHAR(Max)' ) AS EmailId
	FROM @OrderXML.nodes( '//PlaceOrderModel/BillingAddressModel' ) AS Tbl(Col);
	----Parent line item details insert
	INSERT INTO #TempParentLineItemDetails
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description,Quantity,
		Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber,
		PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles,
		RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy,
		ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity,
		TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty, GroupIdentifier
	)
	SELECT
		CASE WHEN Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemRelationshipTypeId,
		CASE WHEN Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) END  AS OmsOrderDetailsId,
		CASE WHEN Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderShipmentId,
		CASE WHEN Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) END AS RmaReasonForReturnId,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(2000)' ) AS ProductName,
		Tbl.Col.value( 'Description[1]', 'NVARCHAR(2000)' ) AS Description,
		Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(Max)' ) AS Quantity,
		CASE WHEN Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) END AS Price,
		Tbl.Col.value( 'Weight[1]', 'NVARCHAR(Max)' ) AS Weight,
		Tbl.Col.value( 'DownloadLink[1]', 'NVARCHAR(Max)' ) AS DownloadLink,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		Tbl.Col.value( 'ShipSeparately[1]', 'NVARCHAR(Max)' ) AS ShipSeparately,
		CASE WHEN Tbl.Col.value( 'ShipDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE @GetDate END AS ShipDate,
		CASE WHEN Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) END AS ReturnDate,
		CASE WHEN Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) END AS ShippingCost,
		Tbl.Col.value( 'PromoDescription[1]', 'NVARCHAR(Max)' ) AS PromoDescription,
		Tbl.Col.value( 'TransactionNumber[1]', 'NVARCHAR(Max)' ) AS TransactionNumber,
		CASE WHEN Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) END AS PaymentStatusId,
		Tbl.Col.value( 'TrackingNumber[1]', 'NVARCHAR(Max)' ) AS TrackingNumber,
		CASE WHEN Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' ) END AS IsAutoGeneratedTracking,
		CASE WHEN Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemStateId,
		CASE WHEN Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) END AS IsRecurringBilling,
		Tbl.Col.value( 'RecurringBillingPeriod[1]', 'NVARCHAR(Max)' ) AS RecurringBillingPeriod,
		Tbl.Col.value( 'RecurringBillingCycles[1]', 'NVARCHAR(Max)' ) AS RecurringBillingCycles,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingFrequency,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingAmount,
		Tbl.Col.value( 'AppliedPromo[1]', 'NVARCHAR(Max)' ) AS AppliedPromo,
		Tbl.Col.value( 'CouponsApplied[1]', 'NVARCHAR(Max)' ) AS CouponsApplied,
		Tbl.Col.value( 'ExternalId[1]', 'NVARCHAR(Max)' ) AS ExternalId,
		CASE WHEN Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) END AS IsActive,
		@UserId AS CreatedBy,
		@GetDate AS CreatedDate,
		@UserId AS ModifiedBy,
		@GetDate AS ModifiedDate,
		Tbl.Col.value( 'AutoAddonSKU[1]', 'NVARCHAR(Max)' ) AutoAddonSKU,
		CASE WHEN Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' ) END IsShippingReturn,
		CASE WHEN Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' ) END PartialRefundAmount,
		Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
		Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
		Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
		Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
		Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
		CASE WHEN Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' ) = ''  THEN NULL ELSE Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' ) END AS BundleQuantity,
		CASE WHEN Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' ) END AS TaxRuleId,
		Tbl.Col.value( 'TaxTransactionNumber[1]', 'NVARCHAR(Max)' ) AS TaxTransactionNumber,
		Tbl.Col.value( 'Comments[1]', 'NVARCHAR(Max)' ) AS Comments,
		CASE WHEN Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) END AS SalesTax,
		CASE WHEN Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) END AS VAT,
		CASE WHEN Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) END AS GST,
		CASE WHEN Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) END AS PST,
		CASE WHEN Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) END  AS HST,
		CASE WHEN Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' )= ''  THEN NULL ELSE Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' ) END AS ImportDuty,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(Max)' ) AS GroupIdentifier
	FROM @OrderXML.nodes( '//PlaceOrderModel/LineItems/PlaceOrderLineItemModel' ) AS Tbl(Col);

	----Child line item details insert
	INSERT INTO #TempChildLineItemDetails
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description,Quantity,
		Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber,
		PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles,
		RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy,
		ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity,
		TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty, ParentSku, GroupIdentifier
	)
	SELECT
		CASE WHEN Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemRelationshipTypeId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemRelationshipTypeId,
		CASE WHEN Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) ='' THEN NULL ELSE Tbl.Col.value( 'OmsOrderDetailsId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderDetailsId,
		CASE WHEN Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderShipmentId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderShipmentId,
		CASE WHEN Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RmaReasonForReturnId[1]', 'NVARCHAR(Max)' ) END AS RmaReasonForReturnId,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(2000)' ) AS ProductName,
		Tbl.Col.value( 'Description[1]', 'NVARCHAR(2000)' ) AS Description,
		Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(Max)' ) AS Quantity,
		CASE WHEN Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Price[1]', 'NVARCHAR(Max)' ) END AS Price,
		Tbl.Col.value( 'Weight[1]', 'NVARCHAR(Max)' ) AS Weight,
		Tbl.Col.value( 'DownloadLink[1]', 'NVARCHAR(Max)' ) AS DownloadLink,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		Tbl.Col.value( 'ShipSeparately[1]', 'NVARCHAR(Max)' ) AS ShipSeparately,
		CASE WHEN Tbl.Col.value( 'ShipDate[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE @GetDate END AS ShipDate,
		CASE WHEN Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'ReturnDate[1]', 'NVARCHAR(Max)' ) END AS ReturnDate,
		CASE WHEN Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'ShippingCost[1]', 'NVARCHAR(Max)' ) END AS ShippingCost,
		Tbl.Col.value( 'PromoDescription[1]', 'NVARCHAR(Max)' ) AS PromoDescription,
		Tbl.Col.value( 'TransactionNumber[1]', 'NVARCHAR(Max)' ) AS TransactionNumber,
		CASE WHEN Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'PaymentStatusId[1]', 'NVARCHAR(Max)' ) END AS PaymentStatusId,
		Tbl.Col.value( 'TrackingNumber[1]', 'NVARCHAR(Max)' ) AS TrackingNumber,
		CASE WHEN Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'IsAutoGeneratedTracking[1]', 'NVARCHAR(Max)' ) END AS IsAutoGeneratedTracking,
		CASE WHEN Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OrderLineItemStateId[1]', 'NVARCHAR(Max)' ) END AS OrderLineItemStateId,
		CASE WHEN Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'IsRecurringBilling[1]', 'NVARCHAR(Max)' ) END AS IsRecurringBilling,
		Tbl.Col.value( 'RecurringBillingPeriod[1]', 'NVARCHAR(Max)' ) AS RecurringBillingPeriod,
		Tbl.Col.value( 'RecurringBillingCycles[1]', 'NVARCHAR(Max)' ) AS RecurringBillingCycles,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingFrequency,
		Tbl.Col.value( 'RecurringBillingFrequency[1]', 'NVARCHAR(Max)' ) AS RecurringBillingAmount,
		Tbl.Col.value( 'AppliedPromo[1]', 'NVARCHAR(Max)' ) AS AppliedPromo,
		Tbl.Col.value( 'CouponsApplied[1]', 'NVARCHAR(Max)' ) AS CouponsApplied,
		Tbl.Col.value( 'ExternalId[1]', 'NVARCHAR(Max)' ) AS ExternalId,
		Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(Max)' ) AS IsActive,
		@UserId AS CreatedBy,
		@GetDate AS CreatedDate,
		@UserId AS ModifiedBy,
		@GetDate AS ModifiedDate,
		Tbl.Col.value( 'AutoAddonSKU[1]', 'NVARCHAR(Max)' ) AutoAddonSKU,
		CASE WHEN Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'IsShippingReturn[1]', 'NVARCHAR(Max)' ) END AS IsShippingReturn,
		CASE WHEN Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' )= '' THEN NULL ELSE Tbl.Col.value( 'PartialRefundAmount[1]', 'NVARCHAR(Max)' ) END AS  PartialRefundAmount,
		Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
		Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
		Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
		Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
		Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
		CASE WHEN Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'BundleQuantity[1]', 'NVARCHAR(Max)' ) END AS BundleQuantity,
		CASE WHEN Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'TaxRuleId[1]', 'NVARCHAR(Max)' ) END AS TaxRuleId,
		Tbl.Col.value( 'TaxTransactionNumber[1]', 'NVARCHAR(Max)' ) AS TaxTransactionNumber,
		Tbl.Col.value( 'Comments[1]', 'NVARCHAR(Max)' ) AS Comments,
		CASE WHEN Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) ='' THEN NULL ELSE Tbl.Col.value( 'SalesTax[1]', 'NVARCHAR(Max)' ) END AS SalesTax,
		CASE WHEN Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'VAT[1]', 'NVARCHAR(Max)' ) END AS VAT,
		CASE WHEN Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'GST[1]', 'NVARCHAR(Max)' ) END AS GST,
		CASE WHEN Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'PST[1]', 'NVARCHAR(Max)' ) END AS PST,
		CASE WHEN Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'HST[1]', 'NVARCHAR(Max)' ) END AS HST,
		CASE WHEN Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE  Tbl.Col.value( 'ImportDuty[1]', 'NVARCHAR(Max)' ) END AS ImportDuty,
		Tbl.Col.value( 'ParentProductSKU[1]', 'NVARCHAR(Max)' ) AS ParentSku,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(Max)' ) AS GroupIdentifier
	FROM @OrderXML.nodes('//PlaceOrderModel/LineItems/PlaceOrderLineItemModel/OrderLineItem/PlaceOrderlineItemCollection') AS Tbl(Col);

	--Updating parent for simple products
	UPDATE #TempChildLineItemDetails SET ParentSku = Sku WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdSimple
	AND OrderLineItemRelationshipTypeId IS NOT NULL

BEGIN TRAN OrderInsert

	--Inserting order number which are unique and getting in xml from code side
	INSERT INTO ZnodeOmsOrder(IsQuoteOrder,OrderNumber,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PublishStateId,IsOldOrder)
	OUTPUT INSERTED.OmsOrderId, INSERTED.OrderNumber INTO @OMSOrder
	SELECT 0 AS IsQuoteOrder, OrderNumber,OrderNumber AS ExternalId,@UserId,@GetDate,@UserId,@GetDate,PublishStateId, CAST(0 AS BIT)
	FROM #TempOrderData
	WHERE ISNULL(OmsOrderId,0) = 0

	--If order is new then creating new order details
	IF EXISTS(SELECT * FROM @OMSOrder)
	BEGIN
		INSERT INTO ZnodeOmsOrderDetails
		(
			OmsOrderId,PortalId,UserId,OrderDate,OmsOrderStateId,ShippingId,PaymentTypeId,BillingFirstName,BillingLastName
			,BillingCompanyName,BillingStreet1,BillingStreet2,BillingCity,BillingStateCode,BillingPostalCode,BillingCountry
			,BillingPhoneNumber,BillingEmailId,TaxCost,ShippingCost,SubTotal,DiscountAmount,CurrencyCode,OverDueAmount,Total
			,ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId
			,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,AddressId,PoDocument,IsActive
			,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited
			,ShippingDifference,EstimateShippingCost,TransactionId,Custom1,Custom2,Custom3,Custom4,Custom5,FirstName,LastName
			,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName,PaymentExternalId,CultureCode
			,DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges
			,IsCalculateTaxAfterDiscount,Email,PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,RemainingOrderAmount,AccountId
		)
		OUTPUT INSERTED.OmsOrderId, INSERTED.OmsOrderDetailsId INTO @OMSOrderDetail
		SELECT OO.OmsOrderId, OD.PortalId,@UserId,@GetDate,OD.OmsOrderStateId,OD.ShippingId,OD.PaymentTypeId,OBA.BillingFirstName,OBA.BillingLastName,OBA.BillingCompanyName,
			OBA.BillingStreet1,OBA.BillingStreet2,OBA.BillingCity,OBA.BillingStateCode,OBA.BillingPostalCode,OBA.BillingCountry,OBA.BillingPhoneNumber,OBA.BillingEmailId,OD.TaxCost,
			OD.ShippingCost,OD.SubTotal, OD.DiscountAmount,OD.CurrencyCode,OD.OverDueAmount,OD.Total
			,OD.ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId
			,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,OD.BillingAddressId,PoDocument,CAST(1 AS BIT) AS IsActive
			,OD.ExternalId,OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited
			,ShippingDifference,EstimateShippingCost,TransactionId,OD.Custom1,OD.Custom2,OD.Custom3,OD.Custom4,OD.Custom5,OD.FirstName,OD.LastName
			,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName,PaymentExternalId,CultureCode
			,OD.DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges
			,IsCalculateTaxAfterDiscount,Email,OD.PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,OD.RemainingOrderAmount,OD.AccountId
		FROM #TempOrderData OD
		INNER JOIN @OMSOrder OO ON OD.OrderNumber = OO.OrderNumber
		LEFT JOIN #TempOrderBillingAddress OBA ON OD.BillingAddressId = OBA.AddressId

	END
	--If order managed then creating new order details and disable old order details
	ELSE
	BEGIN
		Declare @OldOmsOrderDetailsId INT
		SET @OldOmsOrderDetailsId = (SELECT TOP 1 OOD.OmsOrderDetailsId FROM ZnodeOmsOrderDetails OOD  WITH (NOLOCK) 
									 WHERE EXISTS(SELECT * FROM  #TempOrderData OD WHERE OOD.OmsOrderId = OD.OmsOrderId) AND OOD.IsActive = 1)

		INSERT INTO ZnodeOmsOrderDetails
		(
			OmsOrderId,PortalId,UserId,OrderDate,OmsOrderStateId,ShippingId,PaymentTypeId,BillingFirstName,BillingLastName --1
			,BillingCompanyName,BillingStreet1,BillingStreet2,BillingCity,BillingStateCode,BillingPostalCode,BillingCountry --2
			,BillingPhoneNumber,BillingEmailId,TaxCost,ShippingCost,SubTotal,DiscountAmount,CurrencyCode,OverDueAmount,Total --3
			,ShippingNumber,TrackingNumber,CouponCode,PromoDescription,ReferralUserId,PurchaseOrderNumber,OmsPaymentStateId --4
			,WebServiceDownloadDate,PaymentSettingId,PaymentTransactionToken,ShipDate,ReturnDate,AddressId,PoDocument,IsActive --5
			,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CreditCardNumber,IsShippingCostEdited,IsTaxCostEdited --6
			,ShippingDifference,EstimateShippingCost,TransactionId,Custom1,Custom2,Custom3,Custom4,Custom5,FirstName,LastName --7
			,CardType,CreditCardExpMonth,CreditCardExpYear,TotalAdditionalCost,PaymentDisplayName, --8
			PaymentExternalId,CultureCode, --9
			DisplayName,InHandDate,IpAddress,JobName,ShippingConstraintCode,ShippingDiscount,ShippingHandlingCharges,ReturnCharges --10
			,IsCalculateTaxAfterDiscount,Email,PhoneNumber,OrderTotalWithoutVoucher,ImportDuty,RemainingOrderAmount --11 
		)
		OUTPUT INSERTED.OmsOrderId, INSERTED.OmsOrderDetailsId INTO @OMSOrderDetail
		SELECT OO.OmsOrderId, OD.PortalId,@UserId,@GetDate,OD.OmsOrderStateId,OD.ShippingId,OD.PaymentTypeId,OBA.BillingFirstName,OBA.BillingLastName,--1
			OBA.BillingCompanyName,OBA.BillingStreet1,OBA.BillingStreet2,OBA.BillingCity,OBA.BillingStateCode,OBA.BillingPostalCode,OBA.BillingCountry, --2
			OBA.BillingPhoneNumber,OBA.BillingEmailId,OD.TaxCost,OD.ShippingCost,OD.SubTotal, OD.DiscountAmount,OD.CurrencyCode,OD.OverDueAmount,OD.Total, --3
			OD.ShippingNumber,OD.TrackingNumber,OD.CouponCode,OD.PromoDescription,OD.ReferralUserId,OD.PurchaseOrderNumber,OD.OmsPaymentStateId, --4
			OD.WebServiceDownloadDate,OD.PaymentSettingId,OD.PaymentTransactionToken,OD.ShipDate,OD.ReturnDate,OD.BillingAddressId,OD.PoDocument,CAST(1 AS BIT) AS IsActive --5
			,OD.ExternalId,OD.CreatedBy,OOD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.CreditCardNumber,OD.IsShippingCostEdited,OD.IsTaxCostEdited, --6
			OD.ShippingDifference,OD.EstimateShippingCost,OD.TransactionId,OD.Custom1,OD.Custom2,OD.Custom3,OD.Custom4,OD.Custom5,OD.FirstName,OD.LastName, --7
			OD.CardType,OD.CreditCardExpMonth,OD.CreditCardExpYear,OD.TotalAdditionalCost,CASE WHEN OD.PaymentSettingId = OOD.PaymentSettingId THEN OOD.PaymentDisplayName ELSE OD.PaymentDisplayName END AS PaymentDisplayName, --8
			CASE WHEN OD.PaymentSettingId = OOD.PaymentSettingId THEN OOD.PaymentExternalId ELSE OD.PaymentExternalId END AS PaymentExternalId,OD.CultureCode, --9 
			OD.DisplayName,OD.InHandDate,OD.IpAddress,OD.JobName,OD.ShippingConstraintCode,OD.ShippingDiscount,OD.ShippingHandlingCharges,OD.ReturnCharges, --10
			OD.IsCalculateTaxAfterDiscount,OD.Email,OD.PhoneNumber,OD.OrderTotalWithoutVoucher,OD.ImportDuty,OD.RemainingOrderAmount --11
		FROM #TempOrderData OD
		INNER JOIN ZnodeOmsOrder OO WITH (NOLOCK) ON OD.OrderNumber = OO.OrderNumber
		INNER JOIN ZnodeOmsOrderDetails OOD  WITH (NOLOCK) ON OO.OmsOrderId = OOD.OmsOrderId AND OOD.IsActive = 1
		LEFT JOIN #TempOrderBillingAddress OBA ON OD.BillingAddressId = OBA.AddressId
	
		DECLARE @OmsOrderStateIdCancelled int =  (select top 1 OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'CANCELED')

		UPDATE ZnodeOmsOrderDetails SET IsActive = 0 , OmsOrderStateId = @OmsOrderStateIdCancelled
		WHERE OmsOrderDetailsId = @OldOmsOrderDetailsId

		UPDATE ZnodeOmsOrderLineItems SET IsActive = 0
		WHERE OmsOrderDetailsId = @OldOmsOrderDetailsId
	END

	----Geting new OmsOrderDetailsId always
	Declare @OmsOrderDetailsId INT
	SET @OmsOrderDetailsId = ( SELECT TOP 1 OmsOrderDetailsId FROM @OMSOrderDetail )

	--Insert Order notes only for new order details
	IF EXISTS(SELECT * FROM @OMSOrder)
	BEGIN
		INSERT INTO ZnodeOmsNotes(OmsOrderDetailsId,Notes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
		SELECT @OmsOrderDetailsId,Tbl.Col.value( 'AdditionalInstructions[1]', 'NVARCHAR(Max)' ) AS Notes,
			@UserId,@GetDate,@UserId,@GetDate
		FROM @OrderXML.nodes( '//PlaceOrderModel' ) AS Tbl(Col)
		WHERE Tbl.Col.value( 'AdditionalInstructions[1]', 'NVARCHAR(Max)' ) <> '';
	END

	----Inserting parent line item data
	INSERT INTO ZnodeOmsOrderLineItems
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description --1
		,Quantity,Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber --2
		,PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles --3
		,RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy --4
		,ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity, GroupIdentifier --5
	)
	OUTPUT INSERTED.OmsOrderDetailsId, INSERTED.OmsOrderLineItemsId, INSERTED.Sku,INSERTED.ParentOmsOrderLineItemsId, INSERTED.GroupId, INSERTED.OrderLineItemRelationshipTypeId,INSERTED.GroupIdentifier INTO @OmsParentOrderLineItems
	SELECT OrderLineItemRelationshipTypeId,@OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description--1
		,Quantity,Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber --2
		,PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles --3
		,RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,ISNULL(IsActive,1) AS IsActive,CreatedBy,CreatedDate,ModifiedBy --4
		,ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity, GroupIdentifier --5
	FROM #TempParentLineItemDetails PLID

	----Inserting child line item data
	INSERT INTO ZnodeOmsOrderLineItems
	(
		OrderLineItemRelationshipTypeId,OmsOrderDetailsId,OmsOrderShipmentId,RmaReasonForReturnId,Sku,ProductName,Description --1
		,Quantity,Price,Weight,DownloadLink,DiscountAmount,ShipSeparately,ShipDate,ReturnDate,ShippingCost,PromoDescription,TransactionNumber --2
		,PaymentStatusId,TrackingNumber,IsAutoGeneratedTracking,OrderLineItemStateId,IsRecurringBilling,RecurringBillingPeriod,RecurringBillingCycles --3
		,RecurringBillingFrequency,RecurringBillingAmount,AppliedPromo,CouponsApplied,ExternalId,IsActive,CreatedBy,CreatedDate,ModifiedBy --4
		,ModifiedDate,AutoAddonSKU,IsShippingReturn,PartialRefundAmount,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,BundleQuantity, --5
		ParentSku, GroupIdentifier --6
	)
	OUTPUT INSERTED.OmsOrderDetailsId, INSERTED.OmsOrderLineItemsId, INSERTED.Sku,INSERTED.ParentOmsOrderLineItemsId, INSERTED.GroupId, INSERTED.OrderLineItemRelationshipTypeId, INSERTED.ParentSku, INSERTED.GroupIdentifier INTO @OmsOrderLineItems
	SELECT PLID.OrderLineItemRelationshipTypeId,@OmsOrderDetailsId,PLID.OmsOrderShipmentId,PLID.RmaReasonForReturnId,PLID.Sku,PLID.ProductName,PLID.Description, --1
		PLID.Quantity,PLID.Price,PLID.Weight,PLID.DownloadLink,PLID.DiscountAmount,PLID.ShipSeparately,PLID.ShipDate,PLID.ReturnDate,PLID.ShippingCost,PLID.PromoDescription,PLID.TransactionNumber, --2
		PLID.PaymentStatusId,PLID.TrackingNumber,PLID.IsAutoGeneratedTracking,PLID.OrderLineItemStateId,PLID.IsRecurringBilling,PLID.RecurringBillingPeriod,PLID.RecurringBillingCycles,--3
		PLID.RecurringBillingFrequency,PLID.RecurringBillingAmount,PLID.AppliedPromo,PLID.CouponsApplied,PLID.ExternalId,isnull(PLID.IsActive,1) AS IsActive,PLID.CreatedBy,PLID.CreatedDate,PLID.ModifiedBy, --4
		PLID.ModifiedDate,PLID.AutoAddonSKU,PLID.IsShippingReturn,PLID.PartialRefundAmount,PLID.Custom1,PLID.Custom2,PLID.Custom3,PLID.Custom4,PLID.Custom5,PLID.GroupId,PLID.BundleQuantity, --5
		case when PLID.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdSimple then PLID.Sku else PLID.ParentSku end AS ParentSku, GroupIdentifier --6
	FROM #TempChildLineItemDetails PLID

	--Updating ParentOmsOrderLineItemsId for child line items for simple, group and configurable products
	UPDATE A SET A.ParentOmsOrderLineItemsId = (SELECT TOP 1 OmsOrderLineItemsId FROM @OmsParentOrderLineItems d WHERE d.GroupIdentifier = a.GroupIdentifier AND A.ParentSku = D.Sku  and ISNULL(a.GroupId,'-') = ISNULL(d.GroupId,'-'))
	FROM @OmsOrderLineItems a
	WHERE a.OrderLineItemRelationshipTypeId NOT IN ( @OrderLineItemRelationshipTypeIdAddon, @OrderLineItemRelationshipTypeIdGroup)  
	AND a.ParentOmsOrderLineItemsId IS NULL 
	
	--Updating ParentOmsOrderLineItemsId for child line items for group products
	IF EXISTS(SELECT * FROM @OmsOrderLineItems WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdGroup)
	BEGIN
		---Getting child lineitems for group product
		;WITH Cte_GroupProductChild AS
		(
			SELECT GroupIdentifier,Sku, ParentSku, OmsOrderLineItemsId, ParentOmsOrderLineItemsId,Dense_Rank()Over(Partition By GroupIdentifier ORDER BY OmsOrderLineItemsId) AS RowId1 
			FROM @OmsOrderLineItems
			WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdGroup
		)
		---Getting parent lineitems for group product
		,Cte_GroupProductParent AS 
		(
			SELECT GroupIdentifier,Sku, OmsOrderLineItemsId, Dense_Rank()Over(Partition By GroupIdentifier ORDER BY OmsOrderLineItemsId) AS RowId1 
			FROM @OmsParentOrderLineItems a
			WHERE OrderLineItemRelationshipTypeId IS NULL
			AND EXISTS(SELECT * FROM @OmsOrderLineItems b WHERE a.GroupIdentifier = b.GroupIdentifier AND a.Sku = b.ParentSku)
		)
		--Updating ParentOmsOrderLineItemsId on child for group products
		UPDATE a SET a.ParentOmsOrderLineItemsId = b.OmsOrderLineItemsId
		FROM Cte_GroupProductChild a
		INNER JOIN Cte_GroupProductParent B ON A.GroupIdentifier = B.GroupIdentifier AND a.RowId1 = b.RowId1 AND b.Sku = a.ParentSku 
	END

	---Updating ParentOmsOrderLineItemsId for addons if present
	IF EXISTS(SELECT * FROM @OmsOrderLineItems WHERE OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
	BEGIN
		--Updating ParentOmsOrderLineItemsId for addon with Simple products , group products and configurable products
		UPDATE b SET b.ParentOmsOrderLineItemsId = c.OmsOrderLineItemsId
		FROM @OmsOrderLineItems c
		INNER JOIN @OmsOrderLineItems b on b.ParentSku = c.Sku AND c.GroupIdentifier = b.GroupIdentifier
		WHERE c.OrderLineItemRelationshipTypeId <> @OrderLineItemRelationshipTypeIdAddon and c.OrderLineItemRelationshipTypeId is not null
		and b.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
		AND b.ParentOmsOrderLineItemsId IS NULL
		
		--Updating ParentOmsOrderLineItemsId for addon with bundle products
		UPDATE c SET c.ParentOmsOrderLineItemsId = b.OmsOrderLineItemsId
		FROM @OmsOrderLineItems c
		INNER JOIN @OmsParentOrderLineItems b on B.sku = C.parentsku AND c.GroupIdentifier= b.GroupIdentifier
		WHERE B.OrderLineItemRelationshipTypeId is null 
		AND c.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
		AND C.ParentOmsOrderLineItemsId IS NULL
	 END
	 ---Updating ParentOmsOrderLineItemsId in main table
	 UPDATE a SET a.ParentOmsOrderLineItemsId = b.ParentOmsOrderLineItemsId
	 FROM  ZnodeOmsOrderLineItems a
	 INNER JOIN @OmsOrderLineItems b on a.OmsOrderLineItemsId = b.OmsOrderLineItemsId

	----Shipping details Start
	DECLARE @ShippingTypeId INT
	IF EXISTS(SELECT * FROM #TempOrderData WHERE ShippingTypeId IS NULL)
	BEGIN
		SET @ShippingTypeId = (SELECT TOP 1 ShippingTypeId FROM ZnodeShipping WHERE EXISTS(SELECT * FROM #TempOrderData WHERE ZnodeShipping.ShippingId = #TempOrderData.ShippingId))
	END
	ELSE
	BEGIN
		SET @ShippingTypeId = (SELECT TOP 1 ShippingTypeId FROM #TempOrderData)
	END
	IF EXISTS(SELECT * FROM ZnodeShippingTypes WITH (NOLOCK)  WHERE ShippingTypeId = @ShippingTypeId AND ClassName = 'ZnodeCustomerShipping')
	BEGIN
		INSERT INTO ZnodeOmsCustomerShipping(OmsOrderDetailsId,UserId,ShippingTypeId,AccountNumber,ShippingMethod,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT TOP 1 @OmsOrderDetailsId,@UserId,@ShippingTypeId,AccountNumber,ShippingMethod,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		FROM #TempOrderData
	END
	----Shipping details end

	----Order tax details start
	----Inserting order tax data
	IF (SELECT TOP 1 TaxCost FROM #TempOrderData) > 0
	BEGIN
		INSERT INTO ZnodeOmsTaxOrderDetails(OmsOrderDetailsId,SalesTax,VAT,GST,PST,HST,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportDuty)
		SELECT @OmsOrderDetailsId,OD.SalesTax,OD.VAT,OD.GST,OD.PST,OD.HST,OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.ImportDuty
		FROM #TempOrderData OD
	END

	----Inserting order tax data for parent line item
	INSERT INTO ZnodeOmsTaxOrderLineDetails
	(
		OmsOrderLineItemsId,TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty,
		CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
	)
	SELECT POLI.OmsOrderLineItemsId,CLID.TaxRuleId,CLID.TaxTransactionNumber,CLID.Comments,CLID.SalesTax,CLID.VAT,CLID.GST,CLID.PST,CLID.HST,CLID.ImportDuty,
	CLID.CreatedBy,CLID.CreatedDate,CLID.ModifiedBy,CLID.ModifiedDate
	FROM #TempParentLineItemDetails CLID
	INNER JOIN @OmsParentOrderLineItems POLI ON CLID.Sku = POLI.Sku AND ISNULL(CLID.GroupId,'') = ISNULL(POLI.GroupId,'') AND CLID.GroupIdentifier = POLI.GroupIdentifier
	WHERE POLI.ParentOmsOrderLineItemsId IS NULL
	AND (ISNULL(CLID.SalesTax,0)+ISNULL(CLID.VAT,0)+ISNULL(CLID.GST,0)+ISNULL(CLID.PST,0)+ISNULL(CLID.HST,0)) > 0

	----Inserting order tax data for child line item
	INSERT INTO ZnodeOmsTaxOrderLineDetails
	(
		OmsOrderLineItemsId,TaxRuleId,TaxTransactionNumber,Comments,SalesTax,VAT,GST,PST,HST,ImportDuty,
		CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
	)
	SELECT POLI.OmsOrderLineItemsId,CLID.TaxRuleId,CLID.TaxTransactionNumber,CLID.Comments,CLID.SalesTax,CLID.VAT,CLID.GST,CLID.PST,CLID.HST,CLID.ImportDuty,
		CLID.CreatedBy,CLID.CreatedDate,CLID.ModifiedBy,CLID.ModifiedDate
	FROM #TempChildLineItemDetails CLID
	INNER JOIN @OmsOrderLineItems POLI ON CLID.Sku = POLI.Sku AND ISNULL(CLID.GroupId,'') = ISNULL(POLI.GroupId,'') AND CLID.GroupIdentifier = POLI.GroupIdentifier
	WHERE POLI.ParentOmsOrderLineItemsId IS NOT NULL
	AND (ISNULL(CLID.SalesTax,0)+ISNULL(CLID.VAT,0)+ISNULL(CLID.GST,0)+ISNULL(CLID.PST,0)+ISNULL(CLID.HST,0)) > 0
	----Order tax details end

	----Order attribte details start
	----Fetching order attributes FROM xml
	INSERT INTO #TempOrderAttribute(AttributeCode ,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeValueCode,Sku,GroupId, GroupIdentifier )
	SELECT
		Tbl.Col.value( 'AttributeCode[1]', 'NVARCHAR(Max)' ) AS AttributeCode,
		Tbl.Col.value( 'AttributeValue[1]', 'NVARCHAR(Max)' ) AS AttributeValue,
		@UserId,@GetDate,@UserId,@GetDate,
		Tbl.Col.value( 'AttributeValueCode[1]', 'NVARCHAR(2000)' ) AS AttributeValueCode,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(2000)' ) AS GroupIdentifier
	FROM @OrderXML.nodes( '//PlaceOrderModel/LineItems/PlaceOrderLineItemModel/OrderLineItem/PlaceOrderlineItemCollection/OrderAttribute/PlaceOrderAttributeModel' ) AS Tbl(Col);

	----Inserting order attributes data
	INSERT INTO ZnodeOmsOrderAttribute(OmsOrderLineItemsId,AttributeCode,AttributeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeValueCode)
	SELECT POLI.OmsOrderLineItemsId, OA.AttributeCode,OA.AttributeValue,OA.CreatedBy,OA.CreatedDate,OA.ModifiedBy,OA.CreatedDate,OA.AttributeValueCode
	FROM #TempOrderAttribute OA
	INNER JOIN @OmsOrderLineItems POLI ON OA.Sku = POLI.Sku AND ISNULL(OA.GroupId,'') = ISNULL(POLI.GroupId,'') AND OA.GroupIdentifier = POLI.GroupIdentifier
	----Order attribte details end

	----Personalise details start
	----Fetching personalize order data
	INSERT INTO #OmsPersonalizeItem(PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL,Sku,GroupId, GroupIdentifier)
	SELECT
		Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode,
		Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue,
		@UserId,@GetDate,@UserId,@GetDate,
		Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(2000)' ) AS DesignId,
		Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(2000)' ) AS ThumbnailURL,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId,
		Tbl.Col.value( 'GroupIdentifier[1]', 'NVARCHAR(2000)' ) AS GroupIdentifier
	FROM @OrderXML.nodes( '//PlaceOrderModel/LineItems/PlaceOrderLineItemModel/PersonaliseDetails/PlaceOrderPersonaliseModel' ) AS Tbl(Col);

	--Inserting personalize order data
	INSERT INTO ZnodeOmsPersonalizeItem(OmsOrderLineItemsId,PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL)
	SELECT OmsOrderLineItemsId,PersonalizeCode,PersonalizeValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,DesignId,ThumbnailURL
	FROM #OmsPersonalizeItem OPI
	INNER JOIN @OmsParentOrderLineItems POLI ON OPI.Sku = POLI.Sku AND ISNULL(OPI.GroupId,'') = ISNULL(POLI.GroupId,'') AND OPI.GroupIdentifier = POLI.GroupIdentifier
	WHERE POLI.ParentOmsOrderLineItemsId IS NULL
	----Personalise details end

	----discount details start
	----Fetching order discount data
	INSERT INTO #OmsOrderDiscount
	(
		OmsDiscountTypeId ,DiscountCode,DiscountAmount ,Description ,CreatedBy ,CreatedDate ,
		ModifiedBy ,ModifiedDate ,PerQuantityDiscount,DiscountMultiplier ,DiscountLevelTypeId ,
		PromotionName ,PromotionTypeId ,DiscountAppliedSequence,PromotionMessage ,Sku,GroupId 
	)
	SELECT
	CASE WHEN Tbl.Col.value( 'OmsDiscountTypeId[1]', 'NVARCHAR(2000)' ) ='' THEN NULL ELSE Tbl.Col.value( 'OmsDiscountTypeId[1]', 'NVARCHAR(2000)' ) END AS OmsDiscountTypeId,
		Tbl.Col.value( 'DiscountCode[1]', 'NVARCHAR(Max)' ) AS DiscountCode,
		CASE WHEN Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'DiscountAmount[1]', 'NVARCHAR(Max)' ) END AS DiscountAmount,
		Tbl.Col.value( 'Description[1]', 'NVARCHAR(2000)' ) AS Description,
		@UserId,@GetDate,@UserId,@GetDate,
		CASE WHEN Tbl.Col.value( 'PerQuantityDiscount[1]', 'NVARCHAR(2000)' )='' THEN NULL ELSE Tbl.Col.value( 'PerQuantityDiscount[1]', 'NVARCHAR(2000)' ) END AS PerQuantityDiscount,
		CASE WHEN Tbl.Col.value( 'DiscountMultiplier[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'DiscountMultiplier[1]', 'NVARCHAR(2000)' ) END AS DiscountMultiplier,
		CASE WHEN Tbl.Col.value( 'DiscountLevelTypeId[1]', 'NVARCHAR(2000)' )= '' THEN NULL ELSE Tbl.Col.value( 'DiscountLevelTypeId[1]', 'NVARCHAR(2000)' ) END AS DiscountLevelTypeId,
		Tbl.Col.value( 'PromotionName[1]', 'NVARCHAR(2000)' ) AS PromotionName,
		CASE WHEN Tbl.Col.value( 'PromotionTypeId[1]', 'NVARCHAR(2000)' )= '' THEN NULL ELSE Tbl.Col.value( 'PromotionTypeId[1]', 'NVARCHAR(2000)' ) END AS PromotionTypeId,
		Tbl.Col.value( 'DiscountAppliedSequence[1]', 'NVARCHAR(2000)' ) AS DiscountAppliedSequence,
		Tbl.Col.value( 'PromotionMessage[1]', 'NVARCHAR(2000)' ) AS PromotionMessage,
		Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId
	FROM @OrderXML.nodes('//PlaceOrderModel/OrderDiscounts/PlaceOrderDiscountModel') AS Tbl(Col)

	----Inserting order discount data
	--Inserting product level discount for simple and group products
	INSERT INTO ZnodeOmsOrderDiscount
	(
		OmsOrderDetailsId,OmsOrderLineItemId,OmsDiscountTypeId,DiscountCode,DiscountAmount ,Description,
		CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PerQuantityDiscount,DiscountMultiplier,ParentOmsOrderLineItemsId,
		DiscountLevelTypeId,PromotionName,PromotionTypeId,DiscountAppliedSequence,PromotionMessage
	)
	SELECT DISTINCT @OmsOrderDetailsId,POLI.OmsOrderLineItemsId,OD.OmsDiscountTypeId,OD.DiscountCode,OD.DiscountAmount,OD.Description,
		OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.PerQuantityDiscount,OD.DiscountMultiplier,POLI.ParentOmsOrderLineItemsId,
		OD.DiscountLevelTypeId,OD.PromotionName,OD.PromotionTypeId,OD.DiscountAppliedSequence,OD.PromotionMessage
	FROM #OmsOrderDiscount OD
	INNER JOIN @OmsOrderLineItems POLI ON OD.Sku = POLI.Sku AND ISNULL(OD.GroupId,'') = ISNULL(POLI.GroupId,'') 
	WHERE isnull(OD.Sku,'') <> '' AND POLI.OrderLineItemRelationshipTypeId IN (@OrderLineItemRelationshipTypeIdSimple , @OrderLineItemRelationshipTypeIdGroup)
	
	--Inserting product level discount for config and bundle products
	INSERT INTO ZnodeOmsOrderDiscount
	(
		OmsOrderDetailsId,OmsOrderLineItemId,OmsDiscountTypeId,DiscountCode,DiscountAmount ,Description,
		CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PerQuantityDiscount,DiscountMultiplier,ParentOmsOrderLineItemsId,
		DiscountLevelTypeId,PromotionName,PromotionTypeId,DiscountAppliedSequence,PromotionMessage
	)
	SELECT DISTINCT @OmsOrderDetailsId,POLI.ParentOmsOrderLineItemsId,OD.OmsDiscountTypeId,OD.DiscountCode,OD.DiscountAmount,OD.Description,
	OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.PerQuantityDiscount,OD.DiscountMultiplier,NULL,
	OD.DiscountLevelTypeId,OD.PromotionName,OD.PromotionTypeId,OD.DiscountAppliedSequence,OD.PromotionMessage
	FROM #OmsOrderDiscount OD
	INNER JOIN @OmsOrderLineItems POLI ON OD.Sku = POLI.ParentSku AND ISNULL(OD.GroupId,'') = ISNULL(POLI.GroupId,'')
	WHERE isnull(OD.Sku,'') <> '' AND POLI.OrderLineItemRelationshipTypeId IN (@OrderLineItemRelationshipTypeIdBundles , @OrderLineItemRelationshipTypeIdConfig)
	
	--Inserting order level discount 
	INSERT INTO ZnodeOmsOrderDiscount
	(
		OmsOrderDetailsId,OmsOrderLineItemId,OmsDiscountTypeId,DiscountCode,DiscountAmount ,Description,
		CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,PerQuantityDiscount,DiscountMultiplier,ParentOmsOrderLineItemsId,
		DiscountLevelTypeId,PromotionName,PromotionTypeId,DiscountAppliedSequence,PromotionMessage
	)
	SELECT DISTINCT @OmsOrderDetailsId,NULL,OD.OmsDiscountTypeId,OD.DiscountCode,OD.DiscountAmount,OD.Description,
	OD.CreatedBy,OD.CreatedDate,OD.ModifiedBy,OD.ModifiedDate,OD.PerQuantityDiscount,OD.DiscountMultiplier,NULL,
	OD.DiscountLevelTypeId,OD.PromotionName,OD.PromotionTypeId,OD.DiscountAppliedSequence,OD.PromotionMessage
	FROM #OmsOrderDiscount OD
	WHERE isnull(OD.Sku,'') = ''
	----discount details end

	----Additional Cost details start
	IF OBJECT_ID('TEMPDB..#TempAdditionalCost') IS NOT NULL
	DROP TABLE #TempAdditionalCost
	--fetching additional cost details
	SELECT Tbl.Col.value( 'Sku[1]', 'NVARCHAR(2000)' ) AS Sku,
		Tbl1.Col.value( 'KeyName[1]', 'NVARCHAR(2000)' ) AS KeyName,
		CASE WHEN Tbl1.Col.value( 'KeyValue[1]', 'NVARCHAR(2000)' )='' THEN NULL ELSE Tbl1.Col.value( 'KeyValue[1]', 'NVARCHAR(2000)' ) END AS KeyValue,
		Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(2000)' ) AS GroupId
	INTO #TempAdditionalCost
	FROM @OrderXML.nodes('//PlaceOrderModel/LineItems/PlaceOrderLineItemModel') AS Tbl(Col)
	CROSS APPLY Tbl.Col.nodes( '*:AdditionalCostList/AdditionalCost' ) AS Tbl1(Col);

	--Inserting additional cost details
	IF EXISTS(SELECT * FROM #TempAdditionalCost)
	BEGIN
		INSERT INTO ZnodeOmsOrderLineItemsAdditionalCost(OmsOrderLineItemsId,KeyName,KeyValue,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT OLI.OmsOrderLineItemsId, AC.KeyName, AC.KeyValue, @UserId, @GetDate, @UserId, @GetDate
		FROM #TempAdditionalCost AC
		INNER JOIN @OmsOrderLineItems OLI ON AC.Sku = OLI.Sku AND ISNULL(AC.GroupId,'') = ISNULL(OLI.GroupId,'') 
		WHERE OLI.ParentOmsOrderLineItemsId IS NULL
		AND ISNULL(AC.KeyName,'') <> ''
	END
	----Additional Cost details end
	
	DECLARE @OmsOrderId INT
	IF EXISTS(SELECT * FROM @OMSOrder)
	BEGIN
		SET @OmsOrderId = (SELECT TOP 1 OmsOrderId FROM @OMSOrder)
	END
	ELSE
	BEGIN 
		SET @OmsOrderId = (SELECT TOP 1 OmsOrderId FROM #TempOrderData)
	END
	----RMA details start
	IF (SELECT TOP 1 OmsOrderId FROM #TempOrderData) > 0
	BEGIN
		DECLARE @OldOmsOrderDetailID INT
		SET @OmsOrderID = (SELECT TOP 1 OmsOrderId FROM #TempOrderData)
		SET @OldOmsOrderDetailID = (SELECT TOP 1 OmsOrderDetailsId FROM ZnodeOmsOrderDetails WHERE OmsOrderId = @OmsOrderID AND OmsOrderDetailsId <> @OmsOrderDetailsId ORDER BY OmsOrderDetailsId DESC)

		UPDATE ZnodeRmaReturnDetails
		SET OmsOrderDetailsId = @OmsOrderDetailsId
		WHERE OmsOrderId = @OmsOrderID

		SELECT OOLI.OmsOrderLineItemsId AS OldOmsOrderLineItemsId, OOLI.OmsOrderDetailsId, OOLI.Sku, LI.OmsOrderLineItemsId AS NewOmsOrderLineItemsId
		INTO #OldOrderLineItems
		FROM ZnodeOmsOrderLineItems OOLI WITH (NOLOCK)
		INNER JOIN @OmsOrderLineItems LI ON LI.Sku = OOLI.Sku
		WHERE OOLI.OmsOrderDetailsId = @OldOmsOrderDetailID --AND OOLI.ParentOmsOrderLineItemsId IS NULL
 
		UPDATE RRLI SET RRLI.OmsOrderLineItemsId = OldLI.NewOmsOrderLineItemsId
		FROM ZnodeRmaReturnLineItems RRLI
		INNER JOIN #OldOrderLineItems OldLI ON RRLI.OmsOrderLineItemsId = OldOmsOrderLineItemsId
	
		UPDATE ZnodeOmsOrder set IsOldOrder = 0
		where OmsOrderId = @OmsOrderID
	END
	----RMA details end
	
	---Inserting OrderTaxDetails
	IF(NOT EXISTS(SELECT 1 from ZnodeOmsTaxRule where OmsOrderId= @OmsOrderId))
	BEGIN
		DECLARE @TaxRate Numeric(28,6), @TaxRuleId INT, @AvataxIsSellerImporterOfRecord bit
		SET @TaxRate = (SELECT TOP 1 TaxRate FROM #TempOrderData)
		SET @TaxRuleId = (SELECT TOP 1 TaxRuleId FROM #TempChildLineItemDetails)
		SET @AvataxIsSellerImporterOfRecord = (SELECT TOP 1 AvataxIsSellerImporterOfRecord FROM #TempOrderData)

		 EXEC [Znode_InsertOrderTaxDetails] @OmsOrderId = @OmsOrderId, @TaxRuleId = @TaxRuleId, @TaxRate = @TaxRate, @AvataxIsSellerImporterOfRecord = @AvataxIsSellerImporterOfRecord, @Status = 0
	END

	COMMIT TRAN OrderInsert

	SELECT TOP 1 OmsOrderId,@OmsOrderDetailsId AS OmsOrderDetailsId, cast(1 AS bit)  AS Status, '' AS ErrorMessage
	FROM @OMSOrderDetail

END TRY
BEGIN CATCH
	ROLLBACK TRAN OrderInsert
	SELECT TOP 1 0 AS OmsOrderId,0 AS OmsOrderDetailsId, cast(0 AS bit)  AS Status, ERROR_MESSAGE() AS ErrorMessage

	INSERT INTO ZnodeOmsFailedOrderPayments(PaymentCode,PaymentDisplayName,TransactionToken,TotalAmount,UserName,UserId,Email,PaymentSettingId,OrderNumber,OrderDate,PaymentStatusId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
	SELECT TOP 1 PaymentCode,PaymentDisplayName, isnull(PaymentTransactionToken,''),Total,a.FirstName+' '+a.LastName,@UserId,a.Email,a.PaymentSettingId,a.OrderNumber,@GetDate,PaymentStatusId,@UserId,@GetDate,@UserId,@GetDate
	FROM #TempOrderData A
	
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateOmsOrder @OrderXML ='+CAST(@OrderXML AS VARCHAR(MAX))+' , @UserId = '+CAST(@UserId AS VARCHAR(50));

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_InsertUpdateOmsOrder',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
	--If error throw in SP the deleting records FROM order tables if data inserted
	EXEC Znode_DeleteOrderById @OrderDetailId=@OmsOrderDetailsId,@Status=0
END CATCH

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateOmsOrderPayment')
	DROP PROC Znode_InsertUpdateOmsOrderPayment
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateOmsOrderPayment]
(
	@OrderPaymentXML XML,
	@OrderId INT,
	@TransactionDate DATETIME,
	@UserId INT,
	@Status BIT = 0 OUT
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRAN OrderInsert
	BEGIN TRY

		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();

		IF OBJECT_ID('tempdb..#TempOrderPaymentData') IS NOT NULL
			DROP TABLE #TempOrderPaymentData
	
		CREATE TABLE #TempOrderPaymentData
			(OmsOrderId INT, TransactionReference NVARCHAR(50), Amount NUMERIC(28,6), TransactionStatus NVARCHAR(50), PaymentSettingId INT, RemainingOrderAmount NUMERIC(28,6))
	
		--------Getting Order Payment details
		INSERT INTO #TempOrderPaymentData
			(OmsOrderId, TransactionReference, Amount, TransactionStatus , PaymentSettingId, RemainingOrderAmount)

		SELECT
			CASE WHEN Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(2000)' ) = '' THEN NULL ELSE Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(2000)' ) END AS OmsOrderId,
			Tbl.Col.value( 'TransactionReference[1]', 'NVARCHAR(Max)' ) AS TransactionReference,
			CASE WHEN Tbl.Col.value( 'Total[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'Total[1]', 'NVARCHAR(Max)' ) END AS Amount,
			CASE WHEN Tbl.Col.value( 'TransactionStatus[1]', 'NVARCHAR(Max)' )='' THEN NULL ELSE Tbl.Col.value( 'TransactionStatus[1]', 'NVARCHAR(Max)' ) END AS TransactionStatus,
			CASE WHEN Tbl.Col.value( 'PaymentSettingId[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'PaymentSettingId[1]', 'NVARCHAR(Max)' ) END  AS PaymentGatewayId,
			CASE WHEN Tbl.Col.value( 'RemainingOrderAmount[1]', 'NVARCHAR(Max)' ) = '' THEN NULL ELSE Tbl.Col.value( 'RemainingOrderAmount[1]', 'NVARCHAR(Max)' ) END AS RemainingOrderAmount

		FROM @OrderPaymentXML.nodes( '//OrderPaymentDataModel' ) AS Tbl(Col);
	
		INSERT INTO ZnodeOrderPayment
			(OmsOrderId, TransactionReference, Amount, TransactionStatus, TransactionDate, PaymentSettingId , CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, RemainingOrderAmount)
		SELECT OmsOrderId, TransactionReference, Amount, TransactionStatus, @TransactionDate, PaymentSettingId, @UserId, @GetDate, @UserId, @GetDate, RemainingOrderAmount
		FROM #TempOrderPaymentData 

		SET @Status = 1;
		SELECT 1 AS Id,@Status AS Status;
	COMMIT TRAN OrderInsert
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN OrderInsert
		SET @Status = 0;

		SELECT 0 AS Id, @Status AS Status; 

		DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdateOmsOrderPayment @OrderPaymentXML ='+CAST(@OrderPaymentXML AS VARCHAR(MAX))+' ,@OrderId = '+CAST(@OrderId AS VARCHAR(50))
					+',@TransactionDate = '+CAST(@TransactionDate AS VARCHAR(50))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@Status = '+CAST(@Status AS VARCHAR(50));

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName    = 'Znode_InsertUpdateOmsOrderPayment',
		@ErrorInProcedure = @ERROR_PROCEDURE,
		@ErrorMessage     = @ErrorMessage,
		@ErrorLine        = @ErrorLine,
		@ErrorCall        = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdatePimAttributeJson')
	DROP PROC Znode_InsertUpdatePimAttributeJson
GO

-- EXEC [dbo].[Znode_InsertUpdatePimAttributeJSON]  1 
CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimAttributeJson] 
(
 @PimAttributeId  INT
)
AS
 BEGIN 
  BEGIN TRY 
     
 SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			-- DECLARE @PimAttributeId VARCHAR(max) = ''
			
			-- DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
            -- This variable is used to carry the default locale which is globaly set

		
		
			DECLARE @TBL_AttributesDetails TABLE(PimAttributeId int , AttributeCode varchar(300), IsUseInSearch bit, IsHtmlTags bit
										, IsComparable bit, IsFacets bit, AttributeValue varchar(max)
										,PRIMARY KEY (AttributeCode,PimAttributeId)) 
			 -- This variable is used in loop to increment the counter
   		    DECLARE @TBL_PimAttributeIds TABLE(PimAttributeId int, ParentPimAttributeId int, AttributeTypeId int, AttributeCode varchar(300)
									, IsRequired bit, IsLocalizable bit, IsFilterable bit, IsSystemDefined bit, IsConfigurable bit, IsPersonalizable bit
									, DisplayOrder int, HelpDescription varchar(max), IsCategory bit, IsHidden bit, CreatedDate datetime, ModifiedDate datetime,
									 AttributeName nvarchar(max), AttributeTypeName varchar(300), IsCustomField bit,LocaleId INT ,IsSwatch BIT);
			    
				INSERT INTO @TBL_AttributesDetails (PimAttributeId,AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets )
				SELECT ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
				FROM ZnodePimAttribute AS ZPA 
				LEFT JOIN ZnodePimFrontendProperties AS ZPFP ON ZPFP.PimAttributeId = ZPA.PimATtributeId
				GROUP BY ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
	
				 ;WITH Cte_PimAttributeFilter
                  AS (SELECT ZPA.PimAttributeId,ZPA.ParentPimAttributeId,ZPA.AttributeTypeId,ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,ZPA.IsFilterable,
					  ZPA.IsSystemDefined,ZPA.IsConfigurable,ZPA.IsPersonalizable,ZPA.DisplayOrder,ZPA.HelpDescription,ZPA.IsCategory,ZPA.IsHidden,ZPA.CreatedBy,
					  ZPA.CreatedDate,ZPA.ModifiedBy,ZPA.ModifiedDate,ZPAL.AttributeName,ZAT.AttributeTypeName,ZPAL.LocaleId,ZPA.IsSwatch
                      FROM ZnodePimAttribute ZPA
                      INNER JOIN ZnodePimAttributeLocale ZPAL ON(ZPAL.PimAttributeId = ZPA.PimAttributeId)
                      INNER JOIN ZnodeAttributeType ZAT ON(ZAT.AttributeTypeId = ZPA.AttributeTypeId)
					--  WHERE AttributeCode = 'ShortDescription'
                      --    WHERE EXISTS(SELECT TOP 1 1 FROM @PimAttributeId SP WHERE SP.id = CTPADV.PimAttributeId)
					  )
       		INSERT INTO @TBL_PimAttributeIds ( PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
                      IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch )
			SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,IsConfigurable,
				  IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch
            FROM Cte_PimAttributeFilter CTAF

			DECLARE @TBL_AttributevalueGet TABLE(PimAttributeId INT,AttributeCode VARCHAR(300),AttributeValue NVARCHAR(max),LocaleId INT)
					
			INSERT INTO @TBL_AttributevalueGet (PimAttributeId,AttributeCode,AttributeValue,LocaleId)
			 SELECT PimAttributeId  , AttributeCode ,
			        (SELECT  (
								SELECT  TBA.AttributeCode,
									AttributeName,
									CASE WHEN  IsUseInSearch= 1 THEN 'true' WHEN IsUseInSearch= 0  THEN 'false' ELSE 'false' END AS IsUseInSearch,
									CASE WHEN  IsHtmlTags= 1 THEN 'true' WHEN IsHtmlTags= 0  THEN 'false' ELSE 'false' END AS IsHtmlTags,
									CASE WHEN  IsComparable= 1 THEN 'true' WHEN IsComparable= 0  THEN 'false' ELSE 'false' END AS IsComparable,
									CASE WHEN  IsFacets= 1 THEN 'true' WHEN IsFacets= 0  THEN 'false' ELSE 'false' END AS IsFacets,
									ISNULL(DisplayOrder,0) AS DisplayOrder,
									AttributeTypeName,
									CASE WHEN  IsPersonalizable= 1 THEN 'true' WHEN IsPersonalizable= 0  THEN 'false' ELSE 'false' END AS IsPersonalizable,
									CASE WHEN  TBA.IsCustomField= 1 THEN 'true' WHEN TBA.IsCustomField= 0  THEN 'false' ELSE 'false' END AS IsCustomField,
									CASE WHEN  IsConfigurable= 1 THEN 'true' WHEN IsConfigurable= 0  THEN 'false' ELSE 'false' END AS IsConfigurable,
									CASE WHEN  IsSwatch = 1 THEN 'true' WHEN IsSwatch = 0  THEN 'false' ELSE '' END AS IsSwatch
                                FROM  @TBL_PimAttributeIds AS TBA 
								INNER JOIN @TBL_AttributesDetails AS TBAD ON TBAD.PimAttributeId = TBA.PimAttributeId										
                                WHERE TBA.PimAttributeId = TBAVI.PimAttributeId
								AND TBA.LocaleId = TBAVI.LocaleId
								FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
                               )  ) AttributeValue, LocaleId
                  FROM @TBL_PimAttributeIds AS TBAVI
				  
		 		  	  
				  MERGE INTO ZnodePimAttributeJSON TARGET 
				  USING (    SELECT * FROM @TBL_AttributevalueGet ) SOURCE 
				  ON (TARGET.PimAttributeId = SOURCE.PimAttributeId 
				  AND TARGET.LocaleId = Source.LocaleID  )
				  WHEN MATCHED THEN 
				  uPDATE 
				  SET TARGET.AttributeJson = SOURCE.AttributeValue
				      , TARGET.AttributeCode = Source.AttributeCode
				      ,TARGET.ModifiedDate = @GetDate
					  ,TARGET.ModifiedBY = 2 
                  WHEN NOT MATCHED THEN 
				  INSERT (PimAttributeId
				          , AttributeCode
							,AttributeJson
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)
				  VALUES (SOURCE.PimAttributeId,SOURCE.AttributeCode, SOURCE.AttributeValue ,Source.LocaleId ,2,@GetDate,2 ,@GetDate);

			

   
  END TRY 
  BEGIN CATCH
  SELECT ERROR_MESSAGE() 
  END CATCH 
 END
 

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdatePimAttributeXML')
	DROP PROC Znode_InsertUpdatePimAttributeXML
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimAttributeXML] 
(
 @PimAttributeId  INT
)
AS
 BEGIN 
  BEGIN TRY 
     
 SET NOCOUNT ON;
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate(); 
			-- DECLARE @PimAttributeId VARCHAR(max) = ''
			
			-- DECLARE @PimCatalogId int= ISNULL((SELECT PimCatalogId FROM ZnodePublishcatalog WHERE PublishCatalogId = @PublishCatalogId), 0);  --- this variable is used to carry y pim catalog id by using published catalog id
            -- This variable is used to carry the default locale which is globaly set

		
		
			DECLARE @TBL_AttributesDetails TABLE(PimAttributeId int , AttributeCode varchar(300), IsUseInSearch bit, IsHtmlTags bit
										, IsComparable bit, IsFacets bit, AttributeValue varchar(max)
										,PRIMARY KEY (AttributeCode,PimAttributeId)) 
			 -- This variable is used in loop to increment the counter
   		    DECLARE @TBL_PimAttributeIds TABLE(PimAttributeId int, ParentPimAttributeId int, AttributeTypeId int, AttributeCode varchar(300)
									, IsRequired bit, IsLocalizable bit, IsFilterable bit, IsSystemDefined bit, IsConfigurable bit, IsPersonalizable bit
									, DisplayOrder int, HelpDescription varchar(max), IsCategory bit, IsHidden bit, CreatedDate datetime, ModifiedDate datetime,
									 AttributeName nvarchar(max), AttributeTypeName varchar(300), IsCustomField bit,LocaleId INT ,IsSwatch BIT);
			    
				INSERT INTO @TBL_AttributesDetails (PimAttributeId,AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets )
				SELECT ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
				FROM ZnodePimAttribute AS ZPA 
				LEFT JOIN ZnodePimFrontendProperties AS ZPFP ON ZPFP.PimAttributeId = ZPA.PimATtributeId
				GROUP BY ZPA.PimAttributeId,ZPA.AttributeCode,IsComparable,IsUseInSearch,IsHtmlTags,IsFacets
	
				 ;WITH Cte_PimAttributeFilter
                  AS (SELECT ZPA.PimAttributeId,ZPA.ParentPimAttributeId,ZPA.AttributeTypeId,ZPA.AttributeCode,ZPA.IsRequired,ZPA.IsLocalizable,ZPA.IsFilterable,
					  ZPA.IsSystemDefined,ZPA.IsConfigurable,ZPA.IsPersonalizable,ZPA.DisplayOrder,ZPA.HelpDescription,ZPA.IsCategory,ZPA.IsHidden,ZPA.CreatedBy,
					  ZPA.CreatedDate,ZPA.ModifiedBy,ZPA.ModifiedDate,ZPAL.AttributeName,ZAT.AttributeTypeName,ZPAL.LocaleId,ZPA.IsSwatch
                      FROM ZnodePimAttribute ZPA
                      INNER JOIN ZnodePimAttributeLocale ZPAL ON(ZPAL.PimAttributeId = ZPA.PimAttributeId)
                      INNER JOIN ZnodeAttributeType ZAT ON(ZAT.AttributeTypeId = ZPA.AttributeTypeId)
					--  WHERE AttributeCode = 'ShortDescription'
                      --    WHERE EXISTS(SELECT TOP 1 1 FROM @PimAttributeId SP WHERE SP.id = CTPADV.PimAttributeId)
					  )
       		INSERT INTO @TBL_PimAttributeIds ( PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,
                      IsConfigurable,IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch )
			SELECT PimAttributeId,ParentPimAttributeId,AttributeTypeId,AttributeCode,IsRequired,IsLocalizable,IsFilterable,IsSystemDefined,IsConfigurable,
				  IsPersonalizable,DisplayOrder,HelpDescription,IsCategory,IsHidden,CreatedDate,ModifiedDate,AttributeName,AttributeTypeName,LocaleId,IsSwatch
            FROM Cte_PimAttributeFilter CTAF

			DECLARE @TBL_AttributevalueGet TABLE(PimAttributeId INT,AttributeCode VARCHAR(300),AttributeValue NVARCHAR(max),LocaleId INT)

			INSERT INTO @TBL_AttributevalueGet (PimAttributeId,AttributeCode,AttributeValue,LocaleId)
			 SELECT PimAttributeId  , AttributeCode ,
			        (SELECT  (
                                   SELECT  TBA.AttributeCode,
                                          AttributeName,
                                          ISNULL(IsUseInSearch, 0) AS IsUseInSearch,
                                          ISNULL(IsHtmlTags, 0) AS IsHtmlTags,
										  ISNULL(IsComparable, 0) AS IsComparable,
                                          ISNULL(IsFacets, 0) AS IsFacets,
                                          ISNULL(DisplayOrder,0) AS DisplayOrder,
										  AttributeTypeName,
                                          IsPersonalizable,
                                          ISNULL(TBA.IsCustomField, 0) AS IsCustomField,
                                          ISNULL(IsConfigurable, 0) AS IsConfigurable,
										 CASE WHEN  IsSwatch = 1 THEN 'true' 
										   WHEN IsSwatch = 0  THEN 'false' ELSE 'null' END    IsSwatch
										  
                                   FROM  @TBL_PimAttributeIds AS TBA 
								   INNER JOIN @TBL_AttributesDetails AS TBAD ON TBAD.PimAttributeId = TBA.PimAttributeId										
                                   WHERE TBA.PimAttributeId = TBAVI.PimAttributeId
								   AND TBA.LocaleId = TBAVI.LocaleId
								   FOR XML PATH('') 
                               )  ) AttributeValue, LocaleId
                  FROM @TBL_PimAttributeIds AS TBAVI
				  
				 		  	  
				  MERGE INTO ZnodePimAttributeXML TARGET 
				  USING (    SELECT * FROM @TBL_AttributevalueGet ) SOURCE 
				  ON (TARGET.PimAttributeId = SOURCE.PimAttributeId 
				  AND TARGET.LocaleId = Source.LocaleID  )
				  WHEN MATCHED THEN 
				  uPDATE 
				  SET TARGET.AttributeXml = SOURCE.AttributeValue
				      , TARGET.AttributeCode = Source.AttributeCode
				      ,TARGET.ModifiedDate = @GetDate
					  ,TARGET.ModifiedBY = 2 
                  WHEN NOT MATCHED THEN 
				  INSERT (PimAttributeId
				          , AttributeCode
							,AttributeXml
							,LocaleId
							,CreatedBy
							,CreatedDate
							,ModifiedBy
							,ModifiedDate)
				  VALUES (SOURCE.PimAttributeId,SOURCE.AttributeCode, SOURCE.AttributeValue ,Source.LocaleId ,2,@GetDate,2 ,@GetDate);

			

   
  END TRY 
  BEGIN CATCH
  SELECT ERROR_MESSAGE() 
  END CATCH 
 END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdatePimCatalogProductDetail')
	DROP PROC Znode_InsertUpdatePimCatalogProductDetail
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimCatalogProductDetail] 
(
  @PublishCatalogId INT = 0 
  ,@LocaleId TransferId READONLY 
  ,@UserId INT = 0   
)
AS 
--declare @LocaleId TransferId
--insert into @LocaleId
--select 1
--union 
--select 4
--exec [Znode_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=4,@LocaleId=@LocaleId,@UserId=2
BEGIN 
 BEGIN TRY 

  SET NOCOUNT ON 
       DECLARE @LocaleId_In INT = 0 , @DefaultLocaleId INT = dbo.FN_GETDefaultLocaleId()
			   ,@GetDate DATETIME = dbo.fn_GetDate()
	   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()		   

	   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultXMLId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT, DefaultValueXML	nvarchar(max) )

	   CREATE TABLE #AttributeValueLocale  ( ID Int Identity Primary Key,PimProductId int, AttributeCode Varchar(300), AttributeValue varchar(max), AttributeEntity varchar(max), LocaleId int )

	    SELECT ZPAV.PimProductId, ZPP.PublishProductId, ZPAVL.LocaleId
		into #ProductLocaleWise
		FROM ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		inner join ZnodePublishProduct ZPP on ZPAV.PimProductId = ZPP.PimProductId
		WHERE ZPAV.PimAttributeId = (select PimAttributeId from ZnodePimAttribute where AttributeCode = 'SKU')

		SELECT BTM.PimProductId , ZPCPD.PublishProductId, ZPCPD.PublishCatalogId,BTM.ModifiedDate
		into #ProductAttributeXML
		FROM ZnodePublishProductAttributeXML BTM 
		inner join ZnodePublishProduct ZPP1 ON BTM.PimProductId = ZPP1.PimProductId
		inner join ZnodePublishCatalogProductDetail ZPCPD ON ZPP1.PublishProductId = ZPCPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPP1.PublishCatalogId 
		WHERE ZPCPD.PublishCatalogId =  @PublishCatalogId 

	    -------- Products Attribute modified 
		SELECT DISTINCT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		Into #ModifiedProducts
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate OR BTM.ModifiedDate < ZPA.ModifiedDate)   ) 
		
		-------- Products not published  
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPP.PimProductId = ZPP1.PimProductId )	
			
		-------- Products associated to catalog or category or modified catalog category products
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPCC1.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPCC1.ModifiedDate )   )	 

		-------- Link Product modified 
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimParentProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		--AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV.ModifiedDate)   ) 

		--------Associated child Products (varients, Group) not published	
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimProductTypeAssociation ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )

		--------Link child Products (Bundle) not published 	
		Insert Into #ModifiedProducts
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimLinkProductDetail ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND exists(select * from ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
					where StateName <> 'Publish' and ZPAV.PimProductId = ZPP1.PimProductId )
		
		--------Associated child Products (varients, Group) attribute modified 
		Insert Into #ModifiedProducts	
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimProductTypeAssociation ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimProductId = ZPAV.PimProductId )
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPAV.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
						AND (BTM.ModifiedDate < ZPAV1.ModifiedDate)   )
		
		

		---------------------Category associated to catalog or category or modified catalog
		SELECT ZPCH.PimCategoryId, ZPC1.PublishCategoryId, ZPCH.PimCategoryHierarchyId
		into #ModifiedCategory
		FROM ZnodePimCategoryHierarchy ZPCH 
		INNER JOIN ZnodePublishCategory ZPC1 ON ZPCH.PimCategoryId = ZPC1.PimCategoryId 
        WHERE ZPC1.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogProductDetail BTM  
		WHERE BTM.PublishCatalogId = ZPC1.PublishCatalogId AND (BTM.ModifiedDate < ZPCH.ModifiedDate )   )
		and not exists(select * from #ModifiedProducts MP where  isnull(ZPCH.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0))

		-------- Category associated to catalog or category or modified catalog
		Insert Into #ModifiedProducts		
		SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId 
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId and ZPC.PimCatalogId = ZPCH.PimCatalogId 
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))
		AND EXISTS (SELECT TOP 1 1 FROM #ModifiedCategory BTM where BTM.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  ) 
		------------------

		--Getting all products of catalog for publish first time  
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId,
		       ZPAV.PimAttributeValueId, ZPC.CatalogName ,ZPP.PimProductId ,ZPA.AttributeCode				
		into #ZnodePublishCategoryProduct
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (isnull(ZPPC.PimCategoryHierarchyId,0) = isnull(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND NOT EXISTS (SELECT TOP 1 1 FROM #ProductAttributeXML BTM WHERE BTM.PimProductId = ZPP.PimProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId)

		--Getting all products of catalog for publish which are modified after last publish
		INSERT INTO #ZnodePublishCategoryProduct 
		SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId
			   ,ZPAV.PimAttributeValueId, ZPC.CatalogName--,CASE WHEN ZPCC.PublishProductId IS NULL THEN 1 ELSE  dense_rank()Over(ORDER BY ZPCC.PimCategoryHierarchyId,ZPCC.PublishProductId) END  ProductIndex 	
			   ,ZPP.PimProductId ,ZPA.AttributeCode				
		FROM ZnodePublishProduct  ZPP
		INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
		INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategoryProduct ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
		LEFT  JOIN ZnodePublishCategory ZPPC ON (ZPPC.PimCategoryHierarchyId = ZPCC.PimCategoryHierarchyId AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
		AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
		AND EXISTS (SELECT * from #ModifiedProducts MP where ZPP.PublishProductId = MP.PublishProductId AND isnull(ZPCC.PimCategoryHierarchyId,0) = isnull(MP.PimCategoryHierarchyId,0)) 


		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimProductId ON #ZnodePublishCategoryProduct(PimProductId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PublishCategoryId ON #ZnodePublishCategoryProduct(PublishCategoryId)

		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeValueId ON #ZnodePublishCategoryProduct(PimAttributeValueId)
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_PimAttributeId ON #ZnodePublishCategoryProduct(PimAttributeId)
		 
		------Getting All Link Product Details
		Select ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAVL.AttributeValue as SKU
		into #LinkProduct
		FROM ZnodePimLinkProductDetail ZPLPD 
		INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON ZPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId
		WHERE exists(select * from ZnodePimAttribute ZPA where ZPA.PimAttributeId = ZPAV.PimAttributeId and ZPA.AttributeCode = 'SKU')
		
		 ----Getting products link product value entity
	     INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPLP.PimParentProductId ,ZPAX.AttributeCode, '' AttributeValue , ZPAX.AttributeXML+'<AttributeValues>' + 
		 stuff( (SELECT ','+cast( LP.SKU as varchar(600))
							FROM #LinkProduct LP
							WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							AND LP.PimAttributeId = ZPLP.PimAttributeId
							FOR XML PATH ('')), 1, 1, '')  +'</AttributeValues>', ZPAX.LocaleId
		 FROM ZnodePimLinkProductDetail ZPLP
		 INNER JOIN ZnodePimAttributeXML ZPAX ON (ZPAX.PimAttributeId = ZPLP.PimAttributeId )
		 WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP  WHERE (ZPLP.PimParentProductId = PPCP.PimProductId ))
		 GROUP BY ZPLP.PimParentProductId ,ZPAX.AttributeCode , ZPAX.AttributeXML,ZPAX.LocaleId,ZPAX.AttributeCode,ZPLP.PimAttributeId


		  ----Getting product attribute value entity
	      INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		  SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,
		         ZPAX.AttributeXML + '<AttributeValues>'+(select ''+ISNULL(ZPAVL.AttributeValue,'') FOR XML PATH (''))+'</AttributeValues>'  AttributeEntity, ZPAVL.LocaleId
		  FROM ZnodePimAttributeValue PPCP
		  INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		  INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		  INNER JOIN ZnodePimAttributeXML ZPAX ON (ZPAX.PimAttributeId = ZPA.PimAttributeId and ZPAX.LocaleId = ZPAVL.LocaleId)
		  WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)--(PPCP1.PimAttributeValueId =PPCP.PimAttributeValueId) AND (ZPA.PimAttributeId = PPCP1.PimAttributeId))
		  AND not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		  and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )
		 
		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail

		  IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail1') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail1

		  IF OBJECT_ID('TEMPDB..#TBL_ProductRequiredAttribute') IS NOT NULL
			DROP TABLE #TBL_ProductRequiredAttribute
		  			
		  
		create table #TBL_ProductRequiredAttribute (PimProductId int,SKU varchar(600),ProductName varchar(600), IsActive varchar(10), LocaleId INT)

		insert into #TBL_ProductRequiredAttribute(PimProductId, LocaleId)
		select distinct PimProductId, LocaleId from #AttributeValueLocale

		update #TBL_ProductRequiredAttribute 
		set SKU = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'SKU'

		update #TBL_ProductRequiredAttribute 
		set ProductName = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update #TBL_ProductRequiredAttribute 
		set IsActive = b.AttributeValue
		from #TBL_ProductRequiredAttribute a
		inner join #AttributeValueLocale b on a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

		  CREATE INDEX IDX_#TBL_ProductRequiredAttribute_PimProductId ON #TBL_ProductRequiredAttribute(PimProductId)

		  SELECT ZPI.PublishProductId, ZPI.PublishCatalogId ,TYU.PublishCategoryId,ZPI.CatalogName,ISNULL(ZPI.PimCategoryHierarchyId,0) PimCategoryHierarchyId
					,TPAR.SKU,TPAR.ProductName,TPAR.IsActive,TYU.PublishCategoryName CategoryName,TPAR.LocaleId
		   into #ZnodePublishCatalogProductDetail
		   FROM #ZnodePublishCategoryProduct ZPI
		   INNER JOIN #TBL_ProductRequiredAttribute TPAR ON (TPAR.PimProductId = ZPI.PimProductId )
		   LEFT JOIN ZnodePublishCategoryDetail TYU ON (TYU.PublishCategoryId = ZPI.PublishCategoryId)
		   GROUP BY PublishProductId, PublishCatalogId ,TYU.PublishCategoryId,CatalogName,PimCategoryHierarchyId
					,SKU,ProductName,TPAR.IsActive,PublishCategoryName, TPAR.LocaleId  

						
			CREATE INDEX IDX_#ZnodePublishCatalogProductDetail ON #ZnodePublishCatalogProductDetail(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)

			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive
			      ,CASE WHEN PublishProductId IS NULL THEN 1 ELSE Row_Number()Over(Partition by PublishProductId ORDER BY PublishProductId,PimCategoryHierarchyId) END  ProductIndex
			INTO #ZnodePublishCatalogProductDetail1
			from #ZnodePublishCatalogProductDetail


			insert into #ZnodePublishCatalogProductDetail1 (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive,ProductIndex)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, b.Id ,IsActive,ProductIndex
			from #ZnodePublishCatalogProductDetail1 a
			cross apply @LocaleId b 
			where not exists(select * from #ZnodePublishCatalogProductDetail1 c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId 

			DELETE ZPCPD 
			from ZnodePublishCatalogProductDetail ZPCPD
			WHERE not exists(select * from #ProductLocaleWise ZPCPD1 where ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			                 and ZPCPD.LocaleId = ZPCPD1.LocaleId )  

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  TARGET.ProductIndex	=SOURCE.ProductIndex
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @GetDate
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        SOURCE.PublishProductId = TARGET.PublishProductId
				AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
				AND isnull(SOURCE.PimCategoryHierarchyId,0) = isnull(TARGET.PimCategoryHierarchyId,0)
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  
				TARGET.ProductName		=SOURCE.ProductName
				,TARGET.CategoryName	=SOURCE.CategoryName
				,TARGET.CatalogName		=SOURCE.CatalogName
				,TARGET.IsActive		=case when SOURCE.IsActive in ('0','false') then 0 else 1 end 
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @GetDate
			from ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        TARGET.SKU = SOURCE.SKU
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)

			----Insert data ZnodePublishCatalogProductDetail 
			INSERT INTO ZnodePublishCatalogProductDetail
				( PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
			SELECT SOURCE.PublishProductId ,SOURCE.PublishCatalogId ,SOURCE.PimCategoryHierarchyId ,SOURCE.SKU ,SOURCE.ProductName
			,SOURCE.CategoryName ,SOURCE.CatalogName ,SOURCE.LocaleId ,SOURCE.IsActive ,SOURCE.ProductIndex ,@UserId ,@GetDate ,@UserId ,@GetDate
			FROM #ZnodePublishCatalogProductDetail1 SOURCE
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail TARGET WHERE SOURCE.PublishProductId = TARGET.PublishProductId
							AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
							AND SOURCE.PimCategoryHierarchyId = TARGET.PimCategoryHierarchyId 
							AND TARGET.LocaleId = SOURCE.LocaleId )
					
			----		  
		   insert into ZnodePublishCatalogProductDetail (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			select PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				  b.Id ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
			from ZnodePublishCatalogProductDetail a
			cross apply @LocaleId b 
			where not exists(select * from ZnodePublishCatalogProductDetail c where a.PublishProductId = c.PublishProductId and b.Id = c.LocaleId  )
			and a.LocaleId = @DefaultLocaleId

			DELETE ZPCPD from ZnodePublishCatalogProductDetail ZPCPD
			inner join ZnodePublishProduct ZPD on ZPCPD.PublishProductId = ZPD.PublishProductId and ZPCPD.PublishCatalogId = ZPD.PublishCatalogId
			inner join ZnodePublishCatalog ZPC on ZPCPD.PublishCatalogId = ZPC.PublishCatalogId
			where not exists(select * from ZnodePimCategoryProduct ZPCC 
			      inner join ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId where ZPD.PimProductId = ZPCC.PimProductId and ZPC.PimCatalogId = ZPCH.PimCatalogId and ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
			and ZPCPD.PimCategoryHierarchyId <> 0

		update ZnodePublishCatalogProductDetail 
		set SKU = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'SKU'

		update ZnodePublishCatalogProductDetail 
		set ProductName = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'ProductName'

		update ZnodePublishCatalogProductDetail 
		set IsActive = b.AttributeValue
		from ZnodePublishCatalogProductDetail a
		inner join ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId
		inner join #AttributeValueLocale b on ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		where b.AttributeCode = 'IsActive'

	   -- FETCH NEXT FROM CR_Locale_id INTO @LocaleId_In
	   --END    
	   
	   --CLOSE CR_Locale_id  
	   --DEALLOCATE CR_Locale_id 

		  select a.PimProductId,  a.PimAttributeId
		  into #PimProductAttributeDefaultValue
		  from ZnodePimAttributeValue a 
		  Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 

		  create index Idx_#PimProductAttributeDefaultValue on #PimProductAttributeDefaultValue (PimProductId,PimAttributeId)

		  INSERT INTO #PimDefaultValueLocale
		  SELECT PimAttributeDefaultXMLId,PimAttributeDefaultValueId,LocaleId ,DefaultValueXML
		  FROM ZnodePimAttributeDefaultXML

		  SELECT  AA.DefaultValueXML , ZPADV.PimAttributeValueId, AA.LocaleId 
		  into #PimAttributeDefaultXML
		  FROM ZnodePimAttributeDefaultXML AA 
		  INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId AND AA.LocaleId = GH.LocaleId)
		  INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId AND AA.LocaleId = ZPADV.LocaleId)

		  ----Getting child facets for merging		  
		  Select distinct ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
		  Into #PimChildProductFacets
		  from ZnodePimAttributeValue ZPAV_Parent
		  inner join ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
		  inner join ZnodePimAttributeValue ZPAV_Child ON ZPPTA.PimProductId = ZPAV_Child.PimProductId AND ZPAV_Parent.PimAttributeId = ZPAV_Child.PimAttributeId
		  inner join ZnodePimProductAttributeDefaultValue ZPPADV ON ZPAV_Child.PimAttributeValueId = ZPPADV.PimAttributeValueId 
		  where exists(select * from ZnodePimFrontendProperties ZPFP where ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId and ZPFP.IsFacets = 1)
		  and exists(select * from #ZnodePublishCategoryProduct ZPPC where ZPAV_Parent.PimProductId = ZPPC.PimProductId )
		  and not exists(select * from ZnodePimProductAttributeDefaultValue ZPPADV1 where ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		                 and ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

		  ----Merging childs facet attribute Default value XML for parent
		  insert into #PimAttributeDefaultXML (DefaultValueXML, PimAttributeValueId, LocaleId)
		  select ZPADX.DefaultValueXML, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
		  from #PimChildProductFacets ZPPADV		  
		  inner join ZnodePimAttributeDefaultXML ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId AND ZPPADV.LocaleId = ZPADX.LocaleId)

		  CREATE INDEX Idx_#PimDefaultValueLocale ON #PimDefaultValueLocale(PimAttributeDefaultXMLId,LocaleId)

		  CREATE INDEX Idx_#PimAttributeDefaultXML ON #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		  INCLUDE (DefaultValueXML)

		  ----Getting default attribute value entity
		 INSERT INTO #AttributeValueLocale
		 SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,ZPAX.AttributeXML+'<AttributeValues></AttributeValues>'
			    +CAST(( SELECT  cast(DefaultValueXML as xml) SelectValues  FROM #PimAttributeDefaultXML aa
				 WHERE (aa.PimAttributeValueId = PPCP.PimAttributeValueId and AA.LocaleId = ZPAX.LocaleId)
				 FOR XML PATH('') , TYPE ) AS NVARCHAR(max))  AttributeEntity , ZPAX.LocaleId
		 FROM #ZnodePublishCategoryProduct PPCP 
		 INNER JOIN ZnodePimAttributeXML ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 where not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and PPCP.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		and exists(select * from #PimProductAttributeDefaultValue a  where PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		 and exists(select * from ZnodePimAttributeValue a Inner join ZnodePimProductAttributeDefaultValue b on a.PimAttributeValueId = b.PimAttributeValueId 
		            and PPCP.PimProductId = a.PimProductId and ZPAX.PimAttributeId = a.PimAttributeId )
		and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 ----Getting text attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,ZPAX.AttributeXML + '<AttributeValues>'+(SELECT ISNULL(ZPAVL.AttributeValue,'') FOR XML PATH (''))+'</AttributeValues>'  AttributeEntity, ZPAVL.LocaleId
		 FROM ZnodePimAttributeValue PPCP
		 INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		 INNER JOIN ZnodePimAttributeXML ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = ZPAVL.LocaleId)
		 INNER JOIN ZnodePimAttribute ZPA on PPCP.PimAttributeId = ZPA.PimAttributeId
	     where exists(select * from #ZnodePublishCategoryProduct PPCP1 WHERE PPCP1.PimProductId = PPCP.PimProductId) --(PPCP1.PimAttributeValueId =ZPAVL.PimAttributeValueId) and (ZPAX.PimAttributeId = PPCP1.PimAttributeId))
		 and not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		 group by PPCP.PimProductId , ZPA.AttributeCode,ZPAVL.AttributeValue ,ZPAX.AttributeXML,ZPAVL.AttributeValue, ZPAVL.LocaleId

		 ----Getting custome field value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPCFX.PimProductId , ZPCFX.CustomCode, '' AttributeValue ,ZPCFX.CustomeFiledXML  AttributeEntity, ZPCFX.LocaleId
		 FROM ZnodePimCustomeFieldXML ZPCFX 
		 where exists(select * from #ZnodePublishCategoryProduct PPCP where (PPCP.PimProductId = ZPCFX.PimProductId ))
		 and not exists(select * from #AttributeValueLocale AVL where ZPCFX.PimProductId = AVL.PimProductId and ZPCFX.CustomCode = AVL.AttributeCode and ZPCFX.LocaleId = AVL.LocaleId )
		 group by ZPCFX.PimProductId , ZPCFX.CustomCode, ZPCFX.CustomeFiledXML , ZPCFX.LocaleId

		  ----Getting image attribute value entity
		 INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId, ZPA.AttributeCode,'' AttributeValue,ZPAX.AttributeXML+'<AttributeValues>'
			    +stuff( (SELECT ','+ZPPAM.MediaPath FROM ZnodePimProductAttributeMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId)
				 FOR XML PATH('')), 1, 1, '') +'</AttributeValues>' , ZPAX.LocaleId
		 FROM ZnodePimAttributeValue PPCP 
		 INNER JOIN ZnodePimAttributeXML ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		 INNER JOIN ZnodePimAttribute ZPA ON ZPA.PimAttributeId = PPCP.PimAttributeId
		 where not exists(select * from #AttributeValueLocale AVL where PPCP.PimProductId = AVL.PimProductId and ZPA.AttributeCode = AVL.AttributeCode and ZPAX.LocaleId = AVL.LocaleId )
		 and exists(select * from ZnodePimProductAttributeMedia b where PPCP.PimAttributeValueId = b.PimAttributeValueId )
		 and exists(select * from #ZnodePublishCategoryProduct PPCP1 where PPCP.PimProductId = PPCP1.PimProductId )
		 and not exists(select * from ZnodePimConfigureProductAttribute UOP where ZPAX.PimAttributeId = UOP.PimAttributeId and PPCP.PimProductId = UOP.PimProductId )

		 -------------configurable attribute 		 
		INSERT INTO #AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT DISTINCT  UOP.PimProductId,c.AttributeCode,'' AttributeValue ,--'<Attributes><AttributeEntity>'+
		c.AttributeXML+'<AttributeValues></AttributeValues>'+'<SelectValues>'+
					   STUFF((
							SELECT DISTINCT '  '+REPLACE(AA.DefaultValueXML,'</SelectValuesEntity>','<VariantDisplayOrder>'+CAST(ISNULL(ZPA.DisplayOrder,0) AS VARCHAR(200))+'</VariantDisplayOrder>
							<VariantSKU>'+ISNULL(ZPAVL_SKU.AttributeValue,'')+'</VariantSKU>
							<VariantImagePath>'+ISNULL((SELECT ''+ZM.Path FOR XML Path ('')),'')+'</VariantImagePath></SelectValuesEntity>')   
						 FROM ZnodePimAttributeDefaultXML AA 
						 --INNER JOIN #PimDefaultValueLocale GH ON (GH.PimAttributeDefaultXMLId = AA.PimAttributeDefaultXMLId)
						 INNER JOIN ZnodePimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
						 INNER JOIN ZnodePimAttributeValue ZPAV1 ON (ZPAV1.PimAttributeValueId= ZPADV.PimAttributeValueId )
						 -- check/join for active variants 
						 INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId =ZPAV1.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId AND ZPAVL.AttributeValue = 'True')
						 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPAV1.PimProductId)
						 -- SKU
						 INNER JOIN ZnodePimAttributeValue ZPAV_SKU ON(YUP.PimProductId = ZPAV_SKU.PimProductId)
						 INNER JOIN ZnodePimAttributeValueLocale ZPAVL_SKU ON (ZPAVL_SKU.PimAttributeValueId = ZPAV_SKU.PimAttributeValueId)
						 LEFT  JOIN ZnodePimAttributeValue ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
						 LEFT JOIN ZnodePimProductAttributeMedia ZPAVM ON (ZPAVM.PimAttributeValueId= ZPAV12.PimAttributeValueId ) 
						 LEFT JOIN ZnodeMedia ZM ON (ZM.MediaId = ZPAVM.MediaId)
						 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPAV1.PimAttributeId)
						 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPAV1.pimAttributeId = UOP.PimAttributeId )
						 -- Active Variants
						 AND ZPAV.PimAttributeId = (SELECT TOP 1 PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'IsActive')
						 -- VariantSKU
						 AND ZPAV_SKU.PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode = 'SKU')
		FOR XML PATH, TYPE).value(N'.[1]', N'Nvarchar(max)'), 1, 1, '')+'</SelectValues> ' AttributeValue , --</AttributeEntity></Attributes>' 
		c.LocaleId
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeXML c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE  exists(select * from #ZnodePublishCategoryProduct PPCP1 where UOP.PimProductId = PPCP1.PimProductId )
		-------------configurable attribute 
			  
		 CREATE INDEX IDX_#AttributeValueLocale ON #AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		 	
		delete ZPPAX from ZnodePublishProductAttributeXML ZPPAX
		where exists (select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId )
		and not exists(select * from #AttributeValueLocale AVL where ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode )

		DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		SELECT @MaxCount = COUNT(*) FROM #AttributeValueLocale;

		SELECT @Rows = 200000
        
		SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
            DROP TABLE #Temp_ImportLoop;
        
		---- To get the min and max rows for import in loop
		;WITH cte AS 
		(
			SELECT RowId = 1, 
				   MinRow = 1, 
                   MaxRow = cast(@Rows as int)
            UNION ALL
            SELECT RowId + 1, 
                   MinRow + cast(@Rows as int), 
                   MaxRow + cast(@Rows as int)
            FROM cte
            WHERE RowId + 1 <= @MaxCount
		)
        SELECT RowId, MinRow, MaxRow
        INTO #Temp_ImportLoop
        FROM cte
		option (maxrecursion 0);

		DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
        FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop
		WHERE EXISTS(SELECT * FROM #AttributeValueLocale);

        OPEN cur_BulkData;
        FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

        WHILE @@FETCH_STATUS = 0
        BEGIN
		      update ZnodePublishProductAttributeXML set IsUpdateLocaleWise = 0 where isnull(IsUpdateLocaleWise,0) = 1
			  ----Update Product Attribute XML
			 UPDATE ZPPAX SET ZPPAX.Attributes = CAST(REPLACE(REPLACE(REPLACE(AVL.AttributeEntity,'&','&amp;'),'&amp;amp;','&amp;'),'&amp;amp;amp;','&amp;') as XML), ZPPAX.ModifiedBy = @UserId, ZPPAX.ModifiedDate = @GetDate 
			        , ZPPAX.IsUpdateLocaleWise = 0
			 FROM ZnodePublishProductAttributeXML ZPPAX 
			 INNER JOIN #AttributeValueLocale AVL ON ZPPAX.PimProductId = AVL.PimProductId and AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode 
			 where  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
		 
			 ----Insert Product Attribute XML
			 INSERT INTO ZnodePublishProductAttributeXML(PimProductId,LocaleId,AttributeCode,Attributes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			 SELECT AVL.PimProductId, AVL.LocaleId, AVL.AttributeCode, cast(replace(replace(replace(AVL.AttributeEntity,'&','&amp;'),'&amp;amp;','&amp;'),'&amp;amp;amp;','&amp;') as XML), @UserId CreatedBy, @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
			 FROM #AttributeValueLocale AVL
			 WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeXML ZPPAX WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId AND AVL.AttributeCode = ZPPAX.AttributeCode )
			 and  AVL.Id BETWEEN @MinRow AND @MaxRow and AVL.AttributeEntity is not null
			 GROUP BY AVL.PimProductId, AVL.AttributeEntity, AVL.LocaleId, AVL.AttributeCode

			 FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
        END;
		CLOSE cur_BulkData;
		DEALLOCATE cur_BulkData;
		
		delete ZPPAX
		from ZnodePublishProductAttributeXML ZPPAX
		where LocaleId <> @DefaultLocaleId
		and exists( select * from ZnodePublishProductAttributeXML ZPPAX1 where ZPPAX.AttributeCode = ZPPAX1.AttributeCode and ZPPAX.PimProductId = ZPPAX1.PimProductId )
		and not exists(select * from #ProductLocaleWise AVL where AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId )
		
		
		delete  ZPPAX
		from ZnodePublishProductAttributeXML ZPPAX
		WHERE not exists(select * from #ProductLocaleWise ZLW where ZPPAX.PimProductId = ZLW.PimProductId 
			                and ZPPAX.LocaleId = ZLW.LocaleId )

		select PimProductId,Attributes,AttributeCode
		into #ZnodePublishProductAttributeXML
		from ZnodePublishProductAttributeXML 
		where LocaleId = @DefaultLocaleId

		insert into ZnodePublishProductAttributeXML (PimProductId,Attributes,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeCode)
		select PimProductId,Attributes,b.id,@UserId,@GetDate,@UserId,@GetDate,AttributeCode
		from #ZnodePublishProductAttributeXML a
		cross apply @LocaleId b 
		where not exists(select * from ZnodePublishProductAttributeXML c where a.PimProductId = c.PimProductId and b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
		and b.Id <> @DefaultLocaleId
 END TRY 
 BEGIN CATCH 
  SELECT ERROR_MESSAGE()
 END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdatePimCatalogProductDetailJson')
	DROP PROC Znode_InsertUpdatePimCatalogProductDetailJson
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdatePimCatalogProductDetailJson] 
(
	@PublishCatalogId INT = 0, 
	@LocaleId TransferId READONLY, 
	@UserId INT = 0,
	@IsDraftProductsOnly BIT = 1
)
AS 

--declare @LocaleId TransferId
--INSERT INTO @LocaleId
--SELECT 1
--exec [Znode_InsertUpdatePimCatalogProductDetailJson_New] @PublishCatalogId=8,@LocaleId=@LocaleId,@UserId=2,@IsDraftProductsOnly=1
--select * from ZnodePublishCatalog
--declare @LocaleId TransferId
--INSERT INTO @LocaleId
--SELECT 1
----union 
----SELECT 4
----union 
----SELECT 2
--exec [Znode_POC_InsertUpdatePimCatalogProductDetail] @PublishCatalogId=3,@LocaleId=@LocaleId,@UserId=2
BEGIN 
BEGIN TRY 

  SET NOCOUNT ON 
	   IF OBJECT_ID('tempdb..##AttributeValueLocale') IS NOT NULL
		DROP TABLE ##AttributeValueLocale

       DECLARE @LocaleId_In INT = 0 , @DefaultLocaleId INT = dbo.FN_GETDefaultLocaleId()
			   ,@GetDate DATETIME = dbo.fn_GetDate(),@IsActiveAttributeId int , @SKUAttributeId int
	   DECLARE @PimMediaAttributeId INT = dbo.Fn_GetProductImageAttributeId()		   

	   select @IsActiveAttributeId = PimAttributeId from ZnodePimAttribute where AttributeCode = 'IsActive'
	   select @SKUAttributeId = PimAttributeId from ZnodePimAttribute where AttributeCode = 'SKU'

	   CREATE TABLE #PimDefaultValueLocale  (PimAttributeDefaultJsonId INT  PRIMARY KEY ,PimAttributeDefaultValueId INT ,LocaleId INT, DefaultValueJson	nvarchar(max) )

	   CREATE TABLE ##AttributeValueLocale  (Id int Identity,  PimProductId INT, AttributeCode Varchar(300), AttributeValue varchar(max), AttributeEntity varchar(max), LocaleId int )
	   
	   --Creating indexes on temp table
	   CREATE INDEX Idx_#AttributeValueLocale_1 ON ##AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
	   CREATE INDEX Idx_#AttributeValueLocale_2 ON [dbo].[##AttributeValueLocale] ([AttributeCode])
	   INCLUDE ([PimProductId],[AttributeValue],[LocaleId])

	   CREATE TABLE #ZnodePublishCategoryProduct
	   (
			PublishProductId INT,  PimAttributeId INT, PublishCatalogId INT, PimCategoryHierarchyId INT,PublishCategoryId INT, 
			PimAttributeValueId INT, CatalogName NVARCHAR(600),PimProductId INT,AttributeCode VARCHAR(600)
		)
		
		--CREATE INDEX #ZnodePublishCategoryProduct_2 ON #ZnodePublishCategoryProduct(PimAttributeId)
		--CREATE INDEX #ZnodePublishCategoryProduct_3 ON #ZnodePublishCategoryProduct(PimProductId,AttributeCode)
	   --SELECT PimProductId, PimAttributeId, PimAttributeValueId, ModifiedDate INTO ZnodePimAttributeValue FROM ZnodePimAttributeValue
	   --CREATE INDEX ZnodePimAttributeValue_PimAttributeValueId ON ZnodePimAttributeValue(PimAttributeValueId)
	   CREATE TABLE #ModifiedProducts1 (PublishProductId INT, PimCategoryHierarchyId INT,PimProductId INT)

	    --Fetching product SKU record which are active
	    Select ZPAV.PimProductId , ZPAVL.AttributeValue ,ZPAVL.LocaleId
		INTO  #VariantSKU 
		From ZnodePimAttributeValue ZPAV 
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (ZPAV.PimAttributevalueid = ZPAVL.PimAttributeValueId )  
		Where ZPAV.PimAttributeId = @SKUAttributeId
		and exists(Select ZPAV.PimProductId From ZnodePimAttributeValue ZPAV1 INNER JOIN ZnodePimAttributeValueLocale ZPAVL1
				ON (ZPAV1.PimAttributevalueid = ZPAVL1.PimAttributeValueId AND ZPAVL1.AttributeValue = 'True')
				 Where ZPAV1.PimAttributeId = @IsActiveAttributeId and ZPAV.PimProductId = ZPAV1.PimProductId)
		AND EXISTS(SELECT * FROM @LocaleId L WHERE ZPAVL.LocaleId = L.Id)

		CREATE INDEX Idx_#VariantSKU ON #VariantSKU(PimProductId) INCLUDE(AttributeValue)

		--Getting last successful publish datetime
	    DECLARE @PublishModifiedDate Datetime
		SET @PublishModifiedDate =
		(SELECT TOP 1 ModifiedDate 
		FROM ZnodePublishCatalogLog 
		WHERE PublishCatalogId = @PublishCatalogId AND PublishStateId = (SELECT TOP 1 PublishStateId FROM ZnodePublishState WHERE StateName = 'Publish')
		ORDER BY ModifiedDate DESC)

		--SELECT ZPP1.PimProductId , ZPCPD.PublishProductId, ZPCPD.PublishCatalogId,PCL.ModifiedDate
		--INTO #ProductAttributeXML
		--FROM ZnodePublishProduct ZPP1
		--INNER JOIN ZnodePublishCatalogProductDetail ZPCPD ON ZPP1.PublishProductId = ZPCPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPP1.PublishCatalogId 
		--CROSS APPLY #ZnodePublishCatalogLog PCL 
		--WHERE ZPCPD.PublishCatalogId =  @PublishCatalogId 

		--Getting publish product data with different category hierarchy
		SELECT ZPCC.PublishProductId , ZPCC.PublishCatalogId, ZPPC.PimCategoryHierarchyId, ZPPC.PublishCategoryId
		INTO #PublishCategoryProductData
		FROM ZnodePublishCategoryProduct ZPCC
		INNER JOIN ZnodePublishCategory ZPPC ON (ISNULL(ZPPC.PimCategoryHierarchyId,0) = ISNULL(ZPCC.PimCategoryHierarchyId,0) AND ZPPC.PublishCategoryId = ZPCC.PublishCategoryId)
		WHERE ZPCC.PublishCatalogId = @PublishCatalogId

		IF @IsDraftProductsOnly = 1
		BEGIN
			--All product of catalog updaing to draft as new locale is active
			IF (SELECT COUNT(*) FROM @LocaleId) <> (SELECT COUNT(DISTINCT LocaleId) FROM ZnodePublishProductEntity WHERE ZnodeCatalogId = @PublishCatalogId)
			BEGIN
				DECLARE @PublishStateIdForDraftState INT = dbo.Fn_GetPublishStateIdForDraftState()
				UPDATE ZPP SET PublishStateId = @PublishStateIdForDraftState
				FROM ZnodePimProduct ZPP
				WHERE EXISTS(SELECT * FROM ZnodePublishProduct ZPP1 WHERE ZPP.PimProductId = ZPP1.PimProductId AND ZPP1.PublishCatalogId = @PublishCatalogId)

			END

			---------- Products Attribute modified
			SELECT DISTINCT ZPP.PublishProductId,ZPP.PublishCatalogId, ZPP.PimProductId--,  ZPCC.PimCategoryHierarchyId 
			INTO #ModifiedProducts
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimAttributeValue ZPAV
				INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)  WHERE (ZPAV.PimProductId = ZPP.PimProductId )
				AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
				AND ZPAV.ModifiedDate > @PublishModifiedDate)

			----------Attributes modified so considering all products associated to those attributes
			INSERT INTO #ModifiedProducts
			SELECT DISTINCT ZPP.PublishProductId,ZPP.PublishCatalogId, ZPP.PimProductId--,  ZPCC.PimCategoryHierarchyId 
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimAttributeValue ZPAV
				INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)  WHERE (ZPAV.PimProductId = ZPP.PimProductId )
				AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
				AND ZPA.ModifiedDate > @PublishModifiedDate)
			
			-------- Products not published  
			INSERT INTO #ModifiedProducts
			SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
			AND EXISTS(SELECT * FROM ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
						WHERE StateName <> 'Publish' AND ZPP.PimProductId = ZPP1.PimProductId )	
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)
			
			-------- Products associated to catalog or category or modified catalog category products
			INSERT INTO #ModifiedProducts		
			SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
			AND EXISTS(SELECT * FROM ZnodePimCategoryProduct ZPCC1 WHERE  ZPP.PimProductId = ZPCC1.PimProductId  
				AND ZPCC1.ModifiedDate>@PublishModifiedDate)
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)

			---------- Link Product modified
			INSERT INTO #ModifiedProducts	
			SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimLinkProductDetail ZPAV WHERE (ZPAV.PimParentProductId = ZPP.PimProductId ) 
				AND  ZPAV.ModifiedDate> @PublishModifiedDate )
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)

							
			------Associated child Products (varients, Group) not published	
			INSERT INTO #ModifiedProducts	
			SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimProductTypeAssociation ZPAV WHERE (ZPAV.PimProductId = ZPP.PimProductId ) 
				AND EXISTS(SELECT * FROM ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
						WHERE StateName <> 'Publish' AND ZPAV.PimProductId = ZPP1.PimProductId ))
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)
			
			--------Link child Products (Bundle) not published 	
			INSERT INTO #ModifiedProducts
			SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimLinkProductDetail ZPAV WHERE (ZPAV.PimProductId = ZPP.PimProductId )
				AND EXISTS(SELECT * FROM ZnodePimProduct ZPP1 INNER JOIN ZnodePublishState ZPS ON ZPP1.PublishStateId = ZPS.PublishStateId
						WHERE StateName <> 'Publish' AND ZPAV.PimProductId = ZPP1.PimProductId ))
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)

			----Getting products of newly added category hierarchy 
			INSERT INTO #ModifiedProducts		
			SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))--AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
			AND EXISTS(SELECT * FROM ZnodePimCategoryProduct ZPCC1  
					INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId AND ZPC.PimCatalogId = ZPCH.PimCatalogId  
					WHERE ZPP.PimProductId = ZPCC1.PimProductId 
					AND ZPCH.ModifiedDate > @PublishModifiedDate)
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)
			
			SELECT ZnodeProductId, ZnodeCatalogId
			INTO #TempPublishProductEntity
			FROM ZnodePublishProductEntity
			WHERE ZnodeCatalogId = @PublishCatalogId

			IF EXISTS(SELECT * FROM #TempPublishProductEntity)
			BEGIN
				CREATE INDEX Id_#TempPublishProductEntity ON #TempPublishProductEntity(ZnodeProductId,ZnodeCatalogId)
				--Getting product data which are associated with catalog and not present in product entity table
				INSERT INTO #ModifiedProducts		
				SELECT ZPP.PublishProductId,ZPP.PublishCatalogId,ZPP.PimProductId
				FROM ZnodePublishProduct ZPP
				INNER JOIN ZnodePublishCatalogProductDetail ZPCPD ON ZPP.PublishProductId = ZPCPD.PublishProductId AND ZPP.PublishCatalogId = ZPCPD.PublishCatalogId
				WHERE NOT EXISTS(SELECT * FROM #TempPublishProductEntity b where b.ZnodeProductId= ZPCPD.PublishProductId AND B.ZnodeCatalogId = ZPCPD.PublishCatalogId )
				AND NOT EXISTS(SELECT * FROM #ModifiedProducts X WHERE ZPP.PublishProductId = X.PublishProductId)
			END

			--Fetching pimcategoryhierarchyid for published product
			INSERT INTO #ModifiedProducts1(PublishProductId, PimCategoryHierarchyId,PimProductId)
			SELECT DISTINCT ZPP.PublishProductId, ZPCC.PimCategoryHierarchyId,ZPP.PimProductId
			FROM #ModifiedProducts ZPP
			LEFT JOIN #PublishCategoryProductData ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId )
			
			---------------------Category associated to catalog or category or modified catalog
			SELECT ZPCH.PimCategoryId, ZPC1.PublishCategoryId, ZPCH.PimCategoryHierarchyId
			INTO #ModifiedCategory1
			FROM ZnodePimCategoryHierarchy ZPCH 
			INNER JOIN ZnodePublishCategory ZPC1 ON ZPCH.PimCategoryId = ZPC1.PimCategoryId 
			WHERE ZPC1.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogProductDetail BTM  
			WHERE BTM.PublishCatalogId = ZPC1.PublishCatalogId AND (BTM.ModifiedDate < ZPCH.ModifiedDate )   )
			AND NOT EXISTS(SELECT * FROM #ModifiedProducts1 MP WHERE  ISNULL(ZPCH.PimCategoryHierarchyId,0) = ISNULL(MP.PimCategoryHierarchyId,0))

			--INSERT INTO #ModifiedProducts1(PublishProductId, PimCategoryHierarchyId,PimProductId)	
			--SELECT BTM.PublishProductId, BTM.PimCategoryHierarchyId, ZPP.PimProductId
			--FROM ZnodePublishCatalogProductDetail BTM  
			--INNER JOIN ZnodePublishProduct ZPP ON BTM.PublishProductId = ZPP.PublishProductId AND BTM.PublishCatalogId = ZPP.PublishCatalogId
			--WHERE BTM.PublishCatalogId = @PublishCatalogId AND ISNULL(BTM.IsNotPublish,0) = 1
			
			IF EXISTS(SELECT TOP 1 1 FROM #ModifiedCategory1 )
			BEGIN
				-------- Category associated to catalog or category or modified catalog
				INSERT INTO #ModifiedProducts1		
				SELECT ZPP.PublishProductId,  ZPCC.PimCategoryHierarchyId,ZPP.PimProductId 
				FROM ZnodePublishProduct  ZPP
				INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
				INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
				INNER JOIN ZnodePimCategoryProduct ZPCC1 ON  ZPP.PimProductId = ZPCC1.PimProductId 
				INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC1.PimCategoryId = ZPCH.PimCategoryId AND ZPC.PimCatalogId = ZPCH.PimCatalogId 
				LEFT JOIN #PublishCategoryProductData ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
				WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
				AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId ))
				AND EXISTS (SELECT TOP 1 1 FROM #ModifiedCategory1 BTM WHERE BTM.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId  )
				AND NOT EXISTS(SELECT * FROM #ModifiedProducts1 X WHERE ZPP.PublishProductId = X.PublishProductId)
				------------------
			END
			
			--CREATE INDEX #ModifiedProducts1_PublishProductId ON #ModifiedProducts1(PublishProductId,PimCategoryHierarchyId)	
			--Getting all products of catalog for publish which are modified after last publish
			INSERT INTO #ZnodePublishCategoryProduct (PublishProductId,  PimAttributeId, PublishCatalogId , PimCategoryHierarchyId , PublishCategoryId,
					   PimAttributeValueId, CatalogName ,PimProductId ,AttributeCode)
			SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId
					,ZPAV.PimAttributeValueId, ZPC.CatalogName--,CASE WHEN ZPCC.PublishProductId IS NULL THEN 1 ELSE  dense_rank()Over(ORDER BY ZPCC.PimCategoryHierarchyId,ZPCC.PublishProductId) END  ProductIndex 	
					,ZPP.PimProductId ,ZPA.AttributeCode				
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
			INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
			INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
			LEFT JOIN #PublishCategoryProductData ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
			AND EXISTS (SELECT * FROM #ModifiedProducts1 MP WHERE ZPP.PublishProductId = MP.PublishProductId  ) 

		END
		ELSE 
		BEGIN	
			--Getting all products of catalog for publish first time 
			INSERT INTO #ZnodePublishCategoryProduct(PublishProductId,  PimAttributeId, PublishCatalogId , PimCategoryHierarchyId , PublishCategoryId,
				   PimAttributeValueId, CatalogName ,PimProductId ,AttributeCode)
			SELECT ZPP.PublishProductId,  ZPAV.PimAttributeId, ZPP.PublishCatalogId , ZPCC.PimCategoryHierarchyId , ZPCC.PublishCategoryId,
				   ZPAV.PimAttributeValueId, ZPC.CatalogName ,ZPP.PimProductId ,ZPA.AttributeCode				
			FROM ZnodePublishProduct  ZPP
			INNER JOIN ZnodePimProduct ZPPI ON (ZPPI.PimProductId = ZPP.PimProductId)
			INNER JOIN ZnodePimAttributeValue ZPAV ON (ZPAV.PimProductId = ZPP.PimProductId )
			INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = ZPAV.PimAttributeId)
			INNER JOIN ZnodePublishCatalog ZPC ON (ZPC.PublishCatalogId = ZPP.PublishCatalogId)
			LEFT JOIN #PublishCategoryProductData ZPCC  ON (ZPP.PublishProductId = ZPCC.PublishProductId AND ZPCC.PublishCatalogId = ZPP.PublishCatalogId)
			WHERE ZPP.PublishCatalogId =  @PublishCatalogId 
			AND EXISTS(SELECT * FROM ZnodePimFamilyGroupMapper ZPFGM WHERE (ZPFGM.PimAttributeFamilyId = ZPPI.PimAttributeFamilyId AND ZPFGM.PimAttributeId = ZPAV.PimAttributeId))
			--AND EXISTS(SELECT * FROM ZnodePimCategoryProduct ZPCP Inner Join ZnodePimCategoryHierarchy ZPCH ON ZPCP.PimCategoryId = ZPCH.PimCategoryId
			--WHERE ZPCP.PimProductId = ZPP.PimProductId AND ZPCH.PimCatalogId = ZPC.PimCatalogId)
		
			--Fetching pimcategoryhierarchyid
			INSERT INTO #ModifiedProducts1(PublishProductId, PimCategoryHierarchyId,PimProductId)
			SELECT DISTINCT PublishProductId, PimCategoryHierarchyId,PimProductId
			FROM #ZnodePublishCategoryProduct ZPCC 
			
		END
		
		CREATE INDEX #ModifiedProducts1_PimProductId ON #ModifiedProducts1(PimProductId)

		SELECT ZPAV.PimProductId, ZPP.PublishProductId, ZPAV.LocaleId
		into #ProductLocaleWise
		FROM #VariantSKU ZPAV
		INNER JOIN ZnodePublishProduct ZPP on ZPAV.PimProductId = ZPP.PimProductId
		WHERE EXISTS(SELECT * FROM @LocaleId L WHERE ZPAV.LocaleId = L.Id)
		AND ZPP.PublishCatalogId = @PublishCatalogId

		IF (SELECT COUNT(*) FROM @LocaleId) > 1
		BEGIN
			INSERT INTO #ProductLocaleWise(PimProductId,PublishProductId,LocaleId)
			SELECT a.PimProductId,a.PublishProductId,b.Id
			FROM #ProductLocaleWise a
			CROSS APPLY @LocaleId b 
			WHERE LocaleId = @DefaultLocaleId
			AND b.Id <> @DefaultLocaleId
			AND NOT EXISTS(select * from #ProductLocaleWise c where a.PimProductId = c.PimProductId and c.LocaleId = b.Id)
		END

		------------
		Select Distinct PimProductId,PublishProductId, PublishCatalogId ,PublishCategoryId,CatalogName,PimCategoryHierarchyId
	    into #ZnodePublishCategoryProductForValidation from #ZnodePublishCategoryProduct

		
		CREATE INDEX #ZnodePublishCategoryProductForValidation_PimProductId ON #ZnodePublishCategoryProductForValidation(PimProductId)

		CREATE INDEX IDX_#ZnodePublishCategoryProduct_1 ON #ZnodePublishCategoryProduct(PimProductId)
		
		CREATE INDEX IDX_#ZnodePublishCategoryProduct_3 ON #ZnodePublishCategoryProduct(PublishCategoryId)

		--
		

		------Getting All Link Product Details
		SELECT ZPLPD.PimParentProductId, ZPLPD.PimProductId, ZPLPD.PimAttributeId, ZPAV.AttributeValue as SKU
		INTO #LinkProduct
		FROM ZnodePimLinkProductDetail ZPLPD 
		INNER JOIN #VariantSKU ZPAV ON (ZPAV.PimProductId = ZPLPD.PimProductId)
		WHERE EXISTS(SELECT * FROM #ModifiedProducts1 X WHERE X.PimProductId = ZPLPD.PimParentProductId)
		
		CREATE INDEX #LinkProduct_1 ON #LinkProduct(PimParentProductId,PimAttributeId)
		
		----Getting products link product value entity
	     INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
	     SELECT ZPLP.PimParentProductId ,ZPAX.AttributeCode, '' AttributeValue , 
		 JSON_MODIFY( JSON_Modify(ZPAX.AttributeJson , '$.AttributeValues' , 
		 ISNULL(SUBSTRING ( (SELECT ','+cast( LP.SKU as varchar(600))
							FROM #LinkProduct LP
							WHERE LP.PimParentProductId = ZPLP.PimParentProductId 
							AND LP.PimAttributeId = ZPLP.PimAttributeId FOR XML PATH('')),2,8000),'') ),'$.SelectValues',Json_Query('[]'))   

							, ZPAX.LocaleId
		 FROM ZnodePimLinkProductDetail ZPLP
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPLP.PimAttributeId )
		 WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProductForValidation PPCP  WHERE (ZPLP.PimParentProductId = PPCP.PimProductId ))
		 AND EXISTS(SELECT * FROM @LocaleId L WHERE ZPAX.LocaleId = L.Id)
		 GROUP BY ZPLP.PimParentProductId ,ZPAX.AttributeCode , ZPAX.AttributeJSON,ZPAX.LocaleId,ZPAX.AttributeCode,ZPLP.PimAttributeId
		
		----Getting product attribute value entity 
		SELECT PPCP.PimProductId , ZPA.AttributeCode,
		ISNULL(ZPAVL.AttributeValue,'') AttributeValue,
		ZPAVL.LocaleId,ZPA.PimAttributeId---,ZPAX.AttributeJSON
		into #ZnodePimAttributeValueLocale
		FROM ZnodePimAttributeValue PPCP
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		INNER JOIN ZnodePimAttributeValueLocale ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProductForValidation PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)
		AND NOT EXISTS(select * from ZnodePimConfigureProductAttribute UOP where PPCP.PimProductId = UOP.PimProductId AND PPCP.PimAttributeId = UOP.PimAttributeId)

		create index #ZnodePimAttributeValueLocale_1 on #ZnodePimAttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		create index #ZnodePimAttributeValueLocale_2 on #ZnodePimAttributeValueLocale(PimAttributeId)
		
		SELECT ZPAVL.PimProductId , ZPAVL.AttributeCode,ZPAVL.AttributeValue ,
				JSON_MODIFY(
				JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
				,'$.SelectValues',Json_Query('[]'))   
				AS 'AttributeEntity'
				, 
				ZPAVL.LocaleId
		INTO #TempValueLocale
		FROM #ZnodePimAttributeValueLocale ZPAVL  
		INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPAVL.PimAttributeId and ZPAX.LocaleId = ZPAVL.LocaleId)
		WHERE EXISTS(Select Id from @LocaleId x where ZPAVL.LocaleId = x.Id) 
		AND NOT EXISTS(select * from ##AttributeValueLocale AVL where ZPAVL.PimProductId = AVL.PimProductId and ZPAVL.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		
		
		----Creating products attribute wise json of attribute value entity
		INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT PimProductId,AttributeCode,AttributeValue,AttributeEntity,LocaleId
		FROM #TempValueLocale

		 IF (SELECT COUNT(*) from @LocaleId) > 1
		 BEGIN
				----Getting product attribute value entity getting for other locale with default attribute json
				  INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
				  SELECT ZPAVL.PimProductId , ZPAVL.AttributeCode,ZPAVL.AttributeValue ,
							JSON_MODIFY(
							JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') )    
							,'$.SelectValues',Json_Query('[]'))   
							AS 'AttributeEntity', 
						 ZPAVL.LocaleId
				  FROM #ZnodePimAttributeValueLocale ZPAVL 
				  INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPAVL.PimAttributeId AND ZPAX.LocaleId = @DefaultLocaleId)
				  WHERE ZPAX.LocaleId = @DefaultLocaleId AND ZPAVL.LocaleId <> @DefaultLocaleId 
				  AND EXISTS(SELECT * FROM @LocaleId L WHERE ZPAVL.LocaleId = L.Id) 
				  AND NOT EXISTS(SELECT * FROM ##AttributeValueLocale AVL where ZPAVL.PimProductId = AVL.PimProductId and ZPAVL.AttributeCode = AVL.AttributeCode and ZPAVL.LocaleId = AVL.LocaleId )
		END
			
		IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail

		IF OBJECT_ID('TEMPDB..#ZnodePublishCatalogProductDetail1') IS NOT NULL
			DROP TABLE #ZnodePublishCatalogProductDetail1

		IF OBJECT_ID('TEMPDB..#TBL_ProductRequiredAttribute') IS NOT NULL
			DROP TABLE #TBL_ProductRequiredAttribute
		  
		CREATE TABLE #TBL_ProductRequiredAttribute (PimProductId INT,SKU VARCHAR(600),ProductName VARCHAR(600), IsActive VARCHAR(10), LocaleId INT)

		--Getting disctinct products locale wise
		INSERT INTO #TBL_ProductRequiredAttribute(PimProductId, LocaleId)
		SELECT DISTINCT PimProductId, LocaleId FROM ##AttributeValueLocale

		--Updating SKU
		UPDATE #TBL_ProductRequiredAttribute 
		SET SKU = b.AttributeValue
		FROM #TBL_ProductRequiredAttribute a
		INNER JOIN ##AttributeValueLocale b ON a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		WHERE b.AttributeCode = 'SKU'

		--Updating ProductName
		UPDATE #TBL_ProductRequiredAttribute 
		SET ProductName = b.AttributeValue
		FROM #TBL_ProductRequiredAttribute a
		INNER JOIN ##AttributeValueLocale b ON a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		WHERE b.AttributeCode = 'ProductName'

		--Updating IsActive
		UPDATE #TBL_ProductRequiredAttribute 
		SET IsActive = b.AttributeValue
		FROM #TBL_ProductRequiredAttribute a
		INNER JOIN ##AttributeValueLocale b ON a.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		WHERE b.AttributeCode = 'IsActive'

		  --CREATE INDEX IDX_#TBL_ProductRequiredAttribute_PimProductId ON #TBL_ProductRequiredAttribute(PimProductId)	  
		  SELECT ZPI.PublishProductId, ZPI.PublishCatalogId ,TYU.PublishCategoryId,ZPI.CatalogName,ISNULL(ZPI.PimCategoryHierarchyId,0) PimCategoryHierarchyId
					,TPAR.SKU,TPAR.ProductName,TPAR.IsActive,TYU.PublishCategoryName CategoryName,ISNULL(TYU.LocaleId,TPAR.LocaleId) as LocaleId
		   INTO #ZnodePublishCatalogProductDetail
		   FROM #ZnodePublishCategoryProduct ZPI
		   INNER JOIN #TBL_ProductRequiredAttribute TPAR ON (TPAR.PimProductId = ZPI.PimProductId )
		   LEFT JOIN ZnodePublishCategoryDetail TYU ON (TYU.PublishCategoryId = ZPI.PublishCategoryId AND TPAR.LocaleId = TYU.LocaleId )
		   GROUP BY PublishProductId, PublishCatalogId ,TYU.PublishCategoryId,CatalogName,PimCategoryHierarchyId
					,SKU,ProductName,TPAR.IsActive,PublishCategoryName, TYU.LocaleId, TPAR.LocaleId
  
			CREATE INDEX IDX_#ZnodePublishCatalogProductDetail ON #ZnodePublishCatalogProductDetail(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)

			--Creating product index
			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive
			      ,CASE WHEN PublishProductId IS NULL THEN 1 ELSE Row_Number()Over(Partition by PublishCatalogId,PublishProductId,LocaleId ORDER BY PublishProductId,PimCategoryHierarchyId,LocaleId) END  ProductIndex
			INTO #ZnodePublishCatalogProductDetail1
			FROM #ZnodePublishCatalogProductDetail Temp
			WHERE EXISTS(SELECT * FROM #ProductLocaleWise PL WHERE Temp.PublishProductId = PL.PublishProductId)
			  
			--Getting locale wise product which are not present for other locale (other than default locale)  
			INSERT INTO #ZnodePublishCatalogProductDetail1 (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, LocaleId ,IsActive,ProductIndex)
			SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName, b.Id ,IsActive,ProductIndex
			FROM #ZnodePublishCatalogProductDetail1 a
			CROSS APPLY @LocaleId b 
			WHERE NOT EXISTS(SELECT * FROM #ZnodePublishCatalogProductDetail1 c WHERE a.PublishProductId = c.PublishProductId AND b.Id = c.LocaleId  )
			AND a.LocaleId = @DefaultLocaleId 
			AND a.PublishCatalogId = @PublishCatalogId

			----Deleting product data which are not present
			--DELETE ZPCPD 
			--FROM ZnodePublishCatalogProductDetail ZPCPD
			--WHERE NOT EXISTS(SELECT * FROM #ProductLocaleWise ZPCPD1 WHERE ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			--                 AND ZPCPD.LocaleId = ZPCPD1.LocaleId )  
			--AND ZPCPD.PublishCatalogId = @PublishCatalogId
			
			--Deleting product data which are not present in category hierarchy
			DELETE ZPCPD 
			FROM ZnodePublishCatalogProductDetail ZPCPD
			WHERE EXISTS(SELECT * FROM #ZnodePublishCatalogProductDetail ZPCPD1 WHERE 
						ZPCPD.PublishProductId = ZPCPD1.PublishProductId 
			            AND ZPCPD.LocaleId = ZPCPD1.LocaleId 
						AND ISNULL(ZPCPD1.PimCategoryHierarchyId,0)  <> 0 ) AND ZPCPD.PimCategoryHierarchyId =0
			AND ZPCPD.PublishCatalogId = @PublishCatalogId
			
			create index #ZnodePublishCatalogProductDetail1_1 on #ZnodePublishCatalogProductDetail1(SKU,LocaleId)
			create index #ZnodePublishCatalogProductDetail1_2 on #ZnodePublishCatalogProductDetail1(PublishProductId,PublishCatalogId,PimCategoryHierarchyId,LocaleId)
			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  TARGET.ProductIndex	=SOURCE.ProductIndex
				,TARGET.SKU = SOURCE.SKU
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @GetDate
			FROM ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        SOURCE.PublishProductId = TARGET.PublishProductId
				AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
				AND ISNULL(SOURCE.PimCategoryHierarchyId,0) = ISNULL(TARGET.PimCategoryHierarchyId,0)
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)
			WHERE TARGET.PublishCatalogId = @PublishCatalogId

			----Update data ZnodePublishCatalogProductDetail 
			UPDATE TARGET
			SET  
				TARGET.ProductName		=SOURCE.ProductName
				,TARGET.CatalogName		=SOURCE.CatalogName
				,TARGET.IsActive		=case when SOURCE.IsActive in ('0','false') then 0 else 1 end 
				,TARGET.ModifiedBy		= @UserId	
				,TARGET.ModifiedDate	= @GetDate
			FROM ZnodePublishCatalogProductDetail TARGET
			INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
			ON (
		        TARGET.SKU = SOURCE.SKU
				AND SOURCE.LocaleId = TARGET.LocaleId --@LocaleId_In
				)
			WHERE TARGET.PublishCatalogId = @PublishCatalogId

			
		----Update data ZnodePublishCatalogProductDetail 
		UPDATE TARGET
		SET  
			TARGET.CategoryName	=SOURCE.CategoryName
			,TARGET.ModifiedBy		= @UserId	
			,TARGET.ModifiedDate	= @GetDate
		FROM ZnodePublishCatalogProductDetail TARGET
		INNER JOIN #ZnodePublishCatalogProductDetail1 SOURCE
		ON (
		    TARGET.SKU = SOURCE.SKU
			AND SOURCE.LocaleId = TARGET.LocaleId 
			AND ISNULL(SOURCE.PimCategoryHierarchyId,0) = ISNULL(TARGET.PimCategoryHierarchyId,0)
			)
		WHERE ISNULL(TARGET.PimCategoryHierarchyId,0) <> 0
		AND TARGET.PublishCatalogId = @PublishCatalogId

		----Insert data ZnodePublishCatalogProductDetail 
		INSERT INTO ZnodePublishCatalogProductDetail
			( PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate )
		SELECT SOURCE.PublishProductId ,SOURCE.PublishCatalogId ,SOURCE.PimCategoryHierarchyId ,SOURCE.SKU ,SOURCE.ProductName
		,SOURCE.CategoryName ,SOURCE.CatalogName ,SOURCE.LocaleId ,SOURCE.IsActive ,SOURCE.ProductIndex ,@UserId ,@GetDate ,@UserId ,@GetDate
		FROM #ZnodePublishCatalogProductDetail1 SOURCE
		WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail TARGET WHERE SOURCE.PublishProductId = TARGET.PublishProductId
						AND SOURCE.PublishCatalogId = TARGET.PublishCatalogId 
						AND SOURCE.PimCategoryHierarchyId = TARGET.PimCategoryHierarchyId 
						AND TARGET.LocaleId = SOURCE.LocaleId )
		AND SOURCE.PublishCatalogId = @PublishCatalogId
				
		----Inserting product data for other locale		  
		INSERT INTO ZnodePublishCatalogProductDetail (PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				LocaleId ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT PublishProductId,PublishCatalogId,PimCategoryHierarchyId,SKU,ProductName,CategoryName, CatalogName,
				b.Id ,IsActive,ProductIndex,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		FROM ZnodePublishCatalogProductDetail a
		CROSS APPLY @LocaleId b 
		WHERE NOT EXISTS(SELECT * FROM ZnodePublishCatalogProductDetail c WHERE a.PublishProductId = c.PublishProductId AND b.Id = c.LocaleId  )
		AND a.LocaleId = @DefaultLocaleId
		AND a.PublishCatalogId = @PublishCatalogId
		
		DELETE ZPCPD FROM ZnodePublishCatalogProductDetail ZPCPD
		INNER JOIN ZnodePublishProduct ZPD ON ZPCPD.PublishProductId = ZPD.PublishProductId AND ZPCPD.PublishCatalogId = ZPD.PublishCatalogId
		INNER JOIN ZnodePublishCatalog ZPC ON ZPCPD.PublishCatalogId = ZPC.PublishCatalogId
		WHERE NOT EXISTS(SELECT * FROM ZnodePimCategoryProduct ZPCC 
			    INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId WHERE ZPD.PimProductId = ZPCC.PimProductId AND ZPC.PimCatalogId = ZPCH.PimCatalogId AND ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId)
		AND ZPCPD.PimCategoryHierarchyId <> 0
		AND ZPCPD.PublishCatalogId = @PublishCatalogId
		
		----Updating the SKU into table ZnodePublishCatalogProductDetail
		UPDATE ZnodePublishCatalogProductDetail 
		SET SKU = b.AttributeValue
		FROM ZnodePublishCatalogProductDetail a
		INNER JOIN ZnodePublishProduct ZPP ON a.PublishProductId = ZPP.PublishProductId
		INNER JOIN ##AttributeValueLocale b ON ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		WHERE b.AttributeCode = 'SKU'
		AND a.PublishCatalogId = @PublishCatalogId

		----Updating the ProductName into table ZnodePublishCatalogProductDetail
		UPDATE ZnodePublishCatalogProductDetail 
		SET ProductName = b.AttributeValue
		FROM ZnodePublishCatalogProductDetail a
		INNER JOIN ZnodePublishProduct ZPP ON a.PublishProductId = ZPP.PublishProductId
		INNER JOIN ##AttributeValueLocale b ON ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		WHERE b.AttributeCode = 'ProductName'
		AND a.PublishCatalogId = @PublishCatalogId

		----Updating the IsActive into table ZnodePublishCatalogProductDetail
		UPDATE ZnodePublishCatalogProductDetail 
		SET IsActive = b.AttributeValue
		FROM ZnodePublishCatalogProductDetail a
		INNER JOIN ZnodePublishProduct ZPP ON a.PublishProductId = ZPP.PublishProductId
		INNER JOIN ##AttributeValueLocale b ON ZPP.PimproductId = b.PimProductId AND a.LocaleId = b.LocaleId
		WHERE b.AttributeCode = 'IsActive'
		AND a.PublishCatalogId = @PublishCatalogId
		
		---- To clean Older Hierarchies associations.
		DELETE ZPCPD
		FROM ZnodePublishCatalogProductDetail ZPCPD
		WHERE NOT EXISTS (select top 1 1 from ZnodePimCategoryHierarchy ZPCH where (ZPCPD.PimCategoryHierarchyId = ZPCH.PimCategoryHierarchyId))
		AND ISNULL(ZPCPD.PimCategoryHierarchyId,0) <>0
		
		SELECT a.PimProductId,  a.PimAttributeId, a.PimAttributeValueId, b.PimAttributeDefaultValueId, b.LocaleId
		INTO #PimProductAttributeDefaultValue
		FROM ZnodePimAttributeValue a 
		INNER JOIN ZnodePimProductAttributeDefaultValue b ON a.PimAttributeValueId = b.PimAttributeValueId 
		WHERE EXISTS(SELECT * FROM #ZnodePublishCategoryProductForValidation X WHERE X.PimProductId = a.PimProductId)
		
		CREATE INDEX Idx_#PimProductAttributeDefaultValue ON #PimProductAttributeDefaultValue (PimProductId,PimAttributeId)
		--CREATE INDEX Idx_#PimProductAttributeDefaultValue_1 ON #PimProductAttributeDefaultValue (PimAttributeDefaultValueId,LocaleId)

		SELECT  AA.DefaultValueJson , ZPADV.PimAttributeValueId, AA.LocaleId 
		INTO #PimAttributeDefaultXML
		FROM ZnodePimAttributeDefaultJSON AA 
		INNER JOIN #PimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId AND AA.LocaleId = ZPADV.LocaleId)
		
		--create index #PimAttributeDefaultXML on #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		--To get the data localwise
		IF (SELECT COUNT(*) FROM @LocaleId)>1
		BEGIN
			INSERT INTO #PimAttributeDefaultXML (DefaultValueJson, PimAttributeValueId, LocaleId)
			SELECT A.DefaultValueJson , A.PimAttributeValueId,b.id 
			FROM #PimAttributeDefaultXML A CROSS APPLY  @LocaleId b  
			WHERE NOT EXISTS ( SELECT * FROM #PimAttributeDefaultXML c WHERE a.PimAttributeValueId  = c.PimAttributeValueId AND c.LocaleId = b.Id )
			AND b.Id <> @DefaultLocaleId
		END
		
		------Getting child facets for merging   
		SELECT DISTINCT ZPPADV.PimAttributeDefaultValueId, ZPAV_Parent.PimAttributeValueId, ZPPADV.LocaleId
		INTO #PimChildProductFacets
		FROM ZnodePimAttributeValue ZPAV_Parent
		INNER JOIN ZnodePimProductTypeAssociation ZPPTA ON ZPAV_Parent.PimProductId = ZPPTA.PimParentProductId
		INNER JOIN #PimProductAttributeDefaultValue ZPPADV ON ZPPTA.PimProductId = ZPPADV.PimProductId AND ZPAV_Parent.PimAttributeId = ZPPADV.PimAttributeId
		WHERE EXISTS(SELECT * FROM ZnodePimFrontendProperties ZPFP WHERE ZPAV_Parent.PimAttributeId = ZPFP.PimAttributeId AND ZPFP.IsFacets = 1)
		AND EXISTS(SELECT * FROM #ZnodePublishCategoryProduct ZPPC WHERE ZPAV_Parent.PimProductId = ZPPC.PimProductId )
		AND NOT EXISTS(SELECT * FROM #PimProductAttributeDefaultValue ZPPADV1 WHERE ZPAV_Parent.PimAttributeValueId = ZPPADV1.PimAttributeValueId 
		                AND ZPPADV1.PimAttributeDefaultValueId = ZPPADV.PimAttributeDefaultValueId )

		----Merging childs facet attribute Default value XML for parent
		INSERT INTO #PimAttributeDefaultXML (DefaultValueJson, PimAttributeValueId, LocaleId)
		SELECT ZPADX.DefaultValueJson, ZPPADV.PimAttributeValueId, ZPPADV.LocaleId
		FROM #PimChildProductFacets ZPPADV		  
		INNER JOIN ZnodePimAttributeDefaultJSON ZPADX ON ( ZPPADV.PimAttributeDefaultValueId = ZPADX.PimAttributeDefaultValueId AND ZPPADV.LocaleId = ZPADX.LocaleId)
		
		CREATE INDEX Idx_#PimDefaultValueLocale ON #PimDefaultValueLocale(PimAttributeDefaultJsonId,LocaleId)

		CREATE INDEX Idx_#PimAttributeDefaultXML ON #PimAttributeDefaultXML(PimAttributeValueId,LocaleId)
		INCLUDE (DefaultValueJson)

		CREATE INDEX #ZnodePublishCategoryProduct_2 ON #ZnodePublishCategoryProduct(PimProductId,PimAttributeId)
		--CREATE INDEX #ZnodePublishCategoryProduct_3 ON #ZnodePublishCategoryProduct(PimProductId,AttributeCode)
		
		SELECT PPCP.PimProductId, PPCP.AttributeCode,PPCP.PimAttributeValueId, PPCP.PimAttributeId,ZPAX.AttributeJson,ZPAX.LocaleId
		INTO #ZnodeProductattributeDefaultData
		FROM #ZnodePublishCategoryProduct PPCP
		INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId)
		WHERE EXISTS(SELECT * FROM #PimProductAttributeDefaultValue a  WHERE PPCP.PimProductId = a.PimProductId AND PPCP.PimAttributeId = a.PimAttributeId )
		AND EXISTS(SELECT * FROM @LocaleId L WHERE ZPAX.LocaleId = L.Id)
		AND NOT EXISTS(SELECT * FROM ZnodePimConfigureProductAttribute UOP WHERE PPCP.PimProductId = UOP.PimProductId AND PPCP.PimAttributeId = UOP.PimAttributeId )
		--AND NOT EXISTS(SELECT * FROM ##AttributeValueLocale AVL WHERE PPCP.PimProductId = AVL.PimProductId AND PPCP.AttributeCode = AVL.AttributeCode AND ZPAX.LocaleId = AVL.LocaleId )
		 
	
		--CREATE INDEX IDX_#ZnodeProductattributeDefaultData_1 ON #ZnodeProductattributeDefaultData(PimProductId,PimAttributeId)
		CREATE INDEX IDX_#ZnodeProductattributeDefaultData_2 ON #ZnodeProductattributeDefaultData(PimProductId,AttributeCode,LocaleId)
		CREATE INDEX IDX_#ZnodeProductattributeDefaultData_3 ON #ZnodeProductattributeDefaultData(PimAttributeValueId,LocaleId)
		
		SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
		JSON_MODIFY (JSON_MODIFY (PPCP.AttributeJson,'$.AttributeValues',''), '$.SelectValues',
			
				ISNULL((SELECT 
							ISNULL(JSON_VALUE(DefaultValueJson, '$.Code'),'') Code 
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.LocaleId'),0) LocaleId
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.Value'),'') Value
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.SwatchText'),'') SwatchText
							,ISNULL(JSON_VALUE(DefaultValueJson, '$.Path'),'') Path
					FROM #PimAttributeDefaultXML aa
					WHERE (aa.PimAttributeValueId = PPCP.PimAttributeValueId AND AA.LocaleId = PPCP.LocaleId ) For JSON Auto 
				),'[]') 
				) 
			 AttributeEntity 
		 , PPCP.LocaleId
		 INTO #DefaultData
		 FROM #ZnodeProductattributeDefaultData PPCP 
		 WHERE NOT EXISTS(SELECT * FROM ##AttributeValueLocale AVL WHERE PPCP.PimProductId = AVL.PimProductId AND PPCP.AttributeCode = AVL.AttributeCode AND PPCP.LocaleId = AVL.LocaleId )
		
		----Getting default attribute value entity
		INSERT INTO ##AttributeValueLocale		
		SELECT PimProductId,AttributeCode,'' AttributeValue,AttributeEntity,LocaleId
		FROM #DefaultData
		
		 
		--Getting text attribute value entity		
		SELECT PPCP.PimProductId , ZPA.AttributeCode,ISNULL(ZPAVL.AttributeValue,'') AttributeValue,ZPAVL.LocaleId,ZPA.PimAttributeId
		INTO #TempTxtArea
		FROM ZnodePimAttributeValue PPCP
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		INNER JOIN ZnodePimProductAttributeTextAreaValue ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		WHERE EXISTS (Select * from @LocaleId x where ZPAVL.LocaleId = x.Id) AND
		EXISTS(SELECT * FROM #ZnodePublishCategoryProductForValidation PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)
		
		CREATE INDEX Idx_#TempTxtArea_1 ON #TempTxtArea(PimAttributeId,LocaleId)
		CREATE INDEX Idx_#TempTxtArea_2 ON #TempTxtArea(PimProductId,AttributeCode,LocaleId)

		--Getting tex area attribute value entity		
		SELECT ZPAVL.PimProductId , ZPAVL.AttributeCode,'' AttributeValue ,
			JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
		    AS 'AttributeEntity', 
		 ZPAVL.LocaleId
		INTO #TempTxtAreaEntity
		FROM #TempTxtArea ZPAVL 
		INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPAVL.PimAttributeId AND ZPAVL.LocaleId = ZPAX.LocaleId)

		IF (SELECT COUNT(*) FROM @LocaleId) > 1
		BEGIN
			----Getting product attribute value entity getting for other locale with text area attribute json
			INSERT INTO #TempTxtAreaEntity(PimProductId,AttributeCode,AttributeValue,AttributeEntity,LocaleId)
			SELECT ZPAVL.PimProductId , ZPAVL.AttributeCode,'' AttributeValue ,
				JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues' ,  ISNULL(ZPAVL.AttributeValue,'') ) ,'$.SelectValues',Json_Query('[]'))
				AS 'AttributeEntity', 
			 ZPAVL.LocaleId
			FROM #TempTxtArea ZPAVL 
			INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = ZPAVL.PimAttributeId AND ZPAX.LocaleId = @DefaultLocaleId)
			WHERE Exists (SELECT TOP 1 1 FROM @LocaleId X WHERE X.Id =  ZPAVL.LocaleId )
			AND ZPAX.LocaleId = @DefaultLocaleId AND ZPAVL.LocaleId <> @DefaultLocaleId
			AND NOT EXISTS(SELECT * FROM #TempTxtAreaEntity ZPAVL1 WHERE ZPAVL.PimProductId = ZPAVL1.PimProductId AND ZPAVL.AttributeCode = ZPAVL1.AttributeCode AND ZPAVL.LocaleId = ZPAVL1.LocaleId)
		END
		
		INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		Select PimProductId , AttributeCode,'' AttributeValue ,AttributeEntity, LocaleId 
		FROM #TempTxtAreaEntity

		 ----Getting custom field value entity
		 INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
 		 SELECT ZPCFX.PimProductId , ZPCFX.CustomCode, '' AttributeValue ,
			JSON_MODIFY (Json_Query( ZPCFX.CustomeFiledJson) ,'$.SelectValues',Json_Query('[]')) AttributeEntity, 
			ZPCFX.LocaleId
		 FROM ZnodePimCustomeFieldJSON ZPCFX 
		 WHERE EXISTS (Select * from @LocaleId x where ZPCFX.LocaleId = x.Id) 
		 AND EXISTS(SELECT * FROM #ZnodePublishCategoryProduct PPCP WHERE (PPCP.PimProductId = ZPCFX.PimProductId ))
		 AND NOT EXISTS(SELECT * FROM ##AttributeValueLocale AVL WHERE ZPCFX.PimProductId = AVL.PimProductId AND ZPCFX.CustomCode = AVL.AttributeCode AND ZPCFX.LocaleId = AVL.LocaleId )
		 GROUP BY ZPCFX.PimProductId , ZPCFX.CustomCode, ZPCFX.CustomeFiledJson , ZPCFX.LocaleId
		 
		 --Getting Media attribute value entity		
		SELECT PPCP.PimProductId , ZPA.AttributeCode,ISNULL(ZPAVL.MediaPath,'') AttributeValue,ZPAVL.LocaleId,ZPA.PimAttributeId,PPCP.PimAttributeValueId
		INTO #TempMedia
		FROM ZnodePimAttributeValue PPCP
		INNER JOIN ZnodePimAttribute ZPA ON (ZPA.PimAttributeId = PPCP.PimAttributeId)
		INNER JOIN ZnodePimProductAttributeMedia ZPAVL ON (PPCP.PimAttributeValueId =ZPAVL.PimAttributeValueId)
		WHERE EXISTS (SELECT * FROM @LocaleId x where ZPAVL.LocaleId = x.Id) AND
		EXISTS(SELECT * FROM #ZnodePublishCategoryProductForValidation PPCP1  WHERE PPCP1.PimProductId = PPCP.PimProductId)
		
		CREATE INDEX #TempMedia_1 ON #TempMedia(PimAttributeValueId,LocaleId)
		CREATE INDEX #TempMedia_2 ON #TempMedia(PimAttributeId)
		CREATE INDEX #TempMedia_3 ON #TempMedia(PimProductId,AttributeCode,LocaleId)

		 ----Getting image attribute value entity
		 INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		 SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
		 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues',  
		 ISNULL((SELECT stuff( (SELECT ','+ZPPAM.AttributeValue FROM #TempMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId AND PPCP.LocaleId = ZPAX.LocaleId )
				 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
				 
				 ),'') ) ,'$.SelectValues',Json_Query('[]'))   
				 AS 'AttributeEntity', 
				 ZPAX.LocaleId
		 FROM #TempMedia PPCP 
		 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = PPCP.LocaleId)
		 WHERE Exists (SELECT TOP 1 1 FROM @LocaleId X WHERE X.Id =  ZPAX.LocaleId )  
		 AND NOT EXISTS(SELECT * FROM ##AttributeValueLocale AVL WHERE PPCP.PimProductId = AVL.PimProductId AND PPCP.AttributeCode = AVL.AttributeCode AND ZPAX.LocaleId = PPCP.LocaleId )
		 AND NOT EXISTS(SELECT * FROM ZnodePimConfigureProductAttribute UOP WHERE ZPAX.PimAttributeId = UOP.PimAttributeId AND PPCP.PimProductId = UOP.PimProductId )
	
		 IF (SELECT COUNT(*) FROM @LocaleId) > 1
		 BEGIN
				----Getting product attribute value entity getting for other locale with default attribute json
				INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
				 SELECT PPCP.PimProductId, PPCP.AttributeCode,'' AttributeValue,
				 JSON_MODIFY (JSON_MODIFY (Json_Query( ZPAX.AttributeJSON  ) , '$.AttributeValues',  
				 ISNULL((SELECT stuff( (SELECT ','+ZPPAM.AttributeValue FROM #TempMedia ZPPAM WHERE (ZPPAM.PimAttributeValueId = PPCP.PimAttributeValueId AND PPCP.LocaleId = ZPAX.LocaleId )
						 FOR XML PATH(''),Type).value('.', 'varchar(max)'), 1, 1, '')
				 
						 ),'') ) ,'$.SelectValues',Json_Query('[]'))   
						 AS 'AttributeEntity', 
						 PPCP.LocaleId
				 FROM #TempMedia PPCP 
				 INNER JOIN ZnodePimAttributeJSON ZPAX ON (ZPAX.PimAttributeId = PPCP.PimAttributeId AND ZPAX.LocaleId = @DefaultLocaleId)
				 WHERE ZPAX.LocaleId = @DefaultLocaleId AND PPCP.LocaleId <> @DefaultLocaleId 
				 AND Exists (SELECT TOP 1 1 FROM @LocaleId X WHERE X.Id =  PPCP.LocaleId )  
				 AND NOT EXISTS(SELECT * FROM ##AttributeValueLocale AVL WHERE PPCP.PimProductId = AVL.PimProductId AND PPCP.AttributeCode = AVL.AttributeCode AND ZPAX.LocaleId = AVL.LocaleId )
				 AND NOT EXISTS(SELECT * FROM ZnodePimConfigureProductAttribute UOP WHERE ZPAX.PimAttributeId = UOP.PimAttributeId AND PPCP.PimProductId = UOP.PimProductId )
		END
		 -------------configurable attribute 		 
		INSERT INTO ##AttributeValueLocale ( PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId )
		SELECT DISTINCT UOP.PimProductId,c.AttributeCode,'' AttributeValue ,--'<Attributes><AttributeEntity>'+
		JSON_MODIFY (Isnull(JSON_MODIFY (c.AttributeJson,'$.AttributeValues',''),'')  ,'$.SelectValues',
			Isnull((SELECT DISTINCT 
							Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Code'),'') Code 
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.LocaleId'),0) LocaleId
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Value'),'') Value
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.AttributeDefaultValue'),'') AttributeDefaultValue
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.DisplayOrder'),0) DisplayOrder
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.IsEditable'),'false') IsEditable
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.SwatchText'),'') SwatchText
							,Isnull(JSON_VALUE(AA.DefaultValueJson, '$.Path'),'') Path 
							,ISNULL(ZPA.DisplayOrder,0)  AS VariantDisplayOrder 
							,ISNULL(ZPAVL_SKU.AttributeValue,'')   AS VariantSKU 
							,Isnull(ZPAV12.AttributeValue,'') AS VariantImagePath 
						 FROM ZnodePimAttributeDefaultJSON AA 
						 INNER JOIN #PimProductAttributeDefaultValue ZPADV ON ( ZPADV.PimAttributeDefaultValueId = AA.PimAttributeDefaultValueId )
						 INNER JOIN ZnodePimProductTypeAssociation YUP ON (YUP.PimProductId = ZPADV.PimProductId)
						 INNER JOIN #VariantSKU ZPAVL_SKU On YUP.PimProductId = ZPAVL_SKU.PimProductId
						 LEFT JOIN #TempMedia ZPAV12 ON (ZPAV12.PimProductId= YUP.PimProductId  AND ZPAV12.PimAttributeId = @PimMediaAttributeId ) 
						 LEFT JOIN ZnodePimAttribute ZPA ON (ZPA.PimattributeId = ZPADV.PimAttributeId)
						 WHERE (YUP.PimParentProductId  = UOP.PimProductId AND ZPADV.pimAttributeId = UOP.PimAttributeId )
		FOR JSON auto),'[]')) SelectValuesEntity ,
		c.LocaleId
		FROM ZnodePimConfigureProductAttribute UOP 
		INNER JOIN ZnodePimAttributeJSON c   ON (c.PimAttributeId = UOP.PimAttributeId )
		WHERE Exists (Select TOP 1 1 from @LocaleId X where X.Id = C.LocaleId )  
		AND EXISTS(SELECT * FROM #ZnodePublishCategoryProductForValidation PPCP1 where UOP.PimProductId = PPCP1.PimProductId )

		---Insert product attributewise data for other locale of default locale as local ise attribute data not present
		IF (SELECT COUNT(*) FROM @LocaleId) > 1
		BEGIN
			DECLARE @cur_Id int
			DECLARE cur_LocaleId CURSOR LOCAL FAST_FORWARD
			FOR SELECT Id FROM @LocaleId WHERE Id <> @DefaultLocaleId;

			OPEN cur_LocaleId;
			FETCH NEXT FROM cur_LocaleId INTO  @cur_Id;

			WHILE @@FETCH_STATUS = 0
			BEGIN 
				INSERT INTO ##AttributeValueLocale (PimProductId, AttributeCode, AttributeValue, AttributeEntity, LocaleId)
				SELECT A.PimProductId, A.AttributeCode, A.AttributeValue, A.AttributeEntity, b.Id
				FROM ##AttributeValueLocale a
				CROSS APPLY @LocaleId b 
				WHERE NOT EXISTS(SELECT * FROM ##AttributeValueLocale c WHERE a.PimProductId = c.PimProductId AND b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
				AND a.LocaleId = @DefaultLocaleId AND b.Id = @cur_Id

				FETCH NEXT FROM cur_LocaleId INTO  @cur_Id;
			END;
			CLOSE cur_LocaleId;
			DEALLOCATE cur_LocaleId;
		END
		-------------configurable attribute 
		--select * from #AttributeValueLocale

		--CREATE INDEX IDX_#AttributeValueLocale ON #AttributeValueLocale(PimProductId,AttributeCode,LocaleId)
		--CREATE INDEX IDX_#AttributeValueLocale_Id ON #AttributeValueLocale(ID)
		 	
		--DELETE ZPPAX FROM ZnodePublishProductAttributeJson ZPPAX
		--WHERE exists (SELECT * FROM #AttributeValueLocale AVL WHERE ZPPAX.PimProductId = AVL.PimProductId AND AVL.LocaleId = ZPPAX.LocaleId )
		--AND NOT EXISTS(SELECT * FROM #AttributeValueLocale AVL WHERE ZPPAX.PimProductId = AVL.PimProductId AND AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode )

		--DECLARE @MaxCount INT, @MinRow INT, @MaxRow INT, @Rows numeric(10,2);
		--SELECT @MaxCount = COUNT(*) FROM #AttributeValueLocale;

		--SELECT @Rows = 200000
        
		--SELECT @MaxCount = CEILING(@MaxCount / @Rows);

		--IF OBJECT_ID('tempdb..#Temp_ImportLoop') IS NOT NULL
  --          DROP TABLE #Temp_ImportLoop;
        
		------ To get the min AND max rows for import in loop
		--;WITH cte AS 
		--(
		--	SELECT RowId = 1, 
		--		   MinRow = 1, 
  --                 MaxRow = cast(@Rows as int)
  --          UNION ALL
  --          SELECT RowId + 1, 
  --                 MinRow + cast(@Rows as int), 
  --                 MaxRow + cast(@Rows as int)
  --          FROM cte
  --          WHERE RowId + 1 <= @MaxCount
		--)
  --      SELECT RowId, MinRow, MaxRow
  --      INTO #Temp_ImportLoop
  --      FROM cte
		--OPTION (maxrecursion 0);

		----Cursor for rows wise execution in bulk
		--DECLARE cur_BulkData CURSOR LOCAL FAST_FORWARD
  --      FOR SELECT MinRow, MaxRow FROM #Temp_ImportLoop
		--WHERE EXISTS(SELECT * FROM #AttributeValueLocale);

  --      OPEN cur_BulkData;
  --      FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;

  --      WHILE @@FETCH_STATUS = 0
  --      BEGIN
	 --        UPDATE ZnodePublishProductAttributeJson SET IsUpdateLocaleWise = 0 WHERE ISNULL(IsUpdateLocaleWise,0) = 1
		--	  ----Update Product Attribute XML
		--	 UPDATE ZPPAX SET ZPPAX.Attributes = AVL.AttributeEntity, ZPPAX.ModifiedBy = @UserId, ZPPAX.ModifiedDate = @GetDate
		--	        , ZPPAX.IsUpdateLocaleWise = 0
		--	 FROM ZnodePublishProductAttributeJson ZPPAX 
		--	 INNER JOIN #AttributeValueLocale AVL ON ZPPAX.PimProductId = AVL.PimProductId AND AVL.LocaleId = ZPPAX.LocaleId AND ZPPAX.AttributeCode = AVL.AttributeCode 
		--	 WHERE  AVL.Id BETWEEN @MinRow AND @MaxRow AND AVL.AttributeEntity is not null
		 
		--	 ----Insert Product Attribute XML
		--	 INSERT INTO ZnodePublishProductAttributeJson(PimProductId,LocaleId,AttributeCode,Attributes,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		--	 SELECT AVL.PimProductId, AVL.LocaleId, AVL.AttributeCode, cast(AVL.AttributeEntity as varchar(max)), @UserId CreatedBy, @GetDate CreatedDate, @UserId ModifiedBy, @GetDate ModifiedDate
		--	 FROM #AttributeValueLocale AVL
		--	 WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeJson ZPPAX WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId AND AVL.AttributeCode = ZPPAX.AttributeCode )
		--	 AND  AVL.Id BETWEEN @MinRow AND @MaxRow AND AVL.AttributeEntity is not null
		--	 GROUP BY AVL.PimProductId, AVL.AttributeEntity, AVL.LocaleId, AVL.AttributeCode

		--	 FETCH NEXT FROM cur_BulkData INTO  @MinRow, @MaxRow;
  --      END;
		--CLOSE cur_BulkData;
		--DEALLOCATE cur_BulkData;

		--DELETE ZPPAX
		--FROM ZnodePublishProductAttributeJson ZPPAX
		--WHERE LocaleId <> @DefaultLocaleId
		--AND exists( SELECT * FROM ZnodePublishProductAttributeJson ZPPAX1 WHERE ZPPAX.AttributeCode = ZPPAX1.AttributeCode AND ZPPAX.PimProductId = ZPPAX1.PimProductId )
		--AND NOT EXISTS(SELECT * FROM #ProductLocaleWise AVL WHERE AVL.PimProductId = ZPPAX.PimProductId AND  AVL.LocaleId = ZPPAX.LocaleId )
		
		
		--DELETE  ZPPAX
		--FROM ZnodePublishProductAttributeJson ZPPAX
		--WHERE NOT EXISTS(SELECT * FROM #ProductLocaleWise ZLW WHERE ZPPAX.PimProductId = ZLW.PimProductId 
		--	                AND ZPPAX.LocaleId = ZLW.LocaleId )

		--SELECT PimProductId,Attributes Attributes,AttributeCode
		--INTO #ZnodePublishProductAttributeJson
		--FROM ZnodePublishProductAttributeJson 
		--WHERE LocaleId = @DefaultLocaleId

		--INSERT INTO ZnodePublishProductAttributeJson (PimProductId,Attributes,LocaleId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,AttributeCode)
		--SELECT PimProductId,Attributes,b.id,@UserId,@GetDate,@UserId,@GetDate,AttributeCode
		--FROM #ZnodePublishProductAttributeJson a
		--CROSS APPLY @LocaleId b 
		--WHERE NOT EXISTS(SELECT * FROM ZnodePublishProductAttributeJson c WHERE a.PimProductId = c.PimProductId AND b.Id = c.LocaleId AND a.AttributeCode = c.AttributeCode )
		--AND b.Id <> @DefaultLocaleId
					  
END TRY
BEGIN CATCH
select ERROR_MESSAGE()
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_InsertUpdatePimCatalogProductDetailJson @PublishCatalogId = '+CAST(@PublishCatalogId AS VARCHAR(200))+',@UserId='+CAST(@UserId AS VARCHAR(200));


    EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_InsertUpdatePimCatalogProductDetailJson',
        @ErrorInProcedure = @Error_procedure,
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
            
            
END CATCH;
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateSaveCartLineItemQuantity')
	DROP PROC Znode_InsertUpdateSaveCartLineItemQuantity
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantity](
	  @CartLineItemXML xml, @UserId int,@Status bit OUT )
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @IsAddProduct   BIT = 0 
		DECLARE @OmsSavedCartLineItemId INT = 0
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int , OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute XML, 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max),
			Custom1	nvarchar(max),Custom2 nvarchar(max),Custom3 nvarchar(max),Custom4
			nvarchar(max),Custom5 nvarchar(max),GroupId NVARCHAR(max) ,ProductName Nvarchar(1000) , Description NVARCHAR(max),AddOnQuantity NVARCHAR(max), CustomUnitPrice numeric(28, 6)
		);

		DECLARE @OrderLineItemRelationshipTypeIdAddon int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		DECLARE @OrderLineItemRelationshipTypeIdSimple int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Simple'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		 DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		INSERT INTO @TBL_SavecartLineitems( RowId,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails,
		Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,Description,AddOnQuantity,CustomUnitPrice )
			   SELECT DENSE_RANK()Over(Order BY Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' )) RowId ,Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity
			   , Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, ISNULL(Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ),'') AS BundleProductIds, ISNULL(Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ),'') AS ConfigurableProductIds, ISNULL(Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ),'') AS GroupProductIds, 
			          Tbl.Col.query('(PersonaliseValuesDetail/node())') AS PersonaliseValuesDetail, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails,
					  Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
					  Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
					  Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
					  Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
					  Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
					  Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
					  Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(Max)' ) AS ProductName,
					  Tbl.Col.value( 'Description[1]', 'NVARCHAR(Max)' ) AS Description, 
					  Tbl.Col.value( 'AddOnQuantity[1]', 'NVARCHAR(2000)' ) AS AddOnQuantity,
					  Tbl.Col.value( 'CustomUnitPrice[1]', 'NVARCHAR(2000)' ) AS CustomUnitPrice
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);
			  

			  IF OBJECT_ID('tempdb..#TBL_SavecartLineitems') is not null
				drop table #TBL_SavecartLineitems

			 IF OBJECT_ID('tempdb..#OldValueForAddon') is not null
				drop table #OldValueForAddon

			  SELECT * INTO #TBL_SavecartLineitems FROM @TBL_SavecartLineitems
			

			UPDATE ZnodeOmsSavedCart
			SET ModifiedDate = @GetDate
			WHERE OmsSavedCartId = (SELECT TOP 1  OmsSavedCartId FROM @TBL_SavecartLineitems)
				

			  UPDATE  @TBL_SavecartLineitems
			  SET 	Description = ISNUll(Description,'') 

			IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' )
			 BEGIN 				
				 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 
				    SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0 )

					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0)
					, ModifiedDate = @GetDate,CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
					WHERE ( OmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					OR ParentOmsSavedCartLineItemId =  @OmsSavedCartLineItemId   ) 
					 
					--UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					AND SCLI.BundleProductIds <> ''

					DELETE	FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0
				 END 
				  DECLARE @TBL_bundleProduct TT_SavecartLineitems 
				  INSERT INTO @TBL_bundleProduct 
				  SELECT *  
				  FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(BundleProductIds,'') <> '' 
				
				  EXEC Znode_InsertUpdateSaveCartLineItemBundle @TBL_bundleProduct,@userId,@OrderLineItemRelationshipTypeIdBundle,@OrderLineItemRelationshipTypeIdAddon
				 
				  DELETE FROM  @TBL_SavecartLineitems WHERE ISNULL(BundleProductIds,'') <> '' 
				  SET @OmsSavedCartLineItemId = 0 
				END 
			IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' )
			    BEGIN 				
				 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 

				   SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0 )
				 
				   	UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
					, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
					WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId
					
					--UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE  ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity, ModifiedDate = @GetDate,CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					AND SCLI.ConfigurableProductIds <> ''

					DELETE	FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0
				 END 
				  DECLARE @TBL_Configurable TT_SavecartLineitems 
				  INSERT INTO @TBL_Configurable 
				  SELECT *  
				  FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(ConfigurableProductIds,'') <> '' 

				  
				  EXEC Znode_InsertUpdateSaveCartLineItemConfigurable @TBL_Configurable,@userId,@OrderLineItemRelationshipTypeIdConfigurable,@OrderLineItemRelationshipTypeIdAddon
				  
				  DELETE FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(ConfigurableProductIds,'') <> ''
				  SET @OmsSavedCartLineItemId = 0  
				END 
				IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' )
			    BEGIN 				
				 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 
				   SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0 )
				   	UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId = @OmsSavedCartLineItemId ), CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
					WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId
					
					--UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND  OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					AND SCLI.GroupProductIds <> ''

					DELETE	FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0
				 END 
				  DECLARE @TBL_Group TT_SavecartLineitems 
				  INSERT INTO @TBL_Group 
				  SELECT *  
				  FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(GroupProductIds,'') <> '' 

				
				  EXEC Znode_InsertUpdateSaveCartLineItemGroup @TBL_Group,@userId,@OrderLineItemRelationshipTypeIdGroup,@OrderLineItemRelationshipTypeIdAddon
				  
				  DELETE FROM @TBL_SavecartLineitems 
				  WHERE ISNULL(GroupProductIds,'') <> ''
				  SET @OmsSavedCartLineItemId = 0  
				END 
				 
                IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0  ) 
				 BEGIN 
				 
				   SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0 )
				   	UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
					, ModifiedDate = @GetDate
					WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId
				
				 --   UPDATE ZnodeOmsSavedCartLineItem 
					--SET Quantity = (SELECT TOP 1 AddOnQuantity FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0)
					--WHERE ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId  
					--AND OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					UPDATE ZnodeOmsSavedCartLineItem 
					SET Quantity = AddOnQuantity, ModifiedDate = @GetDate
					FROM ZnodeOmsSavedCartLineItem ZOSCLI
					INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
					WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					
					DELETE	FROM @TBL_SavecartLineitems WHERE OmsSavedCartLineItemId <> 0
				 END 
			 
			

			  DECLARE @OmsInsertedData TABLE (OmsSavedCartLineItemId INT )
			  DECLARE @TBL_Personalise TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
			  INSERT INTO @TBL_Personalise
			  SELECT DISTINCT NULL 
							,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		  ,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					  ,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					  ,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			  FROM (SELECT TOP 1 PersonalisedAttribute Valuex FROM  @TBL_SavecartLineitems TRTR  ) a 
			  CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 
			  
			   ----To update saved cart item personalise value from given line item
			  DECLARE @TBL_Personalise1 TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
			  INSERT INTO @TBL_Personalise1
			  SELECT DISTINCT a.OmsSavedCartLineItemId 
					  ,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		  ,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					  ,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					  ,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			  FROM (SELECT TOP 1 OmsSavedCartLineItemId,PersonalisedAttribute Valuex FROM  #TBL_SavecartLineitems TRTR ) a 
			  CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
		    
			
			  CREATE TABLE #tempoi (GenId INT IDENTITY(1,1),RowId	int	,OmsSavedCartLineItemId	int	 ,ParentOmsSavedCartLineItemId	int,OmsSavedCartId	int
									,SKU	nvarchar(max) ,Quantity	numeric(28,6)	,OrderLineItemRelationshipTypeID	int	,CustomText	nvarchar(max)
									,CartAddOnDetails	nvarchar(max),Sequence	int	,AutoAddon	varchar(max)	,OmsOrderId	int	,ItemDetails	nvarchar(max)
									,Custom1	nvarchar(max)  ,Custom2	nvarchar(max),Custom3	nvarchar(max),Custom4	nvarchar(max),Custom5	nvarchar(max)
									,GroupId	nvarchar(max) ,ProductName	nvarchar(max),Description	nvarchar(max),Id	int,ParentSKU NVARCHAR(max))
				   
			   INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
			   FROM @TBL_SavecartLineitems a 
			   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
			  
			   INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity, @OrderLineItemRelationshipTypeIdSimple, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU 
			   FROM @TBL_SavecartLineitems  a 
			   WHERE ISNULL(BundleProductIds,'') =  '' 
			   AND  ISNULL(GroupProductIds,'') = ''	AND ISNULL(	ConfigurableProductIds,'') = ''
			   	   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
					,Quantity,  CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
			  
     		   INSERT INTO #tempoi
			   SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
					,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
					,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
					WHEN  GroupProductIds <> '' THEN GroupProductIds 
					WHEN BundleProductIds <> '' THEN BundleProductIds 
					 ELSE SKU END     ParentSKU 
			   FROM @TBL_SavecartLineitems  a 
			   WHERE AddOnValueIds <> ''
			   	   GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
					,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
					,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
           --hack
		
		 CREATE TABLE #OldValue (OmsSavedCartId INT ,OmsSavedCartLineItemId INT,ParentOmsSavedCartLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
		 
		INSERT INTO #OldValue  
		SELECT  a.OmsSavedCartId,a.OmsSavedCartLineItemId,a.ParentOmsSavedCartLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	  	FROM ZnodeOmsSavedCartLineItem a   
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = a.OmsSavedCartId AND ISNULL(a.SKU,'') = ISNULL(TY.SKU,'')   )   
        AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple   

			

		INSERT INTO #OldValue 
		SELECT DISTINCT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.ParentOmsSavedCartLineItemId  = b.OmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
		AND  b.OrderLineItemRelationshipTypeID IS NULL 
		 
		DELETE a FROM #OldValue a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldValue b WHERE b.ParentOmsSavedCartLineItemId IS NULL AND b.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)
		AND a.ParentOmsSavedCartLineItemId IS NOT NULL 
		
		------Merge Addon for same product
		SELECT * INTO #OldValueForAddon from #OldValue
		
		INSERT INTO #OldValue 
		SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b 
		INNER JOIN #OldValue c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

		
		
		------Merge Addon for same product
		IF EXISTS(SELECT * FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'') <> '' )
		BEGIN

			INSERT INTO #OldValueForAddon 
			SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
			FROM ZnodeOmsSavedCartLineItem b 
			INNER JOIN #OldValueForAddon c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
			AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

			SELECT distinct SKU, STUFF(
										( SELECT  ', ' + SKU FROM    
											( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
											  where a.OmsSavedCartLineItemId=b.ParentOmsSavedCartLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
											  FOR XML PATH('')
										), 1, 2, ''
									 ) AddOns
			INTO #AddOnsExists
			from #OldValueForAddon a where a.ParentOmsSavedCartLineItemId is not null and OrderLineItemRelationshipTypeID<>1

			SELECT distinct a.SKU, STUFF(
										 ( SELECT  ', ' + x.AddOnValueIds FROM    
											( SELECT DISTINCT b.AddOnValueIds FROM @TBL_SavecartLineitems b
											  where a.SKU=b.SKU ) x
											  FOR XML PATH('')
										 ), 1, 2, ''
									   ) AddOns
			INTO #AddOnAdded
			from @TBL_SavecartLineitems a

			if not exists(select * from #AddOnsExists a inner join #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
			begin
				delete from #OldValue
			end

		END

		IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_SavecartLineitems ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldValue a WHERE	
		ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		
		DELETE FROM #OldValue 
		END 
		ELSE 
		BEGIN 
	    
		 IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
		 BEGIN 
		 
		 DECLARE @parenTofAddon  TABLE( ParentOmsSavedCartLineItemId INT  )  
		 INSERT INTO  @parenTofAddon 
		 SELECT  ParentOmsSavedCartLineItemId FROM #OldValue WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ParentOmsSavedCartLineItemId FROM  @parenTofAddon)   
					AND ParentOmsSavedCartLineItemId IS NOT NULL  
					AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon

		 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  
		 
		 END 
		 ELSE IF (SELECT COUNT (OmsSavedCartLineItemId) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS NULL ) > 1 
		 BEGIN 

		 -- SELECT 3
		    DECLARE @TBL_deleteParentOmsSavedCartLineItemId TABLE (OmsSavedCartLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsSavedCartLineItemId 
			SELECT ParentOmsSavedCartLineItemId
			FROM ZnodeOmsSavedCartLineItem a 
			WHERE ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple  )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
			OR ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
		    
			 DELETE FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldValue m)
		 AND ParentOmsSavedCartLineItemId IS  NULL  

		 END
		 ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue ty WHERE ty.OmsSavedCartId = wt.OmsSavedCartId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple AND wt.ParentOmsSavedCartLineItemId= ty.OmsSavedCartLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		      AND EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  = '' )
		 BEGIN 

		   DELETE FROM #OldValue
		 END 
		END 
			
	

		DECLARE @TBL_Personaloldvalues TABLE (OmsSavedCartLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
		INSERT INTO @TBL_Personaloldvalues
		SELECT OmsSavedCartLineItemId , PersonalizeCode, PersonalizeValue
		FROM ZnodeOmsPersonalizeCartItem  a 
		WHERE EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)
		
		

		IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		   AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
		BEGIN 
		 DELETE FROM #OldValue
		END 
		ELSE 
		BEGIN 
		 IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   DELETE FROM #OldValue WHERE OmsSavedCartLineItemId IN (
		   SELECT OmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ) ) 
		   OR OmsSavedCartLineItemId IN ( SELECT ParentOmsSavedCartLineItemId FROM #OldValue WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
		   AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ))
		   
		
		   
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		 AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		 BEGIN 
		   
		   

		   DELETE n FROM #OldValue n WHERE OmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem WHERE n.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId  )
		   OR ParentOmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem   )
		   
		  
		   
		 END 
		 ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		        AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldValue YU WHERE YU.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId )) 
		       AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldValue WHERE ParentOmsSavedCartLineItemId IS nULL ) = 1
		 BEGIN 
		     DELETE FROM #OldValue WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		 END 


		  
		END 

		----delete old value from table which having personalise data in ZnodeOmsPersonalizeCartItem but same SKU not having personalise value for new cart item
		;with cte as
		(
			select distinct b.*
			FROM @TBL_SavecartLineitems a 
			Inner Join #OldValue b on ( a.SKU = b.sku)
			where isnull(cast(a.PersonalisedAttribute as varchar(max)),'') = ''
		)
		,cte2 as
		(
			select c.ParentOmsSavedCartLineItemId
			from #OldValue a
			inner join ZnodeOmsSavedCartLineItem c on a.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId
			inner join ZnodeOmsPersonalizeCartItem b on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
		)
		delete a from #OldValue a
		inner join cte b on a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
		inner join cte2 c on (a.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId or a.ParentOmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId)

		----delete old value from table which having personalise data in ZnodeOmsPersonalizeCartItem but same SKU having personalise value for new cart item
		;with cte as
		(
			select distinct b.*, 
			Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			FROM @TBL_SavecartLineitems a 
			Inner Join #OldValue b on ( a.SKU = b.sku)
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			where isnull(cast(a.PersonalisedAttribute as varchar(max)),'') <> ''
		)
		,cte2 as
		(
			select a.ParentOmsSavedCartLineItemId, b.PersonalizeCode, b.PersonalizeValue
			from #OldValue a
			inner join ZnodeOmsPersonalizeCartItem b on b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId
			where not exists(select * from cte c where b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and b.PersonalizeCode = c.PersonalizeCode 
			                 and b.PersonalizeValue = c.PersonalizeValue )
		)
		delete a from #OldValue a
		inner join cte b on a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
		inner join cte2 c on (a.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId or a.ParentOmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId)

		;with cte as
		(
			SELECT b.OmsSavedCartLineItemId ,b.ParentOmsSavedCartLineItemId , a.SKU as SKU
					,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			FROM @TBL_SavecartLineitems a 
			Inner Join #OldValue b on a.SKU = b.SKU
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			Inner join ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		delete b1
		from #OldValue b1 
		where not exists(select * from cte c where (b1.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId or b1.ParentOmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId))
	    and exists(select * from cte)

		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
		;with cte as
		(
			SELECT b.OmsSavedCartLineItemId ,a.ParentOmsSavedCartLineItemId , a.SKU
					,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			  		,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
					,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
					,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			FROM @TBL_SavecartLineitems a 
			Inner Join #OldValue b on a.SKU = b.SKU
			CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
			Inner join ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		delete b1
		from cte a1		  
		Inner Join #OldValue b1 on a1.sku = b1.SKU
		where not exists(select * from ZnodeOmsPersonalizeCartItem c where a1.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and a1.PersonalizeValue = c.PersonalizeValue)

		IF EXISTS (SELECT TOP 1 1 FROM #OldValue )
		BEGIN 

		UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5, 
		a.ModifiedDate = @GetDate
		FROM ZnodeOmsSavedCartLineItem a
		INNER JOIN #OldValue b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		INNER JOIN #tempoi ty ON (ty.SKU = b.SKU)


		END 
		ELSE 
		BEGIN 
		
		
			   
    SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
     INTO #yuuete   
     FROM  #tempoi  
     GROUP BY ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails ,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
     ORDER BY RowId, Id   
       	
			     
    DELETE FROM #yuuete WHERE Quantity <=0  
  
     ;WITH VTTY AS   
    (  
    SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
       FROM #yuuete m  
    INNER JOIN  #yuuete TY1 ON TY1.SKU = m.ParentSKU   
    WHERE m.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon   
    )   
	
    UPDATE m1   
    SET m1.RowId = TYU.RowId  
    FROM #yuuete m1   
    INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
        
    ;WITH VTRET AS   
    (  
    SELECT RowId,id,Min(NewRowId) NewRowId ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID  
    FROM #yuuete   
    GROUP BY RowId,id ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID
	Having  SKU = ParentSKU  AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdSimple
    )   
    
    DELETE FROM #yuuete WHERE NewRowId IN (SELECT NewRowId FROM VTRET)  
	
	

	
     
       INSERT INTO  ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,Sequence,CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
       OUTPUT INSERTED.OmsSavedCartLineItemId  INTO @OmsInsertedData 
	   SELECT NULL ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
       ,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
       ,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
       FROM  #yuuete  TH  

 
	 --;with Cte_newData AS   
  --  (  
    SELECT  MAX(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
	, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
	INTO #Cte_newData
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
    WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
	--	AND NOT EXISTS (SELECT TOP 1 1 FROM #OldValue TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #yuuete TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
     GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID
				
    --)   
	
  
    UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  #Cte_newData  r  
    WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
    WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
    AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
    AND a.ParentOmsSavedCartLineItemId IS nULL   
  

    
    --;with Cte_newAddon AS   
    --(  
    SELECT a.OmsSavedCartLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsSavedCartLineItemId )RowIdNo
    INTO #Cte_newAddon
	FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ( b.Id = 1  ))  
	INNER JOIN ZnodeOmsSavedCartLineItem c on b.sku = c.sku and b.OmsSavedCartId=c.OmsSavedCartId and b.Id = 1 
    WHERE ( ISNULL(a.ParentOmsSavedCartLineItemId,0) <> 0   )
    AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  and c.ParentOmsSavedCartLineItemId is null
  --  )   
  


  --  SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 --FROM ZnodeOmsSavedCartLineItem a
	 --WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
  --   AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
  --   AND a.ParentOmsSavedCartLineItemId IS NULL  
	 --AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 --AND EXISTS (SELECT TOP 1 1 FROM #Cte_newAddon TI WHERE TI.SKU = a.SKU)



   ;with table_update AS 
   (
     SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
	 FROM ZnodeOmsSavedCartLineItem a
	 WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
     AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
     AND a.ParentOmsSavedCartLineItemId IS NULL  
	 AND EXISTS (SELECT TOP 1 1  FROM  #yuuete ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
	 AND EXISTS (SELECT TOP 1 1 FROM #Cte_newAddon TI WHERE TI.SKU = a.SKU)
   )

    UPDATE a SET  
   --SELECT  a.OmsSavedCartLineItemId,
	a.ParentOmsSavedCartLineItemId =(SELECT TOP 1 max(OmsSavedCartLineItemId) 
	FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU  GROUP BY r.ParentSKU, r.SKU  )   
    FROM table_update a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
    WHERE (SELECT TOP 1 max(OmsSavedCartLineItemId) 
	  FROM #Cte_newAddon  r  
    WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU   GROUP BY r.ParentSKU, r.SKU  )    IS NOT NULL 
	 

	
	  
    ;with Cte_Th AS   
    (             
      SELECT RowId    
     FROM #yuuete a   
     GROUP BY RowId   
     HAVING COUNT(NewRowId) <= 1   
      )   
    UPDATE a SET a.Quantity =  NULL , a.ModifiedDate = @GetDate  
    FROM ZnodeOmsSavedCartLineItem a  
    INNER JOIN #yuuete b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =0)   
    WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
     AND a.OrderLineItemRelationshipTypeId IS NULL   
  
    UPDATE  ZnodeOmsSavedCartLineItem   
    SET GROUPID = NULL   
    WHERE  EXISTS (SELECT TOP 1 1  FROM #yuuete RT WHERE RT.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
    AND OrderLineItemRelationshipTypeId IS NOT NULL     
       ;With Cte_UpdateSequence AS   
     (  
       SELECT OmsSavedCartLineItemId ,Row_Number()Over(Order By OmsSavedCartLineItemId) RowId , Sequence   
       FROM ZnodeOmsSavedCartLineItem   
       WHERE EXISTS (SELECT TOP 1 1 FROM #yuuete TH WHERE TH.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
     )   
    UPDATE Cte_UpdateSequence  
    SET  Sequence = RowId  
	
	----To update saved cart item personalise value from given line item	
	if exists(select * from @TBL_Personalise1 where isnull(PersonalizeValue,'') <> '' and isnull(OmsSavedCartLineItemId,0) <> 0)
	Begin
		DELETE FROM ZnodeOmsPersonalizeCartItem 
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise1 yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )

		MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
		USING @TBL_Personalise1 SOURCE
			   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
		WHEN NOT MATCHED THEN 
				INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
								,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
				VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
								,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
	end		
	
	UPDATE @TBL_Personalise
	SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
	FROM @OmsInsertedData a 
	INNER JOIN ZnodeOmsSavedCartLineItem b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
	WHERE b.ParentOmsSavedCartLineItemId IS NOT NULL 
	
	DELETE FROM ZnodeOmsPersonalizeCartItem 
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )
						
    MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
	USING @TBL_Personalise SOURCE
		   ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
	WHEN NOT MATCHED THEN 
		    INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
			VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
  
		
		 
END 

	
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE()	
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItem @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItem', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateSaveCartLineItemQuantityWrapper')
	DROP PROC Znode_InsertUpdateSaveCartLineItemQuantityWrapper
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItemQuantityWrapper]
(
	@CartLineItemXML xml, 
	@UserId int,
	@PortalId Int,
	@OmsCookieMappingId INT = 0 
)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
*/
BEGIN
BEGIN TRAN InsertUpdateSaveCartLineItem;
BEGIN TRY
SET NOCOUNT ON;
	--Declared the variables
	DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	DECLARE @AddOnQuantity numeric(28, 6)= 0;
	DECLARE @IsAddProduct   BIT = 0 
	DECLARE @OmsSavedCartLineItemId INT = 0
	
	DECLARE @TBL_SavecartLineitems TABLE
	( 
		RowId int IDENTITY(1,1), OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
		CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute XML, 
		AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max),
		Custom1	nvarchar(max),Custom2 nvarchar(max),Custom3 nvarchar(max),Custom4
		nvarchar(max),Custom5 nvarchar(max),GroupId NVARCHAR(max) ,ProductName Nvarchar(1000) , Description NVARCHAR(max),AddOnQuantity NVARCHAR(max), CustomUnitPrice numeric(28, 6)
	);

	--Set the OrderLineItemRelationshipTypeId for Addons product
	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'AddOns'
	);
	--Set the OrderLineItemRelationshipTypeId for simple product
	DECLARE @OrderLineItemRelationshipTypeIdSimple int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Simple'
	);
	--Set the OrderLineItemRelationshipTypeId for group product
	DECLARE @OrderLineItemRelationshipTypeIdGroup int=
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Group'
	);
	--Set the OrderLineItemRelationshipTypeId for Configurable product
	DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Configurable'
	);
	--Set the OrderLineItemRelationshipTypeId for Bundles product	
	DECLARE @OrderLineItemRelationshipTypeIdBundle int=
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Bundles'
	);

	-----Getting OmsSaveCartId FROM @OmsCookieMappingId
	DECLARE @OmsSavedCartId int
	--Getting OmsCookieMappingId on basis of @UserId and portalid if @UserId > 0 (Not a guest User)
	IF isnull(@OmsCookieMappingId,0)=0 and isnull(@UserId,0) <> 0  
	Begin
		SET @OmsCookieMappingId = (SELECT top 1 OmsCookieMappingId FROM ZnodeOmsCookieMapping with (nolock) where isnull(UserId,0) = @UserID AND isnull(PortalId,0) = @PortalId)
	END

	IF Not Exists(SELECT top 1 OmsCookieMappingId FROM ZnodeOmsCookieMapping with (nolock) Where OmsCookieMappingId = @OmsCookieMappingId)
	Begin
		INSERT INTO ZnodeOmsCookieMapping (UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT case when @UserId = 0 then null else @UserId end ,@PortalId,@UserId,@GetDate,@UserId,@GetDate

		SET @OmsCookieMappingId = @@IDENTITY
	End
	----To get the oms savecartid on basis of @OmsCookieMappingId 
	SET @OmsSavedCartId = (SELECT top 1 OmsSavedCartId FROM ZnodeOmsSavedCart with (nolock) where OmsCookieMappingId = @OmsCookieMappingId)
	
	----If omssavecartid not present in ZnodeOmsSavedCart table then inserting new record to generated omssavecartid 
	IF isnull(@OmsSavedCartId,0) = 0
	BEGIN
		INSERT INTO ZnodeOmsSavedCart(OmsCookieMappingId,SalesTax,RecurringSalesTax,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @OmsCookieMappingId,Null,Null,@UserId,@GetDate,@UserId,@GetDate

		SET @OmsSavedCartId = @@IDENTITY
	END

	--Fetching data FROM xml to table format and inserted into table @TBL_SavecartLineitems
	INSERT INTO @TBL_SavecartLineitems( OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails,
	Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,Description,AddOnQuantity, CustomUnitPrice )
	SELECT Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, @OmsSavedCartId AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity
	, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, ISNULL(Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ),'') AS BundleProductIds, ISNULL(Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ),'') AS ConfigurableProductIds, ISNULL(Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ),'') AS GroupProductIds, 
			Tbl.Col.query('(PersonaliseValuesDetail/node())') AS PersonaliseValuesDetail, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
			Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails,
			Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
			Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
			Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
			Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
			Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
			Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
			Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(Max)' ) AS ProductName,
			Tbl.Col.value( 'Description[1]', 'NVARCHAR(Max)' ) AS Description, 
			Tbl.Col.value( 'AddOnQuantity[1]', 'NVARCHAR(2000)' ) AS AddOnQuantity,
			Tbl.Col.value( 'CustomUnitPrice[1]', 'NVARCHAR(2000)' ) AS CustomUnitPrice
	FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

	IF OBJECT_ID('tempdb..#TBL_SavecartLineitems') is not null
		DROP TABLE #TBL_SavecartLineitems

	IF OBJECT_ID('tempdb..#OldValueForAddon') is not null
		DROP TABLE #OldValueForAddon

	SELECT * INTO #TBL_SavecartLineitems FROM @TBL_SavecartLineitems
	
	SET @GetDate = dbo.Fn_GetDate();

	UPDATE ZnodeOmsSavedCart
	SET ModifiedDate = @GetDate
	WHERE OmsSavedCartId = (SELECT TOP 1  OmsSavedCartId FROM @TBL_SavecartLineitems)

	UPDATE  @TBL_SavecartLineitems
	SET 	Description = ISNUll(Description,'') 

	--Save cart execution code for bundle product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' )
	BEGIN 				
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
		BEGIN 
			SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0 )

			UPDATE ZnodeOmsSavedCartLineItem 
			SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0)
			, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
			WHERE ( OmsSavedCartLineItemId = @OmsSavedCartLineItemId  
			OR ParentOmsSavedCartLineItemId =  @OmsSavedCartLineItemId   ) 

			UPDATE ZnodeOmsSavedCartLineItem 
			SET Quantity = AddOnQuantity, ModifiedDate = @GetDate,CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
			FROM ZnodeOmsSavedCartLineItem ZOSCLI with (nolock)
			INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
			WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
			AND SCLI.BundleProductIds <> ''

			--After update the existing cart with new save cart then deleting those records which are updated
			DELETE	FROM @TBL_SavecartLineitems WHERE BundleProductIds <> '' AND OmsSavedCartLineItemId <> 0
		END 

		--Getting bundle save cart line item entries into table to pass for bundle prodcut sp
		DECLARE @TBL_bundleProduct TT_SavecartLineitems 
		INSERT INTO @TBL_bundleProduct 
		SELECT *  
		FROM @TBL_SavecartLineitems 
		WHERE ISNULL(BundleProductIds,'') <> '' 
				
		EXEC Znode_InsertUpdateSaveCartLineItemBundle @TBL_bundleProduct,@userId,@OrderLineItemRelationshipTypeIdBundle,@OrderLineItemRelationshipTypeIdAddon
				 
		DELETE FROM  @TBL_SavecartLineitems WHERE ISNULL(BundleProductIds,'') <> '' 
		SET @OmsSavedCartLineItemId = 0 
	END 
	--Save cart execution code for configurable product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' )
	BEGIN 				
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
		BEGIN 

			SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0 )
				 
			UPDATE ZnodeOmsSavedCartLineItem 
			SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
			, ModifiedDate = @GetDate,CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
			WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId

			UPDATE ZnodeOmsSavedCartLineItem 
			SET Quantity = AddOnQuantity, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
			FROM ZnodeOmsSavedCartLineItem ZOSCLI with (nolock)
			INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
			WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
			AND SCLI.ConfigurableProductIds <> ''

			--After update the existing cart with new save cart then deleting those records which are updated
			DELETE	FROM @TBL_SavecartLineitems WHERE ConfigurableProductIds <> '' AND OmsSavedCartLineItemId <> 0
		END 
		--Getting bundle save cart line item entries into table to pass for configurable prodcut sp
		DECLARE @TBL_Configurable TT_SavecartLineitems 
		INSERT INTO @TBL_Configurable 
		SELECT *  
		FROM @TBL_SavecartLineitems 
		WHERE ISNULL(ConfigurableProductIds,'') <> '' 
		  
		EXEC Znode_InsertUpdateSaveCartLineItemConfigurable @TBL_Configurable,@userId,@OrderLineItemRelationshipTypeIdConfigurable,@OrderLineItemRelationshipTypeIdAddon
				  
		DELETE FROM @TBL_SavecartLineitems 
		WHERE ISNULL(ConfigurableProductIds,'') <> ''
		SET @OmsSavedCartLineItemId = 0  
	END 
	--Save cart execution code for group product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' )
	BEGIN 				
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0  ) 
		BEGIN 
			--Updating the existing save cart for group product
			SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0 )
			UPDATE ZnodeOmsSavedCartLineItem 
			SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId = @OmsSavedCartLineItemId ), CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
			WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId

			UPDATE ZnodeOmsSavedCartLineItem 
			SET Quantity = AddOnQuantity, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
			FROM ZnodeOmsSavedCartLineItem ZOSCLI with (nolock)
			INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = SCLI.OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
			WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
			AND SCLI.GroupProductIds <> ''

			--After update the existing cart with new save cart then deleting those records which are updated
			DELETE	FROM @TBL_SavecartLineitems WHERE GroupProductIds <> '' AND OmsSavedCartLineItemId <> 0
		END 
		--Getting bundle save cart line item entries into table to pass for group prodcut sp
		DECLARE @TBL_Group TT_SavecartLineitems 
		INSERT INTO @TBL_Group 
		SELECT *  
		FROM @TBL_SavecartLineitems 
		WHERE ISNULL(GroupProductIds,'') <> '' 
		
		EXEC Znode_InsertUpdateSaveCartLineItemGroup @TBL_Group,@userId,@OrderLineItemRelationshipTypeIdGroup,@OrderLineItemRelationshipTypeIdAddon
		
		--After update the existing cart with new save cart then deleting those records which are updated
		DELETE FROM @TBL_SavecartLineitems WHERE ISNULL(GroupProductIds,'') <> ''
		SET @OmsSavedCartLineItemId = 0  
	END 
	
	--This part is for updating the cart for existing line items for simple product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0  ) 
	BEGIN 
				 
		SET @OmsSavedCartLineItemId  = (SELECT TOP 1 OmsSavedCartLineItemId FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId <> 0 )
		UPDATE ZnodeOmsSavedCartLineItem 
		SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SavecartLineitems WHERE  OmsSavedCartLineItemId = @OmsSavedCartLineItemId )
		, ModifiedDate = @GetDate , CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
		WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId

		DECLARE @ParentOmsSavedCartLineItemId INT = 0
		SET @ParentOmsSavedCartLineItemId = (select ParentOmsSavedCartLineItemId from ZnodeOmsSavedCartLineItem WHERE OmsSavedCartLineItemId = @OmsSavedCartLineItemId)

		UPDATE ZnodeOmsSavedCartLineItem 
		SET  CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SavecartLineitems)
		WHERE OmsSavedCartLineItemId = @ParentOmsSavedCartLineItemId

		UPDATE ZnodeOmsSavedCartLineItem 
		SET Quantity = AddOnQuantity, ModifiedDate = @GetDate
		FROM ZnodeOmsSavedCartLineItem ZOSCLI with (nolock)
		INNER JOIN @TBL_SavecartLineitems SCLI ON ZOSCLI.ParentOmsSavedCartLineItemId = @OmsSavedCartLineItemId AND ZOSCLI.OmsSavedCartId = SCLI.OmsSavedCartId AND ZOSCLI.SKU = SCLI.AddOnValueIds
		WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					
		DELETE	FROM @TBL_SavecartLineitems WHERE OmsSavedCartLineItemId <> 0
	END 
	--Save cart execution code for Simple product
	DECLARE @OmsInsertedData TABLE (OmsSavedCartLineItemId INT )
	--Inserting the personalise data into variable table @TBL_Personalise for inserting the personalise data for new products
	DECLARE @TBL_Personalise TABLE (OmsSavedCartLineItemId INT, ParentOmsSavedCartLineItemId int,SKU Varchar(600) ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
	INSERT INTO @TBL_Personalise
	SELECT DISTINCT Null, a.ParentOmsSavedCartLineItemId,a.SKU
			,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
	FROM @TBL_SavecartLineitems a 
	CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 
			  
	----To update saved cart item personalise value FROM given line item
	DECLARE @TBL_Personalise1 TABLE (OmsSavedCartLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max))
	INSERT INTO @TBL_Personalise1
	SELECT DISTINCT a.OmsSavedCartLineItemId 
			,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
	FROM (SELECT TOP 1 OmsSavedCartLineItemId,PersonalisedAttribute Valuex FROM  #TBL_SavecartLineitems TRTR ) a 
	CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
		    
			
	CREATE TABLE #NewSavecartLineitemDetails 
	(
		GenId INT IDENTITY(1,1),RowId	INT	,OmsSavedCartLineItemId	INT	 ,ParentOmsSavedCartLineItemId	INT,OmsSavedCartId	INT
		,SKU	NVARCHAR(MAX) ,Quantity	NUMERIC(28,6)	,OrderLineItemRelationshipTypeID	INT	,CustomText	NVARCHAR(MAX)
		,CartAddOnDetails	NVARCHAR(MAX),Sequence	int	,AutoAddon	varchar(MAX)	,OmsOrderId	INT	,ItemDetails	NVARCHAR(MAX)
		,Custom1	NVARCHAR(MAX)  ,Custom2	NVARCHAR(MAX),Custom3	NVARCHAR(MAX),Custom4	NVARCHAR(MAX),Custom5	NVARCHAR(MAX)
		,GroupId	NVARCHAR(MAX) ,ProductName	NVARCHAR(MAX),Description	NVARCHAR(MAX),Id	INT,ParentSKU NVARCHAR(MAX)
	)
	
	--Getting new save cart data
	INSERT INTO #NewSavecartLineitemDetails
	SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
		,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
	FROM @TBL_SavecartLineitems a 
	GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
		,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
	
	--Getting new simple product save cart data
	INSERT INTO #NewSavecartLineitemDetails
	SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
		,Quantity, @OrderLineItemRelationshipTypeIdSimple, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU 
	FROM @TBL_SavecartLineitems  a 
	WHERE ISNULL(BundleProductIds,'') =  '' 
	AND  ISNULL(GroupProductIds,'') = ''	AND ISNULL(	ConfigurableProductIds,'') = ''
		GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU
		,Quantity,  CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
			
	--Getting new Group,Bundle and Configurable products save cart data if addon is present for any line item
	INSERT INTO #NewSavecartLineitemDetails
	SELECT  Min(RowId )RowId ,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
		,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
		,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
		WHEN  GroupProductIds <> '' THEN GroupProductIds 
		WHEN BundleProductIds <> '' THEN BundleProductIds 
			ELSE SKU END     ParentSKU 
	FROM @TBL_SavecartLineitems  a 
	WHERE AddOnValueIds <> ''
	GROUP BY  OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, AddOnValueIds
	,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
	,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
	
	CREATE TABLE #OldSavecartLineitemDetails (OmsSavedCartId INT ,OmsSavedCartLineItemId INT,ParentOmsSavedCartLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
	--Getting the old save cart data if present for same SKU in the new save cart data for simple product	 
	INSERT INTO #OldSavecartLineitemDetails  
	SELECT  a.OmsSavedCartId,a.OmsSavedCartLineItemId,a.ParentOmsSavedCartLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	FROM ZnodeOmsSavedCartLineItem a with (nolock)  
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = a.OmsSavedCartId AND ISNULL(a.SKU,'') = ISNULL(TY.SKU,'')   )   
	AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple   

	--Getting the old save cart Parent data 
	INSERT INTO #OldSavecartLineitemDetails 
	SELECT DISTINCT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
	FROM ZnodeOmsSavedCartLineItem b with (nolock)
	INNER JOIN #OldSavecartLineitemDetails c ON (c.ParentOmsSavedCartLineItemId  = b.OmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
	AND  b.OrderLineItemRelationshipTypeID IS NULL 
		 
	DELETE a FROM #OldSavecartLineitemDetails a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldSavecartLineitemDetails b WHERE b.ParentOmsSavedCartLineItemId IS NULL AND b.OmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId)
	AND a.ParentOmsSavedCartLineItemId IS NOT NULL 
		
	------Merge Addon for same product
	SELECT * INTO #OldValueForAddon FROM #OldSavecartLineitemDetails
		
	--Getting the old save cart addon data for old line items if present
	INSERT INTO #OldSavecartLineitemDetails 
	SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
	FROM ZnodeOmsSavedCartLineItem b with (nolock)
	INNER JOIN #OldSavecartLineitemDetails c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
	AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

	------Merge Addon for same product
	IF EXISTS(SELECT * FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'') <> '' )
	BEGIN

		INSERT INTO #OldValueForAddon 
		SELECT b.OmsSavedCartId,b.OmsSavedCartLineItemId,b.ParentOmsSavedCartLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsSavedCartLineItem b with (nolock)
		INNER JOIN #OldValueForAddon c ON (c.OmsSavedCartLineItemId  = b.ParentOmsSavedCartLineItemId AND c.OmsSavedCartId = b.OmsSavedCartId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems  TY WHERE TY.OmsSavedCartId = b.OmsSavedCartId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

		SELECT distinct SKU, STUFF(
								( SELECT  ', ' + SKU FROM    
									( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
										where a.OmsSavedCartLineItemId=b.ParentOmsSavedCartLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
										FOR XML PATH('')
								), 1, 2, ''
								) AddOns
		INTO #AddOnsExists
		FROM #OldValueForAddon a where a.ParentOmsSavedCartLineItemId is not null and OrderLineItemRelationshipTypeID<>1

		SELECT distinct a.SKU, STUFF(
									( SELECT  ', ' + x.AddOnValueIds FROM    
									( SELECT DISTINCT b.AddOnValueIds FROM @TBL_SavecartLineitems b
										where a.SKU=b.SKU ) x
										FOR XML PATH('')
									), 1, 2, ''
								) AddOns
		INTO #AddOnAdded
		FROM @TBL_SavecartLineitems a

		IF NOT EXISTS(SELECT * FROM #AddOnsExists a INNER JOIN #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
		BEGIN
			DELETE FROM #OldSavecartLineitemDetails
		END

	END

	--If addon present in new and old save cart data and not matches the addon data (old and new for merge) then removing the old save cart data FROM #OldSavecartLineitemDetails
	IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_SavecartLineitems ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldSavecartLineitemDetails a WHERE	
	ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
	BEGIN 
		
		DELETE FROM #OldSavecartLineitemDetails 
	END 
	ELSE 
	BEGIN 
	    
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		 
			DECLARE @parenTofAddon  TABLE( ParentOmsSavedCartLineItemId INT  )  
			INSERT INTO  @parenTofAddon 
			SELECT  ParentOmsSavedCartLineItemId FROM #OldSavecartLineitemDetails WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  

			DELETE FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId NOT IN (SELECT ParentOmsSavedCartLineItemId FROM  @parenTofAddon)   
				AND ParentOmsSavedCartLineItemId IS NOT NULL  
				AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon

			DELETE FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldSavecartLineitemDetails m)
			AND ParentOmsSavedCartLineItemId IS  NULL  
		 
		END 
		ELSE IF (SELECT COUNT (OmsSavedCartLineItemId) FROM #OldSavecartLineitemDetails WHERE ParentOmsSavedCartLineItemId IS NULL ) > 1 
		BEGIN 

			DECLARE @TBL_deleteParentOmsSavedCartLineItemId TABLE (OmsSavedCartLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsSavedCartLineItemId 
			SELECT ParentOmsSavedCartLineItemId
			FROM ZnodeOmsSavedCartLineItem a with (nolock)
			WHERE ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM #OldSavecartLineitemDetails WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple  )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
			OR ParentOmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM @TBL_deleteParentOmsSavedCartLineItemId)
		    
			DELETE FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId NOT IN (SELECT ISNULL(m.ParentOmsSavedCartLineItemId,0) FROM #OldSavecartLineitemDetails m)
			AND ParentOmsSavedCartLineItemId IS  NULL  

		END
		ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsSavedCartLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldSavecartLineitemDetails ty WHERE ty.OmsSavedCartId = wt.OmsSavedCartId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple AND wt.ParentOmsSavedCartLineItemId= ty.OmsSavedCartLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_SavecartLineitems WHERE ISNULL(AddOnValueIds,'')  = '' )
		BEGIN 

			DELETE FROM #OldSavecartLineitemDetails
		END 
	END 

	--Getting the personalise data for old save cart if present
	DECLARE @TBL_Personaloldvalues TABLE (OmsSavedCartLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
	INSERT INTO @TBL_Personaloldvalues
	SELECT OmsSavedCartLineItemId , PersonalizeCode, PersonalizeValue
	FROM ZnodeOmsPersonalizeCartItem  a 
	WHERE EXISTS (SELECT TOP 1 1 FROM #OldSavecartLineitemDetails TY WHERE TY.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)

	IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
	BEGIN 
		DELETE FROM #OldSavecartLineitemDetails
	END 
	ELSE 
	BEGIN 
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldSavecartLineitemDetails WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		BEGIN 
		   
			DELETE FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId IN (
			SELECT OmsSavedCartLineItemId FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
			AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ) ) 
			OR OmsSavedCartLineItemId IN ( SELECT ParentOmsSavedCartLineItemId FROM #OldSavecartLineitemDetails WHERE OmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues )
			AND ParentOmsSavedCartLineItemId NOT IN (SELECT OmsSavedCartLineItemId FROM @TBL_Personaloldvalues ))
		      
		END 
		ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldSavecartLineitemDetails WHERE ParentOmsSavedCartLineItemId IS nULL ) > 1 
		BEGIN 

			DELETE n FROM #OldSavecartLineitemDetails n WHERE OmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem WHERE n.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId  )
			OR ParentOmsSavedCartLineItemId  IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsPersonalizeCartItem   )
	   
		END 
		ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsPersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldSavecartLineitemDetails YU WHERE YU.OmsSavedCartLineItemId = m.OmsSavedCartLineItemId )) 
		AND (SELECT COUNT (DISTINCT OmsSavedCartLineItemId ) FROM #OldSavecartLineitemDetails WHERE ParentOmsSavedCartLineItemId IS nULL ) = 1
		BEGIN 
			DELETE FROM #OldSavecartLineitemDetails WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		END 
	  
	END 

	--If already exists cart 
	IF EXISTS (SELECT TOP 1 1 FROM #OldSavecartLineitemDetails )
	BEGIN
		----DELETE old value FROM table which having personalise data in ZnodeOmsPersonalizeCartItem but same SKU not having personalise value for new cart item
		;WITH cte AS
		(
			SELECT distinct b.*
			FROM @TBL_SavecartLineitems a 
			INNER JOIN #OldSavecartLineitemDetails b on ( a.SKU = b.sku)
			where isnull(cast(a.PersonalisedAttribute AS varchar(max)),'') = ''
		)
		,cte2 AS
		(
			SELECT c.ParentOmsSavedCartLineItemId
			FROM #OldSavecartLineitemDetails a
			INNER JOIN ZnodeOmsSavedCartLineItem c on a.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId
			INNER JOIN ZnodeOmsPersonalizeCartItem b on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
		)
		DELETE a FROM #OldSavecartLineitemDetails a
		INNER JOIN cte b on a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
		INNER JOIN cte2 c on (a.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId or a.ParentOmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId)

		----DELETE old value FROM table which having personalise data in ZnodeOmsPersonalizeCartItem but same SKU having personalise value for new cart item
		;WITH cte AS
		(
			SELECT distinct b.*, 
				a.PersonalizeCode
				,a.PersonalizeValue
			FROM @TBL_Personalise a 
			INNER JOIN #OldSavecartLineitemDetails b on ( a.SKU = b.sku)
			where a.PersonalizeValue <> ''
		)
		,cte2 AS
		(
			SELECT a.ParentOmsSavedCartLineItemId, b.PersonalizeCode, b.PersonalizeValue
			FROM #OldSavecartLineitemDetails a
			INNER JOIN ZnodeOmsPersonalizeCartItem b on b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId
			WHERE NOT EXISTS(SELECT * FROM cte c where b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and b.PersonalizeCode = c.PersonalizeCode 
						and b.PersonalizeValue = c.PersonalizeValue )
		)
		DELETE a FROM #OldSavecartLineitemDetails a
		INNER JOIN cte b on a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
		INNER JOIN cte2 c on (a.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId or a.ParentOmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId)

		;WITH cte AS
		(
			SELECT b.OmsSavedCartLineItemId ,b.ParentOmsSavedCartLineItemId , a.SKU AS SKU
				,a.PersonalizeCode
				,a.PersonalizeValue
				,a.DesignId
				,a.ThumbnailURL
			FROM @TBL_Personalise a 
			INNER JOIN #OldSavecartLineitemDetails b on a.SKU = b.SKU
			INNER JOIN ZnodeOmsPersonalizeCartItem c on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
			WHERE a.OmsSavedCartLineItemId = 0
		)
		DELETE b1
		FROM #OldSavecartLineitemDetails b1 
		WHERE NOT EXISTS(SELECT * FROM cte c where (b1.OmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId or b1.ParentOmsSavedCartLineItemId = c.ParentOmsSavedCartLineItemId))
		AND EXISTS(SELECT * FROM cte)

		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
	-----Delete old save cart with multiple personalize data 
		;WITH CTE_OldPersonalizeCodeCount as
		(
			SELECT b.OmsSavedCartLineItemId ,b.SKU,count(distinct c.PersonalizeCode) as CntPersonalizeCode				
			FROM @TBL_Personalise a 
			INNER JOIN #OldSavecartLineitemDetails b ON a.SKU = b.SKU
			INNER JOIN ZnodeOmsPersonalizeCartItem c ON b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId 
			--and a.PersonalizeCode = c.PersonalizeCode
			WHERE isnull(a.OmsSavedCartLineItemId,0) = 0
			GROUP BY b.OmsSavedCartLineItemId ,b.SKU
		)
		,CTE_NewPersonalizeCodeCount as
		(
			SELECT isnull(a.OmsSavedCartLineItemId,0) as OmsSavedCartLineItemId,b.SKU,count(a.PersonalizeCode) as CntPersonalizeCode
			FROM @TBL_Personalise a 
			INNER JOIN #NewSavecartLineitemDetails  b ON a.SKU = b.SKU
			WHERE isnull(a.OmsSavedCartLineItemId,0) = 0 AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple
			GROUP BY a.OmsSavedCartLineItemId ,b.SKU
		)
		DELETE c
		from CTE_OldPersonalizeCodeCount a
		inner join CTE_NewPersonalizeCodeCount b on a.SKU = b.SKU and a.CntPersonalizeCode <> b.CntPersonalizeCode
		inner join #OldSavecartLineitemDetails c on b.SKU = c.SKU and a.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
		
		--Delete parent entry if child not present
		DELETE a FROM #OldSavecartLineitemDetails a
		WHERE NOT EXISTS(SELECT * FROM #OldSavecartLineitemDetails b where a.OmsSavedCartLineItemId = b.ParentOmsSavedCartLineItemId)
		AND a.ParentOmsSavedCartLineItemId IS NULL

	--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
	--------If lineitem present in ZnodeOmsPersonalizeCartItem and personalize value is same for same line item then Quantity will added
	
		;WITH cte AS
		(
			SELECT b.OmsSavedCartLineItemId ,a.ParentOmsSavedCartLineItemId , a.SKU
						,d.PersonalizeCode
				,d.PersonalizeValue
				,d.DesignId
				,d.ThumbnailURL
				FROM @TBL_SavecartLineitems a 
				INNER JOIN #OldSavecartLineitemDetails b on a.SKU = b.SKU
				INNER JOIN @TBL_Personalise d on d.SKU = a.SKU
				INNER JOIN ZnodeOmsPersonalizeCartItem  c  with (nolock)  on b.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId
				WHERE a.OmsSavedCartLineItemId = 0
		)
		DELETE b1
		FROM cte a1		  
		INNER JOIN #OldSavecartLineitemDetails b1 on a1.sku = b1.SKU
		WHERE NOT EXISTS(SELECT * FROM ZnodeOmsPersonalizeCartItem c where a1.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId and a1.PersonalizeValue = c.PersonalizeValue)

		--Updating the cart if old and new cart data matches 
		UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5, 
		a.ModifiedDate = @GetDate
		FROM ZnodeOmsSavedCartLineItem a
		INNER JOIN #OldSavecartLineitemDetails b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId)
		INNER JOIN #NewSavecartLineitemDetails ty ON (ty.SKU = b.SKU)

	END 
	--Inserting the new save cart data if old and new cart data not match
	IF NOT EXISTS (SELECT TOP 1 1 FROM #OldSavecartLineitemDetails )
	BEGIN 
	    --Getting the new save cart data and generating row no. for new save cart insert
		SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
		INTO #InsertNewSavecartLineitem   
		FROM  #NewSavecartLineitemDetails  
		GROUP BY ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails ,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
		ORDER BY RowId, Id   
       	
		--Removing the line item having Quantity <=0	     
		DELETE FROM #InsertNewSavecartLineitem WHERE Quantity <=0  
  
		--Updating the rowid into new save cart line item as new line item is merged into existing save cart item
		;WITH VTTY AS   
		(  
			SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
			FROM #InsertNewSavecartLineitem m  
			INNER JOIN  #InsertNewSavecartLineitem TY1 ON TY1.SKU = m.ParentSKU   
			WHERE m.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon   
		)   
		UPDATE m1   
		SET m1.RowId = TYU.RowId  
		FROM #InsertNewSavecartLineitem m1   
		INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
        
		--Deleting the new save cart line item if cart line item is merged
		;WITH VTRET AS   
		(  
			SELECT RowId,id,Min(NewRowId) NewRowId ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID  
			FROM #InsertNewSavecartLineitem   
			GROUP BY RowId,id ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID
			Having  SKU = ParentSKU  AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdSimple
		)   
		DELETE FROM #InsertNewSavecartLineitem WHERE NewRowId IN (SELECT NewRowId FROM VTRET)  

		--Inserting the new cart line item if not merged in existing save cart line item
		INSERT INTO  ZnodeOmsSavedCartLineItem (ParentOmsSavedCartLineItemId ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails,Sequence,CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
		OUTPUT INSERTED.OmsSavedCartLineItemId  INTO @OmsInsertedData 
		SELECT NULL ,OmsSavedCartId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
		FROM  #InsertNewSavecartLineitem  TH  

		SELECT  MAX(a.OmsSavedCartLineItemId ) OmsSavedCartLineItemId 
		, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
		INTO #ParentOmsSavedCartId
		FROM ZnodeOmsSavedCartLineItem a with (nolock) 
		INNER JOIN #InsertNewSavecartLineitem b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
		WHERE ISNULL(a.ParentOmsSavedCartLineItemId,0) =0  
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #InsertNewSavecartLineitem TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
		GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID

		UPDATE a SET a.ParentOmsSavedCartLineItemId = (SELECT TOP 1 OmsSavedCartLineItemId FROM  #ParentOmsSavedCartId  r  
		WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
		FROM ZnodeOmsSavedCartLineItem a  
		INNER JOIN #InsertNewSavecartLineitem b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =1  )   
		WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
		AND a.ParentOmsSavedCartLineItemId IS nULL   

		SELECT a.OmsSavedCartLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsSavedCartLineItemId )RowIdNo
		INTO #NewSimpleProduct
		FROM ZnodeOmsSavedCartLineItem a with (nolock) 
		INNER JOIN #InsertNewSavecartLineitem b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.ParentSKU AND ( b.Id = 1  ))  
		INNER JOIN ZnodeOmsSavedCartLineItem c on b.sku = c.sku and b.OmsSavedCartId=c.OmsSavedCartId and b.Id = 1 
		WHERE ( ISNULL(a.ParentOmsSavedCartLineItemId,0) <> 0   )
		AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  and c.ParentOmsSavedCartLineItemId is null

		--Updating ParentOmsSavedCartLineItemId for newly added save cart line item
		;WITH table_update AS 
		(
			SELECT * , ROW_NUMBER()Over(Order BY OmsSavedCartLineItemId  ) RowIdNo
			FROM ZnodeOmsSavedCartLineItem a with (nolock)
			WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
			AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
			AND a.ParentOmsSavedCartLineItemId IS NULL  
			AND EXISTS (SELECT TOP 1 1  FROM  #InsertNewSavecartLineitem ty WHERE ty.OmsSavedCartId = a.OmsSavedCartId )
			AND EXISTS (SELECT TOP 1 1 FROM #NewSimpleProduct TI WHERE TI.SKU = a.SKU)
		)
		UPDATE a SET  
		a.ParentOmsSavedCartLineItemId =(SELECT TOP 1 max(OmsSavedCartLineItemId) 
		FROM #NewSimpleProduct  r  
		WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU  GROUP BY r.ParentSKU, r.SKU  )   
		FROM table_update a  
		INNER JOIN #InsertNewSavecartLineitem b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
		WHERE (SELECT TOP 1 max(OmsSavedCartLineItemId) 
		FROM #NewSimpleProduct  r  
		WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU   GROUP BY r.ParentSKU, r.SKU  )    IS NOT NULL 
	 
		;WITH Cte_Th AS   
		(             
			SELECT RowId    
			FROM #InsertNewSavecartLineitem a   
			GROUP BY RowId   
			HAVING COUNT(NewRowId) <= 1   
		)   
		UPDATE a SET a.Quantity =  NULL , a.ModifiedDate = @GetDate  
		FROM ZnodeOmsSavedCartLineItem a  
		INNER JOIN #InsertNewSavecartLineitem b ON (a.OmsSavedCartId = b.OmsSavedCartId AND a.SKU = b.SKU AND b.id =0)   
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
		AND a.OrderLineItemRelationshipTypeId IS NULL   
  
		UPDATE  ZnodeOmsSavedCartLineItem   
		SET GROUPID = NULL   
		WHERE  EXISTS (SELECT TOP 1 1  FROM #InsertNewSavecartLineitem RT WHERE RT.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
		AND OrderLineItemRelationshipTypeId IS NOT NULL     

		;WITH Cte_UpdateSequence AS   
		(  
			SELECT OmsSavedCartLineItemId ,Row_Number()Over(Order By OmsSavedCartLineItemId) RowId , Sequence   
			FROM ZnodeOmsSavedCartLineItem with (nolock)  
			WHERE EXISTS (SELECT TOP 1 1 FROM #InsertNewSavecartLineitem TH WHERE TH.OmsSavedCartId = ZnodeOmsSavedCartLineItem.OmsSavedCartId )  
		)   
		UPDATE Cte_UpdateSequence  
		SET  Sequence = RowId  
	
		----To update saved cart item personalise value FROM given line item	
		IF EXISTS(SELECT * FROM @TBL_Personalise1 where isnull(PersonalizeValue,'') <> '' and isnull(OmsSavedCartLineItemId,0) <> 0)
		BEGIN
			DELETE FROM ZnodeOmsPersonalizeCartItem 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise1 yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )

			MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
			USING @TBL_Personalise1 SOURCE
			ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
			WHEN NOT MATCHED THEN 
			INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
			VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
		END		
	
		UPDATE @TBL_Personalise
		SET OmsSavedCartLineItemId = b.OmsSavedCartLineItemId
		FROM @OmsInsertedData a 
		INNER JOIN ZnodeOmsSavedCartLineItem b ON (a.OmsSavedCartLineItemId = b.OmsSavedCartLineItemId and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
		WHERE b.ParentOmsSavedCartLineItemId IS NOT NULL 
	
		DELETE FROM ZnodeOmsPersonalizeCartItem 
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId )
						
		MERGE INTO ZnodeOmsPersonalizeCartItem TARGET 
		USING @TBL_Personalise SOURCE
		ON (TARGET.OmsSavedCartLineItemId = SOURCE.OmsSavedCartLineItemId ) 
		WHEN NOT MATCHED THEN 
		INSERT  ( OmsSavedCartLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
					,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL )
		VALUES (  SOURCE.OmsSavedCartLineItemId,  @userId, @getdate, @userId, @getdate
					,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL ) ;
  
		
		 
	END 

	Declare @OutputTable Table (CartCount numeric(28,6))

	INSERT INTO @OutputTable
	EXEC [Znode_GetOmsSavedCartLineItemCount] @OmsCookieMappingId = @OmsCookieMappingId,@UserId=@UserId,@PortalId=@UserId
	

	SELECT CAST(1 AS bit) AS Status,@OmsSavedCartId AS SavedCartId,@OmsCookieMappingId AS CookieMappingId,CartCount
	FROM @OutputTable

COMMIT TRAN InsertUpdateSaveCartLineItem;
END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE()	
	DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItem @CartLineItemXML = '+CAST(@CartLineItemXML
	AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@PortalId='+CAST(@PortalId AS varchar(10))+',@OmsCookieMappingId='+CAST(@OmsCookieMappingId AS varchar(10));

	SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
	ROLLBACK TRAN InsertUpdateSaveCartLineItem;
	EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItemQuantityWrapper', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateSaveForLaterLineItemQuantityWrapper')
	DROP PROC Znode_InsertUpdateSaveForLaterLineItemQuantityWrapper
GO

CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveForLaterLineItemQuantityWrapper]
(
	@TemplateLineItemXML XML,
    @UserId              INT,
    @Status              BIT = 0 OUT
)
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveForLaterLineItem @TemplateLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsTemplateLineItemId>0</OmsTemplateLineItemId>
    <ParentOmsTemplateLineItemId>0</ParentOmsTemplateLineItemId>
    <OmsTemplateId>1259</OmsTemplateId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsTemplateLineItemId>0</OmsTemplateLineItemId>
    <ParentOmsTemplateLineItemId>0</ParentOmsTemplateLineItemId>
    <OmsTemplateId>1259</OmsTemplateId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
*/
BEGIN
BEGIN TRAN InsertUpdateSaveForLaterLineItem;
BEGIN TRY
SET NOCOUNT ON;

	--Declared the variables
	DECLARE @GetDate datetime= dbo.Fn_GetDate();
	DECLARE @AddOnQuantity numeric(28, 6)= 0;
	DECLARE @IsAddProduct   BIT = 0 
	DECLARE @OmsTemplateLineItemId INT = 0
	
	DECLARE @TBL_SaveForLaterLineitems TABLE
	( 
		RowId int IDENTITY(1,1), OmsTemplateLineItemId int, ParentOmsTemplateLineItemId int, OmsTemplateId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
		CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute XML, 
		AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max),
		Custom1	nvarchar(max),Custom2 nvarchar(max),Custom3 nvarchar(max),Custom4
		nvarchar(max),Custom5 nvarchar(max),GroupId NVARCHAR(max) ,ProductName Nvarchar(1000) , Description NVARCHAR(max),AddOnQuantity NVARCHAR(max), CustomUnitPrice numeric(28, 6)
	);

	--Set the OrderLineItemRelationshipTypeId for Addons product
	DECLARE @OrderLineItemRelationshipTypeIdAddon int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'AddOns'
	);
	--Set the OrderLineItemRelationshipTypeId for simple product
	DECLARE @OrderLineItemRelationshipTypeIdSimple int =
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Simple'
	);
	--Set the OrderLineItemRelationshipTypeId for group product
	DECLARE @OrderLineItemRelationshipTypeIdGroup int=
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Group'
	);
	--Set the OrderLineItemRelationshipTypeId for Configurable product
	DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Configurable'
	);
	--Set the OrderLineItemRelationshipTypeId for Bundles product	
	DECLARE @OrderLineItemRelationshipTypeIdBundle int=
	(
		SELECT TOP 1 OrderLineItemRelationshipTypeId
		FROM ZnodeOmsOrderLineItemRelationshipType
		WHERE [Name] = 'Bundles'
	);

	

	--Fetching data FROM xml to table format and inserted into table @TBL_SaveForLaterLineitems
	INSERT INTO @TBL_SaveForLaterLineitems( OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails,
	Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,Description,AddOnQuantity, CustomUnitPrice )
	SELECT Tbl.Col.value( 'OmsTemplateLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsTemplateLineItemId, Tbl.Col.value( 'ParentOmsTemplateLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsTemplateLineItemId, 
	Tbl.Col.value('OmsTemplateId[1]', 'NVARCHAR(2000)')  AS OmsTemplateId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity
	, Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, s.Item AS AddOnValueIds, ISNULL(Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ),'') AS BundleProductIds, ISNULL(Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ),'') AS ConfigurableProductIds, ISNULL(Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ),'') AS GroupProductIds, 
			Tbl.Col.query('(PersonaliseValuesDetail/node())') AS PersonaliseValuesDetail, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
			Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails,
			Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
			Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
			Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
			Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
			Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
			Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
			Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(Max)' ) AS ProductName,
			Tbl.Col.value( 'Description[1]', 'NVARCHAR(Max)' ) AS Description, 
			Tbl.Col.value( 'AddOnQuantity[1]', 'NVARCHAR(2000)' ) AS AddOnQuantity,
			CASE WHEN ISNULL(Tbl.Col.value( 'CustomUnitPrice[1]', 'NVARCHAR(2000)' ),'') = '' THEN NULL ELSE Tbl.Col.value( 'CustomUnitPrice[1]', 'NVARCHAR(2000)' ) END AS CustomUnitPrice
	FROM @TemplateLineItemXML.nodes( '//ArrayOfAccountTemplateLineItemModel/AccountTemplateLineItemModel' ) AS Tbl(Col)
	CROSS APPLY dbo.split(Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ),',') as S;

	IF OBJECT_ID('tempdb..#TBL_SaveForLaterLineitems') is not null
		DROP TABLE #TBL_SaveForLaterLineitems

	IF OBJECT_ID('tempdb..#OldValueForAddon') is not null
		DROP TABLE #OldValueForAddon

	SELECT * INTO #TBL_SaveForLaterLineitems FROM @TBL_SaveForLaterLineitems
			
	UPDATE ZnodeOmsTemplate
	SET ModifiedDate = @GetDate
	WHERE OmsTemplateId = (SELECT TOP 1  OmsTemplateId FROM @TBL_SaveForLaterLineitems)

	UPDATE  @TBL_SaveForLaterLineitems
	SET Description = ISNUll(Description,'') 

	--Save cart execution code for bundle product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE BundleProductIds <> '' )
	BEGIN 				
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE BundleProductIds <> '' AND OmsTemplateLineItemId <> 0  ) 
		BEGIN 
			SET @OmsTemplateLineItemId  = (SELECT TOP 1 OmsTemplateLineItemId FROM @TBL_SaveForLaterLineitems WHERE BundleProductIds <> '' AND OmsTemplateLineItemId <> 0 )

			UPDATE ZnodeOmsTemplateLineItem 
			SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SaveForLaterLineitems WHERE BundleProductIds <> '' AND OmsTemplateLineItemId <> 0)
			, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
			WHERE ( OmsTemplateLineItemId = @OmsTemplateLineItemId  
			OR ParentOmsTemplateLineItemId =  @OmsTemplateLineItemId   ) 

			UPDATE ZnodeOmsTemplateLineItem 
			SET Quantity = AddOnQuantity, ModifiedDate = @GetDate,CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
			FROM ZnodeOmsTemplateLineItem ZOSCLI with (nolock)
			INNER JOIN @TBL_SaveForLaterLineitems SCLI ON ZOSCLI.ParentOmsTemplateLineItemId = SCLI.OmsTemplateLineItemId AND ZOSCLI.OmsTemplateId = SCLI.OmsTemplateId AND ZOSCLI.SKU = SCLI.AddOnValueIds
			WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
			AND SCLI.BundleProductIds <> ''

			--After update the existing cart with new save cart then deleting those records which are updated
			DELETE	FROM @TBL_SaveForLaterLineitems WHERE BundleProductIds <> '' AND OmsTemplateLineItemId <> 0
		END 

		--Getting bundle save cart line item entries into table to pass for bundle prodcut sp
		DECLARE @TBL_bundleProduct SaveForLaterLineitems 
		INSERT INTO @TBL_bundleProduct 
		SELECT *  
		FROM @TBL_SaveForLaterLineitems 
		WHERE ISNULL(BundleProductIds,'') <> '' 
				
		EXEC Znode_InsertUpdateSaveForLaterLineItemBundle @TBL_bundleProduct,@userId,@OrderLineItemRelationshipTypeIdBundle,@OrderLineItemRelationshipTypeIdAddon
				 
		DELETE FROM  @TBL_SaveForLaterLineitems WHERE ISNULL(BundleProductIds,'') <> '' 
		SET @OmsTemplateLineItemId = 0 
	END 
	--Save cart execution code for configurable product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE ConfigurableProductIds <> '' )
	BEGIN 				
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE ConfigurableProductIds <> '' AND OmsTemplateLineItemId <> 0  ) 
		BEGIN 

			SET @OmsTemplateLineItemId  = (SELECT TOP 1 OmsTemplateLineItemId FROM @TBL_SaveForLaterLineitems WHERE ConfigurableProductIds <> '' AND OmsTemplateLineItemId <> 0 )
				 
			UPDATE ZnodeOmsTemplateLineItem 
			SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SaveForLaterLineitems WHERE ConfigurableProductIds <> '' AND OmsTemplateLineItemId = @OmsTemplateLineItemId )
			, ModifiedDate = @GetDate,CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
			WHERE OmsTemplateLineItemId = @OmsTemplateLineItemId

			UPDATE ZnodeOmsTemplateLineItem 
			SET Quantity = AddOnQuantity, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
			FROM ZnodeOmsTemplateLineItem ZOSCLI with (nolock)
			INNER JOIN @TBL_SaveForLaterLineitems SCLI ON ZOSCLI.ParentOmsTemplateLineItemId = SCLI.OmsTemplateLineItemId AND ZOSCLI.OmsTemplateId = SCLI.OmsTemplateId AND ZOSCLI.SKU = SCLI.AddOnValueIds
			WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
			AND SCLI.ConfigurableProductIds <> ''

			--After update the existing cart with new save cart then deleting those records which are updated
			DELETE	FROM @TBL_SaveForLaterLineitems WHERE ConfigurableProductIds <> '' AND OmsTemplateLineItemId <> 0
		END 
		--Getting bundle save cart line item entries into table to pass for configurable prodcut sp
		DECLARE @TBL_Configurable SaveForLaterLineitems 
		INSERT INTO @TBL_Configurable 
		SELECT *  
		FROM @TBL_SaveForLaterLineitems 
		WHERE ISNULL(ConfigurableProductIds,'') <> '' 
		  
		EXEC Znode_InsertUpdateSaveForLaterLineItemConfigurable @TBL_Configurable,@userId,@OrderLineItemRelationshipTypeIdConfigurable,@OrderLineItemRelationshipTypeIdAddon
				  
		DELETE FROM @TBL_SaveForLaterLineitems 
		WHERE ISNULL(ConfigurableProductIds,'') <> ''
		SET @OmsTemplateLineItemId = 0  
	END 
	--Save cart execution code for group product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE GroupProductIds <> '' )
	BEGIN 				
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE GroupProductIds <> '' AND OmsTemplateLineItemId <> 0  ) 
		BEGIN 
			--Updating the existing save cart for group product
			SET @OmsTemplateLineItemId  = (SELECT TOP 1 OmsTemplateLineItemId FROM @TBL_SaveForLaterLineitems WHERE GroupProductIds <> '' AND OmsTemplateLineItemId <> 0 )
			UPDATE ZnodeOmsTemplateLineItem 
			SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SaveForLaterLineitems WHERE GroupProductIds <> '' AND OmsTemplateLineItemId = @OmsTemplateLineItemId ), CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
			WHERE OmsTemplateLineItemId = @OmsTemplateLineItemId

			UPDATE ZnodeOmsTemplateLineItem 
			SET Quantity = AddOnQuantity, ModifiedDate = @GetDate, CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
			FROM ZnodeOmsTemplateLineItem ZOSCLI with (nolock)
			INNER JOIN @TBL_SaveForLaterLineitems SCLI ON ZOSCLI.ParentOmsTemplateLineItemId = SCLI.OmsTemplateLineItemId AND ZOSCLI.OmsTemplateId = SCLI.OmsTemplateId AND ZOSCLI.SKU = SCLI.AddOnValueIds
			WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
			AND SCLI.GroupProductIds <> ''

			--After update the existing cart with new save cart then deleting those records which are updated
			DELETE	FROM @TBL_SaveForLaterLineitems WHERE GroupProductIds <> '' AND OmsTemplateLineItemId <> 0
		END 
		--Getting bundle save cart line item entries into table to pass for group prodcut sp
		DECLARE @TBL_Group SaveForLaterLineitems 
		INSERT INTO @TBL_Group 
		SELECT *  
		FROM @TBL_SaveForLaterLineitems 
		WHERE ISNULL(GroupProductIds,'') <> '' 
		
		EXEC Znode_InsertUpdateSaveForLaterLineItemGroup @TBL_Group,@userId,@OrderLineItemRelationshipTypeIdGroup,@OrderLineItemRelationshipTypeIdAddon
		
		--After update the existing cart with new save cart then deleting those records which are updated
		DELETE FROM @TBL_SaveForLaterLineitems WHERE ISNULL(GroupProductIds,'') <> ''
		SET @OmsTemplateLineItemId = 0  
	END 
	
	--This part is for updating the cart for existing line items for simple product
	IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE  OmsTemplateLineItemId <> 0  ) 
	BEGIN 
				 
		SET @OmsTemplateLineItemId  = (SELECT TOP 1 OmsTemplateLineItemId FROM @TBL_SaveForLaterLineitems WHERE  OmsTemplateLineItemId <> 0 )
		UPDATE ZnodeOmsTemplateLineItem 
		SET Quantity = (SELECT TOP 1 Quantity FROM @TBL_SaveForLaterLineitems WHERE  OmsTemplateLineItemId = @OmsTemplateLineItemId )
		, ModifiedDate = @GetDate , CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
		WHERE OmsTemplateLineItemId = @OmsTemplateLineItemId

		DECLARE @ParentOmsTemplateLineItemId INT = 0
		SET @ParentOmsTemplateLineItemId = (select ParentOmsTemplateLineItemId from ZnodeOmsTemplateLineItem WHERE OmsTemplateLineItemId = @OmsTemplateLineItemId)

		UPDATE ZnodeOmsTemplateLineItem 
		SET  CustomUnitPrice = (SELECT TOP 1 CustomUnitPrice FROM @TBL_SaveForLaterLineitems)
		WHERE OmsTemplateLineItemId = @ParentOmsTemplateLineItemId

		UPDATE ZnodeOmsTemplateLineItem 
		SET Quantity = AddOnQuantity, ModifiedDate = @GetDate
		FROM ZnodeOmsTemplateLineItem ZOSCLI with (nolock)
		INNER JOIN @TBL_SaveForLaterLineitems SCLI ON ZOSCLI.ParentOmsTemplateLineItemId = @OmsTemplateLineItemId AND ZOSCLI.OmsTemplateId = SCLI.OmsTemplateId AND ZOSCLI.SKU = SCLI.AddOnValueIds
		WHERE ZOSCLI.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon
					
		DELETE	FROM @TBL_SaveForLaterLineitems WHERE OmsTemplateLineItemId <> 0
	END 
	--Save cart execution code for Simple product
	DECLARE @OmsInsertedData TABLE (OmsTemplateLineItemId INT )
	--Inserting the personalise data into variable table @TBL_Personalise for inserting the personalise data for new products
	DECLARE @TBL_Personalise TABLE (OmsTemplateLineItemId INT, ParentOmsTemplateLineItemId int,SKU Varchar(600) ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max),PersonalizeName NVARCHAR(max))
	INSERT INTO @TBL_Personalise
	SELECT DISTINCT Null, a.ParentOmsTemplateLineItemId,a.SKU
			,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			,Tbl.Col.value( 'PersonalizeName[1]', 'NVARCHAR(Max)' ) AS PersonalizeName
	FROM @TBL_SaveForLaterLineitems a 
	CROSS APPLY a.PersonalisedAttribute.nodes( '//PersonaliseValueModel' ) AS Tbl(Col) 
			  
	----To update saved cart item personalise value FROM given line item
	DECLARE @TBL_Personalise1 TABLE (OmsTemplateLineItemId INT ,PersonalizeCode NVARCHAr(max),PersonalizeValue NVARCHAr(max),DesignId NVARCHAr(max), ThumbnailURL NVARCHAr(max),PersonalizeName NVARCHAR(max))
	INSERT INTO @TBL_Personalise1
	SELECT DISTINCT a.OmsTemplateLineItemId 
			,Tbl.Col.value( 'PersonalizeCode[1]', 'NVARCHAR(Max)' ) AS PersonalizeCode
			,Tbl.Col.value( 'PersonalizeValue[1]', 'NVARCHAR(Max)' ) AS PersonalizeValue
			,Tbl.Col.value( 'DesignId[1]', 'NVARCHAR(Max)' ) AS DesignId
			,Tbl.Col.value( 'ThumbnailURL[1]', 'NVARCHAR(Max)' ) AS ThumbnailURL
			,Tbl.Col.value( 'PersonalizeName[1]', 'NVARCHAR(Max)' ) AS PersonalizeName
	FROM (SELECT TOP 1 OmsTemplateLineItemId,PersonalisedAttribute Valuex FROM  #TBL_SaveForLaterLineitems TRTR ) a 
	CROSS APPLY	a.Valuex.nodes( '//PersonaliseValueModel' ) AS Tbl(Col)  
		    
			
	CREATE TABLE #NewSaveForLaterLineitemDetails 
	(
		GenId INT IDENTITY(1,1),RowId	INT	,OmsTemplateLineItemId	INT	 ,ParentOmsTemplateLineItemId	INT,OmsTemplateId	INT
		,SKU	NVARCHAR(MAX) ,Quantity	NUMERIC(28,6)	,OrderLineItemRelationshipTypeID	INT	,CustomText	NVARCHAR(MAX)
		,CartAddOnDetails	NVARCHAR(MAX),Sequence	int	,AutoAddon	varchar(MAX)	,OmsOrderId	INT	,ItemDetails	NVARCHAR(MAX)
		,Custom1	NVARCHAR(MAX)  ,Custom2	NVARCHAR(MAX),Custom3	NVARCHAR(MAX),Custom4	NVARCHAR(MAX),Custom5	NVARCHAR(MAX)
		,GroupId	NVARCHAR(MAX) ,ProductName	NVARCHAR(MAX),Description	NVARCHAR(MAX),Id	INT,ParentSKU NVARCHAR(MAX)
	)
	
	--Getting new save cart data
	INSERT INTO #NewSaveForLaterLineitemDetails
	SELECT  Min(RowId )RowId ,OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, SKU
		,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,  GroupId ,ProductName,min(Description)Description	,0 Id,NULL ParentSKU 
	FROM @TBL_SaveForLaterLineitems a 
	GROUP BY  OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, SKU
		,Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
	
	--Getting new simple product save cart data
	INSERT INTO #NewSaveForLaterLineitemDetails
	SELECT  Min(RowId )RowId ,OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, SKU
		,Quantity, @OrderLineItemRelationshipTypeIdSimple, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id,SKU ParentSKU 
	FROM @TBL_SaveForLaterLineitems  a 
	WHERE ISNULL(BundleProductIds,'') =  '' 
	AND  ISNULL(GroupProductIds,'') = ''	AND ISNULL(	ConfigurableProductIds,'') = ''
		GROUP BY  OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, SKU
		,Quantity,  CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName
			
	--Getting new Group,Bundle and Configurable products save cart data if addon is present for any line item
	INSERT INTO #NewSaveForLaterLineitemDetails
	SELECT  Min(RowId )RowId ,OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, AddOnValueIds
		,AddOnQuantity, @OrderLineItemRelationshipTypeIdAddon, CustomText, CartAddOnDetails, Sequence
		,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,min(Description)Description	,1 Id 
		,CASE WHEN ConfigurableProductIds <> ''  THEN ConfigurableProductIds
		WHEN  GroupProductIds <> '' THEN GroupProductIds 
		WHEN BundleProductIds <> '' THEN BundleProductIds 
			ELSE SKU END     ParentSKU 
	FROM @TBL_SaveForLaterLineitems  a 
	WHERE AddOnValueIds <> ''
	GROUP BY  OmsTemplateLineItemId, ParentOmsTemplateLineItemId, OmsTemplateId, AddOnValueIds
	,AddOnQuantity,  CustomText, CartAddOnDetails, Sequence ,ConfigurableProductIds,GroupProductIds,	BundleProductIds
	,AutoAddon, OmsOrderId, ItemDetails,Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,SKU
	
	CREATE TABLE #OldSaveForLaterLineitemDetails (OmsTemplateId INT ,OmsTemplateLineItemId INT,ParentOmsTemplateLineItemId INT , SKU  NVARCHAr(2000),OrderLineItemRelationshipTypeID INT  )
	--Getting the old save cart data if present for same SKU in the new save cart data for simple product	 
	INSERT INTO #OldSaveForLaterLineitemDetails  
	SELECT  a.OmsTemplateId,a.OmsTemplateLineItemId,a.ParentOmsTemplateLineItemId , a.SKU  ,a.OrderLineItemRelationshipTypeID 
	FROM ZnodeOmsTemplateLineItem a with (nolock)  
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems  TY WHERE TY.OmsTemplateId = a.OmsTemplateId AND ISNULL(a.SKU,'') = ISNULL(TY.SKU,'')   )   
	AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple   

	--Getting the old save cart Parent data 
	INSERT INTO #OldSaveForLaterLineitemDetails 
	SELECT DISTINCT b.OmsTemplateId,b.OmsTemplateLineItemId,b.ParentOmsTemplateLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
	FROM ZnodeOmsTemplateLineItem b with (nolock)
	INNER JOIN #OldSaveForLaterLineitemDetails c ON (c.ParentOmsTemplateLineItemId  = b.OmsTemplateLineItemId AND c.OmsTemplateId = b.OmsTemplateId)
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems  TY WHERE TY.OmsTemplateId = b.OmsTemplateId AND ISNULL(b.SKU,'') = ISNULL(TY.SKU,'') AND ISNULL(b.Groupid,'-') = ISNULL(TY.Groupid,'-')  )
	AND  b.OrderLineItemRelationshipTypeID IS NULL 
		 
	DELETE a FROM #OldSaveForLaterLineitemDetails a WHERE NOT EXISTS (SELECT TOP 1 1  FROM #OldSaveForLaterLineitemDetails b WHERE b.ParentOmsTemplateLineItemId IS NULL AND b.OmsTemplateLineItemId = a.ParentOmsTemplateLineItemId)
	AND a.ParentOmsTemplateLineItemId IS NOT NULL 
		
	------Merge Addon for same product
	SELECT * INTO #OldValueForAddon FROM #OldSaveForLaterLineitemDetails
		
	--Getting the old save cart addon data for old line items if present
	INSERT INTO #OldSaveForLaterLineitemDetails 
	SELECT b.OmsTemplateId,b.OmsTemplateLineItemId,b.ParentOmsTemplateLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
	FROM ZnodeOmsTemplateLineItem b with (nolock)
	INNER JOIN #OldSaveForLaterLineitemDetails c ON (c.OmsTemplateLineItemId  = b.ParentOmsTemplateLineItemId AND c.OmsTemplateId = b.OmsTemplateId)
	WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems  TY WHERE TY.OmsTemplateId = b.OmsTemplateId AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
	AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

	------Merge Addon for same product
	IF EXISTS(SELECT * FROM @TBL_SaveForLaterLineitems WHERE ISNULL(AddOnValueIds,'') <> '' )
	BEGIN

		INSERT INTO #OldValueForAddon 
		SELECT b.OmsTemplateId,b.OmsTemplateLineItemId,b.ParentOmsTemplateLineItemId , b.SKU  ,b.OrderLineItemRelationshipTypeID  
		FROM ZnodeOmsTemplateLineItem b with (nolock)
		INNER JOIN #OldValueForAddon c ON (c.OmsTemplateLineItemId  = b.ParentOmsTemplateLineItemId AND c.OmsTemplateId = b.OmsTemplateId)
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems  TY WHERE TY.OmsTemplateId = b.OmsTemplateId )--AND ISNULL(b.SKU,'') = ISNULL(TY.AddOnValueIds,'') )
		AND  b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon

		SELECT distinct SKU, STUFF(
								( SELECT  ', ' + SKU FROM    
									( SELECT DISTINCT SKU FROM     #OldValueForAddon b 
										where a.OmsTemplateLineItemId=b.ParentOmsTemplateLineItemId and OrderLineItemRelationshipTypeID = 1 ) x 
										FOR XML PATH('')
								), 1, 2, ''
								) AddOns
		INTO #AddOnsExists
		FROM #OldValueForAddon a where a.ParentOmsTemplateLineItemId is not null and OrderLineItemRelationshipTypeID<>1

		SELECT distinct a.SKU, STUFF(
									( SELECT  ', ' + x.AddOnValueIds FROM    
									( SELECT DISTINCT b.AddOnValueIds FROM @TBL_SaveForLaterLineitems b
										where a.SKU=b.SKU ) x
										FOR XML PATH('')
									), 1, 2, ''
								) AddOns
		INTO #AddOnAdded
		FROM @TBL_SaveForLaterLineitems a

		IF NOT EXISTS(SELECT * FROM #AddOnsExists a INNER JOIN #AddOnAdded b on a.SKU = b.SKU and a.AddOns = b.AddOns )
		BEGIN
			DELETE FROM #OldSaveForLaterLineitemDetails
		END

	END

	--If addon present in new and old save cart data and not matches the addon data (old and new for merge) then removing the old save cart data FROM #OldSaveForLaterLineitemDetails
	IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_SaveForLaterLineitems ty WHERE EXISTS (SELECT TOP 1 1 FROM 	#OldSaveForLaterLineitemDetails a WHERE	
	ISNULL(TY.AddOnValueIds,'') = a.SKU AND  a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon ))
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
	BEGIN 
		
		DELETE FROM #OldSaveForLaterLineitemDetails 
	END 
	ELSE 
	BEGIN 
	    
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE ISNULL(AddOnValueIds,'')  <> '' )
		BEGIN 
		 
			DECLARE @parenTofAddon  TABLE( ParentOmsTemplateLineItemId INT  )  
			INSERT INTO  @parenTofAddon 
			SELECT  ParentOmsTemplateLineItemId FROM #OldSaveForLaterLineitemDetails WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  

			DELETE FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId NOT IN (SELECT ParentOmsTemplateLineItemId FROM  @parenTofAddon)   
				AND ParentOmsTemplateLineItemId IS NOT NULL  
				AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon

			DELETE FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId NOT IN (SELECT ISNULL(m.ParentOmsTemplateLineItemId,0) FROM #OldSaveForLaterLineitemDetails m)
			AND ParentOmsTemplateLineItemId IS  NULL  
		 
		END 
		ELSE IF (SELECT COUNT (OmsTemplateLineItemId) FROM #OldSaveForLaterLineitemDetails WHERE ParentOmsTemplateLineItemId IS NULL ) > 1 
		BEGIN 

			DECLARE @TBL_deleteParentOmsTemplateLineItemId TABLE (OmsTemplateLineItemId INT )
			INSERT INTO @TBL_deleteParentOmsTemplateLineItemId 
			SELECT ParentOmsTemplateLineItemId
			FROM ZnodeOmsTemplateLineItem a with (nolock)
			WHERE ParentOmsTemplateLineItemId IN (SELECT OmsTemplateLineItemId FROM #OldSaveForLaterLineitemDetails WHERE OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple  )
			AND OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon 

			DELETE FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId IN (SELECT OmsTemplateLineItemId FROM @TBL_deleteParentOmsTemplateLineItemId)
			OR ParentOmsTemplateLineItemId IN (SELECT OmsTemplateLineItemId FROM @TBL_deleteParentOmsTemplateLineItemId)
		    
			DELETE FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId NOT IN (SELECT ISNULL(m.ParentOmsTemplateLineItemId,0) FROM #OldSaveForLaterLineitemDetails m)
			AND ParentOmsTemplateLineItemId IS  NULL  

		END
		ELSE IF  EXISTS (SELECT TOP 1 1 FROM ZnodeOmsTemplateLineItem Wt WHERE EXISTS (SELECT TOP 1 1 FROM #OldSaveForLaterLineitemDetails ty WHERE ty.OmsTemplateId = wt.OmsTemplateId AND ty.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple AND wt.ParentOmsTemplateLineItemId= ty.OmsTemplateLineItemId  ) AND wt.OrderLineItemRelationshipTypeId = @OrderLineItemRelationshipTypeIdAddon)
		AND EXISTS (SELECT TOP 1 1 FROM @TBL_SaveForLaterLineitems WHERE ISNULL(AddOnValueIds,'')  = '' )
		BEGIN 

			DELETE FROM #OldSaveForLaterLineitemDetails
		END 
	END 

	--Getting the personalise data for old save cart if present
	DECLARE @TBL_Personaloldvalues TABLE (OmsTemplateLineItemId INT , PersonalizeCode NVARCHAr(max), PersonalizeValue NVARCHAr(max))
	INSERT INTO @TBL_Personaloldvalues
	SELECT OmsTemplateLineItemId , PersonalizeCode, PersonalizeValue
	FROM ZnodeOmsTemplatePersonalizeCartItem  a 
	WHERE EXISTS (SELECT TOP 1 1 FROM #OldSaveForLaterLineitemDetails TY WHERE TY.OmsTemplateLineItemId = a.OmsTemplateLineItemId)
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise TU WHERE TU.PersonalizeCode = a.PersonalizeCode AND TU.PersonalizeValue = a.PersonalizeValue)

	IF  NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
	AND EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise )
	BEGIN 
		DELETE FROM #OldSaveForLaterLineitemDetails
	END 
	ELSE 
	BEGIN 
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		AND (SELECT COUNT (DISTINCT OmsTemplateLineItemId ) FROM #OldSaveForLaterLineitemDetails WHERE ParentOmsTemplateLineItemId IS nULL ) > 1 
		BEGIN 
		   
			DELETE FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId IN (
			SELECT OmsTemplateLineItemId FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId NOT IN (SELECT OmsTemplateLineItemId FROM @TBL_Personaloldvalues )
			AND ParentOmsTemplateLineItemId NOT IN (SELECT OmsTemplateLineItemId FROM @TBL_Personaloldvalues ) ) 
			OR OmsTemplateLineItemId IN ( SELECT ParentOmsTemplateLineItemId FROM #OldSaveForLaterLineitemDetails WHERE OmsTemplateLineItemId NOT IN (SELECT OmsTemplateLineItemId FROM @TBL_Personaloldvalues )
			AND ParentOmsTemplateLineItemId NOT IN (SELECT OmsTemplateLineItemId FROM @TBL_Personaloldvalues ))
		      
		END 
		ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM @TBL_Personaloldvalues)
		AND (SELECT COUNT (DISTINCT OmsTemplateLineItemId ) FROM #OldSaveForLaterLineitemDetails WHERE ParentOmsTemplateLineItemId IS nULL ) > 1 
		BEGIN 

			DELETE n FROM #OldSaveForLaterLineitemDetails n WHERE OmsTemplateLineItemId  IN (SELECT OmsTemplateLineItemId FROM ZnodeOmsTemplatePersonalizeCartItem WHERE n.OmsTemplateLineItemId = ZnodeOmsTemplatePersonalizeCartItem.OmsTemplateLineItemId  )
			OR ParentOmsTemplateLineItemId  IN (SELECT OmsTemplateLineItemId FROM ZnodeOmsTemplatePersonalizeCartItem   )
	   
		END 
		ELSE IF NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		AND EXISTS (SELECT TOP 1 1 FROM ZnodeOmsTemplatePersonalizeCartItem m WHERE EXISTS (SELECT Top 1 1 FROM #OldSaveForLaterLineitemDetails YU WHERE YU.OmsTemplateLineItemId = m.OmsTemplateLineItemId )) 
		AND (SELECT COUNT (DISTINCT OmsTemplateLineItemId ) FROM #OldSaveForLaterLineitemDetails WHERE ParentOmsTemplateLineItemId IS nULL ) = 1
		BEGIN 
			DELETE FROM #OldSaveForLaterLineitemDetails WHERE NOT EXISTS (SELECT TOP 1 1  FROM @TBL_Personalise)
		END 
	  
	END 

	--If already exists cart 
	IF EXISTS (SELECT TOP 1 1 FROM #OldSaveForLaterLineitemDetails )
	BEGIN
		----DELETE old value FROM table which having personalise data in ZnodeOmsTemplatePersonalizeCartItem but same SKU not having personalise value for new cart item
		;WITH cte AS
		(
			SELECT distinct b.*
			FROM @TBL_SaveForLaterLineitems a 
			INNER JOIN #OldSaveForLaterLineitemDetails b on ( a.SKU = b.sku)
			where isnull(cast(a.PersonalisedAttribute AS varchar(max)),'') = ''
		)
		,cte2 AS
		(
			SELECT c.ParentOmsTemplateLineItemId
			FROM #OldSaveForLaterLineitemDetails a
			INNER JOIN ZnodeOmsTemplateLineItem c on a.OmsTemplateLineItemId = c.ParentOmsTemplateLineItemId
			INNER JOIN ZnodeOmsTemplatePersonalizeCartItem b on b.OmsTemplateLineItemId = c.OmsTemplateLineItemId
		)
		DELETE a FROM #OldSaveForLaterLineitemDetails a
		INNER JOIN cte b on a.OmsTemplateLineItemId = b.OmsTemplateLineItemId
		INNER JOIN cte2 c on (a.OmsTemplateLineItemId = c.ParentOmsTemplateLineItemId or a.ParentOmsTemplateLineItemId = c.ParentOmsTemplateLineItemId)

		----DELETE old value FROM table which having personalise data in ZnodeOmsTemplatePersonalizeCartItem but same SKU having personalise value for new cart item
		;WITH cte AS
		(
			SELECT distinct b.*, 
				a.PersonalizeCode
				,a.PersonalizeValue
			FROM @TBL_Personalise a 
			INNER JOIN #OldSaveForLaterLineitemDetails b on ( a.SKU = b.sku)
			where a.PersonalizeValue <> ''
		)
		,cte2 AS
		(
			SELECT a.ParentOmsTemplateLineItemId, b.PersonalizeCode, b.PersonalizeValue
			FROM #OldSaveForLaterLineitemDetails a
			INNER JOIN ZnodeOmsTemplatePersonalizeCartItem b on b.OmsTemplateLineItemId = a.OmsTemplateLineItemId
			WHERE NOT EXISTS(SELECT * FROM cte c where b.OmsTemplateLineItemId = c.OmsTemplateLineItemId and b.PersonalizeCode = c.PersonalizeCode 
						and b.PersonalizeValue = c.PersonalizeValue )
		)
		DELETE a FROM #OldSaveForLaterLineitemDetails a
		INNER JOIN cte b on a.OmsTemplateLineItemId = b.OmsTemplateLineItemId
		INNER JOIN cte2 c on (a.OmsTemplateLineItemId = c.ParentOmsTemplateLineItemId or a.ParentOmsTemplateLineItemId = c.ParentOmsTemplateLineItemId)

		;WITH cte AS
		(
			SELECT b.OmsTemplateLineItemId ,b.ParentOmsTemplateLineItemId , a.SKU AS SKU
				,a.PersonalizeCode
				,a.PersonalizeValue
				,a.DesignId
				,a.ThumbnailURL
			FROM @TBL_Personalise a 
			INNER JOIN #OldSaveForLaterLineitemDetails b on a.SKU = b.SKU
			INNER JOIN ZnodeOmsTemplatePersonalizeCartItem c on b.OmsTemplateLineItemId = c.OmsTemplateLineItemId
			WHERE a.OmsTemplateLineItemId = 0
		)
		DELETE b1
		FROM #OldSaveForLaterLineitemDetails b1 
		WHERE NOT EXISTS(SELECT * FROM cte c where (b1.OmsTemplateLineItemId = c.ParentOmsTemplateLineItemId or b1.ParentOmsTemplateLineItemId = c.ParentOmsTemplateLineItemId))
		AND EXISTS(SELECT * FROM cte)

		--------If lineitem present in ZnodeOmsTemplatePersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
		--------If lineitem present in ZnodeOmsTemplatePersonalizeCartItem and personalize value is same for same line item then Quantity will added
	-----Delete old save cart with multiple personalize data 
		;WITH CTE_OldPersonalizeCodeCount as
		(
			SELECT b.OmsTemplateLineItemId ,b.SKU,count(distinct c.PersonalizeCode) as CntPersonalizeCode				
			FROM @TBL_Personalise a 
			INNER JOIN #OldSaveForLaterLineitemDetails b ON a.SKU = b.SKU
			INNER JOIN ZnodeOmsTemplatePersonalizeCartItem c ON b.OmsTemplateLineItemId = c.OmsTemplateLineItemId 
			--and a.PersonalizeCode = c.PersonalizeCode
			WHERE isnull(a.OmsTemplateLineItemId,0) = 0
			GROUP BY b.OmsTemplateLineItemId ,b.SKU
		)
		,CTE_NewPersonalizeCodeCount as
		(
			SELECT isnull(a.OmsTemplateLineItemId,0) as OmsTemplateLineItemId,b.SKU,count(a.PersonalizeCode) as CntPersonalizeCode
			FROM @TBL_Personalise a 
			INNER JOIN #NewSaveForLaterLineitemDetails  b ON a.SKU = b.SKU
			WHERE isnull(a.OmsTemplateLineItemId,0) = 0 AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple
			GROUP BY a.OmsTemplateLineItemId ,b.SKU
		)
		DELETE c
		from CTE_OldPersonalizeCodeCount a
		inner join CTE_NewPersonalizeCodeCount b on a.SKU = b.SKU and a.CntPersonalizeCode <> b.CntPersonalizeCode
		inner join #OldSaveForLaterLineitemDetails c on b.SKU = c.SKU and a.OmsTemplateLineItemId = c.OmsTemplateLineItemId
		
		--Delete parent entry if child not present
		DELETE a FROM #OldSaveForLaterLineitemDetails a
		WHERE NOT EXISTS(SELECT * FROM #OldSaveForLaterLineitemDetails b where a.OmsTemplateLineItemId = b.ParentOmsTemplateLineItemId)
		AND a.ParentOmsTemplateLineItemId IS NULL

	--------If lineitem present in ZnodeOmsTemplatePersonalizeCartItem and personalize value is different for same line item then New lineItem will generate
	--------If lineitem present in ZnodeOmsTemplatePersonalizeCartItem and personalize value is same for same line item then Quantity will added
	
		;WITH cte AS
		(
			SELECT b.OmsTemplateLineItemId ,a.ParentOmsTemplateLineItemId , a.SKU
						,d.PersonalizeCode
				,d.PersonalizeValue
				,d.DesignId
				,d.ThumbnailURL
				FROM @TBL_SaveForLaterLineitems a 
				INNER JOIN #OldSaveForLaterLineitemDetails b on a.SKU = b.SKU
				INNER JOIN @TBL_Personalise d on d.SKU = a.SKU
				INNER JOIN ZnodeOmsTemplatePersonalizeCartItem  c  with (nolock)  on b.OmsTemplateLineItemId = c.OmsTemplateLineItemId
				WHERE a.OmsTemplateLineItemId = 0
		)
		DELETE b1
		FROM cte a1		  
		INNER JOIN #OldSaveForLaterLineitemDetails b1 on a1.sku = b1.SKU
		WHERE NOT EXISTS(SELECT * FROM ZnodeOmsTemplatePersonalizeCartItem c where a1.OmsTemplateLineItemId = c.OmsTemplateLineItemId and a1.PersonalizeValue = c.PersonalizeValue)

		--Updating the cart if old and new cart data matches 
		UPDATE a
		SET a.Quantity = a.Quantity+ty.Quantity,
		a.Custom1 = ty.Custom1,
		a.Custom2 = ty.Custom2,
		a.Custom3 = ty.Custom3,
		a.Custom4 = ty.Custom4,
		a.Custom5 = ty.Custom5, 
		a.ModifiedDate = @GetDate
		FROM ZnodeOmsTemplateLineItem a
		INNER JOIN #OldSaveForLaterLineitemDetails b ON (a.OmsTemplateLineItemId = b.OmsTemplateLineItemId)
		INNER JOIN #NewSaveForLaterLineitemDetails ty ON (ty.SKU = b.SKU)

	END 
	--Inserting the new save cart data if old and new cart data not match
	IF NOT EXISTS (SELECT TOP 1 1 FROM #OldSaveForLaterLineitemDetails )
	BEGIN 
	    --Getting the new save cart data and generating row no. for new save cart insert
		SELECT RowId, Id ,Row_number()Over(Order BY RowId, Id,GenId) NewRowId , ParentOmsTemplateLineItemId ,OmsTemplateId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewId() ) Sequence ,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,min(Description)Description  ,ParentSKU  
		INTO #InsertNewSaveForLaterLineitem   
		FROM  #NewSaveForLaterLineitemDetails  
		GROUP BY ParentOmsTemplateLineItemId ,OmsTemplateId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails ,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,RowId, Id ,GenId,ParentSKU   
		ORDER BY RowId, Id   
       	
		--Removing the line item having Quantity <=0	     
		DELETE FROM #InsertNewSaveForLaterLineitem WHERE Quantity <=0  
  
		--Updating the rowid into new save cart line item as new line item is merged into existing save cart item
		;WITH VTTY AS   
		(  
			SELECT m.RowId OldRowId , TY1.RowId , TY1.SKU   
			FROM #InsertNewSaveForLaterLineitem m  
			INNER JOIN  #InsertNewSaveForLaterLineitem TY1 ON TY1.SKU = m.ParentSKU   
			WHERE m.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon   
		)   
		UPDATE m1   
		SET m1.RowId = TYU.RowId  
		FROM #InsertNewSaveForLaterLineitem m1   
		INNER JOIN VTTY TYU ON (TYU.OldRowId = m1.RowId)  
        
		--Deleting the new save cart line item if cart line item is merged
		;WITH VTRET AS   
		(  
			SELECT RowId,id,Min(NewRowId) NewRowId ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID  
			FROM #InsertNewSaveForLaterLineitem   
			GROUP BY RowId,id ,SKU ,ParentSKU ,OrderLineItemRelationshipTypeID
			Having  SKU = ParentSKU  AND OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdSimple
		)   
		DELETE FROM #InsertNewSaveForLaterLineitem WHERE NewRowId IN (SELECT NewRowId FROM VTRET)  


		--Inserting the new cart line item if not merged in existing save cart line item
		INSERT INTO  ZnodeOmsTemplateLineItem (ParentOmsTemplateLineItemId ,OmsTemplateId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails,Sequence,CreatedBY,CreatedDate,ModifiedBy ,ModifiedDate,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description)  
		OUTPUT INSERTED.OmsTemplateLineItemId  INTO @OmsInsertedData 
		SELECT NULL ,OmsTemplateId,SKU,Quantity,OrderLineItemRelationshipTypeId  
		,CustomText,CartAddOnDetails,ROW_NUMBER()Over(Order BY NewRowId)  sequence,@UserId,@GetDate,@UserId,@GetDate,AutoAddon  
		,OmsOrderId,Custom1,Custom2,Custom3 ,Custom4 ,Custom5,GroupId,ProductName ,Description   
		FROM  #InsertNewSaveForLaterLineitem  TH  
		
		SELECT  MAX(a.OmsTemplateLineItemId ) OmsTemplateLineItemId 
		, b.RowId ,b.GroupId ,b.SKU ,b.ParentSKU  
		INTO #ParentOmsTemplateId
		FROM ZnodeOmsTemplateLineItem a with (nolock) 
		INNER JOIN #InsertNewSaveForLaterLineitem b ON (a.OmsTemplateId = b.OmsTemplateId AND a.SKU = b.ParentSKU AND ISNULL(b.GroupId,'-') = ISNULL(a.GroupId,'-')  )  
		WHERE ISNULL(a.ParentOmsTemplateLineItemId,0) =0  
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon
		AND CASE WHEN EXISTS (SELECT TOP 1 1 FROM #InsertNewSaveForLaterLineitem TU WHERE TU.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdSimple)  THEN ISNULL(a.OrderLineItemRelationshipTypeID,0) ELSE 0 END = 0 
		GROUP BY b.RowId ,b.GroupId ,b.SKU	,b.ParentSKU,b.OrderLineItemRelationshipTypeID

		UPDATE a SET a.ParentOmsTemplateLineItemId = (SELECT TOP 1 OmsTemplateLineItemId FROM  #ParentOmsTemplateId  r  
		WHERE  r.RowId = b.RowId AND ISNULL(r.GroupId,'-') = ISNULL(a.GroupId,'-')  Order by b.RowId )   
		FROM ZnodeOmsTemplateLineItem a  
		INNER JOIN #InsertNewSaveForLaterLineitem b ON (a.OmsTemplateId = b.OmsTemplateId AND a.SKU = b.SKU AND b.id =1  )   
		WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
		AND b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon  
		AND a.ParentOmsTemplateLineItemId IS nULL   

		SELECT a.OmsTemplateLineItemId , b.RowId  ,b.SKU ,b.ParentSKU  ,Row_number()Over(Order BY c.OmsTemplateLineItemId )RowIdNo
		INTO #NewSimpleProduct
		FROM ZnodeOmsTemplateLineItem a with (nolock) 
		INNER JOIN #InsertNewSaveForLaterLineitem b ON (a.OmsTemplateId = b.OmsTemplateId AND a.SKU = b.ParentSKU AND ( b.Id = 1  ))  
		INNER JOIN ZnodeOmsTemplateLineItem c on b.sku = c.sku and b.OmsTemplateId=c.OmsTemplateId and b.Id = 1 
		WHERE ( ISNULL(a.ParentOmsTemplateLineItemId,0) <> 0   )
		AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  and c.ParentOmsTemplateLineItemId is null

		--Updating ParentOmsTemplateLineItemId for newly added save cart line item
		;WITH table_update AS 
		(
			SELECT * , ROW_NUMBER()Over(Order BY OmsTemplateLineItemId  ) RowIdNo
			FROM ZnodeOmsTemplateLineItem a with (nolock)
			WHERE a.OrderLineItemRelationshipTypeId IS NOT NULL   
			AND a.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon  
			AND a.ParentOmsTemplateLineItemId IS NULL  
			AND EXISTS (SELECT TOP 1 1  FROM  #InsertNewSaveForLaterLineitem ty WHERE ty.OmsTemplateId = a.OmsTemplateId )
			AND EXISTS (SELECT TOP 1 1 FROM #NewSimpleProduct TI WHERE TI.SKU = a.SKU)
		)
		UPDATE a SET  
		a.ParentOmsTemplateLineItemId =(SELECT TOP 1 max(OmsTemplateLineItemId) 
		FROM #NewSimpleProduct  r  
		WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU  GROUP BY r.ParentSKU, r.SKU  )   
		FROM table_update a  
		INNER JOIN #InsertNewSaveForLaterLineitem b ON (a.OmsTemplateId = b.OmsTemplateId AND a.SKU = b.SKU AND b.OrderLineItemRelationshipTypeID = @OrderLineItemRelationshipTypeIdAddon AND  b.id =1 )   
		WHERE (SELECT TOP 1 max(OmsTemplateLineItemId) 
		FROM #NewSimpleProduct  r  
		WHERE  r.ParentSKU = b.ParentSKU AND a.SKU = r.SKU   GROUP BY r.ParentSKU, r.SKU  )    IS NOT NULL 
	 
		;WITH Cte_Th AS   
		(             
			SELECT RowId    
			FROM #InsertNewSaveForLaterLineitem a   
			GROUP BY RowId   
			HAVING COUNT(NewRowId) <= 1   
		)   
		UPDATE a SET a.Quantity =  NULL , a.ModifiedDate = @GetDate  
		FROM ZnodeOmsTemplateLineItem a  
		INNER JOIN #InsertNewSaveForLaterLineitem b ON (a.OmsTemplateId = b.OmsTemplateId AND a.SKU = b.SKU AND b.id =0)   
		WHERE NOT EXISTS (SELECT TOP 1 1  FROM Cte_Th TY WHERE TY.RowId = b.RowId )  
		AND a.OrderLineItemRelationshipTypeId IS NULL   
  
		UPDATE  ZnodeOmsTemplateLineItem   
		SET GROUPID = NULL   
		WHERE  EXISTS (SELECT TOP 1 1  FROM #InsertNewSaveForLaterLineitem RT WHERE RT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId )  
		AND OrderLineItemRelationshipTypeId IS NOT NULL     

		;WITH Cte_UpdateSequence AS   
		(  
			SELECT OmsTemplateLineItemId ,Row_Number()Over(Order By OmsTemplateLineItemId) RowId , Sequence   
			FROM ZnodeOmsTemplateLineItem with (nolock)  
			WHERE EXISTS (SELECT TOP 1 1 FROM #InsertNewSaveForLaterLineitem TH WHERE TH.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId )  
		)   
		UPDATE Cte_UpdateSequence  
		SET  Sequence = RowId  
	
		----To update saved cart item personalise value FROM given line item	
		IF EXISTS(SELECT * FROM @TBL_Personalise1 where isnull(PersonalizeValue,'') <> '' and isnull(OmsTemplateLineItemId,0) <> 0)
		BEGIN
			DELETE FROM ZnodeOmsTemplatePersonalizeCartItem 
			WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise1 yu WHERE yu.OmsTemplateLineItemId = ZnodeOmsTemplatePersonalizeCartItem.OmsTemplateLineItemId )

			MERGE INTO ZnodeOmsTemplatePersonalizeCartItem TARGET 
			USING @TBL_Personalise1 SOURCE
			ON (TARGET.OmsTemplateLineItemId = SOURCE.OmsTemplateLineItemId ) 
			WHEN NOT MATCHED THEN 
			INSERT  ( OmsTemplateLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
							,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL, PersonalizeName )
			VALUES (  SOURCE.OmsTemplateLineItemId,  @userId, @getdate, @userId, @getdate
							,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL, SOURCE.PersonalizeName ) ;
		END		
	
		UPDATE @TBL_Personalise
		SET OmsTemplateLineItemId = b.OmsTemplateLineItemId
		FROM @OmsInsertedData a 
		INNER JOIN ZnodeOmsTemplateLineItem b ON (a.OmsTemplateLineItemId = b.OmsTemplateLineItemId and b.OrderLineItemRelationshipTypeID <> @OrderLineItemRelationshipTypeIdAddon)
		WHERE b.ParentOmsTemplateLineItemId IS NOT NULL 
	
		DELETE FROM ZnodeOmsTemplatePersonalizeCartItem 
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_Personalise yu WHERE yu.OmsTemplateLineItemId = ZnodeOmsTemplatePersonalizeCartItem.OmsTemplateLineItemId )
						
		MERGE INTO ZnodeOmsTemplatePersonalizeCartItem TARGET 
		USING @TBL_Personalise SOURCE
		ON (TARGET.OmsTemplateLineItemId = SOURCE.OmsTemplateLineItemId ) 
		WHEN NOT MATCHED THEN 
		INSERT  ( OmsTemplateLineItemId,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
					,PersonalizeCode, PersonalizeValue,DesignId	,ThumbnailURL, PersonalizeName )
		VALUES (  SOURCE.OmsTemplateLineItemId,  @userId, @getdate, @userId, @getdate
					,SOURCE.PersonalizeCode, SOURCE.PersonalizeValue,SOURCE.DesignId	,SOURCE.ThumbnailURL, SOURCE.PersonalizeName ) ;
  
		
		 
	END 
	SET @Status = 1
COMMIT TRAN InsertUpdateSaveForLaterLineItem;
END TRY
BEGIN CATCH
	SET @Status = 0
	SELECT ERROR_MESSAGE()	
	DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveForLaterLineItemQuantityWrapper @TemplateLineItemXML = '+CAST(@TemplateLineItemXML
	AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50));

	SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
	ROLLBACK TRAN InsertUpdateSaveForLaterLineItem;
	EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveForLaterLineItemQuantityWrapper', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
END CATCH;
END;


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_MergeOmsSavedCartLineItems')
	DROP PROC Znode_MergeOmsSavedCartLineItems
GO

CREATE PROCEDURE [dbo].[Znode_MergeOmsSavedCartLineItems] 
(
	@OmsSavedCartId INT  
	,@OldOmsSavedCartId INT 
	,@UserId  INT 
	,@Status  BIT = 0  OUT
)
AS 
BEGIN 
 BEGIN TRY 
 SET NOCOUNT ON 

     DECLARE @AddOnOrderLineItemRelationshipTypeId INT = (SELECT TOP 1 OrderLineItemRelationshipTypeId 
															FROM ZnodeOmsOrderLineItemRelationshipType
															WHERE Name = 'Addons')
	 DECLARE @TBL_OmsSavedCartOld TABLE(SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAr(max)  )

	 DECLARE @TBL_OmsSavedCartNew TABLE(SKU NVARCHAR(2000), OmsSavedCartLineItemId INT ,ParentSKU NVARCHAR(2000) , ParentOmsSavedCartLineItemId INT ,AddOnSKU NVARCHAR(2000), OmsSavedCartLineItemIdAddOn NVARCHAR(2000) ,PersonalizeCode NVARCHAR(1200), PersonalizeValue  NVARCHAr(max)  )
	 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	 ----Adding dummy CookieMappingId if not present
	IF NOT EXISTS(SELECT * FROM ZnodeOmsCookieMapping where OmsCookieMappingId = 1)
	BEGIN
		SET IDENTITY_INSERT ZnodeOmsCookieMapping ON
		INSERT INTO ZnodeOmsCookieMapping(OmsCookieMappingId,UserId,PortalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT 1,null,(select top 1 PortalId from ZnodePortal order by 1 ASC),2,@GetDate,2,@GetDate
		SET IDENTITY_INSERT ZnodeOmsCookieMapping OFF
	END

	----geting dummy OmsSavedCartId on basis of OmsCookieMappingId = 1 if not present then add
	Declare @OmsSavedCartIdDummy int = 0
	SET @OmsSavedCartIdDummy = (Select Top 1 OmsSavedCartId  from ZnodeOmsSavedCart With(NoLock) where OmsCookieMappingId = 1)
	IF ISNULL(@OmsSavedCartIdDummy ,0) = 0 
	BEGIN 
		INSERT INTO ZnodeOmsSavedCart(OmsCookieMappingId,SalesTax,RecurringSalesTax,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT  1,null,null,2,@GetDate,2,@GetDate
		SET @OmsSavedCartIdDummy  = @@IDENTITY
	END

	 SELECT OmsSavedCartLineItemId,  ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeId
	 INTO #ZnodeOmsSavedCartLineItemOld
	 FROM ZnodeOmsSavedCartLineItem a with(nolock)
	 WHERE OmsSavedCartId = @OldOmsSavedCartId 


	 SELECT OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue
	 INTO #ZnodeOmsPersonalizeCartItemOld
	 FROM ZnodeOmsPersonalizeCartItem a with(nolock)
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)

	 SELECT OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, SKU, Quantity, OrderLineItemRelationshipTypeId
	 INTO #ZnodeOmsSavedCartLineItemNew
	 FROM ZnodeOmsSavedCartLineItem a with(nolock)
	 WHERE OmsSavedCartId = @OmsSavedCartId 


	 SELECT OmsSavedCartLineItemId, PersonalizeCode, PersonalizeValue 
	 INTO #ZnodeOmsPersonalizeCartItemNew
	 FROM ZnodeOmsPersonalizeCartItem a with(nolock)
	 WHERE EXISTS (SELECT TOP 1 1 FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)

	 

	 INSERT INTO @TBL_OmsSavedCartOld (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	 SELECT SKU , OmsSavedCartLineItemId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemOld TBL_B WHERE TBL_B.OmsSavedCartLineItemId = ISNULL(TBL_A.ParentOmsSavedCartLineItemId,0)  ) ParentSKU
				, ParentOmsSavedCartLineItemId
	 FROM #ZnodeOmsSavedCartLineItemOld TBL_A
	 WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId
	 
	

	 ;With Cte_UpdateOld AS 
	 (
		SELECT ParentOmsSavedCartLineItemId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsSavedCartLineItemId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemOld t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemOld a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM @TBL_OmsSavedCartOld TBL_O 
	 INNER JOIN Cte_UpdateOld TBL_ON ON (TBL_ON.ParentOmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )
	   
     UPDATE TBL_O
	 SET TBL_O.PersonalizeCode = TBL_ON.PersonalizeCode
		,TBL_O.PersonalizeValue =  TBL_ON.PersonalizeValue
	 FROM @TBL_OmsSavedCartOld TBL_O 
	 INNER JOIN #ZnodeOmsPersonalizeCartItemOld TBL_ON ON (TBL_ON.OmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )

	  INSERT INTO @TBL_OmsSavedCartNew (SKU,OmsSavedCartLineItemId,ParentSKU,ParentOmsSavedCartLineItemId)
	    SELECT SKU , OmsSavedCartLineItemId,(SELECT TOP 1 SKU FROM #ZnodeOmsSavedCartLineItemNew TBL_B WHERE TBL_B.OmsSavedCartLineItemId = ISNULL( TBL_A.ParentOmsSavedCartLineItemId,0)   ) ParentSKU
					, ParentOmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemNew TBL_A
		WHERE OrderLineItemRelationshipTypeId IS NOT NULL AND OrderLineItemRelationshipTypeId <> @AddOnOrderLineItemRelationshipTypeId
	 
	 ;WITH Cte_UpdateNew AS 
	 (
		SELECT ParentOmsSavedCartLineItemId , SUBSTRING((SELECT ','+SKU FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  SKU
		     , SUBSTRING((SELECT ','+CAST(OmsSavedCartLineItemId AS NVARCHAR(max)) FROM #ZnodeOmsSavedCartLineItemNew t WHERE t.ParentOmsSavedCartLineItemId = a.ParentOmsSavedCartLineItemId FOR XML PATH('') ),2,4000)  OmsSavedCartLineItemId
		FROM #ZnodeOmsSavedCartLineItemNew a 
		WHERE a.OrderLineItemRelationshipTypeId = @AddOnOrderLineItemRelationshipTypeId
	 )
	 UPDATE TBL_O
	 SET TBL_O.AddOnSKU =  TBL_ON.SKU
		,TBL_O.OmsSavedCartLineItemIdAddOn =  TBL_ON.OmsSavedCartLineItemId
	 FROM @TBL_OmsSavedCartNew TBL_O 
	 INNER JOIN Cte_UpdateNew TBL_ON ON (TBL_ON.ParentOmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )
	   
	 UPDATE TBL_O
	 SET TBL_O.PersonalizeCode = TBL_ON.PersonalizeCode
		,TBL_O.PersonalizeValue =  TBL_ON.PersonalizeValue
	 FROM @TBL_OmsSavedCartNew TBL_O 
	 INNER JOIN #ZnodeOmsPersonalizeCartItemNew TBL_ON ON (TBL_ON.OmsSavedCartLineItemId  = TBL_O.OmsSavedCartLineItemId )

	BEGIN TRAN DELETEOLDSAVECART
		IF EXISTS (SELECT * FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId=@OldOmsSavedCartId)
		BEGIN
			UPDATE a 
			SET  a.Quantity =  a.Quantity+d.Quantity 
			FROM ZnodeOmsSavedCartLineItem a 
			INNER JOIN @TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
			INNER JOIN @TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
			INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId)
		END
		ELSE
		BEGIN
			UPDATE a 
			SET  a.Quantity =  d.Quantity 
			FROM ZnodeOmsSavedCartLineItem a 
			INNER JOIN @TBL_OmsSavedCartNew b ON (b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId)
			INNER JOIN @TBL_OmsSavedCartOld c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1')) 
			INNER JOIN #ZnodeOmsSavedCartLineItemOld d ON (d.OmsSavedCartLineItemId = c.OmsSavedCartLineItemId)
		END
	 
		 UPDATE  a
		 SET a.OmsSavedCartId = @OmsSavedCartId
		 FROM ZnodeOmsSavedCartLineItem a 
		 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @TBL_OmsSavedCartOld b 
			 INNER JOIN @TBL_OmsSavedCartNew c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1'))
			 WHERE b.OmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
		 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_OmsSavedCartOld b 
			 INNER JOIN @TBL_OmsSavedCartNew c ON (c.SKU = b.SKU AND c.ParentSKU = b.ParentSKU AND ISNULL(c.AddOnSKU,'-1') = ISNULL(b.AddOnSKU,'-1') AND ISNULL(c.PersonalizeCode,'-1') = ISNULL(b.PersonalizeCode,'-1') AND ISNULL(c.PersonalizeValue,'-1') = ISNULL(b.PersonalizeValue,'-1'))
			 WHERE b.ParentOmsSavedCartLineItemId = a.OmsSavedCartLineItemId )
		 AND OmsSavedCartId = @OldOmsSavedCartId 

		 Update ZnodeOmsSavedCartLineItem SET OmsSavedCartId = @OmsSavedCartIdDummy  WHERE OmsSavedCartId = @OldOmsSavedCartId

		 ;WITH CTE_UpdateOrder 
		 AS 
		 (
		   SELECT Sequence,  ROW_NUMBER()Over(order BY OmsSavedCartLineItemId ASC) RowId
		   FROM ZnodeOmsSavedCartLineItem
		   WHERE  OmsSavedCartId = @OmsSavedCartId
	 
		 ) 
		 UPDATE CTE_UpdateOrder 
		 SET Sequence =RowId

		SET @GetDate = dbo.Fn_GetDate();

		 UPDATE ZnodeOmsSavedCart
		 SET ModifiedDate = @GetDate
		 WHERE OmsSavedCartId = @OmsSavedCartId

	 COMMIT TRAN DELETEOLDSAVECART
	 SET @Status = 1 

 END TRY 
 BEGIN CATCH 
 ROLLBACK TRAN DELETEOLDSAVECART
  SELECT ERROR_MESSAGE()
   SET @Status = 0

	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_MergeOmsSavedCartLineItems @OmsSavedCartId = '+CAST(@OmsSavedCartId AS VARCHAR(max))+',@OldOmsSavedCartId='+CAST(@OldOmsSavedCartId AS VARCHAR(50))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status = '+CAST(@Status AS VARCHAR(50));

    SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

    EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_MergeOmsSavedCartLineItems',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
 END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PostSubmitOrderProcess')
	DROP PROC Znode_PostSubmitOrderProcess
GO

CREATE PROCEDURE [dbo].[Znode_PostSubmitOrderProcess]
(
	@PostOrderXml XML,
	@InventoryData XML,
	@UserId INT,
	@PortalId INT = 0,
	@Status BIT OUT
)
AS
BEGIN
BEGIN TRY
--BEGIN TRAN PostOrder
	DECLARE @OmsOrderDetailsId INT
	DECLARE @OmsOrderId INT = (SELECT Tbl.Col.value( 'OrderID[1]', 'NVARCHAR(2000)' ) AS OrderId FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	
	DECLARE @IsGuest BIT = (SELECT Tbl.Col.value( 'IsGuest[1]', 'NVARCHAR(2000)' ) AS IsGuest FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))

	DECLARE @OmsCookieMappingId INT = (SELECT Tbl.Col.value( 'CookieMappingId[1]', 'NVARCHAR(2000)' ) AS CookieMappingId FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	DECLARE @BillingAddressId INT = (SELECT Tbl.Col.value( 'BillingAddressId[1]', 'NVARCHAR(2000)' ) AS BillingAddressId FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	
	DECLARE @IsReferralCommission BIT = (SELECT Tbl.Col.value( 'IsReferralCommission[1]', 'NVARCHAR(2000)' ) AS IsReferralCommission FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	DECLARE @CommissionAmount NUMERIC(26,6) = (SELECT Tbl.Col.value( 'CommissionAmount[1]', 'NVARCHAR(2000)' ) AS CommissionAmount FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	
	SET @OmsOrderDetailsId = (SELECT OmsOrderDetailsId from ZnodeOmsOrderDetails WHERE OmsOrderId = @OmsOrderId AND IsActive = 1)
	DECLARE @SetBillingShippingFlags BIT = (SELECT Tbl.Col.value( 'SetBillingShippingFlags[1]', 'NVARCHAR(2000)' ) AS SetBillingShippingFlags FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col)) 
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	
	--Fetching required user details 
	DECLARE @ReferralCommissionTypeId INT, @ReferralCommission NUMERIC(28,6) , @FirstName VARCHAR(100),@LastName VARCHAR(100)
	SELECT @FirstName = FirstName,@LastName = LastName, @ReferralCommission = CASE WHEN ReferralCommission IS NULL THEN 0 ELSE ReferralCommission END, @ReferralCommissionTypeId = ReferralCommissionTypeId
	FROM ZnodeUser WITH (NOLOCK) 
	WHERE UserId = @UserId
	
	---Voucher model fetch
	CREATE TABLE #TempVoucher
	(
		VoucherBalance NUMERIC(28,6),VoucherNumber NVARCHAR(600),VoucherMessage NVARCHAR(MAX),IsVoucherValid BIT,
		IsVoucherApplied BIT,VoucherAmountUsed NUMERIC(28,6),VoucherName NVARCHAR(600),ExpirationDate DATETIME,
		CultureCode NVARCHAR(600),PortalId INT,IsExistInOrder BIT,UserId INT,IsActive BIT,OrderVoucherAmount NUMERIC(28,6)
	)

	INSERT INTO #TempVoucher
	(
		VoucherBalance ,VoucherNumber,VoucherMessage ,IsVoucherValid ,
		IsVoucherApplied ,VoucherAmountUsed ,VoucherName ,ExpirationDate ,
		CultureCode ,PortalId ,IsExistInOrder ,UserId ,IsActive ,OrderVoucherAmount 
	)
	SELECT Tbl.Col.value( 'VoucherBalance[1]', 'NVARCHAR(2000)' ) AS VoucherBalance,
		Tbl.Col.value( 'VoucherNumber[1]', 'NVARCHAR(2000)' ) AS VoucherNumber,
		Tbl.Col.value( 'VoucherMessage[1]', 'NVARCHAR(2000)' ) AS VoucherMessage,
		Tbl.Col.value( 'IsVoucherValid[1]', 'NVARCHAR(2000)' ) AS IsVoucherValid,
		Tbl.Col.value( 'IsVoucherApplied[1]', 'NVARCHAR(2000)' ) AS IsVoucherApplied,
		Tbl.Col.value( 'VoucherAmountUsed[1]', 'NVARCHAR(2000)' ) AS VoucherAmountUsed,
		Tbl.Col.value( 'VoucherName[1]', 'NVARCHAR(2000)' ) AS VoucherName,
		Tbl.Col.value( 'ExpirationDate[1]', 'NVARCHAR(2000)' ) AS ExpirationDate,
		Tbl.Col.value( 'CultureCode[1]', 'NVARCHAR(2000)' ) AS CultureCode,
		Tbl.Col.value( 'PortalId[1]', 'NVARCHAR(2000)' ) AS PortalId,
		Tbl.Col.value( 'IsExistInOrder[1]', 'NVARCHAR(2000)' ) AS IsExistInOrder,
		Tbl.Col.value( 'UserId[1]', 'NVARCHAR(2000)' ) AS UserId,	
		Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(2000)' ) AS IsActive,
		Tbl.Col.value( 'OrderVoucherAmount[1]', 'NVARCHAR(2000)' ) AS OrderVoucherAmount
	FROM @PostOrderXml.nodes('//PostOrderSubmitModel/Vouchers/VoucherModel') AS Tbl(Col)


	----Promotion coupon start
	DECLARE @TempPromotionCoupon DBO.PromotionCoupons

	INSERT INTO @TempPromotionCoupon
	SELECT Tbl.Col.value( 'Code[1]', 'NVARCHAR(2000)' ) AS Code,
		Tbl.Col.value( 'IsExistInOrder[1]', 'NVARCHAR(2000)' ) AS IsExistInOrder,@OmsOrderId AS OmsOrderId
	FROM @PostOrderXml.nodes('//PostOrderSubmitModel/Coupons/CouponModel') AS Tbl(Col)

	--Deduct promotion coupon count
	EXEC [Znode_PromotionCouponDeduct] @PromotionCoupons = @TempPromotionCoupon
	----Promotion coupon END
	
	--Deduct inventory quantity
	EXEC [Znode_UpdateInventoryPostOrder] @SkuXml = @InventoryData,@PortalId = @PortalId, @UserId= @UserId,@OmsOrderId=@OmsOrderId,@Status = 0

	----Voucher start
	IF EXISTS(SELECT * FROM #TempVoucher)
	BEGIN
		INSERT INTO ZnodeGiftCardHistory(GiftCardId,TransactionDate,TransactionAmount,OmsOrderDetailsId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Notes,RemainingAmount)
		SELECT GC.GiftCardId, @GetDate, VoucherAmountUsed,@OmsOrderDetailsId,@UserId, @GetDate, @UserId, @GetDate, 'Voucher is used to make payments for the order' as Notes, NULL AS RemainingAmount
		FROM #TempVoucher V
		INNER JOIN ZnodeGiftCard GC WITH (NOLOCK) ON V.VoucherNumber = GC.CardNumber

		IF EXISTS(SELECT * FROM #TempVoucher WHERE IsExistInOrder IN ('TRUE','1'))
		BEGIN
			UPDATE GC SET GC.RemainingAmount = V.VoucherBalance
			FROM #TempVoucher V
			INNER JOIN ZnodeGiftCard GC ON V.VoucherNumber = GC.CardNumber
			WHERE IsExistInOrder IN ('TRUE','1')  			
		END

		IF EXISTS(SELECT * FROM #TempVoucher WHERE IsExistInOrder IN ('FALSE','0'))
		BEGIN
			UPDATE GC SET GC.RemainingAmount = GC.RemainingAmount - V.VoucherAmountUsed
			FROM #TempVoucher V
			INNER JOIN ZnodeGiftCard GC ON V.VoucherNumber = GC.CardNumber
			WHERE IsExistInOrder IN ('FALSE','0')			
		END
	END

		UPDATE GC SET GC.UserId=@UserId  
		FROM  ZnodeGiftCard GC 
		WHERE  GC.Userid IS NULL

	----Voucher end
	
	--Update user details
	IF @FirstName IS NULL
	BEGIN
		DECLARE @FirstName1 VARCHAR(300), @LastName1 VARCHAR(300), @PhoneNumber VARCHAR(300)
		SELECT @FirstName1=FirstName, @LastName1 = LastName, @PhoneNumber=PhoneNumber
		FROM ZnodeAddress WITH (NOLOCK)  WHERE AddressId = @BillingAddressId

		UPDATE ZnodeUser 
		SET FirstName = @FirstName, LastName = @LastName, PhoneNumber = @PhoneNumber
		WHERE UserId = @UserId
	END

	--Update address details
	IF @SetBillingShippingFlags IN ('TRUE','1')
	BEGIN
		UPDATE ZnodeAddress
		SET IsBilling = 1, IsShipping = 1
		WHERE AddressId = @BillingAddressId
	END

	--ReferralCommission details
	IF @IsReferralCommission IN ('TRUE','1')
	BEGIN
		INSERT INTO ZnodeOmsReferralCommission
		(
			UserId,OmsOrderDetailsId,OrderCommission,TransactionId,Description,ReferralCommission,ReferralCommissionTypeId
			,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		)
		SELECT @UserId,@OmsOrderDetailsId,CASE WHEN @ReferralCommissionTypeId =1 THEN ((@CommissionAmount * ISNULL(@ReferralCommission,0)) / 100) ELSE @ReferralCommission END AS OrderCommission,'' AS TransactionId,'' AS Description,@ReferralCommission,@ReferralCommissionTypeId
			,@UserId,@GetDate,@UserId,@GetDate
	END
	
	---OmsTaxOrderSummary details
	IF EXISTS(SELECT * FROM ZnodeOmsTaxOrderSummary WITH (NOLOCK)  WHERE OmsOrderDetailsId = @OmsOrderDetailsId)
	BEGIN
		DELETE FROM ZnodeOmsTaxOrderSummary WHERE OmsOrderDetailsId = @OmsOrderDetailsId
	END

	INSERT INTO ZnodeOmsTaxOrderSummary (OmsOrderDetailsId,Tax,Rate,TaxName,TaxTypeName)
	SELECT 	@OmsOrderDetailsId AS OmsOrderDetailsId,
		Tbl.Col.value( 'Tax[1]', 'NVARCHAR(2000)' ) AS Tax,
		Tbl.Col.value( 'Rate[1]', 'NVARCHAR(2000)' ) AS Rate,
		Tbl.Col.value( 'TaxName[1]', 'NVARCHAR(2000)' ) AS TaxName,
		Tbl.Col.value( 'TaxTypeName[1]', 'NVARCHAR(2000)' ) AS TaxTypeName
	FROM @PostOrderXml.nodes('//PostOrderSubmitModel/TaxSummaryList/TaxSummaryModel') AS Tbl(Col)
	WHERE Tbl.Col.value( 'Tax[1]', 'NVARCHAR(2000)' ) IS NOT NULL
	--------

	--Remove 
	EXEC [Znode_DeleteSavedCartItem] @OmsCookieMappingId = @OmsCookieMappingId, @UserId = @UserId,@PortalId = @PortalId,@Status = 0  

	SET @Status = 1
	--COMMIT TRAN PostOrder
END TRY
BEGIN CATCH
--ROLLBACK TRAN PostOrder
	SET @Status = 0
	
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PostSubmitOrderProcess @PostOrderXml ='+CAST(@PostOrderXml AS VARCHAR(MAX))+' , @InventoryData = '+CAST(@InventoryData AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@PortalId ='+CAST(@PortalId AS VARCHAR(50))+',@Status ='+CAST(@Status AS VARCHAR(50));
	
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_PostSubmitOrderProcess',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
END CATCH

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishAssociatedProduct')
	DROP PROC Znode_PublishAssociatedProduct
GO

CREATE Procedure [dbo].[Znode_PublishAssociatedProduct]	
(
	@Status bit = 0 Out
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
	BEGIN TRAN
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
			delete TARGET from ZnodePublishAssociatedProduct TARGET
			where exists (select * from ZnodePublishAssociatedProductLog SOURCE1 where SOURCE1.PimCatalogId = TARGET.PimCatalogId )
			AND not exists(select * from ZnodePublishAssociatedProductLog SOURCE where (TARGET.PimProductId = SOURCE.PimProductId									   
				AND TARGET.PimCatalogId = SOURCE.PimCatalogId 									   
				AND TARGET.ParentPimProductId = SOURCE.ParentPimProductId						 
				AND TARGET.IsConfigurable = SOURCE.IsConfigurable 
				AND TARGET.IsBundle = SOURCE.IsBundle
				AND TARGET.IsGroup = SOURCE.IsGroup
				AND TARGET.IsAddOn = SOURCE.IsAddOn
				AND TARGET.IsLink = SOURCE.IsLink	
				AND TARGET.PublishStateId = SOURCE.PublishStateId))

			update TARGET 
			SET  TARGET.ModifiedBy = SOURCE.ModifiedBy 
				 ,TARGET.ModifiedDate = @GetDate,TARGET.IsDefault = SOURCE.IsDefault
			from ZnodePublishAssociatedProduct TARGET
			inner join ZnodePublishAssociatedProductLog SOURCE ON (TARGET.PimProductId = SOURCE.PimProductId									   
			AND TARGET.PimCatalogId = SOURCE.PimCatalogId 									   
			AND TARGET.ParentPimProductId = SOURCE.ParentPimProductId						 
			AND TARGET.IsConfigurable = SOURCE.IsConfigurable 
			AND TARGET.IsBundle = SOURCE.IsBundle
			AND TARGET.IsGroup = SOURCE.IsGroup
			AND TARGET.IsAddOn = SOURCE.IsAddOn
			AND TARGET.IsLink = SOURCE.IsLink	
			AND TARGET.PublishStateId = SOURCE.PublishStateId )

			insert into ZnodePublishAssociatedProduct(ParentPimProductId,PimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
					,PimCatalogId,PublishStateId, DisplayOrder,IsDefault)
			select SOURCE.ParentPimProductId,SOURCE.PimProductId,SOURCE.IsConfigurable,SOURCE.IsBundle,SOURCE.IsGroup,SOURCE.IsAddOn,SOURCE.IsLink
					,SOURCE.CreatedBy ,@GetDate,SOURCE.ModifiedBy ,@GetDate ,SOURCE.PimCatalogId,SOURCE.PublishStateId, SOURCE.DisplayOrder, SOURCE.IsDefault
			from ZnodePublishAssociatedProductLog SOURCE
			where not exists(select * from ZnodePublishAssociatedProduct TARGET where (TARGET.PimProductId = SOURCE.PimProductId									   
			AND TARGET.PimCatalogId = SOURCE.PimCatalogId 									   
			AND TARGET.ParentPimProductId = SOURCE.ParentPimProductId						 
			AND TARGET.IsConfigurable = SOURCE.IsConfigurable 
			AND TARGET.IsBundle = SOURCE.IsBundle
			AND TARGET.IsGroup = SOURCE.IsGroup
			AND TARGET.IsAddOn = SOURCE.IsAddOn
			AND TARGET.IsLink = SOURCE.IsLink	
			AND TARGET.PublishStateId = SOURCE.PublishStateId
			AND SOURCE.PimCatalogId = TARGET.PimCatalogId  ))

			set @Status = 1
			select 1 Id,@Status [Status]

	COMMIT TRAN
	END TRY
	BEGIN CATCH
	set @Status = 0
	select 2 Id,@Status [Status]
		ROLLBACK TRAN

	END CATCH
end

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishBlogNewsEntity')
	DROP PROC Znode_PublishBlogNewsEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishBlogNewsEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@BlogNewsCode Varchar(300) = ''
  ,@BlogNewsType Varchar(300) = ''
  ,@UserId int = 0
  ,@Status Bit =0 OUTPUT 

)
AS

/*
  To publish all Blob News for respective code with their seo details.  
	Insert data into following entitis for webstore version entity 
	ZnodePublishSEOEntity
	Znode_SetPublishBlogNewsEntity

	Unit Testing : 
  
--declare @Status bit 
--EXEC Znode_PublishBlogNewsEntity
--   @PortalId  = 0 
--  ,@LocaleId  = 0 
--  ,@RevisionState  = 'Production' 
--  ,@BlogNewsCode = ''
--  ,@BlogNewsType = ''
--  ,@UserId = 2
--  ,@Status =@Status  OUTPUT 

*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300);
	SET @Status = 1 
	Declare @IsPreviewEnable int,
	@PreviewVersionId INT = 0  ,@ProductionVersionId INT = 0

 	If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
	Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
		SET @IsPreviewEnable = 1 
	else 
		SET @IsPreviewEnable = 0 

   If @PreviewVersionId = 0 
		-- select TOP 1 @PreviewVersionId =   PublishPortalLogId from ZnodePublishPortalLog where 
		--PortalId = @PortalId AND  PublishStateId  = [dbo].[Fn_GetPublishStateIdForPreview]() Order by 1 DESC   
		SELECT TOP 1 @PreviewVersionId =  VersionId  from  ZnodePublishWebStoreEntity where PortalId =  @PortalId and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
   If @ProductionVersionId = 0 
		--select TOP 1  @ProductionVersionId =   PublishPortalLogId  from ZnodePublishPortalLog where 
		--PortalId = @PortalId AND PublishStateId  = [dbo].[Fn_GetPublishStateIdForPublish] () Order by 1 DESC  
		SELECT TOP 1 @ProductionVersionId =  VersionId  from  ZnodePublishWebStoreEntity where PortalId =  @PortalId and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
	
	Truncate table ZnodePublishErrorLogEntity 
	


	IF (@IsPreviewEnable = 1 AND @PreviewVersionId = 0 ) OR @ProductionVersionId =0 
	Begin
		SET @Status =0 
		SELECT 1 AS ID,@Status AS Status;  
		INSERT INTO ZnodePublishBlogNewsErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWebStoreEntity', @RevisionState, 'Faild : WebStore version not found' , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			Return 0 
	End
	
	Begin Transaction 
	if @Type = 'ZnodePublishBlogNewsEntity' OR @Type = ''
	Begin
			EXEC [dbo].[Znode_SetPublishBlogNewsEntity]
				 @PortalId  = @PortalId 
				,@LocaleId   = @LocaleId 
				,@IsPreviewEnable =@IsPreviewEnable 
				,@PreviewVersionId  = @PreviewVersionId 
				,@ProductionVersionId = @ProductionVersionId 
				,@RevisionState = @RevisionState 
				,@UserId = @UserId	
				,@BlogNewsCode = @BlogNewsCode 
				,@BlogNewsType = @BlogNewsType
				,@Status = @Status Output 

				INSERT INTO ZnodePublishBlogNewsErrorLogEntity
				(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
				SELECT 'ZnodePublishBlogNewsEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
				@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Rollback Transaction 
				 
			INSERT INTO ZnodePublishBlogNewsErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishContentPageConfigEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			If @Status = 0 
				Begin
					update ZnodeBlogNews SET  PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() 
					where BlogNewsType = @BlogNewsType  and BlogNewsCode = @BlogNewsCode 
					Return  0  
				End
	End
	
	if @Type = 'ZnodePublishSEOEntity' OR @Type = ''
	Begin
		Exec [Znode_SetPublishSEOEntity]
			 @PortalId  = @PortalId
			,@LocaleId  = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSSEOTypeId = '5'
			,@CMSSEOCode = @BlogNewsCode
			,@UserId = @UserId  
			,@Status = @Status Output 
			
			If @Status = 0 
				Rollback Transaction 
				
			INSERT INTO ZnodePublishBlogNewsErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishSEOEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeBlogNews SET  PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() 
					where BlogNewsType = @BlogNewsType  and BlogNewsCode = @BlogNewsCode 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 5 
					Return  0  
				End
	End 
		SELECT 1 AS ID,@Status AS Status;   
		Commit Transaction 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	
	Rollback Transaction 

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishBlogNewsEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+''',@BlogNewsCode= ' + CAST(@BlogNewsCode  AS varchar(20))
		+''',@BlogNewsType= ' + CAST(@BlogNewsType  AS varchar(20))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
			
	INSERT INTO ZnodePublishErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'Znode_PublishBlogNewsEntity', @RevisionState + isnull(@ErrorMessage,'') , 'Fail' , @GetDate, 
	@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishBlogNewsEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishCatalogEntity')
	DROP PROC Znode_PublishCatalogEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishCatalogEntity]  
(  
	@PimCatalogId  INT = 0   
	,@RevisionState VARCHAR(50) = ''   
	,@UserId INT = 0  
	,@NewGUID NVARCHAR(500)   
	,@IsDraftProductsOnly BIT = 1  
	,@PimProductId  INT = 0  
	,@PimCategoryHierarchyId INT = 0 
)  
AS  
/*  
To publish all catalog product and their details  
Unit Testing :   
Exec [dbo].[Znode_PublishCatalogEntity]  
@PimCatalogId  = 5  
,@RevisionState = 'PRODUCTION'   
,@UserId = 2  
,@NewGUID = '123'  
   
EXEC Znode_DeletePublishCatalogEntity @PublishCatalogId = 3,@UserId = 2 , @IsRevertPublish = 0 ,  
@NewGUID ='123'   
  
*/  
BEGIN  
BEGIN TRY   
	SET NOCOUNT ON  

	
	DECLARE @Tbl_versions  TABLE (RevisionState VARCHAr(300))
	DECLARE @DefaultLocaleId Int = dbo.fn_getDefaultLocaleId() , @messagestring varchar(300) =''  ,@PublishType varchar(2000)= 'Catalog'
			,@Getdate DATETIME = dbo.fn_getdate(), @CultureCode varchar(200) = '', @CurrencySuffix varchar(200) = '',@CurrencyCode varchar(200) = ''
			,@CatalogName VARCHAR(600), @IsAllowIndexing bit ,@Status bit, @email nvarchar(200) = (SELECT TOP 1 Username FROM znodeUSer WHERE UserId = @UserId) 
	DECLARE @Versions_new TABLE (VersionId int , LocaleId int , PublishStateId int, RevisionState VARCHAR(100) )
	DECLARE @Versions_working TABLE (VersionId int , LocaleId int , PublishStateId int, RevisionState VARCHAR(100) )
	CREATE TABLE  #PimProduct_catalog  (PimProductId int , ParentPimProductId INT, PimCategoryId INT , PimCategoryHierarchyId INT 
			,ParentPimCategoryHierarchyId INT ,DisplayOrder INT  ,IsActive INT,ActivationDate DATETIME , ExpirationDate DATETIME  ,IsDefault bit,PimAddonGroupId INT 
			, BundleQuantity int , IsAssocitedProduct bit   )
    DECLARE @inserted_pimIds TABLE (PimProductId INT )

	SET @messagestring = CASE WHEN @PimProductId > 0  THEN ' Product-'+(SELECT TOP 1 SKU FROM ZnodePimProduct WIth (Nolock) WHERE PimProductId = @PimProductId )+' ' ELSE '' END 

	SELECT TOp 1 @CatalogName= CatalogName,  @IsAllowIndexing= ISNULL(IsAllowIndexing,0)
	FROM ZnodePimCatalog with(nolock)  WHERE PimCatalogId = @PimCatalogId   
	
	SELECT TOp 1  @CurrencyCode = FeatureValues
	FROM ZnodeGlobalSetting a 
	WHERE FeatureName='Currency'

	SELECT TOp 1  @CultureCode = FeatureValues
	FROM ZnodeGlobalSetting a 
	WHERE FeatureName='Culture'

	SELECT TOP 1 @CurrencySuffix = Symbol
	FROM ZnodeCulture
	WHERE CultureCode = @CultureCode

	INSERT INTO ZnodePublishProgressNotifierEntity (VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	SELECT 0 , @NewGUID, 'Catalog-'+@CatalogName+'-Publish Started ', 10 , 0 , 0 , '',@UserId ,  @email

	INSERT INTO @Tbl_versions 
	SELECT 'PREVIEW'
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishStateApplicationTypeMapping with(nolock) WHERE ApplicationType = 'WebstorePreview' AND IsActive =1 AND IsEnabled = 1 )
	UNION ALL 
	SELECT 'PRODUCTION'
	WHERE @RevisionState = 'Production' OR  @RevisionState = 'None'
	
    SET @PublishType = CASE WHEN @PimProductId > 0 THEN 'Product'
	  WHEN @PimCategoryHierarchyId > 0 THEN 'Category'
	ELSE 'Catalog' END 

	INSERT INTO ZnodePublishCatalogLog(PublishCatalogId,PimCatalogId,IsCatalogPublished,PublishCategoryId,  
			IsCategoryPublished,PublishProductId,  
			IsProductPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Token,LocaleId,PublishStateId,PublishType)  
	OUTPUT inserted.PublishCatalogLogId , inserted.LocaleId, inserted.PublishStateId, inserted.Token INTO @Versions_new
	SELECT DISTINCT @PimCatalogId,  @PimCatalogId,NULL,0,  NULL,@PimProductId,  NULL,@UserId, @Getdate, @UserId, @Getdate, @UserId ,@Getdate,  r.RevisionState
				,a.LocaleId ,DBO.Fn_GetPublishStateIdForProcessing() ,@PublishType 
	FROM ZnodePortalLocale a with(nolock) 
	INNER JOIN ZnodePortalCatalog b with(nolock)  ON (b.PortalId = a.PortalId)
	CROSS APPLY @Tbl_versions  r
	WHERE  b.PublishCatalogId = @PimCatalogId 
	AND a.LocaleId IN (SELECT LocaleId FROM ZnodeLocale p with(nolock)  WHERE p.IsActive = 1 )
	UNION ALL 
	SELECT DISTINCT @PimCatalogId,  @PimCatalogId,NULL,0,  NULL,0,  NULL,@UserId, @Getdate, @UserId, @Getdate, @UserId ,@Getdate,  r.RevisionState
				,@DefaultLocaleId ,DBO.Fn_GetPublishStateIdForProcessing() ,@PublishType
	FROM  @Tbl_versions  r
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t WHERE t.PublishCatalogId = @PimCatalogId)
	

	INSERT INTO ZnodePublishCatalogEntity (VersionId,ZnodeCatalogId,CatalogName,RevisionType,LocaleId,IsAllowIndexing) 
	SELECT VersionId, @PimCatalogId, @CatalogName, RevisionState, LocaleId, @IsAllowIndexing
	FROM @Versions_new p
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogEntity y with(nolock)  WHERE y.ZnodeCatalogId = @PimCatalogId AND y.RevisionType = p.RevisionState
		 AND y.LocaleId = p.LocaleId
	)
	INSERT INTO ZnodePublishVersionEntity (VersionId,ZnodeCatalogId,RevisionType,LocaleId,IsPublishSuccess)  
	SELECT VersionId, @PimCatalogId,  RevisionState, LocaleId, 0
	FROM @Versions_new p
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishVersionEntity y with(nolock)  WHERE y.ZnodeCatalogId = @PimCatalogId AND y.RevisionType = p.RevisionState
		AND y.LocaleId = p.LocaleId
	)

	INSERT INTO @Versions_working 
	SELECT VersionId , a.LocaleId, g.PublishStateId,UPPER( a.RevisionType)RevisionType
	FROM ZnodePublishVersionEntity a with(nolock)
	INNER JOIN ZnodePublishState g with(nolock) ON (g.PublishStateCode = a.RevisionType)
	WHERE a.ZnodeCatalogId = @PimCatalogId
	AND RevisionType IN (SELECT RevisionState FROM @Tbl_versions)
	AND a.LocaleId IN (SELECT p.LocaleId FROM @Versions_new p )
	

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'Collecting Products'
		,ProgressMark = 20
	WHERE Jobid = @NewGUID


    INSERT INTO #PimProduct_catalog 
    SELECT DISTINCT PimProductId , 0  , b.PimCategoryId, b.PimCategoryHierarchyId , b.ParentPimCategoryHierarchyId
        ,b.DisplayOrder ,b.IsActive,b.ActivationDate,b.ExpirationDate, 0 IsDefault , 0 PimAddonGroupId , 0, 0
    FROM ZnodePimCategoryProduct a with(nolock)
    INNER JOIN ZnodePimCategoryHierarchy b with(nolock) ON (b.PimCategoryId = a.PimCategoryId)
    WHERE b.PimCatalogId = @PimCatalogId
    AND ( a.PimProductId =  @PimProductId   OR @PimProductId =  0 ) 
    AND ( B.PimCategoryHierarchyId =  @PimCategoryHierarchyId   OR @PimCategoryHierarchyId =  0 )
	

INSERT INTO #PimProduct_catalog 
SELECT DISTINCT a.PimProductId , b.PimProductId , b.PimCategoryId, b.PimCategoryHierarchyId, b.ParentPimCategoryHierarchyId
,b.DisplayOrder ,b.IsActive,b.ActivationDate,b.ExpirationDate, 0 IsDefault, 0 PimAddonGroupId , 0,0
FROM ZnodePimLinkProductDetail a with(nolock)
INNER JOIN #PimProduct_catalog b ON (b.PimProductId = a.PimParentProductId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = a.PimProductId )

SELECT DISTINCT ZPAPD.PimChildProductId PimProductId,ZPAP.PimProductId ParentPimProductId, 0 PimCategoryId , 0 PimCategoryHierarchyId,0 ParentPimCategoryHierarchyId , ZPAPD.DisplayOrder ,1 IsActive
,NULL ActivationDate,NULL ExpirationDate ,IsDefault
, ZPAP.PimAddonGroupId PimAddonGroupId , 0 BundleQuantity,RequiredType
INTO #TBL_AddOnProduct
FROM ZnodePimAddOnProductDetail AS ZPAPD with(nolock)
INNER JOIN ZnodePimAddOnProduct AS ZPAP with(nolock) ON (ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog ty WHERE ty.PimProductId = ZPAP.PimProductId )

-- SELECT * FROM ZnodePimAddOnProduct
INSERT INTO #PimProduct_catalog 
SELECT DISTINCT ZPAPD.PimProductId,ZPAPD.ParentPimProductId, 0 PimCategoryId , 0 PimCategoryHierarchyId , 0 ,DisplayOrder ,0 ,NULL,NULL,IsDefault
,PimAddonGroupId  , 0 ,0
FROM #TBL_AddOnProduct ZPAPD
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = ZPAPD.PimProductId )

INSERT INTO #PimProduct_catalog 
SELECT DISTINCT a.PimProductId , a.PimParentProductId , 0 PimCategoryId , 0 PimCategoryHierarchyId,a.DisplayOrder,0,0,NULL,NULL,IsDefault
, 0 PimAddonGroupId , BundleQuantity, 1
FROM ZnodePimProductTypeAssociation a with(nolock)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog ty WHERE ty.PimProductId = a.PimParentProductId )
--AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = a.PimProductId )

CREATE INDEX IDX_#PimProduct_catalog ON #PimProduct_catalog(PimProductId)

	IF @IsDraftProductsOnly = 0  
    BEGIN 
      --  EXEC Znode_CatalogProductDraftForPublish @PublishCatalogId=@PimCatalogId   
	  ---To draft all catalog products AND associated products for full catalog publish  

	  UPDATE ZnodePimProduct 
	  SET PublishStateId = 2 
	  WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog y WHERE y.PimProductId = ZnodePimProduct.PimProductId )
    END 
    


DROP TABLE IF EXISTS #PimProduct_distinct

SELECT DISTINCT a.PimProductId, PimCategoryHierarchyId PimCategoryId ,sku,ProductName, CAST(b.IsActive AS VARCHAR(50)) IsActive,b.PublishStateId, b.ProductType
INTO #PimProduct_distinct
FROM #PimProduct_catalog a
INNER JOIN ZnodePimProduct b with(nolock) ON (b.PimProductId = a.PimProductId)


CREATE INDEX IDX_#PimProduct_distinct ON #PimProduct_distinct(PimProductId,IsActive)

DELETE tt FROM #PimProduct_distinct tt 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProduct t with(nolock) WHERE t.PimProductId = tt.PimProductId AND t.ProductType = 'SimpleProduct' ) 
AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation ty with(nolock) WHERE ty.PimParentProductId = tt.PimProductId)

	

UPDATE ZnodePublishProgressNotifierEntity
SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'Create backup of version'
	,ProgressMark = 25
WHERE Jobid = @NewGUID

DECLARE @Deleted_Products TABLE (PimProductId INT )

SELECT p.PublishProductEntityId
INTO #PublishProductEntityId
FROM ZnodePublishProductEntity p With(nolock)  WHERE  NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct ty WHERE ty.PimProductId = p.ZnodeProductId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND  @PimProductId = 0 AND @PimCategoryHierarchyId = 0 
UNION ALL 
SELECT p.PublishProductEntityId
FROM ZnodePublishProductEntity p With(nolock)  WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct ty WHERE ty.PimProductId = p.ZnodeProductId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND EXISTS (SELECT TOP 1 1 FROM ZnodePimProduct t with(nolock) WHERE t.PimProductId = p.ZnodeProductId AND t.IsActive = 'false' ) 
AND @PimCategoryHierarchyId = 0 


UPDATE ZnodePublishProductEntity 
SET ElasticSearchEvent = 2 
WHERE EXISTS (SELECT TOP 1 1  FROM #PublishProductEntityId t WHERE t.PublishProductEntityId = ZnodePublishProductEntity.PublishProductEntityId ) 


SELECT AttributeCode , AttributeName , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(d.IsFacets,0) IsFacets
, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, b.LocaleId
INTO #temp_attributename 
FROM ZnodePimAttribute a with(nolock)
INNER JOIN ZnodePimAttributeLocale b with(nolock) ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId =@DefaultLocaleId)
INNER JOIN ZnodeAttributeType c with(nolock) ON (c.AttributeTypeId = a.AttributeTypeId)
LEFT JOIN ZnodePimFrontendProperties d with(nolock) ON (d.PimAttributeId = a.PimAttributeId )

	
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing category'
		,ProgressMark = 30
	WHERE Jobid = @NewGUID


SELECT DISTINCT  rt.PimCategoryHierarchyId, c.AttributeCode,b.CategoryValue AttributeValues, 0 DisplayOrder , rt.ParentPimCategoryHierarchyId,b.LocaleId,a.PimCategoryAttributeValueId, rt.PimCategoryId
INTO #Temp_Categoryvalue
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN  #PimProduct_catalog rt ON ( rt.PimCategoryId = a.PimCategoryId  )


INSERT INTO #Temp_Categoryvalue
SELECT DISTINCT  ty.PimCategoryHierarchyId, c.AttributeCode,b.CategoryValue AttributeValues, ty.DisplayOrder , ty.ParentPimCategoryHierarchyId,b.LocaleId,a.PimCategoryAttributeValueId,ty.PimCategoryId
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN ZnodePimCategoryHierarchy ty with(nolock) ON (ty.PimCategoryId = a.PimCategoryId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue ut WHERE ut.PimCategoryHierarchyId = ty.PimCategoryHierarchyId)
AND ty.PimCatalogId =@PimCatalogId
AND @PimProductId = 0 


UPDATE a SET a.AttributeValues = ZM.Path
FROM #Temp_Categoryvalue a
INNER  JOIN ZnodeMedia ZM ON (CAST(zm.MediaId AS VARCHAR(200)) = a.AttributeValues)
WHERE a.AttributeCode IN (SELECT n.AttributeCode FROM #temp_attributename n WHERE n.AttributeTypeName = 'Image' )

DELETE p 
FROM ZnodePublishCategoryEntity p 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue ty WHERE ty.PimCategoryHierarchyId = p.ZnodeCategoryId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND @PimProductId = 0 AND @PimCategoryHierarchyId = 0 

IF EXISTS (SELECT TOP 1 1 FROM @Versions_working r WHERE r.LocaleId <> @DefaultLocaleId)
BEGIN 
    
	INSERT INTO #Temp_Categoryvalue(PimCategoryHierarchyId, AttributeCode, AttributeValues, DisplayOrder , ParentPimCategoryHierarchyId, t.LocaleId,PimCategoryAttributeValueId,PimCategoryId)
	SELECT PimCategoryHierarchyId, AttributeCode, ISNULL(b.CategoryValue,a.AttributeValues)AttributeValues, DisplayOrder , ParentPimCategoryHierarchyId, t.LocaleId,a.PimCategoryAttributeValueId,a.PimCategoryId
	FROM #Temp_Categoryvalue a 
	CROSS APPLY @Versions_working t 
	LEFT JOIN ZnodePimCategoryAttributeValueLocale b ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

	INSERT INTO #temp_attributename
	SELECT AttributeCode , IIF(b.AttributeName IS NULL, a.AttributeName ,b.AttributeName) , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
		,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(a.IsFacets,0) IsFacets
		, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, t.LocaleId
	FROM #temp_attributename a
	CROSS APPLY @Versions_working t 
	LEFT JOIN ZnodePimAttributeLocale b ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

END 

SELECT DISTINCT PimCategoryHierarchyId, DisplayOrder ,ParentPimCategoryHierarchyId ,LocaleId,a.PimCategoryId
INTO #Temp_categoryDetails
FROM #Temp_Categoryvalue a 


ALTER TABLE #Temp_categoryDetails ADD  IsActive BIT , ActivationDate DATETIME ,ExpirationDate DATETIME  ,CategoryName NVARCHAr(max), CategoryCode NVARCHAr(600)

UPDATE a  
SET CategoryName = (SELECT TOP 1 AttributeValues FROM #Temp_Categoryvalue tu WHERE tu.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND tu.LocaleId = a.LocaleId AND tu.AttributeCode = 'CategoryName')
,CategoryCode = (SELECT TOP 1 AttributeValues FROM #Temp_Categoryvalue tu WHERE tu.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND tu.LocaleId = a.LocaleId AND tu.AttributeCode = 'CategoryCode')
,DisplayOrder = ISNULL(b.DisplayOrder,a.DisplayOrder) , IsActive = ISNULL(b.IsActive,0), ActivationDate = b.ActivationDate , ExpirationDate = b.ExpirationDate
FROM #Temp_categoryDetails  a
LEFT JOIN #PimProduct_catalog b ON (b.PimCategoryHierarchyId = a.PimCategoryHierarchyId)
--WHERE @PimProductId = 0 


UPDATE a
SET a.Name = t.CategoryName
,a.CategoryCode = t.CategoryCode
,a.Attributes = (SELECT r.AttributeCode, AttributeValues,jk.AttributeName, jk.AttributeTypeName  ,jk.IsUseInSearch,jk.IsHtmlTags,jk.IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId  AND jk.IsCategory = 1 )
					WHERE r.PimCategoryHierarchyId = t.PimCategoryHierarchyId AND r.LocaleId = t.LocaleId
					FOR JSON PATH ) 

,a.ZnodeParentCategoryIds  = '['+CAST(t.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
,a.ProductIds = '['+(SELECT  STRING_AGG(  CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM #PimProduct_catalog ty WHERE ty.PimCategoryHierarchyId = a.ZnodeCategoryId  )+']' 
,a.DisplayOrder = t.DisplayOrder 
,a.IsActive = t.IsActive, a.ActivationDate = t.ActivationDate, a.ExpirationDate = t.ExpirationDate

FROM ZnodePublishCategoryEntity a with(nolock)
INNER JOIN @Versions_working q ON ( q.VersionId = a.VersionId)
INNER JOIN #Temp_categoryDetails t ON (t.PimCategoryHierarchyId = a.ZnodeCategoryId AND t.LocaleId = a.LocaleId )
WHERE a.ZnodeCatalogId = @PimCatalogId
--AND @PimProductId = 0 


INSERT INTO ZnodePublishCategoryEntity (VersionId,ZnodeCategoryId,Name,CategoryCode,ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds
,ProductIds,LocaleId,IsActive,DisplayOrder,Attributes,ActivationDate,ExpirationDate,CategoryIndex,ElasticSearchEvent)

SELECT q.VersionId, a.PimCategoryHierarchyId, a.CategoryName, a.CategoryCode,@PimCatalogId,@CatalogName,'['+CAST(a.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
	,'['+(SELECT  STRING_AGG(   CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM #PimProduct_catalog ty WHERE ty.PimCategoryHierarchyId = a.PimCategoryHierarchyId  )+']' 
	,q.LocaleId, a.IsActive,a.DisplayOrder,(SELECT r.AttributeCode , AttributeName, AttributeValues, AttributeTypeName,IsUseInSearch,IsHtmlTags,IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId AND jk.IsCategory =1 )
					WHERE r.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND q.LocaleId = r.LocaleId					FOR JSON PATH ) , a.ActivationDate, a.ExpirationDate,1,1
FROM #Temp_categoryDetails a
CROSS APPLY @Versions_working q 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryEntity Tot with(nolock) WHERE tot.VersionId = q.VersionId AND tot.ZnodeCategoryId = a.PimCategoryHierarchyId )
AND a.LocaleId = q.LocaleId
  


	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing Product'
		,ProgressMark = 35
	WHERE Jobid = @NewGUID


SELECT  a.PimProductId,a.sku,a.ProductName,a.IsActive ,a.PublishStateId , max(a.PimCategoryId) ZnodeCategoryIds , CAST('' AS NVARCHAR(2000)) CategoryName
         ,STRING_AGG( CONVERT(VARCHAR(MAX),a.PimCategoryId),',') WITHIN GROUP (ORDER BY a.PimCategoryId) ZnodeParentCategoryIds
		 ,CAST('' AS VARCHAR(1000)) SeoDescription,CAST('' AS VARCHAR(1000))SeoKeywords
	   ,CAST('' AS VARCHAR(1000))SeoTitle,CAST('' AS VARCHAR(1000)) SeoUrl
	   , CAST('' AS VARCHAR(50)) SalesPrice,CAST('' AS VARCHAR(50)) RetailPrice
INTO #TBL_finalProducts
FROM #PimProduct_distinct a
GROUP BY  a.PimProductId,a.sku,a.ProductName,a.IsActive ,a.PublishStateId--, a.PimCategoryId




SELECT CAST(SKU AS VARCHAR(2000)) SeoCode 
INTO #filterSEOCOde
FROM #TBL_finalProducts
WHERE PublishStateId IN (2 ,1)
UNION ALL 
SELECT CAST(CategoryCode AS VARCHAR(2000))
FROM #Temp_categoryDetails

CREATE INDEX IDX_#filterSEOCOde_SEOCode ON #filterSEOCOde(SeoCode)

UPDATE ZnodeCMSSEODetail 
SET PublishStateId = 2 
WHERE EXISTS (SELECT TOP 1 1 FROM  #filterSEOCOde y WHERE y.SeoCode = ZnodeCMSSEODetail.SEOCode)
AND CMSSEOTypeId IN (1,2)
AND EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t with(nolock) WHERE t.PublishCatalogId =@PimCatalogId AND ZnodeCMSSEODetail.PortalId = t.PortalId  )
AND PublishStateId <> 2 
--CREATE INDEX IDX_ZnodeCMSSEODetail_SEOCode_CMSSEOTypeId_PortalId ON ZnodeCMSSEODetail(SEOCode,CMSSEOTypeId,PortalId)

DROP TABLE IF EXISTS  #Seo_entity



SELECT 0 VersionId
,@Getdate PublishStartTime,c.Name ItemName,a.CMSSEODetailId,b.CMSSEODetailLocaleId,c.CMSSEOTypeId,a.SEOId,c.name SEOTypeName,b.SEOTitle
,b.SEODescription,b.SEOKeywords,a.SEOUrl,a.IsRedirect,a.MetaInformation,b.LocaleId,'' OldSEOURL,0 CMSContentPagesId,a.PortalId,a.SEOCode,b.CanonicalURL
,b.RobotTag,1 ElasticSearchEvent, 0 PublishSeoEntityId
INTO #Seo_entity
FROM ZnodeCMSSEODetail a with (nolock)
INNER JOIN ZnodeCMSSEODetailLocale b with(nolock) ON (b.CMSSEODetailId = a.CMSSEODetailId)
INNER JOIN ZnodeCMSSEOType c with(nolock) ON (c.CMSSEOTypeId = a.CMSSeoTypeId ) 
WHERE c.CMSSEOTypeId IN (1,2) AND a.PublishStateId = 2
AND EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t with(nolock) WHERE t.PublishCatalogId =@PimCatalogId AND a.PortalId = t.PortalId  )




UPDATE ZnodeCMSSEODetail
SET PublishStateId = CASE WHEN @RevisionState = 'Preview' THEN 4 ELSE 3 END 
WHERE EXISTS (SELECT TOP 1 1 FROM #Seo_entity m WHERE m.CMSSEODetailId = ZnodeCMSSEODetail.CMSSEODetailId )

CREATE INDEX IDX_#Seo_entity_PublishSeoEntityId ON #Seo_entity(PublishSeoEntityId)


IF  @IsAllowIndexing = 1  
BEGIN 



SELECT SEoCode SKU ,MAX(SeoDescription)SeoDescription,Max(SeoKeywords) SeoKeywords,Max(SeoTitle)SeoTitle,Max(SeoUrl)SeoUrl
INTO #Distinct_seo
FROM #Seo_entity
WHERE CMSSEOTypeId = 1 
GROUP BY SEoCode


SELECT SKU , MIN(RetailPrice) RetailPrice, MIN(SalesPrice ) SalesPrice
INTO #price_data
FROM ZnodePrice a with (nolock)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct r WHERE r.SKU = a.SKU )
GROUP BY SKU

UPDATE a
SET SeoDescription = ISNULL(p.SeoDescription,'') ,SeoKeywords= ISNULL(p.SeoKeywords,'')
	   ,SeoTitle=ISNULL(p.SeoTitle,''),SeoUrl=ISNULL(p.SeoUrl,'')
FROM #TBL_finalProducts a
INNER JOIN #Distinct_seo p ON (p.SKU = a.SKU )
WHERE a.PublishStateId IN (2,1)

UPDATE a
SET SalesPrice =ISNULL(toe.SalesPrice,0) ,RetailPrice=ISNULL(toe.RetailPrice,0) 
FROM #TBL_finalProducts a
INNER JOIN #price_data toe ON (toe.SKU = a.SKU  )
 WHERE a.PublishStateId IN (2,1)
END
ELSE 
BEGIN 

 UPDATE ZnodePublishProductEntity 
SET SeoUrl = '' , SeoDescription = '', SeoKeywords = '', SeoTitle = '', SalesPrice = 0 
, RetailPrice =0 
WHERE @IsAllowIndexing = 0 AND ZnodeCatalogId =@PimCatalogId 
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working t WHERE t.VersionId = ZnodePublishProductEntity.VersionId)

END 




DECLARE @VersionId_l INT ,@LocaleId_l INT ,@RevisionState_l VARCHAR(300)

DECLARE cur_localeId CURSOR FOR 
SELECT VersionId,LocaleId,RevisionState
FROM @Versions_working

OPEN cur_localeId

FETCH NEXT FROM cur_localeId INTO @VersionId_l,@LocaleId_l,@RevisionState_l
WHILE @@FETCH_STATUS = 0
BEGIN 


--AND  1=0 

UPDATE a
SET a.PublishSeoEntityId = n.PublishSeoEntityId
FROM #Seo_entity a
INNER  JOIN ZnodePublishSeoEntity n with(nolock) ON (n.VersionId = @VersionId_l AND n.SEOCode = a.SEOCode AND n.PortalId = a.PortalId AND n.CMSSEOTypeId = a.CMSSEOTypeId AND n.LocaleId =@LocaleId_l)
WHERE a.LocaleId = @LocaleId_l


UPDATE a 
SET PublishStateId = 1 
FROM #TBL_finalProducts a 
WHERE NOT EXISTS (
SELECT TOP 1 1 FROM ZnodePublishProductEntity y with(nolock) WHERE y.ZnodeProductId = a.PimProductId AND y.ZnodeCategoryIds = a.ZnodeCategoryIds
AND y.VersionId =@VersionId_l
)



UPDATE a SET CategoryName = uy.Name
FROM #TBL_finalProducts a 
INNER JOIN ZnodePublishCategoryEntity uy  with(nolock) ON (uy.ZnodeCategoryId = a.ZnodeCategoryIds)
WHERE uy.VersionId =@VersionId_l
AND a.PublishStateId IN (2,1)




DROP TABLE IF EXISTS  #insertedPublishEntity

SELECT  @VersionId_l VersionId , ROW_NUMBER()Over(ORDER BY a.PimProductId )IndexId, a.PimProductId ZnodeProductId , @PimCatalogId ZnodeCatalogId,a.sku,@LocaleId_l LocaleId,a.ProductName Name , ZnodeCategoryIds ,a.IsActive,'' Attributes,'[]' Brands
       , CategoryName, @CatalogName CatalogName, 0 DisplayOrder, @RevisionState_l  RevisionType, 0 AssociatedProductDisplayOrder, ROW_NUMBER()Over(partition By  a.PimProductId ORDER BY  a.PimProductId  )  ProductIndex,  SalesPrice, RetailPrice
	   ,@CultureCode CultureCode,@CurrencySuffix CurrencySuffix
	   ,@CurrencyCode CurrencyCode, SeoDescription,SeoKeywords
	   ,SeoTitle, SeoUrl,'' ImageSmallPath,LOWER(a.sku) SKULower,1 ElasticSearchEvent, ZnodeParentCategoryIds ,@Getdate ModifiedDate,0 IsSingleProductPublish
	   ,0 IsCacheClear, 0 PublishProductEntityId,a.PublishStateId
INTO #insertedPublishEntity 
FROM #TBL_finalProducts a 
WHERE a.IsActive = 'true'  AND a.PublishStateId IN (2,1)



UPDATE a
SET a.PublishProductEntityId=ty.PublishProductEntityId
FROM #insertedPublishEntity a
INNER JOIN ZnodePublishProductEntity ty with(nolock) ON ( ty.VersionId = @VersionId_l AND ty.ZnodeProductId  = a.ZnodeProductId AND ty.ZnodeCatalogId =@PimCatalogId )


UPDATE a
SET Name = b.name , a.SalesPrice = b.SalesPrice , a.RetailPrice = b.RetailPrice, CurrencyCode = b.CurrencyCode , CultureCode= b.CultureCode, CurrencySuffix = b.CurrencySuffix
, CategoryName = b.CategoryName, a.ElasticSearchEvent = 1 , ZnodeParentCategoryIds = b.ZnodeParentCategoryIds , a.SKU = b.SKU , a.SKULower = b.SKULower, a.SeoUrl = b.SeoUrl
, a.SeoTitle = b.SeoTitle , a.SeoKeywords = b.SeoKeywords , a.SeoDescription = b.SeoDescription
FROM ZnodePublishProductEntity a 
INNER JOIN #insertedPublishEntity b ON (b.PublishProductEntityId = a.PublishProductEntityId)
WHERE b.PublishProductEntityId <> 0 --AND b.PublishStateId = 2 



INSERT INTO ZnodePublishProductEntity(VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU,LocaleId,Name,ZnodeCategoryIds,IsActive,Attributes,Brands
,CategoryName,CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix
,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,ElasticSearchEvent,ZnodeParentCategoryIds,ModifiedDate,IsSingleProductPublish
,IsCacheClear)
SELECT VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU ,LocaleId,Name,ZnodeCategoryIds,IsActive,Attributes,Brands
,CategoryName,CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix
,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,ElasticSearchEvent,ZnodeParentCategoryIds,ModifiedDate,IsSingleProductPublish
,IsCacheClear
FROM #insertedPublishEntity
WHERE PublishProductEntityId = 0 



--UPDATE a 
--SET a.ItemName					=b.ItemName,a.CMSSEODetailId				=b.CMSSEODetailId		,a.CMSSEODetailLocaleId			=b.CMSSEODetailLocaleId	
--,a.CMSSEOTypeId					=b.CMSSEOTypeId	,a.SEOId						=b.SEOId,a.SEOTypeName					=b.SEOTypeName			
--,a.SEOTitle						=b.SEOTitle,a.SEODescription				=b.SEODescription	,a.SEOKeywords					=b.SEOKeywords			
--,a.SEOUrl						=b.SEOUrl	,a.IsRedirect					=b.IsRedirect	,a.MetaInformation				=b.MetaInformation		
--,a.LocaleId						=b.LocaleId	,a.OldSEOURL					=b.OldSEOURL	,a.CMSContentPagesId			=b.CMSContentPagesId	
--,a.PortalId						=b.PortalId	,a.SEOCode						=b.SEOCode	,a.CanonicalURL					=b.CanonicalURL			
--,a.RobotTag						=b.RobotTag	,a.ElasticSearchEvent			=b.ElasticSearchEvent	
DELETE a 
FROM  ZnodePublishSeoEntity a 
INNER JOIN #Seo_entity b ON (b.PublishSeoEntityId = a.PublishSeoEntityId)

INSERT INTO ZnodePublishSeoEntity (VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName
,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL
,RobotTag,ElasticSearchEvent)
SELECT @VersionId_l,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName
,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL
,RobotTag,ElasticSearchEvent
FROM #Seo_entity a 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishSeoEntity r with(nolock) WHERE r.PublishSeoEntityId = a.PublishSeoEntityId )
AND a.LocaleId = @LocaleId_l

FETCH NEXT FROM cur_localeId INTO @VersionId_l,@LocaleId_l,@RevisionState_l


 END 

 CLOSE cur_localeId
 DEALLOCATE cur_localeId

 DROP TABLE IF EXISTS #TBL_finalProducts
 DROP TABLE IF EXISTS #filterSEOCOde
 
DECLARE @pimProductId_oi transferId 
DECLARE @Version_str VARCHAr(2000) 

SELECT @Version_str= STRING_AGG( CONVERT(VARCHAR(200), q.VersionId) ,',')
FROM @Versions_working q

INSERT INTO @pimProductId_oi 
SELECT DISTINCT  pimProductId 
FROM #PimProduct_distinct a
WHERE a.PublishStateId IN (1,2)
UNION  
SELECT ZnodeProductId
FROM #insertedPublishEntity
WHERE PublishProductEntityId = 0  


 DROP TABLE IF EXISTS  #insertedPublishEntity

 IF  EXISTS ( SELECT TOP 1 1 FROM @pimProductId_oi )
 BEGIN 

EXEC Znode_PublishUpdateProductJson @PimProductIds=@pimProductId_oi
,@VersionId = @Version_str
,@LocaleId = 1 
,@IsSingleProductPublish = 0 ,@NewGUID=@NewGUID, @CatalogName = @CatalogName,@messagestring=@messagestring

END 

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing Catalog Attribute'
		,ProgressMark = 60
	WHERE Jobid = @NewGUID


SELECT VersionId,@PimCatalogId PimCatalogId,AttributeCode,AttributeTypeName,0 IsPromoRuleCondition
,ISNULL(IsComparable,0)IsComparable,ISNULL(IsHtmlTags,0)IsHtmlTags,ISNULL(IsFacets,0)IsFacets,ISNULL(IsUseInSearch,0)IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,a.LocaleId,DisplayOrder
	,ISNULL((
	SELECT  p.AttributeDefaultValue Value, m.DisplayOrder 
	FROM ZnodePimAttributeDefaultValue m
	INNER JOIN ZnodePimAttributeDefaultValueLocale p ON (p.PimAttributeDefaultValueId = m.PimAttributeDefaultValueId)
	WHERE m.PimAttributeId = a.PimAttributeId AND p.LocaleId = a.LocaleId
	FOR JSON PATH 
	),'[]')SelectValues
INTO #temp_updatecatalogAttribute 
FROM #temp_attributename a 
INNER JOIN @Versions_working h ON (h.LocaleId = a.LocaleId) 

UPDATE a 
SET AttributeTypeName=b.AttributeTypeName,IsPromoRuleCondition
=b.IsPromoRuleCondition,IsComparable=b.IsComparable,IsHtmlTags=b.IsHtmlTags,IsFacets=b.IsFacets
,IsUseInSearch=b.IsUseInSearch,IsPersonalizable=b.IsPersonalizable,IsConfigurable=b.IsConfigurable,AttributeName=b.AttributeName
,LocaleId=b.LocaleId,DisplayOrder=b.DisplayOrder,SelectValues=b.SelectValues
FROM ZnodePublishCatalogAttributeEntity a 
INNER JOIN #temp_updatecatalogAttribute b ON (b.VersionId = a.VersionId AND b.AttributeCode = a.AttributeCode)


INSERT INTO ZnodePublishCatalogAttributeEntity (VersionId,ZnodeCatalogId,AttributeCode,AttributeTypeName,IsPromoRuleCondition
,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,LocaleId,DisplayOrder,SelectValues)
SELECT VersionId,PimCatalogId,AttributeCode,AttributeTypeName,IsPromoRuleCondition
,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,LocaleId,DisplayOrder,SelectValues
FROM #temp_updatecatalogAttribute a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogAttributeEntity r WHERE r.AttributeCode = a.AttributeCode AND r.VersionId = a.VersionId)



	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing SEO data'
		,ProgressMark = 65
	WHERE Jobid = @NewGUID




SELECT q.VersionId,a.PimProductId, @PimCatalogId ZnodeCatalogId, b.PimProductId AssociatedZnodeProductId , b.DisplayOrder,'' SelectValues
, ISNULL((SELECT CONCAT('["',STRING_AGG([AttributeCode], '","'),'"]') FROM #temp_attributename n 
INNER JOIN ZnodePimConfigureProductAttribute g WITH (nolock) ON (g.PimProductId = a.PimProductId )
WHERE n.PimAttributeId = g.PimAttributeId AND n.LocaleId = q.LocaleId),'[]') ConfigurableAttributeCodes
, IsDefault,1 ElasticSearchEvent
INTO #temp_configProductids 
FROM ZnodePimConfigureProductAttribute a  WITH (nolock)
INNER JOIN #PimProduct_catalog b ON (b.ParentPimProductId = a.PimProductId AND b.IsAssocitedProduct =1 )
CROSS APPLY @Versions_working q 
GROUP BY q.VersionId,a.PimProductId, b.PimProductId  , b.DisplayOrder, IsDefault,q.LocaleId

DELETE a FROM ZnodePublishConfigurableProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_configProductids t WHERE t.PimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND t.AssociatedZnodeProductId <> a.AssociatedZnodeProductId
)
  
 INSERT INTO ZnodePublishConfigurableProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,SelectValues,ConfigurableAttributeCodes,IsDefault,ElasticSearchEvent)
 SELECT VersionId,PimProductId,ZnodeCatalogId,AssociatedZnodeProductId,DisplayOrder,SelectValues,ConfigurableAttributeCodes,IsDefault,ElasticSearchEvent
 FROM #temp_configProductids a
 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishConfigurableProductEntity t WHERE t.VersionId = a.VersionId AND a.PimProductId = t.ZnodeProductId AND t.AssociatedZnodeProductId = a.AssociatedZnodeProductId )

SELECT q.VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, a.PimProductId, a.DisplayOrder, a.BundleQuantity ,1 ElasticSearchEvent
INTO #temp_bundleProduct 
FROM #PimProduct_catalog a 
CROSS APPLY @Versions_working q 
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct tt WHERE tt.PimProductId = a.ParentPimProductId AND tt.ProductType = 'BundleProduct')
AND a.IsAssocitedProduct =1 

DELETE a FROM ZnodePublishBundleProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_bundleProduct t WHERE t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND  t.PimProductId <> a.ZnodeProductId   
)


UPDATE a
SET  a.AssociatedProductBundleQuantity = t.BundleQuantity, a.AssociatedProductDisplayOrder = t.DisplayOrder
FROM ZnodePublishBundleProductEntity a
INNER JOIN  #temp_bundleProduct t ON( t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND  t.PimProductId = a.ZnodeProductId   ) 

INSERT INTO ZnodePublishBundleProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,AssociatedProductBundleQuantity,ElasticSearchEvent)
SELECT VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, PimProductId, DisplayOrder, ISNULL(BundleQuantity,0) BundleQuantity , ElasticSearchEvent
FROM #temp_bundleProduct a
WHERE  NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishBundleProductEntity t WHERE t.VersionId = a.VersionId AND t.ZnodeProductId = a.ParentPimProductId AND t.AssociatedZnodeProductId = a.PimProductId)


SELECT q.VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, PimProductId, a.DisplayOrder ,1 ElasticSearchEvent
INTO #temp_groupProduct
FROM #PimProduct_catalog a 
CROSS APPLY @Versions_working q 
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct tt WHERE tt.PimProductId = a.ParentPimProductId AND tt.ProductType = 'GroupedProduct')
AND a.IsAssocitedProduct =1 

DELETE a FROM ZnodePublishGroupProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_groupProduct t WHERE t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND t.PimProductId <> a.ZnodeProductId
)

INSERT INTO ZnodePublishGroupProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,ElasticSearchEvent)
SELECT VersionId, ParentPimProductId,ZnodeCatalogId, PimProductId, DisplayOrder ,ElasticSearchEvent
FROM #temp_groupProduct a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishGroupProductEntity t WHERE t.VersionId = a.VersionId AND t.ZnodeProductId = a.ParentPimProductId AND t.AssociatedZnodeProductId = a.PimProductId)
 
 Delete from ZnodePublishAddonEntity 
where Exists (Select TOP 1 1 FROM  #TBL_AddOnProduct a
CROSS APPLY @Versions_working q  
where ZnodePublishAddonEntity.VersionId = q.VersionId AND ZnodePublishAddonEntity.ZnodeProductId = a.ParentPimProductId
AND ZnodePublishAddonEntity.AssociatedZnodeProductId = a.PimProductId  AND a.PimAddonGroupId > 0  )
 
INSERT INTO ZnodePublishAddonEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder
,LocaleId,GroupName,DisplayType,DisplayOrder,IsRequired,RequiredType,IsDefault,ElasticSearchEvent)
SELECT VersionId,ParentPimProductId,@PimCatalogId,PimProductId,DisplayOrder
,q.LocaleId,[AddonGroupName] GroupName, DisplayType,DisplayOrder,IIF(RequiredType='requierd',1,0) IsRequired, RequiredType,IsDefault,1 ElasticSearchEvent
FROM  #TBL_AddOnProduct a
CROSS APPLY @Versions_working q 
Inner join ZnodePimAddonGroup AS ZPADG with(nolock) on ( ZPADG.PimAddonGroupId = a.PimAddonGroupId ) 
Inner join ZnodePimAddonGroupLocale AS ZPADGL  with(nolock) on ( ZPADG.PimAddonGroupId = ZPADGL.PimAddonGroupId  and ZPADGL.LocaleId = @DefaultLocaleId ) 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishAddonEntity ty WHERE ty.VersionId = q.VersionId AND ty.ZnodeProductId = a.ParentPimProductId
AND ty.AssociatedZnodeProductId = a.PimProductId  )
AND a.PimAddonGroupId > 0 

		
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Started Elastic update'
		,ProgressMark = 80
	WHERE Jobid = @NewGUID
	
	SET @Status = 1  
  
    UPDATE a 
	SET --PublishSTateId = c.PublishStateId, IsCatalogPublished = 1 	    ,
	PublishCategoryId = (SELECT COUNT(DISTINCT PimCategoryHierarchyId )  FROM #Temp_Categoryvalue n )
		, PublishProductId = CASE WHEN @PimProductId <> 0 THEN @PimProductId ELSE  (SELECT COUNT(DISTINCT PimProductId )  FROM #PimProduct_distinct np  ) END 
	FROM ZnodePublishCatalogLog a 
	INNER JOIN @Versions_new b ON (b.VersionId = a.PublishCatalogLogId)
	INNER JOIN ZnodePublishState c with(nolock) ON (c.PublishStateCode = b.RevisionState)
    
	UPDATE ZnodePublishVersionEntity SET IsPublishSuccess = 1 WHERE ZnodeCatalogId = @PimCatalogId

	UPDATE ZnodePimProduct 
	SET PublishStateId =  CASE WHEN EXISTS (SELECT TOP 1 1 FROM @Versions_working WHERE PublishStateId = 3 ) THEN 3 ELSE 4 END
	WHERE PublishStateId IN (1,2)
	AND PimProductId IN ( SELECT PimProductId FROM  #PimProduct_distinct ) 
	AND @PimProductId = 0 

	UPDATE ZnodePimCategory 
	SET PublishStateId = CASE WHEN EXISTS (SELECT TOP 1 1 FROM @Versions_working WHERE PublishStateId = 3 ) THEN 3 ELSE 4 END 
	WHERE PublishStateId IN (1,2)
	AND PimCategoryId IN ( SELECT t.PimCategoryId FROM  #Temp_categoryDetails t  ) 


	IF @PimProductId = 0 
	BEGIN 
		SELECT @PimCatalogId AS id,@Status AS Status;     
    END 
	ELSE 
	BEGIN 
	
	  SELECT PimProductId , 0 IsDeleted , @PimCatalogId ZnodecatalogId , n.VersionId
	  FROM #PimProduct_distinct a 
	  CROSS APPLY @Versions_working n 
	  UNION ALL 
	  SELECT PimProductId , 1 IsDeleted , @PimCatalogId , n.VersionId
	  FROM @Deleted_Products 
	  CROSS APPLY @Versions_working n 
	END 

END TRY   
BEGIN CATCH
	SET @Status =0    
	SELECT ERROR_MESSAGE(), ERROR_LINE(),ERROR_PROCEDURE()
	SELECT 1 AS ID,@Status AS Status;     
   
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),   
	@ErrorLine VARCHAR(100)= ERROR_LINE(),  
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishCatalogEntity   
	@PimCatalogId = '+CAST(@PimCatalogId  AS VARCHAR (max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))  
	+',@PreviewVersionId = ' + CAST(0  AS VARCHAR(20))  
	+',@ProductionVersionId = ' + CAST(0  AS VARCHAR(20))  
	+',@RevisionState = ''' + CAST(@RevisionState  AS VARCHAR(50))  
	+',@UserId = ' + CAST(@UserId AS VARCHAR(20)); SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
   
    	
	EXEC Znode_InsertProcedureErrorLog  
	@ProcedureName = 'Znode_PublishCatalogEntity',  
	@ErrorInProcedure = @Error_procedure,  
	@ErrorMessage = @ErrorMessage,  
	@ErrorLine = @ErrorLine,  
	@ErrorCall = @ErrorCall;  
END CATCH  
END



GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishContentContainerVariantEntity')
	DROP PROC Znode_PublishContentContainerVariantEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishContentContainerVariantEntity]
(
	 @ContainerKey VARCHAR(50) = ''
	,@RevisionState VARCHAR(50) = 'Production'
	,@UserId INT = 0
	,@OldPreviewId INT = 0
	,@OldProductionId INT = 0
	,@ContainerProfileVariantId INT = 0
	,@Status BIT = 0 OUTPUT
)
AS
/*
	if profileid and portalid will null then it must be publish.
	This Procedure is used to publish the Content Container Variant against the store 

	EXEC [Znode_PublishContentContainerVariantEntity] 1 2,3

	EXEC Znode_PublishContentContainerVariantEntity @@ContainerKey='',@RevisionState='Production',@UserId=2,
	@OldPreviewId=0,@OldProductionId=

	SELECT * FROM ZnodePublishContentContainerVariantEntity

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @VersionId Int
	SET @VersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState = @RevisionState )

	IF ISNULL(@VersionId,0) = 0 AND @RevisionState = 'PREVIEW'
	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PREVIEW'
		SET @VersionId = @@IDENTITY
	END
	
	IF ISNULL(@VersionId,0) = 0 AND @RevisionState = 'PRODUCTION'
 	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PRODUCTION'
		SET @VersionId = @@IDENTITY
	END 


		DECLARE @SetLocaleId INT, @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1;
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1));
		DECLARE @TBL_ContentContainerVariantEntity TABLE
			(CMSContainerProfileVariantId INT,PortalId INT, LocaleId INT, Name NVARCHAR(100), ContainerKey NVARCHAR(50),	CMSContentContainerId INT, ProfileId INT,
				CMSContainerTemplateId INT, CreatedBy INT, CreatedDate DATETIME, ModifiedBy INT, ModifiedDate DATETIME,IsActive BIT);

		INSERT INTO @TBL_Locale (LocaleId)
		SELECT LocaleId
		FROM ZnodeLocale
		WHERE IsActive =1 --AND (LocaleId = @LocaleId OR @LocaleId = 0);

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0);

		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT TOP 1 LocaleId FROM @TBL_locale WHERE  RowId = @IncrementalId);

			;WITH Cte_CMSContainerProfileVariant AS
			(
				SELECT DISTINCT WPV.CMSContainerProfileVariantId, ZCW.ContainerKey, WPV.PortalId, --ZCW.Tags,
					CASE WHEN WPV.PortalId IS NULL THEN  'Any Store' ELSE ZP.StoreName END StoreName  ,
					CASE WHEN WPV.ProfileId IS NULL THEN  'Any User Profile' ELSE ZPR.ProfileName END ProfileName, 
					@GetDate As CreatedDate, @GetDate As ModifiedDate,
					CAST(CASE WHEN WPV.ProfileId IS NULL AND WPV.PortalId IS NULL THEN 1 ELSE 0 END AS BIT) AS IsDefaultVarient,
					CASE WHEN WPV.PortalId IS NULL THEN  'AnyStore' ELSE ZP.StoreCode END StoreCode ,
					CASE WHEN WPV.ProfileId IS NULL THEN  'AnyUserProfile' ELSE ZPR.DefaultExternalAccountNo END ProfileCode,
					CPVL.LocaleId,ZCW.Name,ZCW.CMSContentContainerId,WPV.ProfileId,CPVL.CMSContainerTemplateId,CPVL.IsActive
				FROM ZnodeCMSContentContainer ZCW
				INNER JOIN ZnodeCMSContainerProfileVariant WPV ON WPV.CMSContentContainerId = ZCW.CMSContentContainerId
				INNER JOIN ZnodeCMSContainerProfileVariantLocale CPVL ON WPV.CMSContainerProfileVariantId=CPVL.CMSContainerProfileVariantId
				LEFT JOIN ZnodePortal ZP ON (WPV.PortalId = ZP.PortalId ) 
				LEFT JOIN ZnodeProfile ZPR ON WPV.ProfileId = ZPR.ProfileId
				WHERE (CPVL.LocaleId = @SetLocaleId) -- OR CPVL.LocaleId = @DefaultLocaleId
				--AND CPVL.IsActive = 1 
				AND (ZCW.ContainerKey = @ContainerKey OR @ContainerKey = '' )
				AND ( WPV.CMSContainerProfileVariantId = @ContainerProfileVariantId OR @ContainerProfileVariantId = 0)
			)
			, Cte_GetFirstFilterData AS
			(
				SELECT CMSContainerProfileVariantId,ContainerKey,PortalId,StoreName,ProfileName,CreatedDate,ModifiedDate,IsDefaultVarient,
					StoreCode,ProfileCode,LocaleId,Name,CMSContentContainerId,ProfileId,CMSContainerTemplateId,IsActive
				FROM Cte_CMSContainerProfileVariant
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT CMSContainerProfileVariantId,ContainerKey,PortalId,StoreName,ProfileName,CreatedDate,ModifiedDate,IsDefaultVarient,
					StoreCode,ProfileCode,LocaleId,Name,CMSContentContainerId,ProfileId,CMSContainerTemplateId,IsActive
				FROM Cte_GetFirstFilterData
				UNION ALL
				SELECT CMSContainerProfileVariantId,ContainerKey,PortalId,StoreName,ProfileName,CreatedDate,ModifiedDate,IsDefaultVarient,
					StoreCode,ProfileCode,LocaleId,Name,CMSContentContainerId,ProfileId,CMSContainerTemplateId,IsActive
				FROM Cte_CMSContainerProfileVariant CTEC
				WHERE  LocaleId = @DefaultLocaleId
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.CMSContainerProfileVariantId = CTEC.CMSContainerProfileVariantId)
			)
			INSERT INTO @TBL_ContentContainerVariantEntity
				(CMSContainerProfileVariantId,PortalId, LocaleId, Name, ContainerKey,	CMSContentContainerId, ProfileId, CMSContainerTemplateId,
					CreatedBy, CreatedDate, ModifiedBy,	ModifiedDate,IsActive)
			SELECT CMSContainerProfileVariantId,PortalId, LocaleId, Name, ContainerKey,	CMSContentContainerId, ProfileId, CMSContainerTemplateId,
					@UserId, CreatedDate, @UserId,	ModifiedDate,IsActive
			FROM Cte_GetDefaultFilterData

			SET @IncrementalId = @IncrementalId +1;
		END 

		CREATE TABLE #ContentContainerGlobalAttribute(CMSContainerProfileVariantId INT,LocaleId INT, GlobalAttributes NVARCHAR(MAX))

		INSERT INTO #ContentContainerGlobalAttribute (CMSContainerProfileVariantId ,LocaleId , GlobalAttributes )
		EXEC [Znode_SetPublishContentContainerGlobalAttributeEntity] @ContainerKey = @ContainerKey, @ContainerProfileVariantId = @ContainerProfileVariantId
		-- Data inserted INTO flat table ZnodeBlogNewsEntity (Replica of MongoDB Collection )
		IF (@RevisionState like '%Preview%' ) 
		BEGIN
			--Data inserted INTO flat table ZnodePublishContentContainerVariantEntity (Replica of MongoDB Collection )
			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @VersionId
			AND EXISTS(SELECT * FROM @TBL_ContentContainerVariantEntity cc WHERE ZnodePublishContentContainerVariantEntity.ContainerKey = CC.ContainerKey
						AND ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)
			OR NOT EXISTS (SELECT * FROM ZnodeCMSContainerProfileVariant cc WHERE ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)

			INSERT INTO ZnodePublishContentContainerVariantEntity
			(
				VersionId,PortalId,LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CMSContainerProfileVariantId, GlobalAttributes,IsActive
			)
			SELECT @VersionId,A.PortalId,A.LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,A.CMSContainerProfileVariantId, B.GlobalAttributes,A.IsActive
			FROM @TBL_ContentContainerVariantEntity A
			LEFT JOIN #ContentContainerGlobalAttribute B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId AND A.LocaleId = B.LocaleId

			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @OldPreviewId

		END
		---------------------------- END Preview 
		IF (@RevisionState LIKE '%Production%' OR @RevisionState = 'None')
		BEGIN
			-- Only production version id will process 
			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @VersionId
			AND EXISTS(SELECT * FROM @TBL_ContentContainerVariantEntity cc WHERE ZnodePublishContentContainerVariantEntity.ContainerKey = CC.ContainerKey
					AND ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)
			OR NOT EXISTS (SELECT * FROM ZnodeCMSContainerProfileVariant cc WHERE ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)

			INSERT INTO ZnodePublishContentContainerVariantEntity
			(
				VersionId,PortalId,LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CMSContainerProfileVariantId,GlobalAttributes,IsActive
			)
			SELECT DISTINCT @VersionId,A.PortalId,A.LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,A.CMSContainerProfileVariantId,B.GlobalAttributes,A.IsActive
			FROM @TBL_ContentContainerVariantEntity A
			LEFT JOIN #ContentContainerGlobalAttribute B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId AND A.LocaleId = B.LocaleId

			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @OldProductionId
		
		END

		SET @Status =1 ;
		IF (@RevisionState = 'Preview')
			UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPreview()) --, ISPublish = 1 
			FROM @TBL_ContentContainerVariantEntity A
			INNER JOIN ZnodeCMSContainerProfileVariant B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
				
		ELSE IF (@RevisionState = 'Production' Or @RevisionState = 'None' )
			UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPublish()) --, ISPublish = 1 
			FROM @TBL_ContentContainerVariantEntity A
			INNER JOIN ZnodeCMSContainerProfileVariant B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
				

		SELECT 1 ID, @Status Status;
END TRY 
BEGIN CATCH
	SET @Status =0

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishContentContainerVariantEntity
		@ContainerKey = '+CAST(@ContainerKey AS VARCHAR	(max))
		+',@ContainerProfileVariantId = ''' + CAST(@ContainerProfileVariantId AS VARCHAR(50))
		+',@RevisionState = ''' + CAST(@RevisionState AS VARCHAR(50))
		+',@UserId = ' + CAST(@UserId AS VARCHAR(20))
		+',@Status='+CAST(@Status AS VARCHAR(10));
		SELECT 0 AS ID,@Status AS Status;
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishContentContainerVariantEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishContentPageEntity')
	DROP PROC Znode_PublishContentPageEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishContentPageEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSContentPagesId int = 0
  ,@UserId int = 0
  ,@Status Bit =0 OUTPUT 

)
AS

/*
  To publish all Contenet pages and their mapping into their respective entities 
	ZnodePublishContentPageConfigEntity
	ZnodePublishSEOEntity
	ZnodePublishWidgetProductEntity
	ZnodePublishMediaWidgetEntity
	ZnodePublishSearchWidgetEntity
	ZnodePublishTextWidgetEntity
	ZnodePublishWidgetSliderBannerEntity
	ZnodePublishWidgetTitleEntity

	Unit Testing : 
	Exec [dbo].[Znode_PublishContentPageEntity]
     @PortalId  = 1 
	,@LocaleId  = 0 
	,@RevisionState = 'Preview&Production' 
	,@CMSContentPagesId = 0
	,@UserId = 2
  
	declare @p8 int
	set @p8=NULL
		exec sp_executesql N'ZnodePublishContentPageEntity @PortalId,@LocaleId,@RevisionState,
		@CMSContentPagesId,@UserId,@Status OUT',N'@UserId int,@PortalId int,@LocaleId int,
		@RevisionState nvarchar(10),@CMSContentPagesId int,@Status int output',
		@UserId=2,@PortalId=1,@LocaleId=0,@RevisionState=N'PRODUCTION',@CMSContentPagesId=72,@Status=@p8 output
	select @p8


*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300);
	SET @Status = 1 
	Declare @IsPreviewEnable int,
	@PreviewVersionId INT = 0  ,@ProductionVersionId INT = 0

 	If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
	Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
		SET @IsPreviewEnable = 1 
	else 
		SET @IsPreviewEnable = 0 

   If @PreviewVersionId = 0 
		-- select TOP 1 @PreviewVersionId =   PublishPortalLogId from ZnodePublishPortalLog where 
		--PortalId = @PortalId AND  PublishStateId  = [dbo].[Fn_GetPublishStateIdForPreview]() Order by 1 DESC   
		SELECT TOP 1 @PreviewVersionId =  VersionId  from  ZnodePublishWebStoreEntity where PortalId =  @PortalId and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
   If @ProductionVersionId = 0 
		--select TOP 1  @ProductionVersionId =   PublishPortalLogId  from ZnodePublishPortalLog where 
		--PortalId = @PortalId AND PublishStateId  = [dbo].[Fn_GetPublishStateIdForPublish] () Order by 1 DESC  
		SELECT TOP 1 @ProductionVersionId =  VersionId  from  ZnodePublishWebStoreEntity where PortalId =  @PortalId and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
	
	Truncate table ZnodePublishErrorLogEntity 
	


	IF (@IsPreviewEnable = 1 AND @PreviewVersionId = 0 ) OR @ProductionVersionId =0 
	Begin
		SET @Status =0 
		SELECT 1 AS ID,@Status AS Status;  
		INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWebStoreEntity', @RevisionState, 'Faild : WebStore version not found' , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			Return 0 
	End
	
	Begin Transaction 
	if @Type = 'ZnodePublishContentPageConfigEntity' OR @Type = ''
	Begin
		 EXEC [dbo].[Znode_SetPublishContentPageConfigEntity]
			 @PortalId  = @PortalId 
			,@LocaleId   = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSContentPagesId = @CMSContentPagesId
			,@UserId = @UserId	
			,@Status = @Status Output 

			If @Status = 0 
				Rollback Transaction 
				 
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishContentPageConfigEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End

	End
	
	if @Type = 'ZnodePublishSEOEntity' OR @Type = ''
	Begin
		
			SELECT @CMSSEOCode  = PageName  from ZnodeCMSContentPages where @CMSContentPagesId = CMSContentPagesId and  
			(PortalId = @PortalId OR @PortalId  =0 ) 
			
			SET @CMSSEOCode  = Isnull( @CMSSEOCode  , '') 
			
			Exec [Znode_SetPublishSEOEntity]
			 @PortalId  = @PortalId
			,@LocaleId  = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSSEOTypeId = '3'
			,@CMSSEOCode = @CMSSEOCode  
			,@UserId = @UserId  
			,@Status = @Status Output 
			
			If @Status = 0 
				Rollback Transaction 
				
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishSEOEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End


	End 

	if @Type = 'ZnodePublishWidgetProductEntity' OR @Type = ''
	Begin
			EXEC Znode_SetPublishWidgetProductEntity
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSMappingId = @CMSContentPagesId
			,@UserId = @UserId 
			,@Status = @Status  Output
			
			If @Status  = 0 
				Rollback Transaction 
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWidgetProductEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End
	END 
	
	if @Type = 'ZnodeSetPublishMediaWidgetEntity' OR @Type = ''
	Begin
			EXEC Znode_SetPublishMediaWidgetEntity
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSMappingId = @CMSContentPagesId
			,@UserId = @UserId 
			,@Status = @Status  Output
			
			If @Status = 0 
				Rollback Transaction 
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishMediaWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End

	END 

	if @Type = 'ZnodePublishSearchWidgetEntity' OR @Type = ''
	Begin
			EXEC Znode_SetPublishSearchWidgetEntity
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSMappingId = @CMSContentPagesId
			,@UserId = @UserId 
			,@Status = @Status  Output
			
			If @Status = 0 
				Rollback Transaction 
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishSearchWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End
	END 
	
	if @Type = 'ZnodePublishTextWidgetEntity' OR @Type = ''
	Begin
			EXEC Znode_SetPublishTextWidgetEntity
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSMappingId = @CMSContentPagesId
			,@UserId = @UserId 
			,@Status = @Status  Output
			
			If @Status = 0 
				Rollback Transaction 
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishTextWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End

	END 
	if @Type = 'ZnodeSetPublishWidgetSliderBannerEntity' OR @Type = ''
	Begin
			EXEC Znode_SetPublishWidgetSliderBannerEntity
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSContentPagesId = @CMSContentPagesId
			,@UserId = @UserId 
			,@Status = @Status  Output
			
			If @Status = 0 
				Rollback Transaction 
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWidgetSliderBannerEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End
	END 
	if @Type = 'ZnodeSetPublishWidgetTitleEntity' OR @Type = ''
	Begin
			EXEC Znode_SetPublishWidgetTitleEntity
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@CMSContentPagesId = @CMSContentPagesId
			,@UserId = @UserId 
			,@Status = @Status  Output
			
			If @Status =0 
				Rollback Transaction
			INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWidgetTitleEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End

	END 

	if (@Type = 'ZnodePublishContainerWidgetEntity' OR @Type = '' ) AND @Status = 1  
			Begin
					EXEC Znode_SetPublishContainerWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = @CMSContentPagesId
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					If @Status =0 
				        Rollback Transaction
				INSERT INTO ZnodePublishErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWidgetTitleEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			If @Status = 0 
				Begin
					update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
					update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublishFailed() where 
					SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
					Return  0  
				End	

			END

	IF Exists (select TOP 1 1  from ZnodePublishErrorLogEntity where  ProcessStatus <> 'Fail') 
		Begin
			If @RevisionState = 'PREVIEW'
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where 
				SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End 
			Else 
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where @CMSContentPagesId = CMSContentPagesId and  (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
				SEOCode = @CMSSEOCode and  (PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End
	    	SET @Status = 1
		End
		SELECT 1 AS ID,@Status AS Status;   
		Commit Transaction 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	
	Rollback Transaction 

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishContentPageEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+''',@CMSContentPagesId= ' + CAST(@CMSContentPagesId  AS varchar(20))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
			
	INSERT INTO ZnodePublishErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'ZnodePublishContentPageEntity', @RevisionState + isnull(@ErrorMessage,'') , 'Fail' , @GetDate, 
	@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishContentPageEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishLatestAssociatedProduct')
	DROP PROC Znode_PublishLatestAssociatedProduct
GO

CREATE Procedure [dbo].[Znode_PublishLatestAssociatedProduct]	
(
	@PublishCatalogId Int = 0,
	@PimProductId TransferId Readonly,
	@UserId int,
	@PublishStateId INT = 0 
)
as
--[Znode_PublishLatestAssociatedProduct] @PublishCatalogId=3,@UserId=2,@PublishStateId=3
begin	
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @ProductTypePimAttributeId INT =  dbo.Fn_GetProductTypeAttributeId()

		truncate table ZnodePublishAssociatedProductLog

		-- Retrive all catalaog, category and their products   
		SELECT ZPCH.PimCatalogId ,ZPCC.PimCategoryId , ZPCH.PimCategoryHierarchyId , ZPCC.PimProductId , d.AttributeDefaultValueCode ProductType
			   ,ISNULL(SUBSTRING( (SELECT ','+CAST(ProfileId AS VARCHAR(50)) 
						FROM ZnodeProfile ZPFC 
						WHERE ZPCH.PimCatalogId = ZPFC.PimCatalogId  FOR XML PATH('')),2,8000),'') ProfileIds	
	    INTO #PimCatalogCategory 
		FROM ZnodePimCategoryProduct ZPCC 
		INNER JOIN ZnodePimCategoryHierarchy ZPCH ON ZPCC.PimCategoryId = ZPCH.PimCategoryId
		INNER JOIN ZnodePimAttributeValue b ON (b.PimProductId = ZPCC.PimProductId )	
		INNER JOIN ZnodePimProductAttributeDefaultValue c ON (c.PimAttributeValueId = b.PimAttributeValueId) 	
		INNER JOIN ZnodePimAttributeDefaultValue d ON (d.PimAttributeDefaultValueId = c.PimAttributeDefaultValueId)
		INNER JOIN ZnodePublishCatalog ZPC ON ZPC.PimCatalogId = ZPCH.PimCatalogId
		WHERE b.PimAttributeId  = @ProductTypePimAttributeId		
		AND  ( exists(select * from @PimProductId P where ZPCC.PimProductId = P.Id) OR ZPC.PublishCatalogId = @PublishCatalogId )
	   
	    -- here find all link products and associate to that catalog 
	    SELECT ZPLPD.PimProductId, CTPP.PimCategoryId, CTPP.PimCatalogId,CTPP.PimCategoryHierarchyId,CTPP.PimProductId ParentPimProductId 
				,0 IsConfigurable,0 IsBundle,0 IsGroup,0 IsAddOn,1 IsLink, 1 IsWithCatalog , ZPLPD.DisplayOrder
		INTO #AssociatedProduct
		FROM ZnodePimLinkProductDetail AS ZPLPD
		INNER JOIN #PimCatalogCategory AS CTPP ON ZPLPD.PimParentProductId = CTPP.PimProductId 
		ORDER BY ZPLPD.DisplayOrder , ZPLPD.PimLinkProductDetailId
		
		alter table #AssociatedProduct add IsDefault bit

		-- IsWithCatalog this flag will manage to find the parent product 
		INSERT INTO #AssociatedProduct
		SELECT ZPAPD.PimChildProductId, ISNULL(CTALP.PimCategoryId,0) PimCategoryId ,CTALP.PimCatalogId,CTALP.PimCategoryHierarchyId,CTALP.PimProductId ParentPimProductId
				,0 IsConfigurable,0 IsBundle,0 IsGroup,1 IsAddOn,0 IsLink, 0 IsWithCatalog , ZPAPD.DisplayOrder, 0 IsDefault
		FROM ZnodePimAddOnProductDetail AS ZPAPD 
		INNER JOIN ZnodePimAddOnProduct AS ZPAP ON ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId
		INNER JOIN #PimCatalogCategory AS CTALP ON CTALP.PimProductId = ZPAP.PimProductId 
		ORDER BY ZPAPD.DisplayOrder , ZPAPD.PimAddOnProductDetailId

		-- associated product with there flag 
		INSERT INTO #AssociatedProduct
		SELECT ZPTA.PimProductId,ISNULL(CTAAP.PimCategoryId,0),CTAAP.PimCatalogId,ISNULL(CTAAP.PimCategoryHierarchyId,0) PimCategoryHierarchyId ,CTAAP.PimProductId ParentPimProductId
						,CASE WHEN CTAAP.ProductType = 'ConfigurableProduct' THEN 1 ELSE 0 END , CASE WHEN CTAAP.ProductType = 'BundleProduct' THEN 1 ELSE 0 END
						, CASE WHEN CTAAP.ProductType = 'GroupedProduct' THEN 1 ELSE 0 END,0,0, 0 IsWithCatalog , ZPTA.DisplayOrder, ZPTA.IsDefault		
        FROM ZnodePimProductTypeAssociation AS ZPTA 
		INNER JOIN #PimCatalogCategory AS CTAAP ON CTAAP.PimProductId = ZPTA.PimParentProductId 
		ORDER BY ZPTA.DisplayOrder , ZPTA.PimProductTypeAssociationId

		SELECT  PimProductId,PimCatalogId,ParentPimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, DisplayOrder, IsDefault  
		Into #AssociatedProduct1
		FROM #AssociatedProduct
		GROUP BY  PimProductId,PimCatalogId,ParentPimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink, DisplayOrder, IsDefault

		--update ZPAPL set   
		--from ZnodePublishAssociatedProductLog ZPAPL 
		--inner join #AssociatedProduct1 AP

		insert into ZnodePublishAssociatedProductLog(ParentPimProductId,PimProductId,IsConfigurable,IsBundle,IsGroup,IsAddOn,IsLink,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				,PimCatalogId,PublishStateId, DisplayOrder, IsDefault)
		select SOURCE.ParentPimProductId,SOURCE.PimProductId,SOURCE.IsConfigurable,SOURCE.IsBundle,SOURCE.IsGroup,SOURCE.IsAddOn,SOURCE.IsLink
				,@UserId ,@GetDate,@UserId ,@GetDate ,SOURCE.PimCatalogId,@PublishStateId, SOURCE.DisplayOrder, IsDefault
		from #AssociatedProduct1 SOURCE
		
end

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishPortalEntity')
	DROP PROC Znode_PublishPortalEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishPortalEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0
  ,@Status Bit =0 OUTPUT 
  ,@IsContentType Bit= 1
  ,@NewGUID nvarchar(500)  
)
AS
/*
  To publish all Content pages and their mapping into their respective entities 
	ZnodePublishContentPageConfigEntity
	ZnodePublishSEOEntity
	ZnodePublishWidgetProductEntity
	ZnodePublishMediaWidgetEntity
	ZnodePublishSearchWidgetEntity
	ZnodePublishTextWidgetEntity
	ZnodePublishWidgetSliderBannerEntity
	ZnodePublishWidgetTitleEntity

	Unit Testing : 
	Declare @Status bit 
	

	Declare @Status bit 
	Exec [dbo].[Znode_PublishPortalEntity]
     @PortalId  = 1 
	,@LocaleId  = 0 
	,@RevisionState = 'PRODUCTION' 
	,@UserId = 2
	,@Status = @Status 
	--Select @Status 


*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	Declare @PortalCode Varchar(100)
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300),@UserName Varchar(50);
	SET @Status = 1 
	Declare @IsPreviewEnable int,@PreviewVersionId INT = 0  ,@ProductionVersionId INT = 0
	
	Select TOP 1  @UserName = aspNetZnodeUser.UserName from ZnodeUser Inner Join aspNetUsers ON ZnodeUser.aspNetUserId = aspNetUsers.Id 
	Inner Join aspNetZnodeUser on aspNetUsers.UserName = aspNetZnodeUser.AspNetZnodeUserId
	where ZnodeUser.UserId = @userId
            


 		If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
		Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
			SET @IsPreviewEnable = 1 
		else 
			SET @IsPreviewEnable = 0 

		--Generate preview entry 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @TBL_StoreEntity TABLE 
		(
			 PortalThemeId	int,PortalId	int,ThemeId	int,ThemeName	varchar(200),CSSId	int,CSSName	nvarchar(2000),
			 WebsiteLogo	varchar(300),WebsiteTitle	nvarchar(400),FaviconImage	varchar(300),WebsiteDescription	nvarchar(MAX),
			 PublishState	varchar(100),LocaleId	int	
		)
		
		IF object_id('tempdb..[#Tbl_VersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_VersionEntity
		Create Table #Tbl_VersionEntity(PortalId int , VersionId int , LocaleId int , PublishType varchar(50) )

		IF object_id('tempdb..[#Tbl_OldVersionEntity]') IS NOT NULL
			drop table tempdb..#Tbl_OldVersionEntity
		Create Table #Tbl_OldVersionEntity(PortalId int , NewVersionId int ,OldVersionId int , LocaleId int , PublishType varchar(50) )

	
		DECLARE @WebStoreEntityId int 
		
		select @PortalCode  = StoreName  from ZnodePortal where PortalId = @PortalId 
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			if (@IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) ) 
			Begin
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Token,PublishStateId)
				Select @PortalId ,1 , @UserId , @GetDate,@UserId ,@GetDate ,@UserId ,@GetDate, NULL, DBO.Fn_GetPublishStateIdForProcessing()
				
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PREVIEW'
				
			End
			If (@RevisionState like '%Production%' OR @RevisionState = 'None')
			Begin
				--Genrate production entry 
				Insert into ZnodePublishPortalLog
				(PortalId,IsPortalPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Token,PublishStateId)
				Select @PortalId ,1 , @UserId , @GetDate,@UserId ,@GetDate ,@UserId ,@GetDate, NULL, DBO.Fn_GetPublishStateIdForProcessing()
			
				insert into #Tbl_VersionEntity (PortalId,VersionId,LocaleId,PublishType)
				select @PortalId, @@Identity , @SetLocaleId ,'PRODUCTION'
			End 
	   	SET @IncrementalId = @IncrementalId +1 
		END 

	Truncate table ZnodePublishPortalErrorLogEntity

	Declare @IsFirstTimeContentPublish bit 
	If Exists (Select TOP 1 1  from ZnodePublishWebStoreEntity where PortalId = @PortalId)
		SET @IsFirstTimeContentPublish =1 
	else 
		SET @IsFirstTimeContentPublish =0
    
	Declare @Tbl_PreviewVersionId  TABLE (VersionId int , PortalId int , LocaleId int )
	Declare @Tbl_ProductionVersionId  TABLE (VersionId int , PortalId int , LocaleId int )

	If @IsContentType = 0 AND @IsFirstTimeContentPublish =1 
	Begin 
		Insert into #Tbl_OldVersionEntity (PortalId,NewVersionId,OldVersionId, LocaleId, PublishType)
		Select A.PortalId , A.VersionId, B.VersionId, a.LocaleId,a.PublishType from #Tbl_VersionEntity A Inner join ZnodePublishWebStoreEntity B on 
		A.PortalId = B.PortalId and A.LocaleId = B.LocaleId AND A.PublishType= B.PublishState  
	End
	Delete from ZnodePublishProgressNotifierEntity where JobName  = @PortalCode 
	
	INSERT INTO ZnodePublishProgressNotifierEntity
	(VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	Values(0,@NewGUID , Isnull(@PortalCode,'') + ' Store' , 0 , 0 , 0 , '' , @UserId, @UserName)

	if @Type = 'ZnodePublishWebStoreEntity' OR @Type = ''
	Begin
		 Declare  @PreviewVersionIdString varchar(1000)= ''  ,@ProductionVersionIdString varchar(1000) = '' 
		 SELECT   @PreviewVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PREVIEW'  FOR XML PATH ('')), 1, 1, '') 
		 SELECT   @ProductionVersionIdString = STUFF((SELECT ',' + cast (VersionId as varchar(50))  FROM #Tbl_VersionEntity   where PublishType = 'PRODUCTION'  FOR XML PATH ('')), 1, 1, '') 
		 
		 EXEC [dbo].[Znode_SetPublishWebStoreEntity]
			 @PortalId  = @PortalId 
			,@LocaleId   = @LocaleId 
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = @PreviewVersionIdString 
			,@ProductionVersionId = @ProductionVersionIdString 
			,@RevisionState = @RevisionState 
			,@UserId = @UserId	
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishWebStoreEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark =5 , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End
	
	if (@Type = 'ZnodePublishPortalBrandEntity' OR @Type = '' ) AND @Status = 1 
	Begin
			Exec [Znode_SetPublishPortalBrandEntity]
			 @PortalId  = @PortalId
			,@IsPreviewEnable =@IsPreviewEnable 
			,@PreviewVersionId  = 0 
			,@ProductionVersionId = 0
			,@RevisionState = @RevisionState 
			,@UserId = @UserId  
			,@Status = @Status Output 

			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			Update ZnodePublishProgressNotifierEntity SET 
			ProgressMark = CASE When (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) THEN 10 Else 100 End , 
			IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
			IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
			where  JobId = @NewGUID
	End 

	if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1 and (@IsContentType = 0 or @PortalId > 0)
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '4'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

			End 
	If (@IsContentType = 1 OR (@IsFirstTimeContentPublish = 0 AND @IsContentType = 0 ) ) AND @Status = 1  
	Begin
			if @Type = 'ZnodePublishBlogNewsEntity' OR @Type = '' 
			Begin
				 EXEC [dbo].[Znode_SetPublishBlogNewsEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishBlogNewsEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 15 , 
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			End
			if (@Type = 'ZnodePublishPortalCustomCssEntity' OR @Type = '' ) AND @Status = 1  
			Begin
				 EXEC [dbo].[Znode_SetPublishPortalCustomCssEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalCustomCssEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 20  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID


			End
			if (@Type = 'ZnodePublishWidgetCategoryEntity' OR @Type = '' ) AND @Status = 1 
			Begin
				 EXEC [dbo].[Znode_SetPublishWidgetCategoryEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetCategoryEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 25  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			End
	
			if (@Type = 'ZnodePublishWidgetProductEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetProductEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetProductEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 30  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID
			END 

			if (@Type = 'ZnodePublishWidgetTitleEntity' OR @Type = '') AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetTitleEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetTitleEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 35  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID

			END 
			if (@Type = 'ZnodePublishWidgetSliderBannerEntity' OR @Type = '')AND @Status = 1  
			Begin
					EXEC Znode_SetPublishWidgetSliderBannerEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@CMSSliderId = 0 
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetSliderBannerEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 40  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishTextWidgetEntity' OR @Type = '' ) AND @Status = 1  
			Begin
					EXEC Znode_SetPublishTextWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishTextWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 45  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			END 
			if (@Type = 'ZnodeSetPublishMediaWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishMediaWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMediaWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
										
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 50  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 
			if (@Type = 'ZnodePublishSearchWidgetEntity' OR @Type = '') AND @Status = 1
			Begin
					EXEC Znode_SetPublishSearchWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSearchWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 55  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			END 

			if (@Type = 'ZnodePublishContentPageConfigEntity' OR @Type = '') AND @Status = 1
			Begin
				 EXEC [dbo].[Znode_SetPublishContentPageConfigEntity]
					 @PortalId  = @PortalId 
					,@LocaleId   = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSContentPagesId = 0
					,@UserId = @UserId	
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishContentPageConfigEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			
			End

			if (@Type = 'ZnodePublishSEOEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishSEOEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@CMSSEOTypeId = '3,5'
					,@CMSSEOCode = ''
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishSEOEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 60,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
			if (@Type = 'ZnodePublishMessageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishMessageEntity]
					 @PortalId  = @PortalId
					,@LocaleId  = @LocaleId 
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishMessageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 65,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 

		   if (@Type = 'ZnodePublishPortalGlobalAttributeEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishPortalGlobalAttributeEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishPortalGlobalAttributeEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
					
					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 67,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 
 
		   if (@Type = 'ZnodePublishProductPageEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishProductPageEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishProductPageEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 73,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			


			End 
			
			if (@Type = 'ZnodePublishWidgetBrandEntity' OR @Type = '') AND @Status = 1
			Begin
					Exec [Znode_SetPublishWidgetBrandEntity]
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = 0 
					,@ProductionVersionId = 0
					,@RevisionState = @RevisionState 
					,@UserId = @UserId  
					,@Status = @Status Output 

					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishWidgetBrandEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 80,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			End 

			if (@Type = 'ZnodePublishContainerWidgetEntity' OR @Type = '' ) AND @Status = 1  
			Begin
					EXEC Znode_SetPublishContainerWidgetEntity
					 @PortalId  = @PortalId
					,@IsPreviewEnable =@IsPreviewEnable 
					,@PreviewVersionId  = @PreviewVersionId 
					,@ProductionVersionId = @ProductionVersionId 
					,@RevisionState = @RevisionState 
					,@CMSMappingId = 0
					,@UserId = @UserId 
					,@Status = @Status  Output
			
					INSERT INTO ZnodePublishPortalErrorLogEntity
					(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
					SELECT 'ZnodePublishContainerWidgetEntity', @RevisionState, Case when Isnull(@Status,0) = 0 then 'Fail' Else 'Success' end , @GetDate, 
					@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

					Update ZnodePublishProgressNotifierEntity SET 
					ProgressMark = 90  ,
					IsCompleted  = Case when Isnull(@Status,0) = 0 then 1  Else 0 end,
					IsFailed =Case when Isnull(@Status,0) = 0 then 1  Else 0 end  
					where  JobId = @NewGUID			

			END 

	End
	SET @GetDate = dbo.Fn_GetDate();
		IF Exists (select TOP 1 1  from ZnodePublishPortalErrorLogEntity where  ProcessStatus = 'Fail') 
		Begin
			SET @Status  =0 
			SELECT 1 AS ID,@Status AS Status;
			INSERT INTO ZnodePublishPortalErrorLogEntity
			(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
			SELECT 'ZnodePublishPortalEntity', @RevisionState , 'Fail' , @GetDate, 
			@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 
			
			Delete  From ZnodePublishWebStoreEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
			Delete  From ZnodePublishBlogNewsEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetProductEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetTitleEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishTextWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishMediaWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSearchWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishContentPageConfigEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishSEOEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId and CMSSEOTypeId in (3,5)
			Delete  From ZnodePublishMessageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishPortalBrandEntity Where  VersionId  in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishProductPageEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Delete  From ZnodePublishWidgetBrandEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
		    Delete  From ZnodePublishContainerWidgetEntity Where  VersionId in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed(),ModifiedDate=@GetDate  where  PublishPortalLogId in  (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublishFailed(),ModifiedDate=@GetDate  where  PublishPortalLogId in (Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )

		End
	Else 
		Begin
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPreview(),ModifiedDate=@GetDate  where  PublishPortalLogId in 
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PREVIEW' )
			Update ZnodePublishPortalLog SET PublishStateId = DBO.Fn_GetPublishStateIdForPublish(),ModifiedDate=@GetDate  where  PublishPortalLogId in
			(Select VersionId from #Tbl_VersionEntity Where PublishType = 'PRODUCTION' )
			 
			Insert into ZnodePublishPreviewLogEntity
			(VersionId,PublishStartTime,IsDisposed,SourcePublishState,EntityId,EntityType,LogMessage,LogCreatedDate,PreviousVersionId,LocaleId,LocaleDisplayValue)
				Select A.VersionId,NULL,NULL,A.PublishType,@PortalId,'portal','portal has been published successfully' , @GetDate,  
				(select TOP 1 VersionId   from ZnodePublishWebStoreEntity where LocaleId = A.LocaleId AND PublishState = A.PublishType
				 and PortalId = @PortalId),A.LocaleId,B.Name
				from #Tbl_VersionEntity  A  Inner join ZnodeLocale B on A.LocaleId = B.LocaleId

			If @RevisionState = 'PREVIEW'
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPreview() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End 
			Else 
			Begin
				update ZnodeCMSContentPages SET  IsPublished = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where (PortalId = @PortalId OR @PortalId  =0 ) 
				update ZnodeCMSSEODEtail SET  IsPublish = 1 , PublishStateId  = DBO.Fn_GetPublishStateIdForPublish() where 
				(PortalId = @PortalId OR @PortalId  =0 )  AND CMSSEOTypeId = 3 
			End
			
			if (@IsContentType =1  OR (@IsContentType = 0 AND @IsFirstTimeContentPublish =0))
			Begin
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					Delete  From ZnodePublishContainerWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishBlogNewsEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalCustomCssEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetCategoryEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetProductEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetTitleEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetSliderBannerEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishTextWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishMediaWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSearchWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishContentPageConfigEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishSEOEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId) And CMSSEOTypeId in (3,5) 
					Delete  From ZnodePublishMessageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalGlobalAttributeEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishProductPageEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishWidgetBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					Delete  From ZnodePublishContainerWidgetEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

				End
			End
			Else 
			Begin
				
				If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId =6)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5) 

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContainerWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PRODUCTION' AND PortalId = @PortalId)
	

				End
				If (@RevisionState like '%Production%' OR @RevisionState = 'None')
				Begin
					Delete  From ZnodePublishWebStoreEntity           Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Delete  From ZnodePublishPortalBrandEntity Where  VersionId not in (Select VersionId from #Tbl_VersionEntity) AND PortalId = @PortalId 
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
				
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishBlogNewsEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalCustomCssEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					
					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetCategoryEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetProductEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetTitleEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetSliderBannerEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishTextWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMediaWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSearchWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContentPageConfigEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishSEOEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)
					And CMSSEOTypeId in (3,5)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishMessageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishPortalGlobalAttributeEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishProductPageEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishWidgetBrandEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

					Update BA SET BA.VersionId = OV.NewVersionId from 
					ZnodePublishContainerWidgetEntity BA Inner join #Tbl_OldVersionEntity  OV on BA.VersionId = Ov.OldVersionId  AND BA.PortalId =Ov.PortalId  
					AND VersionId NOT IN (select VersionId  from ZnodePublishWebStoreEntity where PublishState = 'PREVIEW' AND PortalId = @PortalId)

				End 
			End
		 SET @Status = 1
		End
	SELECT 1 AS ID,@Status AS Status;   

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   

	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishPortalEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
			
	INSERT INTO ZnodePublishPortalErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'ZnodePublishPortalEntity', @RevisionState + isnull(@ErrorMessage,'') , 'Fail' , @GetDate, 
	@UserId , Convert( varchar(100), @PreviewVersionId) + '/' + Convert( varchar(100), @ProductionVersionId) 

		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishPortalEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishSearchProfileEntity')
	DROP PROC Znode_PublishSearchProfileEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishSearchProfileEntity] 
(
	@SearchProfileId INT,
	@UserId INT
)
AS
BEGIN
	BEGIN TRY			
		SET NOCOUNT ON
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @SearchProfilePublishLogId INT, @ProfileName NVARCHAR(200);

		SELECT TOP 1 @ProfileName=ProfileName FROM ZnodeSearchProfile WHERE SearchProfileId=@SearchProfileId;

		IF NOT EXISTS 
		(SELECT TOP 1 1 FROM ZnodePimCatalog 
		WHERE PimCatalogId =(SELECT TOP 1 PublishCatalogId FROM ZnodePublishCatalogSearchProfile 
													WHERE SearchProfileId = @SearchProfileId
													)
							
		) AND @ProfileName<>'ZnodeSearchProfile'
		BEGIN
			SELECT CAST(0 AS BIT) Status 
		END
		ELSE
		BEGIN
			INSERT INTO ZnodeSearchProfilePublishLog
				(SearchProfileId,PublishstateId,PublishStartDate,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate) 
			SELECT @SearchProfileId, dbo.Fn_GetPublishStateIdForProcessing(),@GetDate,@UserId , @GetDate,@UserId , @GetDate

			SET @SearchProfilePublishLogId = @@IDENTITY

			SELECT a.SearchProfileId,A.SearchFeatureValue,B.FeatureCode,b.FeatureName,b.IsAdvanceFeature,B.HelpDescription  
			INTO #ZnodeSearchFeature
			FROM ZnodeSearchProfileFeatureMapping A 
			INNER JOIN ZnodeSearchFeature B ON A.SearchFeatureId = B.SearchFeatureId
			WHERE A.SearchProfileId = @SearchProfileId
				
			SELECT B.SearchProfileId,
				'['+(SELECT A.SearchFeatureValue,A.FeatureCode,A.FeatureName,A.IsAdvanceFeature
			From #ZnodeSearchFeature A
			WHERE A.SearchProfileId = b.SearchProfileId 
			For Json path, Without_Array_Wrapper)+']' as FeatureValueJson
			INTO #ZnodeSearchFeatureJson
			FROM #ZnodeSearchFeature B 
			GROUP BY B.SearchProfileId

			SELECT A.SearchProfileId,
				'['+(	SELECT B.AttributeCode, B.IsFacets,B.IsUseInSearch,B.BoostValue,B.IsNgramEnabled
						FROM ZnodeSearchProfileAttributeMapping B  
						WHERE A.SearchProfileId = B.SearchProfileId
						For Json Path, Without_Array_Wrapper)
				+']' as SearchProfileAttributeMappingJson
			INTO #ZnodeSearchProfileAttributeMappingJson 
			FROM ZnodeSearchProfileAttributeMapping A
			WHERE A.SearchProfileId = @SearchProfileId
			GROUP BY A.SearchProfileId

			SELECT A.SearchProfileId,
				'['+(	select B.FieldName, B.FieldValueFactor
						from ZnodeSearchProfileFieldValueFactor B  
						Where A.SearchProfileId = B.SearchProfileId
						For Json Path, Without_Array_Wrapper)
				+']' as FieldValueFactor
			INTO #ZnodeSearchProfileFieldValueFactor 
			FROM ZnodeSearchProfileFieldValueFactor A
			WHERE A.SearchProfileId = @SearchProfileId
			GROUP BY A.SearchProfileId

			SELECT @SearchProfilePublishLogId SearchProfilePublishLogId,  b.SearchProfileId,
				b.ProfileName,pc.PimCatalogId PublishCatalogId,ZSFJ.FeatureValueJson FeaturesList
				,c.QueryTypeName,b.SearchQueryTypeId  
				,c.QueryBuilderClassName,d.QueryTypeName SubQueryTypeName,vf.FieldValueFactor,
				b.Operator,ZSPAMJ.SearchProfileAttributeMappingJson SearchProfileAttributeMappingJson,
				@UserId CreatedBy, @GetDate CreatedDate,@UserId Modifiedby, @GetDate ModifiedDate
			INTO #ZnodeSearchProfile
			FROM  ZnodeSearchProfile B 
			LEFT JOIN dbo.ZnodePublishCatalogSearchProfile cc on cc.SearchProfileId=b.SearchProfileId
			LEFT JOIN dbo.ZnodePImCatalog pc on pc.PimCatalogId=cc.PublishCatalogId
			INNER JOIN ZnodeSearchQueryType C on b.SearchQueryTypeId=C.SearchQueryTypeId 
			--LEFT JOIN ZnodeSearchProfileFieldValueFactor ZSPF on ZSPF.SearchProfileId = b.SearchProfileId
			LEFT JOIN #ZnodeSearchFeatureJson ZSFJ on ZSFJ.SearchProfileId = b.SearchProfileId
			LEFT JOIN  #ZnodeSearchProfileAttributeMappingJson ZSPAMJ on  ZSPAMJ.SearchProfileId = b.SearchProfileId
			LEFT JOIN ZnodeSearchQueryType d on  d.SearchQueryTypeId =b.SearchSubQueryTypeId
			LEFT JOIN #ZnodeSearchProfileFieldValueFactor vf on vf.SearchProfileId =b.SearchProfileId
			WHERE b.SearchProfileId=@SearchProfileId

			IF EXISTS (SELECT TOP 1 1 FROM #ZnodeSearchProfile)
			BEGIN 
				INSERT INTO ZnodePublishSearchProfileEntity(
					SearchProfilePublishLogId,SearchProfileId,SearchProfileName,ZnodeCatalogId,FeaturesList,
					QueryTypeName,SearchQueryType,
					QueryBuilderClassName,SubQueryType,FieldValueFactor,Operator,SearchProfileAttributeMappingJson,
					CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
				SELECT SearchProfilePublishLogId,SearchProfileId,ProfileName,PublishCatalogId,FeaturesList,
					QueryTypeName,SearchQueryTypeId  ,
					QueryBuilderClassName,SubQueryTypeName,FieldValueFactor,Operator,SearchProfileAttributeMappingJson,
					CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
				FROM #ZnodeSearchProfile 
		
		     

				UPDATE ZnodeSearchProfilePublishLog
				SET PublishstateId = dbo.Fn_GetPublishStateIdForPublish()
				WHERE SearchProfilePublishLogId = @SearchProfilePublishLogId

				UPDATE ZnodeSearchProfile
				SET PublishStateId = dbo.Fn_GetPublishStateIdForPublish() 
				WHERE SearchProfileId = @SearchProfileId

				UPDATE ZnodePublishSearchProfileEntity 
				SET PublishstateId = dbo.Fn_GetPublishStateIdForPublish() 
				WHERE SearchProfileId = @SearchProfileId 

				DELETE
				FROM ZnodePublishSearchProfileEntity
				WHERE SearchProfilePublishLogId  < @SearchProfilePublishLogId AND SearchProfileId = @SearchProfileId
				SELECT CAST(1 AS BIT) Status
			END
			ELSE
			BEGIN
				UPDATE ZnodeSearchProfilePublishLog 
				SET PublishstateId = dbo.Fn_GetPublishStateIdForPublishFailed() 
				WHERE SearchProfilePublishLogId = @SearchProfilePublishLogId 

				SELECT CAST(0 AS BIT) Status 

				UPDATE ZnodeSearchProfile 
				SET PublishstateId = dbo.Fn_GetPublishStateIdForPublishFailed() 
				WHERE SearchProfileId = @SearchProfileId 
		
	     		UPDATE ZnodePublishSearchProfileEntity 
				SET PublishstateId = dbo.Fn_GetPublishStateIdForPublishFailed() 
				WHERE SearchProfileId = @SearchProfileId
			END
		END
	END TRY

	BEGIN CATCH
		UPDATE ZnodeSearchProfile 
		SET PublishstateId = dbo.Fn_GetPublishStateIdForPublishFailed() 
		WHERE SearchProfileId = @SearchProfileId 

		UPDATE ZnodeSearchProfilePublishLog 
		SET PublishstateId = dbo.Fn_GetPublishStateIdForPublishFailed() 
		WHERE SearchProfilePublishLogId = @SearchProfilePublishLogId AND SearchProfileId = @SearchProfileId
		
		UPDATE ZnodePublishSearchProfileEntity 
		SET PublishstateId = dbo.Fn_GetPublishStateIdForPublishFailed() 
		WHERE SearchProfileId = @SearchProfileId 

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishSearchProfileEntity @SearchProfileId = '+CAST(@SearchProfileId AS VARCHAR(10))+',@UserId='+CAST(@UserId AS VARCHAR(10));

		SELECT CAST(0 AS BIT) Status
		 
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_PublishSearchProfileEntity',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END



GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishSingleCategoryEntity')
	DROP PROC Znode_PublishSingleCategoryEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishSingleCategoryEntity]
(
    @PimCategoryId  int 
   ,@RevisionType   Varchar(30) = ''
   ,@UserId int = 0
   ,@IsAssociate int  = 0 OUT
   ,@PimCatalogId int = 0
)
AS
/*
	To publish single category 
	Unit Testing : 
	*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	Declare @Status Bit =0 
	Declare @Type varchar(50) = '',	@CMSSEOCode varchar(300),@DefaultLocaleId int = dbo.fn_getdefaultLocaleId()
	SET @Status = 1 
	Declare @IsPreviewEnable int 
	DECLARE @Tbl_versions  TABLE (RevisionState VARCHAr(300))

	INSERT INTO @Tbl_versions 
	SELECT 'PREVIEW'
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishStateApplicationTypeMapping with(nolock) WHERE ApplicationType = 'WebstorePreview' AND IsActive =1 AND IsEnabled = 1 )
	UNION ALL 
	SELECT 'PRODUCTION'
	WHERE @RevisionType = 'Production' OR  @RevisionType = 'None'

		
    SELECT AttributeCode , AttributeName , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(d.IsFacets,0) IsFacets
, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, b.LocaleId
INTO #temp_attributename 
FROM ZnodePimAttribute a with(nolock)
INNER JOIN ZnodePimAttributeLocale b with(nolock) ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId =@DefaultLocaleId)
INNER JOIN ZnodeAttributeType c with(nolock) ON (c.AttributeTypeId = a.AttributeTypeId)
LEFT JOIN ZnodePimFrontendProperties d with(nolock) ON (d.PimAttributeId = a.PimAttributeId ) 
WHERE  a.IsCategory =1



SELECT DISTINCT yu.VersionId,yu.LocaleId, yu.CatalogName, yu.ZnodeCatalogId, a.PimCategoryId ,RT.ParentPimCategoryHierarchyId, rt.DisplayOrder, rt.PimCategoryHierarchyId
, c.AttributeCode,b.CategoryValue AttributeValues,rt.ActivationDate, rt.ExpirationDate
		,RT.IsActive, a.PimCategoryAttributeValueId
INTO #Temp_Categoryvalue
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN  ZnodePimCategoryHierarchy  rt with(nolock) ON ( rt.PimCategoryId = a.PimCategoryId  )
INNER JOIN  ZnodePublishCatalogEntity yu with(nolock) ON (yu.ZnodeCatalogId = rt.PimCatalogId)
WHERE rt.PimCategoryId =@PimCategoryId
AND yu.RevisionType IN (SELECT t.RevisionState FROM @Tbl_versions t)



IF EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue r WHERE r.LocaleId <> @DefaultLocaleId)
BEGIN 
    UPDATE a 
	SET AttributeValues = b.CategoryValue
	FROM #Temp_Categoryvalue a 
	INNER JOIN ZnodePimCategoryAttributeValueLocale b ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = a.LocaleId)
	WHERE a.LocaleId <> @DefaultLocaleId

	INSERT INTO #temp_attributename
	SELECT AttributeCode , IIF(b.AttributeName IS NULL, a.AttributeName ,b.AttributeName) , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
		,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(a.IsFacets,0) IsFacets
		, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, t.LocaleId
	FROM #temp_attributename a
	CROSS APPLY ZnodePublishCatalogEntity t 
	LEFT JOIN ZnodePimAttributeLocale b ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

END 

UPDATE a SET a.AttributeValues = ZM.Path
FROM #Temp_Categoryvalue a
INNER  JOIN ZnodeMedia ZM ON (CAST(zm.MediaId AS VARCHAR(200)) = a.AttributeValues)
WHERE a.AttributeCode IN (SELECT n.AttributeCode FROM #temp_attributename n WHERE n.AttributeTypeName = 'Image' )


SELECT DISTINCT PimCategoryHierarchyId,LocaleId,ZnodeCatalogId, CatalogName,PimCategoryId
,ParentPimCategoryHierarchyId,DisplayOrder,VersionId,CAST('' AS NVARCHAr(300)) CategoryName,CAST('' AS NVARCHAr(100)) CategoryCode ,ActivationDate, ExpirationDate,IsActive
INTO #Temp_categoryDetails
FROM #Temp_Categoryvalue a 



UPDATE #Temp_categoryDetails
SET CategoryName = (SELECT TOP 1 ty.AttributeValues FROM #Temp_Categoryvalue ty 
WHERE ty.PimCategoryHierarchyId =#Temp_categoryDetails.PimCategoryHierarchyId AND ty.LocaleId = #Temp_categoryDetails.LocaleId
AND ty.AttributeCode ='CategoryName')
,CategoryCode = (SELECT TOP 1 ty.AttributeValues FROM #Temp_Categoryvalue ty 
WHERE ty.PimCategoryHierarchyId =#Temp_categoryDetails.PimCategoryHierarchyId AND ty.LocaleId = #Temp_categoryDetails.LocaleId
AND ty.AttributeCode ='CategoryCode')

-- SELECT * FROM #Temp_categoryDetails

UPDATE a
SET a.Name = t.CategoryName
,a.CategoryCode = t.CategoryCode
,a.Attributes = (SELECT   r.AttributeCode, AttributeValues,jk.AttributeName, jk.AttributeTypeName  ,jk.IsUseInSearch,jk.IsHtmlTags,jk.IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId = r.LocaleId AND jk.IsCategory = 1 )
					WHERE r.PimCategoryHierarchyId = t.PimCategoryHierarchyId AND r.LocaleId = t.LocaleId
					FOR JSON PATH ) 

,a.ZnodeParentCategoryIds  = '['+CAST(t.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
,a.ProductIds = '['+(SELECT  STRING_AGG(  CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM ZnodePimCategoryProduct ty with(nolock) WHERE ty.PimCategoryId = t.PimCategoryId  )+']' 
,a.DisplayOrder = t.DisplayOrder 
,a.IsActive = t.IsActive, a.ActivationDate = t.ActivationDate, a.ExpirationDate = t.ExpirationDate

FROM ZnodePublishCategoryEntity a with(nolock)
INNER JOIN #Temp_categoryDetails t ON (t.PimCategoryHierarchyId = a.ZnodeCategoryId AND t.VersionId = a.VersionId)

INSERT INTO ZnodePublishCategoryEntity (VersionId,ZnodeCategoryId,Name,CategoryCode,ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds
,ProductIds,LocaleId,IsActive,DisplayOrder,Attributes,ActivationDate,ExpirationDate,CategoryIndex,ElasticSearchEvent)

SELECT a.VersionId, a.PimCategoryHierarchyId, a.CategoryName, a.CategoryCode,@PimCatalogId,CatalogName,'['+CAST(a.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
	,'['+(SELECT  STRING_AGG(  CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM ZnodePimCategoryProduct ty with(nolock) WHERE ty.PimCategoryId  = a.PimCategoryId  )+']' 
	,a.LocaleId, a.IsActive,a.DisplayOrder,(SELECT  r.AttributeCode , AttributeName, AttributeValues, AttributeTypeName,IsUseInSearch,IsHtmlTags,IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId AND jk.IsCategory =1 )
					WHERE r.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND r.LocaleId = a.LocaleId	FOR JSON PATH ) , a.ActivationDate, a.ExpirationDate,1,1
FROM #Temp_categoryDetails a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryEntity Tot with(nolock) WHERE tot.VersionId = a.VersionId AND tot.ZnodeCategoryId = a.PimCategoryHierarchyId )

DELETE t FROM ZnodePublishSeoEntity t WHERE EXISTS (SELECT TOP 1 1 FROM #Temp_categoryDetails yu WHERE yu.CategoryCode  = t.SEOCode 
AND t.CMSSEOTypeId = 2 
)

INSERT INTO ZnodePublishSeoEntity(VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName,SEOTitle
,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL,RobotTag,ElasticSearchEvent) 

SELECT VersionId,@GetDate,a.SEOCode,a.CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,'Category' SEOTypeName,SEOTitle
,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,b.LocaleId,'' OldSEOURL,0 CMSContentPagesId,PortalId,SEOCode,CanonicalURL,RobotTag,1 ElasticSearchEvent
FROM ZnodeCMSSEODetail a 
INNER JOIN ZnodeCMSSEODetailLocale b ON (b.CMSSEODetailId = a.CMSSEODetailId)
INNER JOIN #Temp_categoryDetails c ON (c.CategoryCode = a.SEOCode )
WHERE a.CMSSEOTypeId =2 

     
	SELECT PimCategoryHierarchyId PublishCategoryId ,
			ZnodeCatalogId  PublishCatalogId  ,
           ''   CategoryXml       ,
              LocaleId          ,
			  VersionId		     
    FROM  #Temp_categoryDetails y 

	SELECT PortalId, y.ZnodeCatalogId PublishCatalogId, y.PimCategoryHierarchyId PublishCategoryId, y.CategoryCode, yu.SEOUrl,y. VersionId,y.LocaleId FROM ZnodePublishSeoEntity yu 
	INNER JOIN #Temp_categoryDetails y ON ( y.VersionId = yu.VersionId
	AND y.CategoryCode = yu.SEOCode)  
	
	SELECT 0 AS id,@Status AS Status;   


	UPDATE ZnodePimCategory 
	SET PublishStateId =  CASE WHEN @RevisionType= 'None' OR @RevisionType= 'Production'  THEN 3 ELSE 4 END 
	WHERE PimCategoryId =@PimCategoryId

END TRY 
BEGIN CATCH 
	SET @Status =0  
	
	 SELECT 1 AS ID,@Status AS Status;   
	 SELECT ERROR_MESSAGE()
	-- Rollback transaction
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishSingleCategoryEntity
		@PimCategoryId = '+CAST(@PimCategoryId  AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@RevisionType='+CAST(@RevisionType AS VARCHAR(10))
			
	INSERT INTO ZnodePublishSingleCategoryErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'PublishSingleCategoryEntity', '' + isnull(@ErrorMessage,'') , 'Fail' , @GetDate, 
	@UserId ,''


	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishSingleCategoryEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishSingleProductEntity')
	DROP PROC Znode_PublishSingleProductEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishSingleProductEntity]
(
    @PimProductId TransferId READONLY
   ,@RevisionType   Varchar(30) = ''
   ,@UserId int = 0
   ,@IsAutoPublish bit = 0 
   ,@ImportGUID Varchar(500) = '' 
)
AS
/*
	To publish all catalog product and their details
	Unit Testing : 
	*/
BEGIN
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	Declare @Status Bit =0 
	DECLARE @PimProductIdIn INT , @PimCatalogId INT 

	SET @ImportGUID = CASE WHEN @ImportGUID = '' THEN CAST( NEWID() AS VARCHAR(200)) ELSE @ImportGUID END 

	DECLARE @PimCatalogProduct TABLE (PimProductId INT , IsDeleted BIT,  ZnodecatalogId INT  , VersionId INT )

	IF EXISTS (SELECT TOP 1 1 FROM ZnodePimCategoryProduct a 
	INNER JOIN ZnodePimCategoryHierarchy b ON (b.PimCategoryId = a.PimCategoryId)
	INNER JOIN ZnodePublishCatalogEntity y ON (y.ZnodeCatalogId = b.PimCatalogId)
	WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId t WHERE t.Id = a.PimProductId)
	)
	-- AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogLog nt WHERE nt.PublishStateId = 6 )
	-- AND NOT EXISTS (SELECT TOP  1 1 FROM ZnodePublishProgressNotifierEntity )
	BEGIN 



	DECLARE Cur_CatalogProduct CURSOR FOR 
	SELECT DISTINCT PimProductId, b.PimCatalogId
	FROM ZnodePimCategoryProduct a 
	INNER JOIN ZnodePimCategoryHierarchy b ON (b.PimCategoryId = a.PimCategoryId)
	WHERE EXISTS (SELECT TOP 1 1 FROM @PimProductId t WHERE t.Id = a.PimProductId)
	OPEN Cur_CatalogProduct 

	FETCH NEXT FROM Cur_CatalogProduct INTO @PimProductIdIn,@PimCatalogId

	WHILE @@FETCH_STATUS=0 
	BEGIN 

	

	INSERT INTO @PimCatalogProduct 
	EXEC Znode_PublishCatalogEntity @PimCatalogId= @PimCatalogId
									,@RevisionState =@RevisionType
									,@UserId =@UserId
									,@NewGUID = @ImportGUID
									,@IsDraftProductsOnly = 0 
									,@PimProductId =@PimProductIdIn
									,@PimCategoryHierarchyId = 0 



	FETCH NEXT FROM Cur_CatalogProduct INTO @PimProductIdIn,@PimCatalogId
	END 
	CLOSE Cur_CatalogProduct
	DEALLOCATE Cur_CatalogProduct 

	   	  
	SET @Status =1 

	END 
	ELSE 
	BEGIN 


	SET @Status = 0 
	END 


	SELECT * 
	FROM ZnodePublishProductEntity a with (nolock)
	WHERE EXISTS (SELECT TOP 1 1 FROM @PimCatalogProduct r WHERE r.VersionId = a.VersionId AND r.PimProductId = a.ZnodeProductId AND r.IsDeleted = 0)

	SELECT PimProductId ZnodeProductId , IsDeleted ,  ZnodecatalogId   , VersionId 
	FROM @PimCatalogProduct 
	WHERE IsDeleted =1 

		UPDATE ZnodePimProduct 
	SET PublishStateId =  CASE WHEN @RevisionType= 'None' OR @RevisionType= 'Production'  THEN 3 ELSE 4 END 
	WHERE PublishStateId IN (1,2)
	AND PimProductId IN ( SELECT PimProductId FROM  @PimCatalogProduct ) 



	UPDATE ZnodePublishCatalogLog 
	SET PublishStateId = CASE WHEN @RevisionType= 'None' OR @RevisionType= 'Production'  THEN 3 ELSE 4 END 
	, IsCatalogPublished = 1 
	WHERE PublishType= 'Product'
	
	UPDATE ZnodePublishProgressNotifierEntity 
	SET IsCompleted = 1 ,ProgressMark = 100 
	WHERE JobId = @ImportGUID

	SELECT 0 AS id,@Status AS Status;   

	DELETE FROM ZnodePublishProgressNotifierEntity  	WHERE JobId = @ImportGUID

END TRY 
BEGIN CATCH 
	SET @Status =0  
	 SELECT 1 AS ID,@Status AS Status;   
	 SELECT ERROR_MESSAGE()
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishSingleProductEntity
		@PimProductIds = '',@UserId='+CAST(@UserId AS VARCHAR(50))+',@RevisionType='+CAST(@RevisionType AS VARCHAR(10))
			
	INSERT INTO ZnodePublishSingleProductErrorLogEntity
	(EntityName,ErrorDescription,ProcessStatus,CreatedDate,CreatedBy,VersionId)
	SELECT 'PublishSingleProductEntity', '' + isnull(@ErrorMessage,'') , 'Fail' , @GetDate, 
	@UserId ,''


	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishSingleProductEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PurgeData')
	DROP PROC Znode_PurgeData
GO

CREATE PROCEDURE [dbo].[Znode_PurgeData] 
(
 
  @DeleteAllProduct    							BIT = 0 -- This flag 1 will delete all product except ids in @ExceptProductId  table 
 ,@DeleteAllCategory							BIT = 0 -- This flag 1 will delete all category except ids in @ExceptCategoryId  table 
 ,@DeleteAllCatalog								BIT = 0 -- This flag 1 will delete all catalog except ids in @ExceptCatalogId  table 
 ,@DeleteAllSaveCart							Bit = 0	-- This flag 1 will delete all save carts of users.  
 ,@DeleteAllOrder								BIT = 0	-- This flag 1 will delete all orders. 
 ,@DeleteAllAccount								BIT = 0 -- This flag 1 will delete all Account. 
 ,@DeleteAllUser								BIT = 0 -- This flag 1 will delete all user. 
 ,@DeleteAllStore 								BIT = 0 -- This flag 1 will delete all store. 
 ,@DeleteAllGlobalAttribute  					BIT = 0 -- This flag 1 will delete all Global Attribute. 
 ,@DeleteAllProductCategoryAttribute			BIT = 0 -- This flag 1 will delete all Pim Attribute. 
 ,@DeleteAllMedia								BIT = 0 -- This flag 1 will delete all media. 
 ,@DeleteAllWarehouse							BIT = 0 -- This flag 1 will delete all warhouse. 
 ,@DeleteAllPricelist							BIT = 0 -- This flag 1 will delete all price list. 
 ,@DeleteAllProfile								BIT = 0 -- This flag 1 will delete all Profiles. 
 ,@DeleteAllSiteSearchData						BIT = 0	-- This flag 1 will delete all data related to search. 
 ,@DeleteAllCMSData								BIT = 0 -- This flag 1 will delete all CMS data. 
 ,@DeleteAllBrand								BIT = 0 -- This flag 1 will delete all brand. 
 ,@DeleteAllVendor								BIT = 0 -- This flag 1 will delete all vendor. 
 ,@DeleteAllCmsSeoDetails						BIT = 0 -- This flag 1 will delete all Seo details .   
 ,@ResetDomainData								BIT = 0 -- This flag 1 will delete and rest all domain. 
 ,@ExceptProductId								TransferId Readonly
 ,@ExceptCategoryId								TransferId Readonly
 ,@ExceptCatalogId								TransferId Readonly
 ,@ExceptAccountId								TransferId Readonly
 ,@ExceptUserId 								TransferId Readonly
 ,@ExceptStoreId 								TransferId Readonly 
 ,@ExceptGlobalAttributeId 						TransferId Readonly
 ,@ExceptProductCategoryAttributeId 		    TransferId Readonly
 ,@ExceptMediaId								TransferId Readonly
 ,@ExceptWarehouseId							TransferId ReadOnly 
 ,@ExceptPricelistId							TransferId ReadOnly 
 ,@ExceptProfileId								TransferId ReadOnly
 ,@ExceptSeoType								VARCHAR(2000) = ''
 ,@ResetIdentity								BIT = 0    -- Reset identity 
 ,@DeleteAllData								BIT = 0 	
 ,@DeleteAllShippingMethods						BIT = 0 
 ,@DeleteAllPaymentMethods						BIT = 0 
 ,@DeleteAllTaxes								BIT = 0 
 ,@DeleteAllPublishedData BIT = 0
)
AS 
BEGIN 
SET NOCOUNT ON 
 	 BEGIN TRY
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	    DECLARE @StatusOut Table (Id INT ,Message NVARCHAR(max), Status BIT )
		DECLARE @DeletedIds TransferId 
		DECLARE @PortalId INT , @CMSThemeId INT , @CMSThemeCSSId INT,@PublishCatalogId INT
		,@PimCatalogId INT  

		----Delete all published data
		IF @DeleteAllPublishedData = 1 OR @DeleteAllData =1 
		BEGIN	

			EXECUTE [Znode_DeleteAllPublishedData] @UserId = 2

		END

		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  Object_Id('elmah_error')	 <> 0 
		BEGIN 
			 TRUNCATE TABLE elmah_error
			 DELETE FROM ZnodeImportLog
			 DELETE FROM ZnodeImportProcesslog
			 DELETE FROM ZnodeActivityLog	
             DELETE FROM ZnodePasswordLog	
             DELETE FROM ZnodeProceduresErrorLog
		END 
	
		DECLARE @DeleteId  NVARCHAR(max)= '', @StoreData NVARCHAR(max),@RunTime INT =1 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllVendor = 1   OR @DeleteAllData =1 
			BEGIN 
			 	INSERT INTO @DeletedIds 
				SELECT PimVendorId 
				FROM ZnodePimVendor ZP 
							
				INSERT INTO @StatusOut(id ,Status) 
				EXEC [dbo].[Znode_DeleteVendor] @PimVendorIds = @DeletedIds ,@Status = 0  
			    
				DELETE FROM ZnodePimProductAttributeDefaultValue WHERE PimAttributeValueId IN (
				SELECT PimAttributeValueId  
				FROM ZnodePimAttributeValue WHERE PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode= 'Vendor') )
				
				DELETE FROM ZnodePimAttributeValue WHERE PimAttributeId = (SELECT PimAttributeId FROM ZnodePimAttribute WHERE AttributeCode= 'Vendor') 

				DELETE FROM ZnodePimAttributeDefaultValueLocale  WHERE PimAttributeDefaultValueId IN (
				SELECT PimAttributeDefaultValueId FROM ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode IN (SELECT VendorCode FROM ZnodePimVendor ))
				
				DELETE FROM  ZnodePimAttributeDefaultValue WHERE AttributeDefaultValueCode IN (SELECT VendorCode FROM ZnodePimVendor )

			    PRINT '<-- Vendor Data Deleted Sucessfully-->'
				
			END
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllBrand = 1  OR @DeleteAllData =1 
			BEGIN 
			   INSERT INTO @DeletedIds 
			   SELECT BrandId
			   FROM ZnodeBrandDetails a
			   INSERT INTO @StatusOut (Id ,Status) 
			   EXEC [dbo].[Znode_DeleteBrand] @BrandIds = @DeletedIds, @Status = 0   
			 IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Brand Data Deleted Sucessfully-->'
			   END
			   ELSE 
				BEGIN 
				PRINT '<-- Brand Data Not Deleted Properly -->' 
				END  
		    END 
				
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllProduct = 1  OR @DeleteAllData =1 
		BEGIN 
		   	 INSERT INTO @DeletedIds 
		     SELECT PimProductId 
			 FROM ZnodePimProduct ZPP 
			 WHERE NOT EXISTS (SELECT TOP 1 1 FROM @ExceptProductId WHERE id = ZPP.PimProductId) 
			  INSERT INTO @StatusOut (Id ,Status) 
			  EXEC [dbo].[Znode_DeletePimProducts] @PimProductIds=@DeletedIds , @Status = 0   
			
			SELECT PimAddonGroupId,PimProductId,PimAddOnProductId  
			INTO #Temp_Addon 
			FROM ZnodePimAddOnProduct ZPP
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM @ExceptProductId WHERE id = ZPP.PimProductId)

			DELETE FROM ZnodePimAddOnProductDetail WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddOnProductId  = ZnodePimAddOnProductDetail.PimAddOnProductId )
			
			DELETE FROM  ZnodePimAddOnProduct  WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddOnProductId  = ZnodePimAddOnProduct.PimAddOnProductId )
			
			DELETE FROM ZnodePimAddonGroupLocale WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroupLocale.PimAddonGroupId )
			DELETE FROM ZnodePimAddonGroupProduct 	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroupProduct.PimAddonGroupId )
			DELETE FROM ZnodePimAddonGroup 	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Addon t 
							 WHERE t.PimAddonGroupId  = ZnodePimAddonGroup.PimAddonGroupId )
			IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Product Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Product Data Not Deleted Properly -->' 
				END  
			  
	    END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllCategory = 1 	  OR @DeleteAllData =1 
		BEGIN   
		   		INSERT INTO @DeletedIds 
				SELECT  PimCategoryId 
				FROM ZnodePimCategory ZPC
				WHERE NOT EXISTS  (SELECT TOP 1 1 FROM @ExceptCategoryId WHERE id =ZPC.PimCategoryId )
				--Remove extra products from catalog
				--INSERT INTO @StatusOut (Id ,Status) 

				EXEC Znode_DeletePimCategory @PimCategoryId = @DeletedIds, @Status = 1;
			
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Category Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Category Data Not Deleted Properly -->' 
				END     
		  END
		  DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		  IF  @DeleteAllCatalog = 1 	OR @DeleteAllData =1 
		   BEGIN
		   	 INSERT INTO @DeletedIds 
		   	 SELECT PimCatalogId 
			 FROM ZnodePimCatalog ZP 
			 WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptCatalogId WHERE id = ZP.PimCatalogId)
		   	 INSERT INTO @StatusOut (Id ,Message,Status) 
			 EXEC [dbo].[Znode_DeletePimCatalog] @PimCatalogId = @DeletedIds ,@IsForceFullyDelete = 1  
		      

			 IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Catalog Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Catalog Data Not Deleted Properly -->' 
				END  
           END
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllOrder = 1 	OR @DeleteAllData =1 
		   BEGIN

				--Delete return data against order
				DELETE FROM ZnodeRmaRequestItem
				DELETE FROM ZnodeRmaRequest
				DELETE FROM ZnodeRmaReturnNotes
				DELETE FROM ZnodeRmaReturnEmailHistory
				DELETE FROM ZnodeRmaReturnHistory
				DELETE FROM ZnodeRmaReturnPaymentRefund
				DELETE FROM ZnodeRmaReturnPaymentDetails
				DELETE FROM ZnodeRmaReturnLineItems
				DELETE FROM ZnodeRmaReturnDetails

				 INSERT INTO @DeletedIds 
		   		 SELECT OmsOrderID 
				 FROM ZnodeOmsOrder  ZP 
				 INSERT INTO @StatusOut (Id ,Status) 
			     EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0  
		    
		        IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Order Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Order Data Not Deleted Properly -->' 
				END  
		  END
		
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut
		   IF  @DeleteAllSaveCart = 1  OR @DeleteAllData =1 
		   BEGIN
		      DELETE FROM ZnodeOmsPersonalizeCartItem
			  DELETE FROM ZnodeOmsSavedCartLineItem 
			  DELETE FROM ZnodeOmsSavedCart
			  DELETE FROM ZnodeOmsCookieMapping
			  DELETE FROM ZnodeOmsQuotePersonalizeItem 
			  DELETE FROM ZnodeOmsQuoteLineItem
			  DELETE FROM ZnodeOmsQuote
			  DELETE FROM ZnodeOmsTemplateLineItem 
			  DELETE FROM ZnodeOmsTemplate
			 
		      PRINT '<-- Save Cart & Quote Data Deleted Sucessfully -->'
			  
		   END
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllUser = 1 OR @DeleteAllData =1 
		   BEGIN  
		  
			   INSERT INTO @DeletedIds 
			   SELECT UserId
			   FROM ZnodeUser ZU 
			   WHERE NOT EXISTS (SELECT TOP 1  1 FROM @ExceptUserId RT WHERE RT.Id = ZU.UserId) 
			 --  INSERT INTO @StatusOut (Id ,Status) 
			   EXEC Znode_DeleteUserDetails @UserIds =@DeletedIds ,@Status = 0 , @IsForceFullyDelete =1 

			DELETE FROM AspNetUsers  WHERE NOT EXISTS (SELECT TOP 1 1 FROM AspNetZnodeUser rt WHERE rt.AspNetZnodeUserId = AspNetUsers.UserName )

		     	PRINT '<-- User Data Deleted Sucessfully-->'
			  
		   END
	    DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllAccount = 1 	OR @DeleteAllData =1 
		  BEGIN    
				 INSERT INTO @DeletedIds 
				  SELECT AccountId
			      FROM ZnodeAccount ZU 
			      WHERE NOT EXISTS (SELECT TOP 1  1 FROM @ExceptAccountId RT WHERE RT.Id = ZU.AccountiD) 
			    -- INSERT INTO @StatusOut (Id ,Status) 
				  EXEC Znode_DeleteAccount @AccountIds =  @DeletedIds,@Status= 0,@IsForceFullyDelete =1  
				 
		     	PRINT '<-- Accouts Data Deleted Sucessfully-->'
			    
		  END
		 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		 IF  @DeleteAllGlobalAttribute = 1 	 OR @DeleteAllData =1 
		   BEGIN 
		   	INSERT INTO @DeletedIds 
			SELECT GlobalAttributeId 
			FROM ZnodeGlobalAttribute ZP 
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptGlobalAttributeId a WHERE a.Id = ZP.GlobalAttributeId)
			AND ISNULL(ZP.IsSystemDefined,0) <> 1
			--INSERT INTO @StatusOut (Id ,Status) 	   
			EXEC [dbo].[Znode_DeleteGlobalAttribute] @GlobalAttributeIds= @DeletedIds,@Status =0 , 	@IsForceFullyDelete= 1    
			
			DELETE FROM ZnodeGlobalFamilyGroupMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1 )
			DELETE FROM ZnodeGlobalAttributeGroupLocale	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1 )
			DELETE FROM ZnodeGlobalAttributeGroupMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeGlobalGroupEntityMapper WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeFormBuilderAttributeMapper	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)
			DELETE FROM ZnodeGlobalAttributeGroup	WHERE GlobalAttributeGroupId IN  (SELECT GlobalAttributeGroupId  FROM ZnodeGlobalAttributeGroup WHERE IsSystemDefined <> 1)  

			   IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Global Attribute Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Global Attribute Not Deleted Properly -->' 
				END 	   
		   END  
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		   IF  @DeleteAllProductCategoryAttribute = 1  OR @DeleteAllData =1 
		   BEGIN 
			   	INSERT INTO @DeletedIds 
				SELECT PimAttributeId
				FROM ZnodePimAttribute ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptProductCategoryAttributeId WHERE id = ZP.PimAttributeId )
				AND ZP.IsSystemDefined <> 1 
				INSERT INTO @StatusOut (Id ,Status) 			
				EXEC Znode_DeletePimAttributeWithReference @PimAttributeIds = @DeletedIds  , @Status = 1  
			  
			    DELETE FROM ZnodePimAttributeGroupLocale 
					WHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimAttributeGroupMapper wHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimFamilyGroupMapper 
					WHERE PimAttributeGroupId IN (SELECT PimAttributeGroupId FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimAttributeGroup WHERE IsSystemDefined <> 1  
			
				DELETE FROM ZnodePimFamilyLocale WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimProduct  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimCategory  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimCategoryAttributeValue  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimAttributeValue  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )

				DELETE FROM ZnodeImportTemplateMapping WHERE ImportTemplateId IN (SELECT ImportTemplateId FROM ZnodeImportTemplate WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  ))
				DELETE FROM ZnodeImportTemplate WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )
				DELETE FROM ZnodePimFamilyGroupMapper 
					WHERE PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  )

				DELETE  FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1 
				UPDATE ZP SET PimAttributeFamilyId = dbo.Fn_GetDefaultPimProductFamilyId() FROM ZnodePimAttributeValue  ZP  WHERE  PimAttributeFamilyId IN (SELECT PimAttributeFamilyId FROM ZnodePimAttributeFamily WHERE IsSystemDefined <> 1  ) 
			   	IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- PIM Attribute Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- PIM Attribute Not Deleted Properly -->' 
				END 
		   END
		   DELETE FROM @DeletedIds 
		   DELETE FROM @StatusOut 
		   IF  @DeleteAllMedia = 1  OR @DeleteAllData =1 
		   BEGIN 
		  		INSERT INTO @DeletedIds 
		   		SELECT  MediaId   
				FROM ZnodeMedia ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptMediaId WHERE id = ZP.Mediaid )
				--INSERT INTO @StatusOut (Id ,Message,Status)
				EXEC Znode_DeleteMedia @MediaIds = @DeletedIds  , @Status = 1  ,@IsCallInternal =1 
				DELETE FROM ZnodeMediaCategory WHERE MediaPathId IN (SELECT MediaPathId FROM ZnodeMediaPath WHERE PathCode<>'Root')
				DELETE FROM ZnodeMediaPathLocale WHERE MediaPathId IN (SELECT MediaPathId FROM ZnodeMediaPath WHERE PathCode<>'Root')
				DELETE FROM ZnodeMediaPath WHERE PathCode<>'Root'
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Media Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Media Not Deleted Properly -->' 
				END
				
		   END 
		   DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		
		   IF  @DeleteAllWarehouse = 1 OR @DeleteAllData =1 
		   BEGIN 
		   	
		   		SET @DeleteId =  SUBSTRING((
				SELECT  ',' + CONVERT(NVARCHAR(500), WarehouseId)  
				FROM ZnodeWarehouse ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptWarehouseId WHERE id = ZP.WarehouseId )
				FOR XML PATH ('')
				),2,4000) 
				INSERT INTO @StatusOut (Id ,Status)
			    EXEC Znode_DeleteWarehouse @WarehouseId = @DeleteId  , @Status = 1 
		
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Warehouse Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Warehouse Not Deleted Properly -->' 
				END
		    END 
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		
			IF  @DeleteAllPricelist = 1   OR @DeleteAllData =1 
		    BEGIN 
				SET @DeleteId =  SUBSTRING((
				SELECT ',' + CONVERT(NVARCHAR(500), PriceListId)  
				FROM ZnodePriceList ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptPricelistId WHERE id = ZP.PriceListId )
				FOR XML PATH ('')
				),2,4000) 
			  
				INSERT INTO @StatusOut (Id ,Status)  
				EXEC Znode_DeletePriceList @PriceListId = @DeleteId  , @Status = 1 
		      
			   IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Price List Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Price List Not Deleted Properly -->' 
				END
		    END
		
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllProfile = 1  OR @DeleteAllData =1 
			 BEGIN 
				SET @DeleteId =  SUBSTRING((
				SELECT ',' + CONVERT(NVARCHAR(500), ProfileId)  
				FROM ZnodeProfile ZP 
				WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptProfileId WHERE id = ZP.ProfileId )
				FOR XML PATH ('')
				),2,4000) 
		   	 	--INSERT INTO @StatusOut (Id ,Status)
				EXEC  Znode_DeleteProfile  @ProfileId=@DeleteId, @Status = 0 ,	@IsForceFullyDelete =1 
				
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Profile Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Profile Not Deleted Properly -->' 
				END
		    END
			DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			IF  @DeleteAllSiteSearchData  = 1  OR @DeleteAllData =1 
			BEGIN 
			
					DELETE FROM ZnodeSearchIndexServerStatus
					DELETE FROM ZnodeSearchIndexMonitor
					DELETE FROM ZnodeCatalogIndex
					DELETE FROM ZnodePublishCatalogSearchProfile
					DELETE FROM ZnodeCatalogIndex
					DELETE FROM ZnodeCMSCustomerReview 
					DELETE FROM ZnodePublishPortalLog
					DELETE FROM ZnodeListViewFilter
					DELETE FROM ZnodeListView
			
					PRINT '<-- Site Search Data Deleted Sucessfully-->'
			 END
			 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @DeleteAllCMSData = 1 	OR @DeleteAllData =1 
			 BEGIN 
				IF EXISTS (SELECT TOP 1 1  FROM SYS.Tables WHERE name = '_ZnodeCMSPortalTheme' )
				BEGIN
				 DROP TABLE _ZnodeCMSPortalTheme 
				END 
				SELECT * 
				INTO _ZnodeCMSPortalTheme
				FROM ZnodeCMSPortalTheme
				DELETE FROM ZnodeCMSContentPagesProfile 
				DELETE FROM ZnodeFormWidgetEmailConfiguration
				DELETE FROM ZnodeCMSWidgetTitleConfigurationLocale
				DELETE FROM ZnodeCMSWidgetTitleConfiguration
				DELETE FROM ZnodeCMSTextWidgetConfiguration
				DELETE FROM ZnodeCMSFormWidgetConfiguration
				DELETE FROM ZnodeCMSPortalProductPage
				DELETE FROM ZnodeCMSContentPageGroupMapping
				DELETE FROM ZnodeCMSContentPageGroupLocale
				DELETE FROM ZnodeCMSContentPageGroup
				DELETE FROM ZnodeCMSContentPagesLocale
				DELETE FROM ZnodeCMSContentPages
				DELETE FROM ZnodeCMSContentPagesProfile
				DELETE FROM ZnodeCMSPortalTheme  
			    DELETE FROM ZnodeCMSThemeCSS 
				DELETE FROM ZnodeCMSTheme  
				DELETE FROM ZnodeEmailTemplateMapper
				DELETE FROM ZnodeEmailTemplateLocale
				DELETE FROM ZnodeEmailTemplateAreas
				DELETE FROM ZnodeEmailTemplate
			    DELETE FROM ZnodeCMSWidgetSliderBanner
				DELETE FROM ZnodeCMSSliderBannerLocale
				DELETE FROM ZnodeCMSSliderBanner
				DELETE FROM ZnodeCMSSlider
				DELETE FROM ZnodeCmsPortalMessage
				DELETE FROM ZnodeCMSPortalMessageKeyTag
				DELETE FROM ZnodeCMSMessage 
				DELETE FROM ZnodeCMSMessageKey 
				DELETE FROM ZnodeCMSTemplate
				DELETE FROM ZnodeFormBuilderGlobalAttributeValueLocale 
				DELETE FROM ZnodeFormBuilderGlobalAttributeValue
				DELETE FROM ZnodeFormBuilderAttributeMapper 
				DELETE FROM ZnodeFormBuilderSubmit 
				DELETE FROM ZnodeFormBuilder

				IF NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSTheme)
				BEGIN 
			   INSERT INTO ZnodeCMSTheme(Name
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,IsParentTheme
			,ParentThemeId)
			SELECT 'Default',2,@GetDate,2,@GetDate,1,NULL
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTheme WHERE Name = 'Default')

			SET @CMSThemeId = CASE WHEN @CMSThemeId	 IS NULL THEN (SELECT TOP 1 CMSThemeId FROM ZnodeCMSTheme WHERE Name = 'Default'   )  ELSE  @CMSThemeId END 
			INSERT INTO ZnodeCMSThemeCSS  (CMSThemeId
			,CSSName
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @CMSThemeId,'DefaultCSS',2,@GetDate,2,@GetDate
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS')
	  	
			SET @CMSThemeCSSId = CASE WHEN @CMSThemeCSSId IS NULL THEN (SELECT TOP 1 CMSThemeCSSId FROM ZnodeCMSThemeCSS 
			WHERE CSSName = 'DefaultCSS'
			) ELSE 	@CMSThemeCSSId END 

			 INSERT INTO ZnodeCMSPortalTheme (PortalId
					,CMSThemeId
					,CMSThemeCSSId
					,MediaId
					,FavIconId
					,WebsiteTitle
					,CreatedBy
					,CreatedDate
					,ModifiedBy
					,ModifiedDate)
			 SELECT DISTINCT PortalId
					,@CMSThemeId
					,@CMSThemeCSSId
					,MediaId
					,FavIconId
					,WebsiteTitle
					,2
					,@GetDate
					,2
					,@GetDate 
			 FROM _ZnodeCMSPortalTheme	TYU 
			 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSPortalTheme TY  WHERE TY.PortalId = TYU.PortalId AND TY.CMSThemeId = @CMSThemeId AND TY.CMSThemeCSSId = @CMSThemeCSSId)
			 
			 END 

			 PRINT '<-- CMS Data Deleted Sucessfully-->'	  			   
			 IF  NOT EXISTS (SELECT TOP 1 1  FROM ZnodeCMSContentPageGroup )
			 BEGIN 
			    DECLARE @GroupId INT =0 
				INSERT INTO ZnodeCMSContentPageGroup (ParentCMSContentPageGroupId ,Code,CreatedBy,CreatedDate,ModIFiedBy,ModIFiedDate)
				SELECT NULL,'Root',2,@GetDate,2,@GetDate
			    SET @GroupId = SCOPE_IDENTITY()
				INSERT INTO ZnodeCMSContentPageGroupLocale(CMSContentPageGroupId,Name,LocaleId,CreatedBy,CreatedDate,ModIFiedBy,ModIFiedDate)
			    SELECT @GroupId,'Root',1,2,@GetDate,2,@GetDate
			 END
			 END 
	 		 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @DeleteAllCmsSeoDetails =1 OR @DeleteAllData =1 
			 BEGIN 
			 
			   DELETE FROM ZnodeCMSSEODetailLocale 
			   WHERE CMSSEODetailId IN (SELECT CMSSEODetailId FROM ZnodeCMSSEODetail a 
			   INNER JOIN ZnodeCMSSEOType b ON (b.CMSSEOTypeId = a.CMSSEOTypeId)
			   WHERE NOT EXISTS (SELECT TOP 1 1 FROM dbo.split(@ExceptSeoType,',') t WHERE t.Item = b.Name))
			  
			   DELETE FROM ZnodeCMSSEODetail 
			   WHERE CMSSEODetailId IN (SELECT CMSSEODetailId FROM ZnodeCMSSEODetail a 
			   INNER JOIN ZnodeCMSSEOType b ON (b.CMSSEOTypeId = a.CMSSEOTypeId)
			   WHERE NOT EXISTS (SELECT TOP 1 1 FROM dbo.split(@ExceptSeoType,',') t WHERE t.Item = b.Name))
			   PRINT '<-- SEO Data Deleted Sucessfully-->'
			END 
			
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF  @DeleteAllStore = 1   OR @DeleteAllData =1 
		   BEGIN 
		   DECLARE @TBL_PortalIds TABLE	 ( PortalId int	);
		   DECLARE @TBL_Promotion TABLE ( PromotionId int	);
		  	IF NOT EXISTS (SELECT TOP 1 1 FROM sys.tables WHERE Name = '_ZnodeDomain')
			BEGIN
				   CREATE TABLE  _ZnodeDomain (PortalId INT  ,DomainName NVARCHAR(max),IsActive BIT ,ApplicationType NVARCHAR(max),CreatedBy INT
		   ,CreatedDate DATETIME ,ModifiedBy INT ,ModIFiedDate DATETIME )
			END 


		   INSERT INTO _ZnodeDomain ( PortalId,DomainName ,IsActive  ,ApplicationType ,CreatedBy,CreatedDate ,ModIFiedBy ,ModIFiedDate) 
		   SELECT PortalId,DomainName ,IsActive  ,ApplicationType ,CreatedBy,CreatedDate ,ModIFiedBy ,ModIFiedDate
		   FROM ZnodeDomain 
		   DECLARE @TBL_DeletedUsers TABLE (AspNetUserId NVARCHAR(1000))

		       SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), PromotionId)  
					FROM ZnodePromotion  SP
					WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptStoreId WHERE id = SP.PortalId )
					for XML Path ('')),2,4000) 
			   
			   

		-- inserting PortalIds which are not present in Order and Quote
		   INSERT INTO @TBL_PortalIds 
		   SELECT PortalId FROM ZnodePortal AS SP
		   WHERE NOT EXISTS (SELECT TOP 1 1  FROM @ExceptStoreId WHERE id = SP.PortalId );

		  	INSERT INTO @StatusOut (Id ,Status)
				EXEC Znode_DeletePromotion  @PromotionId = @DeleteId ,@Status = 1;

		
				IF  EXISTS (SELECT TOP 1 1  FROM @StatusOut WHERE Status = 1 )
				BEGIN 
		     	PRINT '<-- Store Promotion Data Deleted Sucessfully-->'
			    END
			    ELSE 
				BEGIN 
				PRINT '<-- Store Promotion Data Not Deleted Properly -->' 
				END	

-------------------------------------------------

			   DELETE FROM ZnodeGiftCardHistory	
                 WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B	
                               WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS a	
                                                              WHERE a.PortalId = B.PortalId	) AND ZnodeGiftCardHistory.GiftCardId = B.GiftCardId );
	
	
                    DELETE FROM ZnodeRmaRequestItem	
                    WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B WHERE EXISTS ( SELECT TOP 1 1	FROM @TBL_PortalIds AS a  WHERE a.PortalId = B.PortalId	
                              ) AND ZnodeRmaRequestItem.GiftCardId = B.GiftCardId );
	
	
                DELETE FROM ZnodeGiftCardLocale
                    WHERE EXISTS( SELECT *  FROM ZnodeGiftCard B	
                                            WHERE EXISTS ( SELECT TOP 1 1	FROM @TBL_PortalIds AS a	
                                             WHERE a.PortalId = B.PortalId	  ) AND ZnodeGiftCardLocale.GiftCardId = B.GiftCardId );
	
                    	
                    DELETE FROM ZnodeGiftCard	
                    WHERE EXISTS ( SELECT TOP 1 1	
                        FROM @TBL_PortalIds AS a	
                        WHERE a.PortalId = ZnodeGiftCard.PortalId	 );
		
                    DELETE FROM ZnodePortalLoginProvider	
                    WHERE EXISTS ( SELECT TOP 1 1	  FROM @TBL_PortalIds AS a	 WHERE a.PortalId = ZnodePortalLoginProvider.PortalId  );

--------------------------------------------------------------------------------------------------------

		 DELETE FROM  ZnodeBrandPortal  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBrandPortal.PortalId);
	    DELETE FROM  ZnodeCustomPortalDetail  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCustomPortalDetail.PortalId);
		
		 DELETE FROM  ZnodeSupplier WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSupplier.PortalId)

	     DELETE FROM  ZnodeOmsTemplateLineItem  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeOmsTemplate ZOT ON 
	     TBP.PortalId = ZOT.PortalId AND ZOT.OmsTemplateId = ZnodeOmsTemplateLineItem.OmsTemplateId);

	     DELETE FROM ZnodeOmsTemplate WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsTemplate.PortalId);
	     DELETE FROM  ZnodeOmsUsersReferralUrl WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsUsersReferralUrl.PortalId)

		DELETE FROM ZnodePortalShipping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShipping.PortalId);
		DELETE FROM ZnodePortalTaxClass WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalTaxClass.PortalId);
		DELETE FROM ZnodePortalPaymentSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPaymentSetting.PortalId);
		DELETE FROM ZnodeCMSPortalMessageKeyTag WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessageKeyTag.PortalId);
		DELETE FROM ZnodePriceListProfile WHERE PortalProfileID IN (SELECT PortalProfileID FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId))
		DELETE FROM ZnodePortalProfile WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalProfile.PortalId);
		DELETE FROM ZnodePortalFeatureMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalFeatureMapper.PortalId);
		DELETE FROM ZnodePortalShippingDetails WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalShippingDetails.PortalId);
		DELETE FROM ZnodePortalUnit WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalUnit.PortalId);
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		
		DELETE FROM ZnodePortalSearchProfile   WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSearchProfile.PortalId);
		DELETE FROM dbo.ZnodePortalPixelTracking WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPixelTracking.PortalId); 
		DELETE FROM ZnodeRobotsTxt WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeRobotsTxt.PortalId);
		DELETE FROM ZnodePortalSmtpSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSmtpSetting.PortalId);
		DELETE FROM ZnodeActivityLog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeActivityLog.PortalId);
		DELETE FROM ZnodePortalCatalog WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCatalog.PortalId );
		DELETE FROM ZnodeCMSPortalMessage  WHERE EXISTS  ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalMessage.PortalId );
		DELETE FROM ZnodeGoogleTagManager WHERE  EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGoogleTagManager.PortalId);
		DELETE FROM ZnodeTaxRuleTypes WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxRuleTypes.PortalId);
		DELETE FROM ZnodeCMSContentPagesProfile WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
											WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesProfile.CMSContentPagesId )
		DELETE FROM ZnodeCMSContentPageGroupMapping WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPageGroupMapping.CMSContentPagesId )
	     DELETE FROM ZnodeCMSContentPagesLocale WHERE EXISTS (SELECT TOP 1 1 FROM  ZnodeCMSContentPages ZCCP  
																	WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZCCP.PortalId) AND ZCCP.CMSContentPagesId = ZnodeCMSContentPagesLocale.CMSContentPagesId )
		
		DELETE FROM ZnodeBlogNewsCommentLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNewsComment ZBC
													WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
														WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZBC.BlogNewsId ) and ZBC.BlogNewsCommentId = ZnodeBlogNewsCommentLocale.BlogNewsCommentId)
		DELETE FROM ZnodeBlogNewsComment WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsComment.BlogNewsId )
		 
		DELETE FROM ZnodeBlogNewsContent WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsContent.BlogNewsId )
		DELETE FROM ZnodeBlogNewsLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeBlogNews ZBN
		WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )
													
		DELETE FROM ZnodeBlogNews WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeBlogNews.PortalId)
		DELETE FROM  ZnodeFormWidgetEmailConfiguration 	WHERE CMSContentPagesId IN (SELECT CMSContentPagesId FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId))
		DELETE FROM ZnodeCMSContentPages WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSContentPages.PortalId);
		DELETE FROM ZnodeCaseRequestHistory WHERE CaseRequestId IN (SELECT CaseRequestId   FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId))
		DELETE FROM ZnodeCaseRequest WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCaseRequest.PortalId);
		DELETE FROM ZnodePortalLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalLocale.PortalId);
		DELETE FROM ZnodeShippingPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeShippingPortal.PortalId);
		
		--Delete return data against order
		DELETE FROM ZnodeRmaRequestItem
		DELETE FROM ZnodeRmaRequest
		DELETE FROM ZnodeRmaReturnNotes
		DELETE FROM ZnodeRmaReturnEmailHistory
		DELETE FROM ZnodeRmaReturnHistory
		DELETE FROM ZnodeRmaReturnPaymentRefund
		DELETE FROM ZnodeRmaReturnPaymentDetails
		DELETE FROM ZnodeRmaReturnLineItems
		DELETE FROM ZnodeRmaReturnDetails
		--Delete orders against store
		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT distinct OmsOrderID 
		FROM ZnodeOmsOrderDetails  ZP 
		WHERE NOT EXISTS(SELECT * FROM @ExceptStoreId A WHERE ZP.PortalId = A.Id)
		--INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0  

		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT DISTINCT UserId 
		FROM ZnodeUserPortal 
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId);

		--INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].Znode_DeleteUserDetails @UserIds = @DeletedIds , @status = 0,@IsForceFullyDelete =1 ,@IsCallInternal=1 
		
		DELETE FROM AspNetZnodeUser OUTPUT DELETED.AspNetZnodeUserId   INTO @TBL_DeletedUsers WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = AspNetZnodeUser.PortalId )
		
		DELETE FROM ZnodePortalAlternateWarehouse WHERE EXISTS ( SELECT TOP 1 1 FROM ZnodePortalWareHouse AS ZPWH WHERE EXISTS (
				SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPWH.PortalId ) AND  ZPWH.PortalWarehouseId = ZnodePortalAlternateWarehouse.PortalWarehouseId);
		DELETE FROM ZnodePortalWareHouse WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalWareHouse.PortalId);
		DELETE ZnodePriceListPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePriceListPortal.PortalId );
		
		DELETE FROM ZnodeEmailTemplateMapper WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeEmailTemplateMapper.PortalId);
		DELETE FROM ZnodeGIFtCard WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeGIFtCard.PortalId );
		DELETE FROM ZnodeCMSPortalProductPage WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalProductPage.PortalId);

		DELETE FROM ZnodeCMSPortalSEOSetting WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalSEOSetting.PortalId);

		DELETE FROM ZnodeCMSPortalTheme WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSPortalTheme.PortalId);

		DELETE FROM ZnodeCMSSEODetailLocale WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP INNER JOIN ZnodeCMSSEODetail AS zcsd ON TBP.PortalId = zcsd.PortalId WHERE zcsd.CMSSEODetailId = ZnodeCMSSEODetailLocale.CMSSEODetailId);
		 
		DELETE FROM ZnodeCMSSEODetail WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSSEODetail.PortalId);
		DELETE FROM ZnodePortalAccount WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAccount.PortalId);
		DELETE FROM ZnodePortalAddress WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalAddress.PortalId);
		DELETE FROM ZnodePortalCountry WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCountry.PortalId);
		DELETE FROM ZnodeCMSUrlRedirect WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeCMSUrlRedirect.PortalId);
		DELETE FROM ZnodeTaxPortaL  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeTaxPortaL.PortalId);
	   	INSERT INTO @TBL_Promotion( PromotionId ) SELECT PromotionId FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePromotion.PortalId);
		DELETE FROM ZnodePromotionProduct WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionProduct.PromotionId);
		DELETE FROM dbo.ZnodePromotionCoupon  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCoupon.PromotionId);
		DELETE FROM ZnodePromotionCategory WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCategory.PromotionId);
		DELETE FROM ZnodePromotionCatalogs WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotionCatalogs.PromotionId);
		DELETE FROM ZnodePromotion WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_Promotion AS TBP WHERE TBP.PromotionId = ZnodePromotion.PromotionId);
		DELETE FROM ZnodeBlogNewsLocale WHERE exists (select top 1 1 from ZnodeBlogNews ZBN
													WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZBN.PortalId) AND ZBN.BlogNewsId = ZnodeBlogNewsLocale.BlogNewsId )
		
        DELETE a FROM ZnodeFormBuilderGlobalAttributeValueLocale	a 
			INNER JOIN ZnodeFormBuilderGlobalAttributeValue aa ON (a.FormBuilderGlobalAttributeValueId = aa.FormBuilderGlobalAttributeValueId)INNER JOIN ZnodeFormBuilderSubmit b ON (b.FormBuilderSubmitId =aa.FormBuilderSubmitId)
			 WHERE EXISTS ( SELECT TOP 1 1
									   FROM @TBL_PortalIds AS TBDL
									   WHERE TBDL.PortalId = b.PortalId      
									 ); 
		DELETE a FROM ZnodeFormBuilderGlobalAttributeValue a INNER JOIN ZnodeFormBuilderSubmit b ON (b.FormBuilderSubmitId =a.FormBuilderSubmitId)
		 WHERE EXISTS ( SELECT TOP 1 1
								   FROM @TBL_PortalIds AS TBDL
								   WHERE TBDL.PortalId = b.PortalId      
								 ); 
		DELETE FROM ZnodeFormBuilderSubmit 
		WHERE EXISTS ( SELECT TOP 1 1
								   FROM @TBL_PortalIds AS TBDL
								   WHERE TBDL.PortalId = ZnodeFormBuilderSubmit.PortalId      
								 );   
		DELETE FROM   @DeletedIds
		INSERT INTO @DeletedIds 
		SELECT DISTINCT a.OmsOrderId 
		FROM ZnodeOmsOrder A 
		INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
		WHERE   EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = b.PortalId)

		INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 

		DELETE FROM @DeletedIds DELETE FROM @StatusOut 									  
		
		DELETE FROM dbo.ZnodeSearchSynonyms	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeSearchSynonyms.PublishCatalogId )
		DELETE FROM ZnodePublishedXml 
		DELETE FROM ZnodePublishCatalogLog	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalogLog.PublishCatalogId )
		DELETE FROM ZnodePublishCatalogSearchProfile WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalogSearchProfile.PublishCatalogId )
		DELETE FROM ZnodePublishCategoryProduct   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategoryProduct.PublishCatalogId )
		DELETE FROM ZnodePublishCategoryDetail 	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishCategoryId = ZnodePublishCategoryDetail.PublishCategoryId )
		DELETE FROM ZnodePublishProductDetail WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishCategoryId = ZnodePublishProductDetail.PublishProductId )
		
		DELETE FROM ZnodeCMSWidgetCategory WHERE PublishCategoryId IN (SELECT PublishCategoryId FROM ZnodePublishCategory   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategory.PublishCatalogId ))

		DELETE FROM ZnodePublishCategory   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCategory.PublishCatalogId )
		DELETE FROM dbo.ZnodeCMSWidgetProduct	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePublishCategoryProduct Tt WHERE Tt.PublishProductId = ZnodeCMSWidgetProduct.PublishProductId )
		DELETE FROM dbo.ZnodeSearchGlobalProductBoost	WHERE PublishProductId IN (SELECT PublishProductId FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId ))
		DELETE FROM ZnodeCMSCustomerReview 
			WHERE PublishProductId IN (SELECT PublishProductId FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId ))
		DELETE FROM ZnodePublishProduct	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishProduct.PublishCatalogId )
		DELETE FROM dbo.ZnodeSearchIndexServerStatus WHERE SearchIndexMonitorId IN (SELECT SearchIndexMonitorId FROM dbo.ZnodeSearchIndexMonitor WHERE CatalogIndexId IN (SELECT CatalogIndexId FROM ZnodeCatalogIndex	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId )))
		DELETE FROM dbo.ZnodeSearchIndexMonitor WHERE CatalogIndexId IN (SELECT CatalogIndexId FROM ZnodeCatalogIndex	 WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId ))
		DELETE FROM  ZnodeCatalogIndex   WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodeCatalogIndex.PublishCatalogId )
		DELETE FROM ZnodeSearchDocumentMapping WHERE PublishCatalogId IN (SELECT PublishCatalogId FROM ZnodePublishCatalog	  WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId ))
		
		DELETE FROM ZnodeSearchKeywordsRedirect 
		WHERE EXISTS(SELECT * FROM ZnodePublishCatalog	WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId ) AND ZnodeSearchKeywordsRedirect.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId)

		DELETE FROM ZnodePublishCatalog	  WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalCatalog Tt WHERE Tt.PublishCatalogId = ZnodePublishCatalog.PublishCatalogId )
		DELETE FROM ZnodeOmsPersonalizeCartItem WHERE OmsSavedCartLineItemId IN (SELECT OmsSavedCartLineItemId FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 	 )) 
		DELETE FROM ZnodeOmsSavedCartLineItem WHERE OmsSavedCartId IN (SELECT OmsSavedCartId FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 	 )
		DELETE FROM ZnodeOmsSavedCart WHERE OmsCookieMappingId IN (SELECT OmsCookieMappingId FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId) ) 
		DELETE FROM ZnodeOmsCookieMapping WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeOmsCookieMapping.PortalId); 
		DELETE FROM ZnodeDomain WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeDomain.PortalId);
		
		DELETE FROM ZnodeSalesRepCustomerUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSalesRepCustomerUserPortal.CustomerPortalId);

		delete from ZnodeSalesRepCustomerUserPortal 
		where exists(select * FROM ZnodeUserPortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeUserPortal.PortalId) and ZnodeSalesRepCustomerUserPortal.UserPortalId = ZnodeUserPortal.UserPortalId);
		

		DELETE FROM ZnodePortalRecommendationSetting  
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalRecommendationSetting.PortalId);
		
		DELETE FROM ZnodePortalPageSetting  
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalPageSetting.PortalId);

		DELETE FROM ZnodePortalBrand
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalBrand.PortalId);
	
		DELETE FROM ZnodePortalSortSetting
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalSortSetting.PortalId);

		DELETE FROM ZnodeImpersonificationLog
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeImpersonificationLog.PortalId);

		DELETE FROM ZnodePortalCustomCss
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortalCustomCss.PortalId);

		DELETE FROM ZnodeSearchActivity
		WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeSearchActivity.PortalId);
		
		DELETE FROM ZnodeProductFeed  WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodeProductFeed.PortalId);
		
		DELETE FROM ZnodePortal WHERE EXISTS ( SELECT TOP 1 1 FROM @TBL_PortalIds AS TBP WHERE TBP.PortalId = ZnodePortal.PortalId);

		PRINT '<-- Store Data Deleted Sucessfully-->'
	   
	   IF  NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortal) 
	   BEGIN 
	        SET @CMSThemeId = NULL 
			SET @CMSThemeCSSId = NULL  
			
	        SET IDENTITY_INSERT [dbo].[ZnodePortal] ON 
			INSERT [dbo].[ZnodePortal] ([PortalId], [CompanyName], [StoreName], [LogoPath], [UseSSL], [AdminEmail], [SalesEmail], [CustomerServiceEmail], [SalesPhoneNumber], [CustomerServicePhoneNumber], [ImageNotAvailablePath], [ShowSwatchInCategory], [ShowAlternateImageInCategory], [ExternalID], [MobileLogoPath], [DefaultOrderStateID], [DefaultReviewStatus], [SplashCategoryID], [SplashImageFile], [MobileTheme], [CopyContentBasedOnPortalId], [CreatedBy], [CreatedDate], [ModIFiedBy], [ModIFiedDate], [InStockMsg], [OutOfStockMsg], [BackOrderMsg], [OrderAmount], [Email], [StoreCode]) 
			VALUES (1, N'DemoStore', N'DemoStore', NULL, 0, N'test@znode.com', N'test@znode.com', N'test@znode.com', N'123456789', N'123456789', N'', 0, 0, NULL, NULL, 50, N'N', NULL, NULL, NULL, NULL, 2, CAST(N'2018-04-23T01:05:48.620' AS DateTime), 2, CAST(N'2018-04-23T01:05:48.620' AS DateTime), N'Demo', N'Demo', N'Demo', NULL, NULL, 'DemoStore')
			SET IDENTITY_INSERT [dbo].[ZnodePortal] OFF
			SET @PortalId  = 1
			INSERT INTO ZnodePimCatalog (CatalogName,IsActive,ExternalId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT 'DefaultCatalog' , 1 ,NULL,2 ,@GetDate,2,@GetDate 
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimCatalog r WHERE r.CatalogName = 'DefaultCatalog' )
			SET @PimCatalogId = CASE WHEN @PimCatalogId IS nULL THEN (SELECT TOP 1 PimCatalogId FROM ZnodePimCatalog WHERE	CatalogName = 'DefaultCatalog'  ) ELSE  @PimCatalogId END 	
			INSERT INTO ZnodePublishCatalog (PimCatalogId
			,CatalogName
			,ExternalId
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,Token)
			SELECT @PimCatalogId,'DefaultCatalog' , '',2,@GetDate,2,@GetDate,''
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalog WHERE CatalogName = 'DefaultCatalog')
			SET  @PublishCatalogId = CASE WHEN  @PublishCatalogId IS nULL THEN (SELECT TOP 1 PublishCatalogId  FROM ZnodePublishCatalog WHERE CatalogName = 'DefaultCatalog'   )  ELSE @PublishCatalogId END 
			INSERT INTO ZnodeCMSTheme(Name
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate
			,IsParentTheme
			,ParentThemeId)
			SELECT 'Default',2,@GetDate,2,@GetDate,1,NULL
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSTheme WHERE Name = 'Default')
			SET  @CMSThemeId = CASE WHEN @CMSThemeId IS nULL THEN (SELECT TOP 1 CMSThemeId FROM ZnodeCMSTheme WHERE Name = 'Default'   )  ELSE @CMSThemeId END  
		
			INSERT INTO ZnodeCMSThemeCSS  (CMSThemeId
			,CSSName
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @CMSThemeId,'DefaultCSS',2,@GetDate,2,@GetDate
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS')
			SET  @CMSThemeCSSId = CASE WHEN @CMSThemeCSSId IS nULL THEN (SELECT TOP 1 CMSThemeCSSId FROM ZnodeCMSThemeCSS WHERE CSSName = 'DefaultCSS'  )  ELSE @CMSThemeCSSId END  
		
			INSERT INTO ZnodeCMSPortalTheme (PortalId
			,CMSThemeId
			,CMSThemeCSSId
			,MediaId
			,FavIconId
			,WebsiteTitle
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate	)    
			SELECT  @PortalId,@CMSThemeId,@CMSThemeCSSId,NULL,NULL,NULL,2,@GetDate,2,@GetDate
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeCMSPortalTheme WHERE PortalId  = @PortalId  )
			INSERT INTO ZnodePortalCatalog (PortalId
			,PublishCatalogId
			,CreatedBy
			,CreatedDate
			,ModIFiedBy
			,ModIFiedDate)
			SELECT @PortalId,@PublishCatalogId,2,@GetDate,2,@GetDate
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog WHERE PortalId  = @PortalId )
			
			INSERT INTO ZnodeDomain (PortalId,DomainName ,IsActive,ApplicationType,CreatedBy ,CreatedDate ,ModifiedBy ,ModifiedDate)
			SELECT DISTINCT 1,DomainName ,IsActive,ApplicationType,CreatedBy ,@GetDate CreatedDate ,ModifiedBy ,@GetDate ModifiedDate 
			FROM _ZnodeDomain  TR
			WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeDomain TY WHERE TR.PortalId = TY.PortalId AND TR.DomainName = TY.DomainName) 
			GROUP BY DomainName ,IsActive,ApplicationType,CreatedBy,ModifiedBy

			INSERT INTO ZnodePortalUnit (PortalId,CurrencyId,WeightUnit,DimensionUnit,CurrencySuffix,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT @PortalId,(SELECT TOP 1 CurrencyId FROM ZnodeCulture WHERE CultureCode = 'en-US' ) 
			,'Lbs','IN','USD',2,@GetDate,2,@GetDate
			WHERE NOT EXISTS (SELECT TOP 1 1  FROM ZnodePortalUnit  WHERE PortalId = @PortalId AND CurrencyId = (SELECT TOP 1 CurrencyId FROM ZnodeCulture WHERE CultureCode = 'en-US')  )

	   END 
	   
		
		   END  
			 DELETE FROM @DeletedIds DELETE FROM @StatusOut 
			 IF  @ResetDomainData = 1  OR @DeleteAllData =1     
			 BEGIN 
			  DECLARE @OneportalId INT = (SELECT TOP 1 PortalId  FROM ZnodePortal)
			  DELETE FROM ZnodeDomain 
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:6766',1, '115915F1-7E6B-4386-A623-9779F27D9A5E','Admin',2,@GetDate,2,@GetDate
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:6766'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:3288',1, 'c58cc0c0-1349-4001-8416-cf1cea7960e8','WebStore',2,@GetDate,2,@GetDate
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:3288'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT @OneportalId, 'localhost:44762',1, '8a8b4931-7d57-42e8-a005-b1c0cce49f1d','Api',2,@GetDate,2,@GetDate
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost:44762' and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ) )
			  
			  INSERT INTO znodedomain(PortalId,DomainName,	IsActive,	ApiKey,	ApplicationType,	CreatedBy,	CreatedDate	,ModIFiedBy	,ModIFiedDate)
			  SELECT  @OneportalId  , 'localhost',1, '115915F1-7E6B-4386-A623-9779F27D9A5E','Admin',2,@GetDate,2,@GetDate
			  WHERE NOT EXISTS(SELECT * FROM znodedomain WHERE DomainName = 'localhost'  and PortalId = (SELECT TOP 1 PortalId FROM ZnodePortal ))
			 PRINT '<-- Domain reset Sucessfully-->'
			 END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF @DeleteAllShippingMethods = 1 OR @DeleteAllData =1 
		BEGIN 
		
		   	SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), ShippingId)  
					FROM ZnodeShipping for XML Path ('')),2,4000) 
		  -- INSERT INTO @StatusOut (Id ,Status)

		   EXEC Znode_DeleteShipping  @ShippingId = @DeleteId , @Status =0 ,@IsForceFullyDelete =1 
		   
		 PRINT '<-- Shipping Methods are Deleted Sucessfully-->'
			   
		END
		DELETE FROM @DeletedIds DELETE FROM @StatusOut  
		IF @DeleteAllPaymentMethods	 = 1  OR @DeleteAllData =1 
		BEGIN 
			 	 
		INSERT INTO @DeletedIds 
		SELECT DISTINCT a.OmsOrderId 
		FROM ZnodeOmsOrder A 
		INNER JOIN ZnodeOMsOrderDetails b  ON (b.OmsOrderId = a.OmsOrderId )
		WHERE   EXISTS ( SELECT TOP 1 1 FROM ZnodePaymentSetting AS TBP WHERE TBP.PaymentSettingId = b.PaymentSettingId)

		INSERT INTO @StatusOut (Id ,Status) 
		EXEC [dbo].[Znode_DeleteOrderById] @OmsOrderIds = @DeletedIds , @status = 0 
		 
		 DELETE FROM ZnodePortalPaymentSetting 
		 DELETE FROM ZnodeProfilePaymentSetting
		 DELETE FROM ZnodePaymentSetting
		
			  
		 PRINT '<-- Payment Methods are Deleted Sucessfully-->'
			   
		END 
		DELETE FROM @DeletedIds DELETE FROM @StatusOut 
		IF @DeleteAllTaxes	= 1 OR @DeleteAllData =1 		
		BEGIN 
		 
		  	SET @DeleteId = Substring((select  ',' + convert(nvarchar(500), TaxClassId)  
					FROM ZnodeTaxClass for XML Path ('')),2,4000) 
		-- INSERT INTO @StatusOut (Id ,Status) 
		 EXEC [dbo].[Znode_DeleteTaxClass] @TaxClassId =  @DeleteId, @status = 0 , @IsForceFullyDelete =1 
		 DELETE FROM ZnodeTaxRuleTypes   
     	 PRINT '<-- Taxes Data Deleted Sucessfully-->'
		 		 
		END 
		IF  @ResetIdentity =1  OR @DeleteAllData =1 
		 BEGIN
		 DECLARE @table_name varchar(100)= NULL, @showReport bit= 0, @debug bit= 0
	
		IF  OBJECT_ID('tempdb..#reseed_temp1') < 0 
			Drop TABLE #reseed_temp1 
		CREATE TABLE   #reseed_temp1 
		( 
					 tbame varchar(100), mvalue varchar(20) DEFAULT 0
		)

			DECLARE @Tablename varchar(256), @columnname varchar(256), @IndentValue numeric, @query varchar(4000), @query1 nvarchar(4000), @id int;

			DECLARE Cur_Reseed CURSOR LOCAL FAST_FORWARD
			FOR SELECT b.name, c.name
				FROM sys.objects AS a, sys.objects AS b, sys.columns AS c
				WHERE a.type = 'PK' AND 
					  a.parent_object_id = b.object_id AND 
					  b.object_id = c.object_id AND 
					  c.column_id = 1 AND 
					  is_identity <> 0 AND 
					  b.name NOT LIKE '%-%' AND 
					  b.name NOT LIKE '%(%' AND 
					  RTRIM(LTRIM(b.name)) = RTRIM(LTRIM(COALESCE(@table_name, b.name)));

			OPEN Cur_Reseed;

			FETCH NEXT FROM Cur_Reseed INTO @Tablename, @columnname;

			WHILE(@@FETCH_STATUS = 0)

			BEGIN

				 IF  @columnname <> ''

				BEGIN

					SET @query = 'insert into #reseed_temp1  (tbame, mvalue) ( select  '''+@Tablename+''', max( '+@columnname+') from '+@Tablename+')';

					EXECUTE (@query);

					SELECT @Tablename = tbame, @IndentValue = isnull(mvalue,1)
					FROM #reseed_temp1 ;



					DBCC CHECKIDENT(@Tablename, RESEED, @IndentValue);



				END;

				FETCH NEXT FROM Cur_Reseed INTO @Tablename, @columnname;

			END;
			CLOSE Cur_Reseed;
			DEALLOCATE Cur_Reseed;
			DROP TABLE #reseed_temp1
		PRINT '<---Reset Identity Sucessfully-->'
		END   
		--COMMIT TRAN  CleanUpProcess
	 END TRY 
	 BEGIN CATCH 
	 SELECT ERROR_MESSAGE()
	--ROLLBACK TRAN CleanUpProcess
	 END CATCH  
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_RevertOrderInventory')
	DROP PROC Znode_RevertOrderInventory
GO

CREATE PROCEDURE [dbo].[Znode_RevertOrderInventory]
(   
	@OmsOrderDetailsId INT,
    @OmsOrderLineItemIds VARCHAR(2000) = '',
    @Status BIT OUT,
    @UserId INT,
	@IsRevertAll BIT = 0
)
AS 
   /* Summary: this proceedure is used to revert the order  inventory in case of order revert
      Unit Testing:
	  begin tran
	  EXEC  Znode_RevertOrderInventory 
      rollback tran
    */
BEGIN
BEGIN TRAN ZROI;
BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @Revert NVARCHAR(MAX), @SQL NVARCHAR(MAX)
		CREATE TABLE  #OmsOrderLineItemsId (OmsOrderLineItemsId INT);
		--Getting line item ids
		INSERT INTO #OmsOrderLineItemsId
		SELECT item
		FROM dbo.split(@OmsOrderLineItemIds, ',');

		--Getting parent line item ids for downloadable product
		INSERT INTO #OmsOrderLineItemsId
		SELECT ZOOLI.ParentOmsOrderLineItemsId 
		FROM ZnodeOmsOrderLineItems ZOOLI WITH (NOLOCK)
		INNER JOIN #OmsOrderLineItemsId OLI on ZOOLI.OmsOrderLineItemsId=OLI.OmsOrderLineItemsId
		WHERE EXISTS (SELECT * FROM ZnodeOmsDownloadableProductKey Z where Z.OmsOrderLineItemsId=ZOOLI.ParentOmsOrderLineItemsId)
		AND NOT EXISTS (SELECT * FROM #OmsOrderLineItemsId O where O.OmsOrderLineItemsId=ZOOLI.ParentOmsOrderLineItemsId)

		--Getting parent line item ids for downloadable product on basis of OmsOrderDetailsId
		INSERT INTO #OmsOrderLineItemsId
		SELECT ZOOLI.OmsOrderLineItemsId 
		FROM ZnodeOmsOrderLineItems ZOOLI WITH (NOLOCK)
		WHERE ZOOLI.OmsOrderDetailsId = @OmsOrderDetailsId and ZOOLI.OrderLineItemStateId=40
		AND EXISTS (SELECT * FROM ZnodeOmsDownloadableProductKey Z WHERE Z.OmsOrderLineItemsId=ZOOLI.OmsOrderLineItemsId)
		AND NOT EXISTS (SELECT * FROM #OmsOrderLineItemsId O WHERE O.OmsOrderLineItemsId=ZOOLI.OmsOrderLineItemsId)

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the used key for revert order of downloadable product
		IF EXISTS(SELECT * FROM #OmsOrderLineItemsId)
		BEGIN
			UPDATE ZnodePimDownloadableProductKey
			SET IsUsed = 0,	
				ModifiedDate= @GetDate
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeOmsDownloadableProductKey ZODPK 
				INNER JOIN #OmsOrderLineItemsId OOLI ON OOLI.OmsOrderLineItemsId= ZODPK.OmsOrderLineItemsId
				WHERE ZnodePimDownloadableProductKey.PimDownloadableProductKeyId = ZODPK.PimDownloadableProductKeyId)
		END
		
		--Reverting the quantity of produucts after return
		SET @SQL = '
			
		UPDATE ZI
		SET
			ZI.Quantity = ZI.Quantity + ZOOW.Quantity,
			ZI.MOdifiedBy = '''+CAST(@UserId AS VARCHAR(1000))+''',
			ZI.ModifiedDate = '''+CAST(@GetDate AS VARCHAR(1000))+'''
		FROM ZnodeOmsOrderWarehouse ZOOW
			INNER JOIN ZnodeOmsOrderLineItems ZOOLI ON(ZOOLI.OmsOrderLineItemsId = ZOOW.OmsOrderLineItemsId)
			INNER JOIN ZnodeInventory ZI ON(ZI.WarehouseId = ZOOW.WarehouseId
											AND ZI.SKU = ZOOLI.SKU)
		WHERE 
		ZOOLI.OmsOrderDetailsId = '+CAST(@OmsOrderDetailsId AS VARCHAR(1000))+'
			AND EXISTS
		(
			SELECT TOP 1 1     FROM #OmsOrderLineItemsId SP WHERE Sp.OmsOrderLineItemsId = ZOOLI.OmsOrderLineItemsId OR Sp.OmsOrderLineItemsId = ZOOLI.ParentOmsOrderLineItemsId OR '''+@OmsOrderLineItemIds+''' = ''''
		)  
		' +CASE WHEN @IsRevertAll = 0 THEN 'AND NOT EXISTS   (SELECT TOP  1 1 FROM ZnodeOmsOrderState OOS WHERE OOS.OrderStateName = ''RETURNED'' AND OOS.OmsOrderStateId = ZOOLI.OrderLineItemStateId) ' ELSE '' END

		EXEC(@SQL)

		SET @Status = 1;
		SELECT 1 ID, CAST(1 AS BIT) Status;

COMMIT TRAN ZROI;
END TRY
BEGIN CATCH
    DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_RevertOrderInventory @OmsOrderDetailsId = '+CAST(@OmsOrderDetailsId AS VARCHAR(200))+',@OmsOrderLineItemIds='+@OmsOrderLineItemIds+',@UserId='+CAST(@UserId AS VARCHAR(200))+',@Status='+CAST(@Status AS VARCHAR(200));
    SET @Status = 0;
    SELECT 0 AS ID,
        CAST(0 AS BIT) AS Status;
	ROLLBACK TRAN ZROI;
    EXEC Znode_InsertProcedureErrorLog
        @ProcedureName = 'Znode_RevertOrderInventory',
        @ErrorInProcedure = @Error_procedure,
        @ErrorMessage = @ErrorMessage,
        @ErrorLine = @ErrorLine,
        @ErrorCall = @ErrorCall;
END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SaveSeoDetails')
	DROP PROC Znode_SaveSeoDetails
GO

CREATE PROCEDURE [dbo].[Znode_SaveSeoDetails]
(
	@CMSSEODetailId INT = 0,
	@CMSSEOTypeId INT = 0,
	@IsAllStore BIT = 0,
	@LocaleId INT = 0,
	@PimProductId INT = 0,
	@PortalId INT = 0,
	@SEODescription NVARCHAR(max) = null,
	@SEOId INT = 0,
	@SEOKeywords NVARCHAR(MAX) = NULL,
	@SEOTitle NVARCHAR(MAX) = NULL,
	@SEOUrl NVARCHAR(MAX)= NULL,
	@IsRedirect BIT = NULL,
	@IsPublish BIT = NULL,
	@CreatedBy NVARCHAR(200)=null,
	@ModifiedBy NVARCHAR(200) = null,
	@CanonicalURL VARCHAR(200) = null,
	@RobotTag VARCHAR(50) = null
)
AS 
BEGIN
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
IF(@IsAllStore = 'false')
BEGIN
IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetail WHERE CMSSEODetailId =@CMSSEODetailId)
BEGIN
	INSERT INTO ZnodeCMSSEODetail(
									CMSSEOTypeId,
									SEOId,
									IsRedirect,
									PortalId,
									SEOUrl,
									CreatedBy,
									CreatedDate,
									IsPublish
								)
					VALUES
								(
									@CMSSEOTypeId,
									@SEOId,
									@IsRedirect,
									@PortalId,
									@SEOUrl,
									@CreatedBy,
									@GetDate,
									@IsPublish
								)
							SET @CMSSEODetailId	=(SELECT SCOPE_IDENTITY())
END
ELSE
BEGIN
			UPDATE ZnodeCMSSEODetail SET
									CMSSEOTypeId=@CMSSEOTypeId,
									SEOId=@SEOId,
									IsRedirect=@IsRedirect,
									PortalId=@PortalId,
									SEOUrl=@SEOUrl,
									ModifiedBy=@ModifiedBy,
									ModifiedDate=@GetDate,
									IsPublish= @IsPublish
				WHERE CMSSEODetailId= @CMSSEODetailId
									
END
IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetailLocale WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId =@LocaleId)
BEGIN
	INSERT INTO [dbo].[ZnodeCMSSEODetailLocale]
           ([CMSSEODetailId]
           ,[LocaleId]
           ,[SEOTitle]
           ,[SEODescription]
           ,[SEOKeywords]
           ,[CreatedBy]
           ,[CreatedDate]
		   ,CanonicalURL
		   ,RobotTag)
     VALUES
           (
			@CMSSEODetailId
           ,@LocaleId
           ,@SEOTitle
           ,@SEODescription
           ,@SEOKeywords
           ,@CreatedBy
           ,@GetDate
		   ,@CanonicalURL
		   ,@RobotTag)
END
ELSE
begin
	UPDATE [dbo].[ZnodeCMSSEODetailLocale]
   SET [CMSSEODetailId] = @CMSSEODetailId
      ,[LocaleId] = @LocaleId
      ,[SEOTitle] = @SEOTitle
      ,[SEODescription] = @SEODescription
      ,[SEOKeywords] = @SEOKeywords
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedDate] = @GetDate
	  ,CanonicalURL = @CanonicalURL
	  ,RobotTag = @RobotTag
 WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId=@LocaleId
END
END
ELSE
BEGIN
DECLARE @PortalIds table
(
    RowId				INT IDENTITY(1,1), 
    PortalId			INT
)

INSERT INTO @PortalIds (PortalId) SELECT PortalId FROM ZnodePortal
--*/

DECLARE @maxRowPortalId INT= (SELECT MAX(RowId) FROM @PortalIds)
DECLARE @RowPortalId int = 1

WHILE @RowPortalId <= @maxRowPortalId
BEGIN

    SET @PortalId = (SELECT PortalId FROM @PortalIds WHERE RowId = @RowPortalId)

	DECLARE @CMSSEODetailIds table
	(
		RowId				INT IDENTITY(1,1), 
		CMSSEODetailId			INT
	)
	INSERT INTO @CMSSEODetailIds (CMSSEODetailId) SELECT CMSSEODetailId FROM ZnodeCMSSEODetail where PortalId=@PortalId and SEOId =@SEOId
	DECLARE @maxRowSEODetailId INT= (SELECT MAX(RowId) FROM @CMSSEODetailIds)
	DECLARE @RowSEODetailId int = 1
	WHILE @RowSEODetailId <= @maxRowSEODetailId
	BEGIN
		SET @CMSSEODetailId  =(SELECT CMSSEODetailId FROM @CMSSEODetailIds WHERE RowId = @RowSEODetailId)
		IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetail WHERE CMSSEODetailId =@CMSSEODetailId)
BEGIN
	INSERT INTO ZnodeCMSSEODetail(
									CMSSEOTypeId,
									SEOId,
									IsRedirect,
									PortalId,
									SEOUrl,
									CreatedBy,
									CreatedDate,
									IsPublish
								)
					VALUES
								(
									@CMSSEOTypeId,
									@SEOId,
									@IsRedirect,
									@PortalId,
									@SEOUrl,
									@CreatedBy,
									@GetDate,
									@IsPublish
								)
							SET @CMSSEODetailId	=(SELECT SCOPE_IDENTITY())
END
ELSE
BEGIN
			UPDATE ZnodeCMSSEODetail SET
									CMSSEOTypeId=@CMSSEOTypeId,
									SEOId=@SEOId,
									IsRedirect=@IsRedirect,
									PortalId=@PortalId,
									SEOUrl=@SEOUrl,
									ModifiedBy=@ModifiedBy,
									ModifiedDate=@GetDate,
									IsPublish= @IsPublish
				WHERE CMSSEODetailId= @CMSSEODetailId
									
END
		IF NOT EXISTS(SELECT 1 FROM ZnodeCMSSEODetailLocale WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId =@LocaleId)
BEGIN
	INSERT INTO [dbo].[ZnodeCMSSEODetailLocale]
           ([CMSSEODetailId]
           ,[LocaleId]
           ,[SEOTitle]
           ,[SEODescription]
           ,[SEOKeywords]
           ,[CreatedBy]
           ,[CreatedDate]
		   ,CanonicalURL
		   ,RobotTag)
     VALUES
           (
			@CMSSEODetailId
           ,@LocaleId
           ,@SEOTitle
           ,@SEODescription
           ,@SEOKeywords
           ,@CreatedBy
           ,@GetDate
		   ,@CanonicalURL
		   ,@RobotTag)
END
ELSE
begin
	UPDATE [dbo].[ZnodeCMSSEODetailLocale]
   SET [CMSSEODetailId] = @CMSSEODetailId
      ,[LocaleId] = @LocaleId
      ,[SEOTitle] = @SEOTitle
      ,[SEODescription] = @SEODescription
      ,[SEOKeywords] = @SEOKeywords
      ,[ModifiedBy] = @ModifiedBy
      ,[ModifiedDate] = @GetDate
	  ,CanonicalURL = @CanonicalURL
	  ,RobotTag= @RobotTag
 WHERE CMSSEODetailId =@CMSSEODetailId AND LocaleId=@LocaleId
END
		SET @RowSEODetailId =@RowSEODetailId +1
	END

    SELECT @RowPortalId = @RowPortalId + 1
End
END
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishBlogNewsEntity')
	DROP PROC Znode_SetPublishBlogNewsEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishBlogNewsEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@VersionId INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT
  ,@BlogNewsCode Varchar(300) = ''
  ,@BlogNewsType Varchar(300) = ''
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodePublishBlogNews 1 2,3

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
	DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
   DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
   DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

   If @PreviewVersionId = 0 
		Begin
   			Insert into @Tbl_PreviewVersionId 
			SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
		end
	Else 
			Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @PreviewVersionId
   If @ProductionVersionId = 0 
   		Begin
			Insert into @Tbl_ProductionVersionId 
			SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
		End 
	Else 
		Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
		where VersionId = @ProductionVersionId
 

		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		DECLARE @TBL_BlogData TABLE (BlogNewsId INT,PortalId INT ,MediaId INT ,BlogNewsType NVARCHAR(max),IsBlogNewsActive BIT ,IsAllowGuestComment BIT,LocaleId INT ,BlogNewsTitle NVARCHAR(max),CMSContentPagesId INT
		,BodyOverview NVARCHAR(max),Tags NVARCHAR(max),BlogNewsContent NVARCHAR(max),CreatedDate DATETIME,ActivationDate DATETIME ,ExpirationDate DATETIME, MediaPath varchar(max),BlogNewsCode NVARCHAR(4000) )
		DECLARE @BlogNewsEntityId int 
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)

			;With Cte_GetCmsBlogNewsData AS 
			(
				SELECT ZBN.BlogNewsId,PortalId,ZBN.MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,ZBNL.LocaleId
				,BlogNewsTitle,ZBN.CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,ZBN.CreatedDate,ActivationDate,ExpirationDate,
				zm.Path MediaPath,ZBN.BlogNewsCode
				FROM ZnodeBlogNews ZBN 
				INNER JOIN ZnodeBlogNewsLocale ZBNL ON (ZBNL.BlogNewsId = ZBN.BlogNewsId)
				LEFT JOIN ZnodeBlogNewsContent ZBNC ON ( ZBNC.BlogNewsId = ZBN.BlogNewsId AND ZBNC.LocaleId = ZBNL.LocaleId) 
				left join ZnodeMedia ZM on(ZM.MediaId = ZBN.MediaId)
				WHERE (ZBNL.LocaleId = @SetLocaleId OR ZBNL.LocaleId = @DefaultLocaleId)  
				AND (ZBN.PortalId = @PortalId  OR @PortalId = 0 ) 
				AND (ZBN.BlogNewsCode =  @BlogNewsCode OR @BlogNewsCode = '')
				AND (ZBN.BlogNewsType =  @BlogNewsType OR @BlogNewsType = '')
				AND ZBN.IsBlogNewsActive = 1 
			)
			, Cte_GetFirstFilterData AS
			(
				SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId
				,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
				FROM Cte_GetCmsBlogNewsData 
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId
				,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
				FROM  Cte_GetFirstFilterData 
				UNION ALL 
				SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId
				,BlogNewsTitle,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
				FROM Cte_GetCmsBlogNewsData CTEC 
				WHERE LocaleId = @DefaultLocaleId 
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.BlogNewsId = CTEC.BlogNewsId )
			)
	
			INSERT INTO @TBL_BlogData (BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,LocaleId,BlogNewsTitle
			,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode)
			SELECT BlogNewsId,PortalId,MediaId,BlogNewsType,IsBlogNewsActive,IsAllowGuestComment,@SetLocaleId,BlogNewsTitle
			,CMSContentPagesId,BodyOverview,Tags,BlogNewsContent,CreatedDate,ActivationDate,ExpirationDate,MediaPath,BlogNewsCode
			FROM Cte_GetDefaultFilterData

			SET @IncrementalId = @IncrementalId +1 
		END 
		-- Data inserted into flat table ZnodeBlogNewsEntity (Replica of MongoDB Collection )  
		
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

		Delete from ZnodePublishBlogNewsEntity where  VersionId in (Select PreviewVersionId from @Tbl_PreviewVersionId )
		AND (PortalId = @PortalId OR @PortalId = 0 ) 
	 	AND (BlogNewsCode =  @BlogNewsCode OR @BlogNewsCode = '')
		AND (BlogNewsType =  @BlogNewsType OR @BlogNewsType = '')	 
		

		Insert Into ZnodePublishBlogNewsEntity
		(
			VersionId,PublishStartTime,BlogNewsId,PortalId,MediaId,CMSContentPagesId,LocaleId,BlogNewsType,BlogNewsTitle,
			BodyOverview,Tags,BlogNewsContent,MediaPath,IsBlogNewsActive,IsAllowGuestComment,ActivationDate,ExpirationDate,
			CreatedDate,BlogNewsCode
		)
		SELECT PreviewVersionId, @GetDate, BlogNewsId,A.PortalId,MediaId,CMSContentPagesId,B.LocaleId,BlogNewsType,BlogNewsTitle,
			BodyOverview, Tags,BlogNewsContent,MediaPath,IsBlogNewsActive,IsAllowGuestComment,ActivationDate,ExpirationDate,
			CreatedDate,BlogNewsCode FROM @TBL_BlogData A Inner join  @Tbl_PreviewVersionId B ON A.LocaleId = B.LocaleId 
			AND A.PortalId = b.PortalId
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishBlogNewsEntity where VersionId in 
		(Select ProductionVersionId from @Tbl_ProductionVersionId )
		AND (PortalId = @PortalId OR @PortalId = 0 ) 
  	 	AND (BlogNewsCode =  @BlogNewsCode OR @BlogNewsCode = '')	 
		AND (BlogNewsType =  @BlogNewsType OR @BlogNewsType = '')
		
		Insert Into ZnodePublishBlogNewsEntity
		(
			VersionId,PublishStartTime,BlogNewsId,PortalId,MediaId,CMSContentPagesId,LocaleId,BlogNewsType,BlogNewsTitle,
			BodyOverview,Tags,BlogNewsContent,MediaPath,IsBlogNewsActive,IsAllowGuestComment,ActivationDate,ExpirationDate,
			CreatedDate,BlogNewsCode
		)
		SELECT ProductionVersionId  , @GetDate,  BlogNewsId,A.PortalId,MediaId,CMSContentPagesId,B.LocaleId,BlogNewsType,BlogNewsTitle,
			BodyOverview, Tags,BlogNewsContent,MediaPath,IsBlogNewsActive,IsAllowGuestComment,ActivationDate,ExpirationDate,
			CreatedDate,BlogNewsCode 
			FROM @TBL_BlogData A Inner join  @Tbl_ProductionVersionId B ON A.LocaleId = B.LocaleId 
			AND A.PortalId = b.PortalId

	End
	SET @Status =1 ;
	If (@RevisionState = 'Preview'  )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPreview()) --, ISPublish = 1 
		from @TBL_BlogData A inner join ZnodeBlogNews B  ON A.BlogNewsCode  = B.BlogNewsCode
		and (B.BlogNewsType = @BlogNewsType OR @BlogNewsType = ''  )
	else If (@RevisionState = 'Production'  Or @RevisionState = 'None' )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPublish()) --, ISPublish = 1 
		from @TBL_BlogData A inner join ZnodeBlogNews B  ON A.BlogNewsCode  = B.BlogNewsCode
		and (B.BlogNewsType = @BlogNewsType OR @BlogNewsType = '' )
	


	End
END TRY 
BEGIN CATCH 
	SET @Status =0  

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishBlogNewsEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishBlogNewsEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishContainerEntity')
	DROP PROC Znode_SetPublishContainerEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishContainerEntity]
(
	 @PreviewVersionId INT = 0
	,@IsPreviewEnable INT = 0
	,@ProductionVersionId INT = 0
	,@RevisionState VARCHAR(50) = 'PRODUCTION'
	,@ContainerKey NVARCHAR(50) = ''
	,@UserId INT = 0
	,@Status INT = 0 OUTPUT
)
AS
/*

	This Procedure is used to publish the Content Container and its varients publish

	EXEC  [Znode_SetPublishContainerEntity] @VersionId = 0,@PreviewVersionId=0,@IsPreviewEnable=1,@ProductionVersionId=0,
		@RevisionState='Preview',@ContainerKey='DiwaliOffer11',@UserId=2,@Status=0

				EXEC  [Znode_SetPublishContainerEntity] @PreviewVersionId=0,@IsPreviewEnable=1,@ProductionVersionId=0,
		@RevisionState='Preview',@ContainerKey='',@UserId=2,@Status=0

		EXEC  [Znode_SetPublishContainerEntity] @VersionId = 0,@PreviewVersionId=0,@IsPreviewEnable=0,@ProductionVersionId=0,
		@RevisionState='Production',@ContainerKey='',@UserId=2,@Status=0

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
BEGIN TRAN ContentContainer
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @OldPreviewId INT, @OldProductionId INT
	IF @PreviewVersionId = 0 AND @ContainerKey = '' AND @RevisionState = 'PREVIEW'
	BEGIN
		SET @OldPreviewId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PREVIEW')
			
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PREVIEW'
		SET @PreviewVersionId = @@IDENTITY

		DELETE FROM ZnodePublishContetContainerVersionEntity WHERE VersionId = @OldPreviewId 
	END
	ELSE IF @RevisionState = 'PREVIEW'
	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PREVIEW'
		WHERE NOT EXISTS (SELECT * FROM ZnodePublishContetContainerVersionEntity WHERE PublishState <> 'PREVIEW')
		
		SET @PreviewVersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PREVIEW')
	END
			
	IF @ProductionVersionId = 0 AND @ContainerKey = '' AND @RevisionState = 'PRODUCTION'
 	BEGIN
		SET @OldProductionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PRODUCTION')
			
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PRODUCTION'
		SET @ProductionVersionId = @@IDENTITY

		DELETE FROM ZnodePublishContetContainerVersionEntity WHERE VersionId = @OldProductionId 
	END 
	ELSE IF @RevisionState = 'PRODUCTION'
	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PRODUCTION'
		WHERE NOT EXISTS (SELECT * FROM ZnodePublishContetContainerVersionEntity WHERE PublishState <> 'PRODUCTION')

		SET @ProductionVersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PRODUCTION')
	END

	
	DECLARE @TBL_ContentContainerEntity TABLE
	(
		CMSContentContainerId INT, Name NVARCHAR(100), ContainerKey NVARCHAR(50),	FamilyId INT, Tags NVARCHAR(1000),
		CreatedBy INT, CreatedDate DATETIME, ModifiedBy INT,	ModifiedDate DATETIME
	);

	INSERT INTO @TBL_ContentContainerEntity(CMSContentContainerId, Name, ContainerKey, FamilyId, Tags, CreatedDate, ModifiedDate)
	SELECT DISTINCT ZCW.CMSContentContainerId, ZCW.Name, ZCW.ContainerKey, ZCW.FamilyId, ZCW.Tags,
		@GetDate, @GetDate
	FROM ZnodeCMSContentContainer ZCW WITH (NOLOCK)
	WHERE ( ZCW.ContainerKey = @ContainerKey OR ISNULL(@ContainerKey,'') = '' )

	IF (@RevisionState LIKE '%Preview%') 
	BEGIN
		--Data inserted INTO flat table ZnodePublishContentContainerEntity 
		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @PreviewVersionId
		AND EXISTS(SELECT * FROM @TBL_ContentContainerEntity cc WHERE ZnodePublishContentContainerEntity.ContainerKey = CC.ContainerKey)

		INSERT INTO ZnodePublishContentContainerEntity
		(
			VersionId,Name,ContainerKey,FamilyId,Tags,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		)
		SELECT @PreviewVersionId,Name, ContainerKey, FamilyId, Tags, @UserId, CreatedDate, @UserId, ModifiedDate
		FROM @TBL_ContentContainerEntity A

		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @OldPreviewId

	END
	---------------------------- END Preview 
	IF (@RevisionState LIKE '%Production%' OR @RevisionState = 'None')
	BEGIN

		-- Only production version id will process 
		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @ProductionVersionId
		AND EXISTS(SELECT * FROM @TBL_ContentContainerEntity cc WHERE ZnodePublishContentContainerEntity.ContainerKey = CC.ContainerKey)
		
		INSERT INTO ZnodePublishContentContainerEntity
		(
			VersionId,Name,ContainerKey,FamilyId,Tags,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		)
		SELECT @ProductionVersionId,Name, ContainerKey, FamilyId, Tags, @UserId, CreatedDate, @UserId, ModifiedDate
		FROM @TBL_ContentContainerEntity A
				
		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @OldProductionId
	END

	-- Content container varient publish
	EXEC [Znode_PublishContentContainerVariantEntity] @ContainerKey = @ContainerKey,@RevisionState=@RevisionState, @UserId = @UserId,@OldPreviewId=@OldPreviewId,@OldProductionId=@OldProductionId,@Status = 0
	
	SET @Status =1 ;
	IF (@RevisionState = 'Preview')
		UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPreview()) --, ISPublish = 1 
		FROM @TBL_ContentContainerEntity A
		INNER JOIN ZnodeCMSContentContainer B ON A.CMSContentContainerId = B.CMSContentContainerId
				
	ELSE IF (@RevisionState = 'Production' Or @RevisionState = 'None' )
		UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPublish()) --, ISPublish = 1 
		FROM @TBL_ContentContainerEntity A
		INNER JOIN ZnodeCMSContentContainer B ON A.CMSContentContainerId = B.CMSContentContainerId
	
COMMIT TRAN ContentContainer
SELECT 1 ID, @Status Status;
END TRY 
BEGIN CATCH
	SET @Status =0
	ROLLBACK TRAN ContentContainer
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
	@ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_SetPublishContainerEntity
	@PreviewVersionId = ' + CAST(@PreviewVersionId AS VARCHAR(20))
	+',@IsPreviewEnable='+CAST(@IsPreviewEnable AS VARCHAR(10))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId AS VARCHAR(20))
	+',@RevisionState = ''' + CAST(@RevisionState AS VARCHAR(50))
	+',@UserId = ' + CAST(@UserId AS VARCHAR(20))
	+',@Status='+CAST(@Status AS VARCHAR(10));
	SELECT 0 AS ID,CAST(@Status AS BIT) AS Status;

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_SetPublishContainerEntity',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishContainerWidgetEntity')
	DROP PROC Znode_SetPublishContainerWidgetEntity
GO

CREATE  PROCEDURE [dbo].[Znode_SetPublishContainerWidgetEntity]
(
   @PortalId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSMappingId INT =0
  ,@UserId int = 0 
  ,@Status int = 0 Output
)
AS
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	    DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PREVIEW'
			end
		Else 
			Begin
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
			End
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PRODUCTION'
			End 
		Else 
			Begin
				Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			    where VersionId = @ProductionVersionId
			End	
 

		DECLARE @CMSWidgetDataFinal TABLE (CMSContainerConfigurationId INT ,CMSWidgetsId INT ,WidgetsKey  NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping NVARCHAR(100) , ContentContainerId INT, ContainerKey  NVARCHAR(100));
		if @CMSMappingId > 0 
			Begin
				INSERT INTO @CMSWidgetDataFinal
					(CMSContainerConfigurationId, CMSWidgetsId, WidgetsKey, CMSMappingId, TypeOFMapping, ContentContainerId, ContainerKey)
                     SELECT CMSContainerConfigurationId , CMSWidgetsId , WidgetKey , CMSMappingId , TypeOFMapping , ContentContainerId, a.ContainerKey
				     FROM ZnodeCMSContainerConfiguration AS a
					 inner join ZnodeCMSContentContainer ZCC on a.ContainerKey = ZCC.ContainerKey
                     WHERE (a.TypeOFMapping = 'ContentPageMapping'
                     AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE IsActive =1 and  a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  )))
					 AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  )
			End
		Else if @CMSMappingId = 0 
			Begin
				 INSERT INTO @CMSWidgetDataFinal
					(CMSContainerConfigurationId, CMSWidgetsId, WidgetsKey, CMSMappingId, TypeOFMapping, ContentContainerId, ContainerKey)
                     SELECT CMSContainerConfigurationId , CMSWidgetsId , WidgetKey , CMSMappingId , TypeOFMapping , ContentContainerId, a.ContainerKey
				     FROM ZnodeCMSContainerConfiguration AS a
					 inner join ZnodeCMSContentContainer ZCC on a.ContainerKey = ZCC.ContainerKey
                     WHERE (a.TypeOFMapping = 'ContentPageMapping'
                     AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE IsActive =1 and  a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  ))
                     OR (a.TypeOFMapping = 'PortalMapping' AND a.CMSMappingId = @PortalId ))
			End
		End 
    --select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' )
	Begin
	    --Data inserted into flat table ZnodePublishMediaWidgetEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishContainerWidgetEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId ) and
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )

		Insert Into ZnodePublishContainerWidgetEntity 
		(VersionId,PublishStartTime,ContainerConfigurationId,MappingId,PortalId,TypeOFMapping,LocaleId,WidgetsKey,ContainerKey)
		SELECT PreviewVersionId , @GetDate ,CMSContainerConfigurationId,CMSMappingId,@PortalId,TypeOFMapping,LocaleId,WidgetsKey,ContainerKey
		FROM @CMSWidgetDataFinal A Inner join @TBL_PreviewVersionId B On B.PortalId = @PortalId
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishContainerWidgetEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId) and 
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )
		
		Insert Into ZnodePublishContainerWidgetEntity 
		(VersionId,PublishStartTime,ContainerConfigurationId,MappingId,PortalId,TypeOFMapping,LocaleId,WidgetsKey,ContainerKey)
		SELECT ProductionVersionId , @GetDate ,CMSContainerConfigurationId,CMSMappingId,@PortalId,TypeOFMapping,LocaleId,WidgetsKey,ContainerKey
		FROM @CMSWidgetDataFinal Inner join @TBL_ProductionVersionId B On B.PortalId = @PortalId
	End
	SET @Status = 1;

END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_SetPublishContainerWidgetEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+''',@CMSMappingId= ' + CAST(@CMSMappingId  AS varchar(20))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_SetPublishContainerWidgetEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishContentContainerGlobalAttributeEntity')
	DROP PROC Znode_SetPublishContentContainerGlobalAttributeEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishContentContainerGlobalAttributeEntity]
(
	 @ContainerKey VARCHAR(50) = ''
	 ,@ContainerProfileVariantId INT = 0
)
AS
    
/*
exec [Znode_SetPublishContentContainerGlobalAttributeEntity] @ContainerKey = 'HomePagePromo', @ContainerProfileVariantId = 0
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and INSERT INTO following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
 */
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @VersionId Int, @CMSContentContainerId int
		--SET @VersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState = @RevisionState )

		DECLARE @SetLocaleId INT, @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1;
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1));

		DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) 
             FROM ZnodeMediaConfiguration ZMC 
			 --INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );
	
		DECLARE @TBL_GlobalAttributeGrouplist TABLE ([GlobalAttributeGroupId] INT , [AttributeGroupDisplayOrder] INT,Groups int )
		DECLARE @TBL_GlobalAttributelist      TABLE ([GlobalAttributeGroupId] INT , [GlobalAttributeId] INT,[AttributeDisplayOrder] int ,Attributes int )
		Declare	@EntityAttributeValueList as	table
		(
			IsInput bit, IsMedia BIT, AttributeValues int,WidgetGlobalAttributeValueId int,GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),MediaId int,MediaPath nvarchar(300) ,SwatchText nvarchar(300),DisplayOrder int,
			SingleAttributeValue nvarchar(max), CMSContainerProfileVariantId INT,LocaleId INT
		)
		Declare	@EntityAttributeSingleValueList as table(AttributeValues int,PortalGlobalAttributeValueId int,GlobalAttributeId int)

		Declare @LocaleId INT , @GetDate DATETIME =dbo.Fn_GetDate()

		IF @ContainerKey <> ''
		BEGIN
			Select @CMSContentContainerId= CMSContentContainerId 
			from ZnodeCMSContentContainer  
			WHERE ContainerKey = @ContainerKey
		END

		INSERT INTO @EntityAttributeValueList
		(
			IsInput, IsMedia,AttributeValues,WidgetGlobalAttributeValueId,GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,
			AttributeValue ,MediaId,MediaPath,SingleAttributeValue,CMSContainerProfileVariantId, LocaleId
		)
		Select case when zga.GroupAttributeType in('Input','TextArea')   then 1  else 0 end ,
				0, 1, aa.WidgetGlobalAttributeValueId,aa.GlobalAttributeId,aa.WidgetGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,

			case when zga.GroupAttributeType in('Input','TextArea')   then null  else  bb.AttributeValue  end AttributeValue,	  
			bb.MediaId,CASE WHEN bb.MediaPath IS NOT NULL THEN @V_MediaServerThumbnailPath+bb.MediaPath ELSE bb.MediaPath END AS MediaPath ,
			case when zga.GroupAttributeType in('Input','TextArea')   then bb.AttributeValue   else null end  SingleAttributeValue,
			aa.CMSContainerProfileVariantId, bb.LocaleId
		FROM ZnodeWidgetGlobalAttributeValue aa
		INNER JOIN ZnodeWidgetGlobalAttributeValueLocale bb ON bb.WidgetGlobalAttributeValueId = aa.WidgetGlobalAttributeValueId 
		INNER JOIN View_ZnodeGlobalAttribute zga on zga.[GlobalAttributeId]=aa.[GlobalAttributeId]
		WHERE (aa.CMSContainerProfileVariantId = @ContainerProfileVariantId OR @ContainerProfileVariantId = 0)
		AND (AA.CMSContentContainerId = @CMSContentContainerId OR ISNULL(@CMSContentContainerId,0) = 0 )
		AND bb.MediaId IS NULL 
				

		INSERT INTO @EntityAttributeValueList
		(IsInput,IsMedia,AttributeValues,WidgetGlobalAttributeValueId,GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath,SingleAttributeValue,CMSContainerProfileVariantId,LocaleId)
		Select 1,1 ,1, aa.WidgetGlobalAttributeValueId,aa.GlobalAttributeId,aa.WidgetGlobalAttributeValueId,null GlobalAttributeDefaultValueId,
			NULL AttributeValue,	  
			NULL MediaId,null MediaPath,
			NULL SingleAttributeValue, aa.CMSContainerProfileVariantId	,bb.LocaleId
		FROM dbo.ZnodeWidgetGlobalAttributeValue aa
		INNER JOIN ZnodeWidgetGlobalAttributeValueLocale bb ON bb.WidgetGlobalAttributeValueId = aa.WidgetGlobalAttributeValueId 
		INNER JOIN View_ZnodeGlobalAttribute zga on zga.[GlobalAttributeId]=aa.[GlobalAttributeId]
		WHERE (AA.CMSContentContainerId = @CMSContentContainerId OR ISNULL(@CMSContentContainerId,0) = 0 )
		AND zga.GroupAttributeType ='Media'

		UPDATE aa
		Set SingleAttributeValue= ( Select CASE WHEN bb.MediaPath IS NOT NULL THEN @V_MediaServerThumbnailPath+bb.MediaPath ELSE bb.MediaPath END AS MediaPath FROM  ZnodeWidgetGlobalAttributeValueLocale bb 
			WHERE bb.WidgetGlobalAttributeValueId = aa.WidgetGlobalAttributeValueId AND aa.LocaleId = bb.LocaleId
			FOR XML PATH ('') )				
		FROM  @EntityAttributeValueList aa
		WHERE aa.IsMedia=1

		UPDATE aa
		Set SingleAttributeValue= replace(replace(SingleAttributeValue,'</MediaPath>',','),'<MediaPath>','')
		FROM  @EntityAttributeValueList aa
		WHERE aa.IsMedia=1

		UPDATE aa
		Set SingleAttributeValue= Substring(SingleAttributeValue,1,len(SingleAttributeValue)-1)
		FROM  @EntityAttributeValueList aa
		WHERE aa.IsMedia=1 and aa.SingleAttributeValue<>''

		UPDATE aa
		SET AttributeDefaultValueCode= h.AttributeDefaultValueCode,
			SwatchText=h.SwatchText,
			AttributeValue=g.AttributeDefaultValue,
			GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			DisplayOrder=h.DisplayOrder
		FROM  @EntityAttributeValueList aa
		INNER JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
		INNER JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId and aa.LocaleId = g.LocaleId
          
		INSERT INTO @TBL_GlobalAttributeGrouplist
		([GlobalAttributeGroupId] , [AttributeGroupDisplayOrder],Groups )
		SELECT ss.[GlobalAttributeGroupId],ss.[AttributeGroupDisplayOrder],1
		FROM [dbo].[ZnodeGlobalGroupEntityMapper] SS
		INNER JOIN dbo.ZnodeGlobalEntity aa on ss.[GlobalEntityId]=aa.[GlobalEntityId]
		WHERE aa.EntityName='Content Containers'
		--FOR XML PATH('')

		INSERT INTO @TBL_GlobalAttributelist
		([GlobalAttributeGroupId] , [GlobalAttributeId],[AttributeDisplayOrder],Attributes )
		SELECT aa.[GlobalAttributeGroupId],aa.[GlobalAttributeId] ,aa.[AttributeDisplayOrder],1
		FROM [dbo].[ZnodeGlobalAttributeGroupMapper] aa
		INNER JOIN @TBL_GlobalAttributeGrouplist ss on ss.GlobalAttributeGroupId=aa.GlobalAttributeGroupId
			
		IF object_id('tempdb..[#GlobalAttributeGrouplist]') IS NOT NULL
			drop table tempdb..#GlobalAttributeGrouplist

		CREATE TABLE #GlobalAttributeGrouplist 
		( 
			CMSContainerProfileVariantId INT,LocaleId	int,GlobalAttributeGroupId	int	,GroupCode	varchar	(200),AttributeGroupName nvarchar(600),AttributeGroupDisplayOrder int,
			GlobalAttributeId	int	,AttributeDisplayOrder	int	,AttributeCode	nvarchar	(600),AttributeName	nvarchar	(600),IsRequired	bit	,
			AttributeTypeName	varchar	(300),AttributeTypeId	int	,SingleAttributeValue	nvarchar(max),SelectValues	nvarchar(max)
		)

		SET @LocaleId = 0 

		INSERT INTO @TBL_Locale (LocaleId) 
		SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			;With Cte_GetCmsContentContainerData AS 
			(
			Select distinct @SetLocaleId AS LocaleId, sv.CMSContainerProfileVariantId,
				aa.[GlobalAttributeGroupId] AS 'GlobalAttributeGroupId' ,
				zgag.GroupCode	AS 'GroupCode'		 ,  
				zgagl.AttributeGroupName  AS 'AttributeGroupName'   ,
				AttributeGroupDisplayOrder 	 , 
				ss.GlobalAttributeId	 AS 'GlobalAttributeId'	 ,
				ss.[AttributeDisplayOrder] AS 'AttributeDisplayOrder'	,
				zga.AttributeCode AS 'AttributeCode'	,			
				zgal.AttributeName AS 'AttributeName'	,
				zga.IsRequired AS 'IsRequired'	,
				zga.AttributeTypeName AS 'AttributeTypeName'      ,
				zga.AttributeTypeId AS 'AttributeTypeId' 		,
				sv.SingleAttributeValue AS 'SingleAttributeValue'	,	
	   
				( Select 
				SelectValuesEntity.DisplayOrder					as DisplayOrder,
				SelectValuesEntity.GlobalAttributeDefaultValueId as GlobalAttributeDefaultValueId,
				SelectValuesEntity.AttributeValue				as [Value]	,
				SelectValuesEntity.AttributeDefaultValueCode		as Code	,
				SelectValuesEntity.SwatchText                    as SwatchText	,
				SelectValuesEntity.MediaPath		         		as [Path]	
				FROM  @EntityAttributeValueList SelectValuesEntity 
				WHERE SelectValuesEntity.WidgetGlobalAttributeValueId = sv.WidgetGlobalAttributeValueId
				and SelectValuesEntity.LocaleId = sv.LocaleId and 
				zga.GroupAttributeType ='Select'
				FOR JSON Auto, INCLUDE_NULL_VALUES    
				)  as 'SelectValues'
			FROM 
				@TBL_GlobalAttributeGrouplist aa				
				INNER JOIN @TBL_GlobalAttributelist ss on  ss.GlobalAttributeGroupId=aa.GlobalAttributeGroupId
				INNER JOIN ZnodeGlobalAttributeGroup zgag on zgag.[GlobalAttributeGroupId]=aa.[GlobalAttributeGroupId]
				INNER JOIN ZnodeGlobalAttributeGroupLocale zgagl on zgagl.GlobalAttributeGroupId=zgag.GlobalAttributeGroupId
				INNER JOIN View_ZnodeGlobalAttribute zga       on zga.[GlobalAttributeId]=ss.[GlobalAttributeId]
				INNER JOIN ZnodeGlobalAttributeLocale zgal on zga.[GlobalAttributeId]=zgal.[GlobalAttributeId]
				INNER JOIN @EntityAttributeValueList sv   on sv.[GlobalAttributeId]=ss.[GlobalAttributeId]
				WHERE zgagl.LocaleId= zgal.LocaleId and 
				(sv.LocaleId = @SetLocaleId)  
			)
	     	, Cte_GetFirstFilterData AS
			(
				SELECT CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues
				FROM Cte_GetCmsContentContainerData 
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues
				FROM  Cte_GetFirstFilterData 
				UNION ALL 
				SELECT CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues
				FROM Cte_GetCmsContentContainerData CTEC 
				WHERE LocaleId = @DefaultLocaleId 
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.GlobalAttributeGroupId = CTEC.GlobalAttributeGroupId )
			)
			INSERT INTO #GlobalAttributeGrouplist 
			(
				CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
				GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
				AttributeTypeId,SingleAttributeValue,SelectValues
			)
			SELECT DISTINCT CMSContainerProfileVariantId,@SetLocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
					GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
					AttributeTypeId,SingleAttributeValue,SelectValues
			FROM Cte_GetDefaultFilterData
						
				SET @IncrementalId = @IncrementalId +1 
		End 
		--select * into ##GlobalAttributeGrouplist from #GlobalAttributeGrouplist
	--select distinct CMSContainerProfileVariantId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,LocaleId 
	--into #GroupMaster from #GlobalAttributeGrouplist
	
	--If (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	--Begin
	--    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

	--	Delete from ZnodePublishContentContainerVariantEntity WHERE  VersionId = @VersionId
	 		 

	--	INSERT INTO ZnodePublishPortalGlobalAttributeEntity
	--	(
	--		VersionId,PublishStartTime,PortalId,PortalName,LocaleId,GlobalAttributeGroups
	--	)
	  	
			--Select Distinct PV.CMSContainerProfileVariantId,PV.LocaleId,  (Select 
			--A.GlobalAttributeGroupId AS 'GlobalAttributeGroupId',
			--A.GroupCode AS 'GroupCode',
			--A.AttributeGroupName AS 'AttributeGroupName',
			--A.AttributeGroupDisplayOrder AS 'AttributeGroupDisplayOrder',
			--A.LocaleId AS 'LocaleId', 
			--(
			--	Select DISTINCT GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
			--	AttributeTypeName,AttributeTypeId,SingleAttributeValue,SelectValues 
			--	from #GlobalAttributeGrouplist B WHERE A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
			--	AND A.LocaleId = B.LocaleId AND A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
			--	For JSON Path 
			--) AS 'GlobalAttributes'
			--from #GlobalAttributeGrouplist A WHERE A.CMSContainerProfileVariantId = PV.CMSContainerProfileVariantId AND A.LocaleId = PV.LocaleId For Json Path) GlobalAttributes
			--FROM  #GlobalAttributeGrouplist  PV 

			SELECT DISTINCT A.CMSContainerProfileVariantId,A.LocaleId,  
			REPLACE((
				SELECT DISTINCT GlobalAttributeGroupId, GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
				AttributeTypeName,AttributeTypeId,SingleAttributeValue As AttributeValue,SelectValues 
				FROM #GlobalAttributeGrouplist B
				WHERE A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
				AND A.LocaleId = B.LocaleId AND A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
				--AND GlobalAttributeId=32 and A.GlobalAttributeGroupId=23
				For JSON Path 
			),'\','') AS 'GlobalAttributes'
			FROM #GlobalAttributeGrouplist  A
	--End
	---------------------------- End Preview 
	--If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	--Begin
	--	-- Only production version id will process 
	--	Delete from ZnodePublishPortalGlobalAttributeEntity WHERE  VersionId in (Select ProductionVersionId from @Tbl_ProductionVersionId)
	--	AND PortalId = @PortalId
	 		 

	--	INSERT INTO ZnodePublishPortalGlobalAttributeEntity
	--	(
	--		VersionId,PublishStartTime,PortalId,PortalName,LocaleId,GlobalAttributeGroups
	--	)
			  	
	--		Select Distinct PV.ProductionVersionId, @GetDate,  @PortalId,@StoreName, PV.LocaleId, (Select 
	--		A.GlobalAttributeGroupId AS 'GlobalAttributeGroupId',
	--		A.GroupCode AS 'GroupCode',
	--		A.AttributeGroupName AS 'AttributeGroupName',
	--		A.AttributeGroupDisplayOrder AS 'AttributeGroupDisplayOrder',
	--		A.LocaleId AS 'LocaleId', 
	--		(
	--			Select GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
	--			AttributeTypeName,AttributeTypeId,SingleAttributeValue,SelectValues 
	--			from #GlobalAttributeGrouplist B WHERE A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
	--			AND A.LocaleId = B.LocaleId
	--			For JSON Path 
	--		) AS 'GlobalAttributes'
	--		from #GroupMaster A  WHERE A.LocaleId = PV.LocaleId  For Json Path) 
	--		FROM  @Tbl_ProductionVersionId  PV 

	--End

END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();

END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishContentPageConfigEntity')
	DROP PROC Znode_SetPublishContentPageConfigEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishContentPageConfigEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSContentPagesId int = 0
  ,@UserId int = 0 
  ,@Status int  Output
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishContentPageConfigEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
		Begin
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 


		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		DECLARE @TBL_ContentPage TABLE 
		(ContentPageId	int,PortalId	int,FileName	varchar(300), ProfileId	varchar(300),
		LocaleId	int,PageTitle	nvarchar(200),PageName	nvarchar(max),ActivationDate	datetime,
		ExpirationDate	datetime,IsActive	varchar)
 
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			
			;With Cte_GetCMSContentPages AS 
			(
				SELECT CCP.CMSContentPagesId,CCP.PortaLId, CT.FileName,CCP.PageName ,CCPL.PageTitle, 
				CCP.ActivationDate ,CCP.ExpirationDate ,CCP.IsActive   ,
				CCPL.LocaleId  
				From ZnodeCMSContentPages CCP inner join ZnodeCMSTemplate CT on CCP.CMSTemplateId = CT.CMSTemplateId
				INNER JOIN ZnodeCMSContentPagesLocale CCPL ON CCP.CMSContentPagesId = CCPL.CMSContentPagesId 
				WHERE (CCPL.LocaleId = @SetLocaleId OR CCPL.LocaleId = @DefaultLocaleId)  
				AND CCP.PortalId = @PortalId  
				AND (CCP.CMSContentPagesId = @CMSContentPagesId OR @CMSContentPagesId = 0 )
			)
			, Cte_GetFirstCMSContentPages  AS
			(
				SELECT CMSContentPagesId,PortaLId,FileName,PageName,PageTitle, 
				ActivationDate,ExpirationDate,IsActive, LocaleId
				FROM Cte_GetCMSContentPages 
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT CMSContentPagesId,PortaLId,FileName,PageName,PageTitle,ActivationDate,ExpirationDate,IsActive, LocaleId
				FROM  Cte_GetFirstCMSContentPages 
				UNION ALL 
				SELECT CMSContentPagesId,PortaLId,FileName,PageName,PageTitle,ActivationDate,ExpirationDate,IsActive, LocaleId
				FROM Cte_GetCMSContentPages CTEC 
				WHERE LocaleId = @DefaultLocaleId 
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSContentPages CTEFD WHERE CTEFD.CMSContentPagesId = CTEC.CMSContentPagesId )
			)
	
			INSERT INTO @TBL_ContentPage ( ContentPageId,PortaLId,FileName,PageName,PageTitle,ActivationDate,ExpirationDate,IsActive, LocaleId,ProfileId)
			SELECT  CMSContentPagesId,PortaLId,FileName,PageName,PageTitle,ActivationDate,ExpirationDate,IsActive, @SetLocaleId,
			'[' + (
			--select ProfileId ProfileId from ZnodeCMSContentPagesProfile  C Where C.CMSContentPagesId = A.CMSContentPagesId  and ProfileId  is not null FOR JSON PATH, Include_Null_Values
			(Select stuff((SELECT ','+ Cast(ProfileId as Varchar(10)) FROM ZnodeCMSContentPagesProfile  C Where C.CMSContentPagesId = A.CMSContentPagesId  and ProfileId  is not null 
			FOR XML PATH('')), 1, 1, ''))

			) + ']' AS ProfileId
			FROM Cte_GetDefaultFilterData  A 
     		SET @IncrementalId = @IncrementalId +1 
		END 
	End

	--select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%' OR @RevisionState like '%Production%' )
	Begin
	    --Data inserted into flat table ZnodePublishContentPageConfigEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishContentPageConfigEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId)
		AND (ContentPageId = @CMSContentPagesId OR @CMSContentPagesId = 0 )

		Insert Into ZnodePublishContentPageConfigEntity 
		(
			VersionId,PublishStartTime,ContentPageId,PortalId,FileName,ProfileId,LocaleId,PageTitle,PageName,
			ActivationDate,ExpirationDate,IsActive
		)
		SELECT B.PreviewVersionId , @GetDate,  ContentPageId,A.PortalId,FileName,ProfileId,B.LocaleId,PageTitle,PageName,
			ActivationDate,ExpirationDate,IsActive FROM @TBL_ContentPage A 
			Inner join @TBL_PreviewVersionId B  ON A.PortalId = B.PortalId AND A.LocaleId = B.LocaleId 
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishContentPageConfigEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId)
		AND (ContentPageId = @CMSContentPagesId OR @CMSContentPagesId = 0 )
		
		Insert Into ZnodePublishContentPageConfigEntity 
		(
			VersionId,PublishStartTime,ContentPageId,PortalId,FileName,ProfileId,LocaleId,PageTitle,PageName,
			ActivationDate,ExpirationDate,IsActive
		)
		SELECT B.ProductionVersionId , @GetDate,  ContentPageId,A.PortalId,FileName,ProfileId,B.LocaleId,PageTitle,PageName,
		ActivationDate,ExpirationDate,IsActive FROM @TBL_ContentPage A
		Inner join @TBL_ProductionVersionId B  ON A.PortalId = B.PortalId AND A.LocaleId = B.LocaleId 
	End
	SET @Status = 1
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
	@ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishContentPageConfigEntity 
	@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+''',@CMSContentPagesId= ' + CAST(@CMSContentPagesId  AS varchar(20))
	+',@UserId = ' + CAST(@UserId AS varchar(20));
              			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishContentPageConfigEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishMediaWidgetEntity')
	DROP PROC Znode_SetPublishMediaWidgetEntity
GO


CREATE  PROCEDURE [dbo].[Znode_SetPublishMediaWidgetEntity]
(
   @PortalId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSMappingId INT =0
  ,@UserId int = 0 
  ,@Status int = 0 Output
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishMediaWidgetEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
		 Exec [ZnodeSetPublishMediaWidgetEntity]
   @PortalId  = 1 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =0 
  ,@UserId = 0 


	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
	    DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 

		DECLARE @CMSWidgetDataFinal TABLE (CMSMediaConfigurationId INT ,CMSWidgetsId INT ,WidgetsKey  NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping NVARCHAR(100) ,[MediaPath]  NVARCHAR(1000));
		if @CMSMappingId > 0 
				INSERT INTO @CMSWidgetDataFinal
					( CMSMediaConfigurationId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping ,MediaPath)
                     SELECT CMSMediaConfigurationId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , ZM.Path as MediaPath
                     FROM ZnodeCMSMediaConfiguration AS a
					 inner join ZnodeMedia ZM on a.MediaId = ZM.MediaId
                     WHERE (a.TypeOFMapping = 'ContentPageMapping'
                     AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE IsActive =1 and  a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  )))
					 AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  )

		Else if @CMSMappingId = 0 
				 INSERT INTO @CMSWidgetDataFinal
					( CMSMediaConfigurationId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping ,MediaPath)
                     SELECT CMSMediaConfigurationId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , ZM.Path as MediaPath
                     FROM ZnodeCMSMediaConfiguration AS a
					 inner join ZnodeMedia ZM on a.MediaId = ZM.MediaId
                     WHERE (a.TypeOFMapping = 'ContentPageMapping'
                     AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE IsActive =1 and  a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  ))
                     OR (a.TypeOFMapping = 'PortalMapping' AND a.CMSMappingId = @PortalId ))
		End 
    --select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' )
	Begin
	    --Data inserted into flat table ZnodePublishMediaWidgetEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishMediaWidgetEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId ) and
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )

		Insert Into ZnodePublishMediaWidgetEntity 
		(VersionId,PublishStartTime,MediaWidgetConfigurationId,MappingId,PortalId,TypeOFMapping,MediaPath,WidgetsKey)
		SELECT PreviewVersionId , @GetDate ,CMSMediaConfigurationId,CMSMappingId,@PortalId,TypeOFMapping,MediaPath,WidgetsKey
		FROM @CMSWidgetDataFinal A Inner join @TBL_PreviewVersionId B On B.PortalId = @PortalId
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishMediaWidgetEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId) and 
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )
		
		Insert Into ZnodePublishMediaWidgetEntity 
		(
			VersionId,PublishStartTime,MediaWidgetConfigurationId,MappingId,PortalId,TypeOFMapping,MediaPath,WidgetsKey
		)
		SELECT ProductionVersionId , @GetDate ,CMSMediaConfigurationId,CMSMappingId,@PortalId,TypeOFMapping,MediaPath,WidgetsKey
		FROM @CMSWidgetDataFinal Inner join @TBL_ProductionVersionId B On B.PortalId = @PortalId
	End
	SET @Status = 1;

END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishMediaWidgetEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+''',@CMSMappingId= ' + CAST(@CMSMappingId  AS varchar(20))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishMediaWidgetEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishMessageEntity')
	DROP PROC Znode_SetPublishMessageEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishMessageEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = ''
  ,@CMSMessageKeyId INT = 0 
  ,@UserId int = 0 
  ,@Status int = 0 Output 
)
AS
/*
    This Procedure is used to publish the content block 
	1. For ZnodePublishGlobalMessageEntity pass parameter Value for @CMSMessageKeyId and @PortalId should be 0 
	declare @Status int 
	Exec [dbo].[ZnodeSetPublishMessageEntity]
	   @PortalId  = 0 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@IsPreviewEnable = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'PRODUCTION'
	  ,@CMSMessageKeyId = 25 
	  ,@UserId = 2 
	  ,@Status = @Status  Output 

	 2. For ZnodePublishMessageEntity  pass parameter Value for @CMSMessageKeyId should be 0 
	 declare @Status int 
	Exec [dbo].[ZnodeSetPublishMessageEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@IsPreviewEnable = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'PRODUCTION'
	  ,@CMSMessageKeyId = 0 
	  ,@UserId = 2 
	  ,@Status = @Status  Output 

  
	EXEC ZnodeSetPublishMessageEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	 Exec [ZnodeSetPublishMessageEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =88 
  ,@UserId = 0 
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		SET @Status =1 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		
		---Following code is manditory because this sp get call from multiple places
		If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
		Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
			SET @IsPreviewEnable = 1 
		else 
			SET @IsPreviewEnable = 0 

		If @PortalId > 0 
		Begin
		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
		End 
		Else 
		Begin
			Declare @GlobalVersion Table ( VersionId int Identity(1,1), LocaleId int , Publishstate varchar(300))
			if @IsPreviewEnable = 1
			Begin
				Insert into @GlobalVersion  
				Select LocaleId , 'PREVIEW' from @TBL_Locale 
			End
			Insert into @GlobalVersion  
				Select LocaleId , 'PRODUCTION' from @TBL_Locale 
		end
		
		If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
		Begin
			If not exists (Select TOP 1 1 from @Tbl_PreviewVersionId) AND @PortalId > 0 
				SET @Status =0 ;
			If @CMSMessageKeyId > 0 AND @Status =0     -- Content block
				SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
			if @Status  = 0 
				Return 0 
		End
		
		If  (@RevisionState like '%Production%' OR @RevisionState = 'None')
		Begin
			If not exists (Select TOP 1 1 from @Tbl_ProductionVersionId) AND @PortalId > 0
				SET @Status =0 ;
			If @CMSMessageKeyId > 0 AND @Status =0  -- Content block
				SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
			if @Status  = 0 
				Return 0 
		End
		
		 DECLARE @TBL_CMSMessageDataFinal TABLE
                     (CMSMessageId INT,
                      LocaleId     INT,
                      Message      NVARCHAR(MAX),
                      MessageKey   NVARCHAR(100),
                      AreaName     VARCHAR(100)
                     );
		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN
			    SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				Begin  
					;With Cte_GetCMSSEODetails AS 
					(
						
						    SELECT DISTINCT ZCM.CMSMessageId,ZCM.LocaleId,ZCM.Message,ZCMK.MessageKey,'' AreaName
                            FROM ZnodeCMSmessage AS ZCM
                            INNER JOIN ZnodeCMSPortalMessage AS ZCPM ON ZCM.CMSMessageId = ZCPM.CMSMessageId
                            INNER JOIN znodecmsmessagekey AS ZCMK ON ZCPM.CMSMessageKeyId = ZCMK.CMSMessageKeyId
                            WHERE (ZCPM.PortalId = @PortalId OR  @PortalId = 0 )  
							AND (ZCM.LocaleId = @SetLocaleId OR ZCM.LocaleId = @DefaultLocaleId) 
							AND (ZCMK.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							 CMSMessageId,LocaleId,Message,MessageKey,AreaName
							 FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							CMSMessageId,LocaleId,Message,MessageKey,AreaName
						FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							 CMSMessageId,LocaleId,Message,MessageKey,AreaName
						FROM Cte_GetCMSSEODetails p
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS ( SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails AS q WHERE q.MessageKey = p.MessageKey)
					)
					
					insert into @TBL_CMSMessageDataFinal(CMSMessageId,LocaleId,Message,MessageKey,AreaName)
					SELECT CMSMessageId,@SetLocaleId ,Message,MessageKey,AreaName FROM Cte_GetDefaultFilterData  A 
				End 
				
				SET @IncrementalId = @IncrementalId + 1;
				--DELETE FROM @CMSWidgetData;
				--DELETE FROM @CMSWidgetDataFinal;
        END;
	
	End

	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin

		If @PortalId  >0 
		Begin
	
			--Data inserted into flat table ZnodePublishMessageEntity (Replica of MongoDB Collection )  
			Delete from ZnodePublishMessageEntity where PortalId = @PortalId  
			and MessageKey in (select MessageKey from @TBL_CMSMessageDataFinal) 
			and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId) 
		
			Insert Into ZnodePublishMessageEntity 
			(VersionId,PublishStartTime,LocaleId,PortalId,MessageKey,Message,Area)
			SELECT B.PreviewVersionId , @GetDate, A.LocaleId,@PortalId,MessageKey,Message,AreaName
			FROM @TBL_CMSMessageDataFinal A inner join @Tbl_PreviewVersionId B on 
			@PortalId = B.PortalId and  A.LocaleId = B.LocaleId

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )
		End
		If @PortalId  = 0 
		Begin
		
			--ZnodePublishGlobalVersionEntity
			Insert into  ZnodePublishGlobalVersionEntity (VersionId,PublishStartTime,PublishState,LocaleId)
			select A.VersionId, @GetDate,A.Publishstate, A.LocaleId from @GlobalVersion A  where  A.PublishState = 'PREVIEW'
			and Not exists (Select TOP 1 1 from ZnodePublishGlobalVersionEntity B where B.LocaleId = A.LocaleId
			and B.PublishState = 'PREVIEW') 


			--Data inserted into flat table ZnodePublishMessageEntity (Replica of MongoDB Collection )  
			Delete from ZnodePublishGlobalMessageEntity where VersionId in (Select VersionId from  ZnodePublishGlobalVersionEntity
			where PublishState = 'PREVIEW' ) 
			AND (
			(Exists (Select TOP 1 1 from @TBL_CMSMessageDataFinal CMD where CMD.MessageKey = ZnodePublishGlobalMessageEntity.MessageKey))
			OR @CMSMessageKeyId = 0	)

			Insert Into ZnodePublishGlobalMessageEntity 
			(VersionId,PublishStartTime,LocaleId,MessageKey,Message,Area)
			SELECT B.VersionId , @GetDate, A.LocaleId,MessageKey,Message,AreaName
			FROM @TBL_CMSMessageDataFinal A inner join ZnodePublishGlobalVersionEntity B on 
			A.LocaleId = B.LocaleId AND B.PublishState = 'PREVIEW'

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPreview()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )

		End
		
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		
		if (@PortalId > 0 ) 
		Begin
			-- Only production version id will process 
			Delete from ZnodePublishMessageEntity where PortalId = @PortalId  
			and MessageKey in (select MessageKey from @TBL_CMSMessageDataFinal) 
			and VersionId in (Select ProductionVersionId from @TBL_ProductionVersionId ) 
		
			Insert Into ZnodePublishMessageEntity 
				(VersionId,PublishStartTime,LocaleId,PortalId,MessageKey,Message,Area)
				SELECT B.ProductionVersionId , @GetDate, A.LocaleId,@PortalId,MessageKey,Message,AreaName
				FROM @TBL_CMSMessageDataFinal A inner join @Tbl_ProductionVersionId B on 
				@PortalId = B.PortalId and  A.LocaleId = B.LocaleId		

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )
		End 
		else 
		If @PortalId  = 0 
		Begin
				--ZnodePublishGlobalVersionEntity
			Insert into  ZnodePublishGlobalVersionEntity (VersionId,PublishStartTime,PublishState,LocaleId)
			select A.VersionId, @GetDate,A.Publishstate, A.LocaleId from @GlobalVersion A  where  A.PublishState = 'PRODUCTION'
			and Not exists (Select TOP 1 1 from ZnodePublishGlobalVersionEntity B where B.LocaleId = A.LocaleId
			and B.PublishState = 'PRODUCTION') 

			--Data inserted into flat table ZnodePublishMessageEntity (Replica of MongoDB Collection )  
			Delete from ZnodePublishGlobalMessageEntity where VersionId in (Select VersionId from  ZnodePublishGlobalVersionEntity
			where PublishState = 'PRODUCTION' )  
			AND (
			(Exists (Select TOP 1 1 from @TBL_CMSMessageDataFinal CMD where CMD.MessageKey = ZnodePublishGlobalMessageEntity.MessageKey))
			OR @CMSMessageKeyId = 0	)

			Insert Into ZnodePublishGlobalMessageEntity 
			(VersionId,PublishStartTime,LocaleId,MessageKey,Message,Area)
			SELECT B.VersionId , @GetDate, A.LocaleId,MessageKey,Message,AreaName
			FROM @TBL_CMSMessageDataFinal A inner join ZnodePublishGlobalVersionEntity B on 
			A.LocaleId = B.LocaleId AND B.PublishState = 'PRODUCTION'

			Update B Set B.IsPublished  =1 , PublishStateId = DBO.Fn_GetPublishStateIdForPublish()  
			from ZnodeCmsPortalMessage A 
			Inner join ZnodeCmsMessage B ON A.CMSMessageId = B.CMSMessageId 
			inner join ZnodeCmsMessagekey C   On A.CMSMessageKeyId = C.CMSMessageKeyId 
			where (C.CMSMessageKeyId = @CMSMessageKeyId OR @CMSMessageKeyId  = 0 ) 
			AND (A.PortalId = @PortalId OR @PortalId= 0 )


		End
		
	End
		
	SET @Status = 1 
	If @CMSMessageKeyId > 0 
	SELECT 0 AS ID,CAST(1 AS BIT) AS Status;   
END TRY 
BEGIN CATCH 
	SET @Status = 0  
 
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishMessageEntity 
			@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
			+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
			+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
			+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		    +',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
	If @CMSMessageKeyId > 0 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishMessageEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishPortalBrandEntity')
	DROP PROC Znode_SetPublishPortalBrandEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishPortalBrandEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishPortalBrandEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishPortalBrandEntity]
	   @PortalId  = 7 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Production' 
	  ,@CMSMappingId = 0
	  ,@UserId = 0 
  
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
			DECLARE @TBL_BrandDetails TABLE  
        (
			Description         NVARCHAR(MAX),  
			BrandId             INT,  
			BrandCode           VARCHAR(600),  
			DisplayOrder        INT,  
			IsActive            BIT,  
			WebsiteLink         NVARCHAR(1000),  
			BrandDetailLocaleId INT,  
			SEOFriendlyPageName NVARCHAR(600),  
			MediaPath           NVARCHAR(MAX),  
			MediaId             INT,  
			ImageName           VARCHAR(300),
			BrandName			VARCHAR(100),	
			Custom1				NVARCHAR(MAX),	
			Custom2				NVARCHAR(MAX),
			Custom3				NVARCHAR(MAX),
			Custom4				NVARCHAR(MAX),
			Custom5				NVARCHAR(MAX),
			PortalId			Int,
			IsAssociated        Bit 
        );  
  
    DECLARE @AttributeId INT= [dbo].[Fn_GetProductBrandAttributeId]();  
             
	DECLARE @TBL_AttributeDefault TABLE  
    (
		PimAttributeId            INT,  
		AttributeDefaultValueCode VARCHAR(600),  
		IsEditable                BIT,  
		AttributeDefaultValue     NVARCHAR(MAX),
		DisplayOrder			  INT   
    );  

    DECLARE @TBL_SeoDetails TABLE  
    (
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT ,
		PublishStatus        NVARCHAR(20),
		SEOCode				 NVARCHAR(4000),
		CanonicalURL		 VARCHAR(200),
		RobotTag			 VARCHAR(50)			   
    );  

    DECLARE @TBL_BrandDetail TABLE  
    (
		Description          NVARCHAR(MAX),  
		BrandId              INT,  
		BrandCode            VARCHAR(600),  
		DisplayOrder         INT,  
		IsActive             BIT,  
		WebsiteLink          NVARCHAR(1000),  
		BrandDetailLocaleId  INT,  
		MediaPath            NVARCHAR(MAX),  
		MediaId              INT,  
		ImageName      VARCHAr(300) ,  
		CMSSEODetailId       INT,  
		SEOTitle             NVARCHAR(MAX),  
		SEOKeywords          NVARCHAR(MAX),  
		SEOURL               NVARCHAR(MAX),  
		ModifiedDate         DATETIME,  
		SEODescription       NVARCHAR(MAX),  
		MetaInformation      NVARCHAR(MAX),  
		IsRedirect           BIT,  
		CMSSEODetailLocaleId INT,  
		--SEOId                INT,  
		BrandName            NVARCHAR(MAX),  
		RowId                INT,  
		CountId              INT ,
		SEOCode              NVARCHAR(4000), 
		Custom1              NVARCHAR(MAX),
		Custom2              NVARCHAR(MAX),
		Custom3              NVARCHAR(MAX),
		Custom4              NVARCHAR(MAX),
		Custom5              NVARCHAR(MAX),
		PortalId			 INT
    );  

		iF object_id('tempdb..[#TBL_BrandDetail]') IS NOT NULL
			drop table tempdb..#TBL_BrandDetail
		Create Table #TBL_BrandDetail
		(
			Description          NVARCHAR(MAX),  
			BrandId              INT,  
			BrandCode            VARCHAR(600),  
			DisplayOrder         INT,  
			IsActive             BIT,  
			WebsiteLink          NVARCHAR(1000),  
			BrandDetailLocaleId  INT,  
			MediaPath            NVARCHAR(MAX),  
			MediaId              INT,  
			ImageName      VARCHAr(300) ,  
			CMSSEODetailId       INT,  
			SEOTitle             NVARCHAR(MAX),  
			SEOKeywords          NVARCHAR(MAX),  
			SEOFriendlyPageName  NVARCHAR(MAX),  
			ModifiedDate         DATETIME,  
			SEODescription       NVARCHAR(MAX),  
			MetaInformation      NVARCHAR(MAX),  
			IsRedirect           BIT,  
			CMSSEODetailLocaleId INT,  
			--SEOId                INT,  
			BrandName            NVARCHAR(MAX),  
			PromotionId		     INT,
			RowId                INT,  
			CountId              INT ,
			SEOCode              NVARCHAR(4000), 
			Custom1              NVARCHAR(MAX),
			Custom2              NVARCHAR(MAX),
			Custom3              NVARCHAR(MAX),
			Custom4              NVARCHAR(MAX),
			Custom5              NVARCHAR(MAX),
			PortalId			 INT,
			LocaleId             INT  
		);  
		
		
		;WITH Cte_GetBrandBothLocale AS 
	(
		SELECT ZBDL.Description,ZBD.BrandId,LocaleId,ZBD.BrandCode,isnull(ZPB.DisplayOrder,999) as DisplayOrder,ZBD.IsActive,ZBD.WebsiteLink,ZBDl.BrandDetailLocaleId,  
			SEOFriendlyPageName,[dbo].[Fn_GetMediaThumbnailMediaPath](Zm.path) MediaPath,ZBD.MediaId,Zm.path ImageName, ZBDL.BrandName, ZBD.Custom1, ZBD.Custom2, ZBD.Custom3, ZBD.Custom4, ZBD.Custom5, ZPB.PortalId,
			CASE WHEN ZPB.PortalBrandId IS NULL THEN 0 ELSE 1 END IsAssociated
		FROM ZnodeBrandDetails ZBD 
		LEFT JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId AND (ZPB.PortalId = @PortalId OR isnull(@PortalId,0) = 0 )
		LEFT JOIN ZnodeBrandDetailLocale ZBDL ON(ZBD.BrandId = ZBDL.BrandId)  
		LEFT JOIN ZnodeMedia ZM ON(ZM.MediaId = ZBD.MediaId)  
		WHERE LocaleId IN(@LocaleId, @DefaultLocaleId)  
		
              
    ),  
    Cte_BrandFirstLocale AS 
	(
		SELECT Description,BrandId,LocaleId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId , IsAssociated
        FROM Cte_GetBrandBothLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	),  
    Cte_BrandDefaultLocale AS 
	(
		SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated  
        FROM Cte_BrandFirstLocale  
        UNION ALL  
        SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
		FROM Cte_GetBrandBothLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandFirstLocale CTBFL  
			WHERE CTBBL.BrandId = CTBFL.BrandId  
		)
	)    
	INSERT INTO @TBL_BrandDetails (Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName, BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated)  
    SELECT Description,BrandId,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,SEOFriendlyPageName,MediaPath,MediaId,ImageName , BrandName, Custom1, Custom2, Custom3, Custom4, Custom5, PortalId, IsAssociated
    FROM Cte_BrandDefaultLocale CTEBD;
       
	-----Update BrandName from attributedefault value
	;WITH Cte_GetBrandNameLocale AS 
	(
		select d.brandcode, a.AttributeDefaultValueCode, b.AttributeDefaultValue, b.LocaleId 
		from ZnodePimAttributeDefaultValue a
		inner join ZnodePimAttributeDefaultValueLocale b on a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId 
		inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
		inner join @TBL_BrandDetails d on a.AttributeDefaultValueCode = d.brandcode
		where c.attributecode = 'brand' and b.LocaleId IN(@LocaleId, @DefaultLocaleId)
              
    )
	,Cte_BrandNameFirstLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_GetBrandNameLocale CTGBBL  
        WHERE LocaleId = @LocaleId
	)
	,Cte_BrandDefaultLocale AS 
	(
		SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
        FROM Cte_BrandNameFirstLocale  
        UNION ALL  
        SELECT brandcode, AttributeDefaultValueCode, AttributeDefaultValue, LocaleId  
		FROM Cte_GetBrandNameLocale CTBBL  
		WHERE LocaleId = @DefaultLocaleId  
		AND NOT EXISTS  
		(  
			SELECT TOP 1 1  
			FROM Cte_BrandNameFirstLocale CTBFL  
			WHERE CTBBL.brandcode = CTBFL.brandcode  
		)
	)  
	update b1 set b1.brandname = a1.AttributeDefaultValue
	from Cte_BrandDefaultLocale a1
	inner join @TBL_BrandDetails b1 on a1.brandcode = b1.brandcode

	DECLARE @SeoCode SelectColumnList
	INSERT INTO @SeoCode
	SELECT BrandCode FROM @TBL_BrandDetails
				

    INSERT INTO @TBL_SeoDetails 
	(
		CMSSEODetailId,SEOTitle,SEOKeywords,SEOURL,ModifiedDate,SEODescription,MetaInformation,IsRedirect,
		CMSSEODetailLocaleId,PublishStatus,SEOCode,CanonicalURL,RobotTag
	)  
    EXEC Znode_GetSeoDetails @SeoCode, 'Brand', @LocaleId;  
			              
    SELECT TBBD.*,TBSD.*
    INTO #TM_BrandLocale  
    FROM @TBL_BrandDetails TBBD  
    INNER JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode)  
	INNER JOIN ZnodeCmsSeoDetail CSD ON TBSD.CMSSEODetailId = CSD.CMSSEODetailId AND TBBD.PortalId = CSD.PortalId
	
	INSERT INTO #TM_BrandLocale
	SELECT DISTINCT TBBD.*,TBSD.*
    FROM @TBL_BrandDetails TBBD  
    LEFT JOIN @TBL_SeoDetails TBSD ON(TBSD.SEOCode = TBBD.BrandCode) 
	WHERE NOT EXISTS(SELECT * FROM #TM_BrandLocale BL WHERE TBBD.BrandId = BL.BrandId AND TBBD.BrandDetailLocaleId = BL.BrandDetailLocaleId)

		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			
			Insert into #TBL_BrandDetail
			(BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId,LocaleId)
			select BrandId,Description,BrandCode,DisplayOrder,IsActive,WebsiteLink,BrandDetailLocaleId,MediaPath,MediaId,ImageName,CMSSEODetailId,SEOTitle,SEOKeywords,SEOFriendlyPageName,SEODescription,MetaInformation,IsRedirect,CMSSEODetailLocaleId,BrandName,
			0 PromotionId ,SEOCode,Custom1, Custom2, Custom3, Custom4, Custom5, PortalId ,@SetLocaleId from #TM_BrandLocale 
			where  PortalId = @PortalId
		SET @IncrementalId = @IncrementalId +1 
		END 
	End


	If @IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishPortalBrandEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in 
		( Select PreviewVersionId from @Tbl_PreviewVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId, BrandId,BrandCode,BrandName,MediaId ,WebsiteLink,Description,PublishState,
		 SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,
		 BrandDetailLocaleId,ImageName,Custom1,Custom2,Custom3,Custom4,Custom5)
		SELECT B.PreviewVersionId , @GetDate,B.PortalId ,B.LocaleId ,a.BrandId,BrandCode,BrandName,MediaId ,WebsiteLink,
		       Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName ,a.DisplayOrder,IsActive,MediaPath,
			   CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName,Custom1,Custom2,Custom3,Custom4,Custom5
		FROM #TBL_BrandDetail A inner join @TBL_PreviewVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		inner join ZnodePortalBrand ZPB on a.BrandId = ZPB.BrandId and b.PortalId = ZPB.PortalId

	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishPortalBrandEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from @TBL_ProductionVersionId)
		
		Insert Into ZnodePublishPortalBrandEntity 
		(VersionId,PublishStartTime,PortalId,LocaleId,BrandId,BrandCode,BrandName,MediaId
		 ,WebsiteLink,Description,PublishState,SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		 ,DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName)
		SELECT B.ProductionVersionId , @GetDate,B.PortalId ,B.LocaleId
		,a.BrandId,BrandCode,BrandName,MediaId
		,WebsiteLink,Description,'PREVIEW',SEOTitle,SEOKeywords,SEODescription,SEOFriendlyPageName
		,a.DisplayOrder,IsActive,MediaPath,CMSSEODetailId,CMSSEODetailLocaleId,BrandDetailLocaleId,ImageName
		FROM #TBL_BrandDetail A inner join @TBL_ProductionVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		inner join ZnodePortalBrand ZPB on a.BrandId = ZPB.BrandId and b.PortalId = ZPB.PortalId
	End
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishPortalBrandEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishPortalBrandEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishPortalCustomCssEntity')
	DROP PROC Znode_SetPublishPortalCustomCssEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishPortalCustomCssEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@VersionId INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT 

)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC [ZnodeSetPortalCustomCssEntity] 1 2,3

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 


		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @TBL_CustomeCSSEntity TABLE (PortalId int,DynamicStyle	nvarchar(max),PublishState	varchar(50), LocaleId	int	)
		
		DECLARE @WebStoreEntityId int 
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			Insert into @TBL_CustomeCSSEntity 
			(
				PortalId,DynamicStyle,LocaleId
			)
			Select  PortalId,DynamicCssStyle,@SetLocaleId FROM ZnodePortalCustomCss
			Where PortalId  = @PortalId and IsActive =1 
			
		SET @IncrementalId = @IncrementalId +1 
		END 
		-- Data inserted into flat table ZnodeWebStoreEntity (Replica of MongoDB Collection )  
		
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

		Delete from ZnodePublishPortalCustomCssEntity where VersionId in (Select PreviewVersionId  from  @TBL_PreviewVersionId ) AND PortalId = @PortalId
	 		 
		Insert Into ZnodePublishPortalCustomCssEntity 
		(
			VersionId,PublishStartTime,PortalId,DynamicStyle,PublishState,LocaleId
		)
		SELECT B.PreviewVersionId  , @GetDate,A.PortalId,DynamicStyle,'PREVIEW',A.LocaleId  FROM @TBL_CustomeCSSEntity A Inner Join
		@TBL_PreviewVersionId B on A.PortalId = B.PortalId  and A.LocaleId = B.LocaleId 
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishPortalCustomCssEntity where VersionId = @ProductionVersionId  AND PortalId = @PortalId
		
		Insert Into ZnodePublishPortalCustomCssEntity 
		(
			VersionId,PublishStartTime,PortalId,DynamicStyle,PublishState,LocaleId
		)
		SELECT B.ProductionVersionId  , @GetDate,A.PortalId,DynamicStyle,'PRODUCTION',A.LocaleId   FROM @TBL_CustomeCSSEntity 
		A Inner join @Tbl_ProductionVersionId   B On A.PortalId = B.PortalId and A.LocaleId  = B.LocaleId 


	End
	SET @Status =1 ;


	End
END TRY 
BEGIN CATCH 
	SET @Status =0  

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishPortalCustomCssEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishPortalCustomCssEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishPortalGlobalAttributeEntity')
	DROP PROC Znode_SetPublishPortalGlobalAttributeEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishPortalGlobalAttributeEntity]
     (
         @PortalId int = 0
	    ,@IsPreviewEnable int = 0 
		,@PreviewVersionId INT = 0 
		,@ProductionVersionId INT = 0 
		,@RevisionState varchar(50) = '' 
		,@UserId int = 0 
		,@Status int  Output
	  )
AS
    
/*
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and insert into following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.

 */

BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PRODUCTION'
			End 
		Else 
		
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
			DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
			DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))



	           DECLARE @TBL_GlobalAttributeGrouplist TABLE ([GlobalAttributeGroupId] INT , [AttributeGroupDisplayOrder] INT,Groups int )
			   DECLARE @TBL_GlobalAttributelist      TABLE ([GlobalAttributeGroupId] INT , [GlobalAttributeId] INT,[AttributeDisplayOrder] int ,Attributes int )
			   Declare	@EntityAttributeValueList as	table
			    (IsInput bit, IsMedia BIT, AttributeValues int,PortalGlobalAttributeValueId int,GlobalAttributeId int,AttributeValue nvarchar(max),
				GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
				AttributeDefaultValue nvarchar(300),
				MediaId int,MediaPath nvarchar(300) ,SwatchText nvarchar(300),DisplayOrder int,SingleAttributeValue nvarchar(max))
			    Declare	@EntityAttributeSingleValueList as	table
			    (AttributeValues int,PortalGlobalAttributeValueId int,GlobalAttributeId int)

			   Declare @StoreName nvarchar(max),@LocaleId INT 
			   , @GetDate DATETIME =dbo.Fn_GetDate()
			  
			   --Select @LocaleId=LocaleId
			   --From ZnodePortalLocale
			   --Where PortalId=@PortalId
			   --and IsDefault=1



				Select @StoreName= StoreName 
				from ZnodePortal 
				Where PortalId =@PortalId


				insert into @EntityAttributeValueList
				(IsInput, IsMedia,AttributeValues,PortalGlobalAttributeValueId,GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath,SingleAttributeValue)
				Select case when zga.GroupAttributeType in('Input','TextArea')   then 1  else 0 end ,
				 0, 1, aa.PortalGlobalAttributeValueId,aa.GlobalAttributeId,aa.PortalGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,
				--case when bb.MediaPath is not null then  --@V_MediaServerThumbnailPath+
				--bb.MediaPath--+'~'+convert(nvarchar(10),bb.MediaId) 
				--else bb.AttributeValue end,	
				case when zga.GroupAttributeType in('Input','TextArea')   then null  else  bb.AttributeValue  end AttributeValue,	  
				bb.MediaId,bb.MediaPath,
				case when zga.GroupAttributeType in('Input','TextArea')   then bb.AttributeValue   else null end  SingleAttributeValue	
				from  dbo.ZnodePortalGlobalAttributeValue aa
				inner join ZnodePortalGlobalAttributeValueLocale bb ON bb.PortalGlobalAttributeValueId = aa.PortalGlobalAttributeValueId 
				inner join View_ZnodeGlobalAttribute zga       on zga.[GlobalAttributeId]=aa.[GlobalAttributeId]
				Where  PortalId=@PortalId
				and bb.MediaId is null 
				

				insert into @EntityAttributeValueList
				(IsInput,IsMedia,AttributeValues,PortalGlobalAttributeValueId,GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath,SingleAttributeValue)
				Select 1,1 ,1, aa.PortalGlobalAttributeValueId,aa.GlobalAttributeId,aa.PortalGlobalAttributeValueId,null GlobalAttributeDefaultValueId,
				NULL AttributeValue,	  
				NULL MediaId,null MediaPath,
				NULL SingleAttributeValue	
				from  dbo.ZnodePortalGlobalAttributeValue aa
				inner join View_ZnodeGlobalAttribute zga       on zga.[GlobalAttributeId]=aa.[GlobalAttributeId]
				Where  PortalId=@PortalId
				and zga.GroupAttributeType ='Media'


				update aa
				Set SingleAttributeValue= ( Select bb.MediaPath from  ZnodePortalGlobalAttributeValueLocale bb 
				 Where bb.PortalGlobalAttributeValueId = aa.PortalGlobalAttributeValueId
				 FOR XML PATH ('') )				
				from  @EntityAttributeValueList aa
		    	Where aa.IsMedia=1

				update aa
				Set SingleAttributeValue= replace(replace(SingleAttributeValue,'</MediaPath>',','),'<MediaPath>','')
				from  @EntityAttributeValueList aa
		    	Where aa.IsMedia=1

				update aa
				Set SingleAttributeValue= Substring(SingleAttributeValue,1,len(SingleAttributeValue)-1)
				from  @EntityAttributeValueList aa
		    	Where aa.IsMedia=1
				  


				update aa
				Set AttributeDefaultValueCode= h.AttributeDefaultValueCode,
				    SwatchText=h.SwatchText,
					AttributeValue=g.AttributeDefaultValue,
					GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
					DisplayOrder=h.DisplayOrder
				from  @EntityAttributeValueList aa
				inner JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
				inner JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId
          
		 
			   insert into @TBL_GlobalAttributeGrouplist
			   ([GlobalAttributeGroupId] , [AttributeGroupDisplayOrder],Groups )
				SELECT ss.[GlobalAttributeGroupId],ss.[AttributeGroupDisplayOrder],1
				FROM [dbo].[ZnodeGlobalGroupEntityMapper] SS
				inner join dbo.ZnodeGlobalEntity aa on ss.[GlobalEntityId]=aa.[GlobalEntityId]
				WHere aa.EntityName='Store'
				--FOR XML PATH('')

				insert into @TBL_GlobalAttributelist
				([GlobalAttributeGroupId] , [GlobalAttributeId],[AttributeDisplayOrder],Attributes )
				SELECT aa.[GlobalAttributeGroupId],aa.[GlobalAttributeId] ,aa.[AttributeDisplayOrder],1
				FROM [dbo].[ZnodeGlobalAttributeGroupMapper] aa
				inner join @TBL_GlobalAttributeGrouplist ss on ss.GlobalAttributeGroupId=aa.GlobalAttributeGroupId
			
				IF object_id('tempdb..[#GlobalAttributeGrouplist]') IS NOT NULL
				drop table tempdb..#GlobalAttributeGrouplist

				Create Table #GlobalAttributeGrouplist ( LocaleId	int,GlobalAttributeGroupId	int	,
				GroupCode	varchar	(200),AttributeGroupName	nvarchar(600),AttributeGroupDisplayOrder	int	,
				GlobalAttributeId	int	,AttributeDisplayOrder	int	,AttributeCode	nvarchar	(600),
				AttributeName	nvarchar	(600),IsRequired	bit	,AttributeTypeName	varchar	(300),
				AttributeTypeId	int	,SingleAttributeValue	nvarchar(max),SelectValues	nvarchar(max))
				set @LocaleId = 0 
				INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
				SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
				WHILE @IncrementalId <= @MaxCount
				BEGIN 
					SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
					;With Cte_GetCmsBlogNewsData AS 
					(
					Select distinct @SetLocaleId AS LocaleId,
						aa.[GlobalAttributeGroupId] AS 'GlobalAttributeGroupId' ,
						zgag.GroupCode	AS 'GroupCode'		 ,  
						zgagl.AttributeGroupName  AS 'AttributeGroupName'   ,
						AttributeGroupDisplayOrder 	 , 
						ss.GlobalAttributeId	 AS 'GlobalAttributeId'	 ,
						ss.[AttributeDisplayOrder] AS 'AttributeDisplayOrder'	,
						zga.AttributeCode AS 'AttributeCode'	,			
						zgal.AttributeName AS 'AttributeName'	,
						zga.IsRequired AS 'IsRequired'	,
						zga.AttributeTypeName AS 'AttributeTypeName'      ,
						zga.AttributeTypeId AS 'AttributeTypeId' 		,
						sv.SingleAttributeValue AS 'SingleAttributeValue'	,	
	   
						( Select 
						SelectValuesEntity.DisplayOrder					as DisplayOrder,
						SelectValuesEntity.GlobalAttributeDefaultValueId as GlobalAttributeDefaultValueId,
						SelectValuesEntity.AttributeValue				as [Value]	,
						SelectValuesEntity.AttributeDefaultValueCode		as Code	,
						SelectValuesEntity.SwatchText                    as SwatchText	,
						SelectValuesEntity.MediaPath		         		as [Path]	
						from  @EntityAttributeValueList SelectValuesEntity 
						Where SelectValuesEntity.PortalGlobalAttributeValueId = sv.PortalGlobalAttributeValueId
						and 
						zga.GroupAttributeType ='Select'
						FOR JSON Auto, INCLUDE_NULL_VALUES    
						)  as 'SelectValues'
					from 
						@TBL_GlobalAttributeGrouplist aa				
						inner join @TBL_GlobalAttributelist ss on  ss.GlobalAttributeGroupId=aa.GlobalAttributeGroupId
						inner join ZnodeGlobalAttributeGroup zgag on zgag.[GlobalAttributeGroupId]=aa.[GlobalAttributeGroupId]
						inner join ZnodeGlobalAttributeGroupLocale zgagl on zgagl.GlobalAttributeGroupId=zgag.GlobalAttributeGroupId
						inner join View_ZnodeGlobalAttribute zga       on zga.[GlobalAttributeId]=ss.[GlobalAttributeId]
						inner join ZnodeGlobalAttributeLocale zgal on zga.[GlobalAttributeId]=zgal.[GlobalAttributeId]
						inner join @EntityAttributeValueList sv   on sv.[GlobalAttributeId]=ss.[GlobalAttributeId]
						Where zgagl.LocaleId= zgal.LocaleId and 
						(zgagl.LocaleId = @SetLocaleId OR zgagl.LocaleId = @DefaultLocaleId)  
					)
	     	       , Cte_GetFirstFilterData AS
			       (
						SELECT LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
								GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
								AttributeTypeId,SingleAttributeValue,SelectValues
						FROM Cte_GetCmsBlogNewsData 
						WHERE LocaleId = @SetLocaleId
				   )
					, Cte_GetDefaultFilterData AS
					(
						SELECT LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
								GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
								AttributeTypeId,SingleAttributeValue,SelectValues
						FROM  Cte_GetFirstFilterData 
						UNION ALL 
						SELECT LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
								GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
								AttributeTypeId,SingleAttributeValue,SelectValues
						FROM Cte_GetCmsBlogNewsData CTEC 
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.GlobalAttributeGroupId = CTEC.GlobalAttributeGroupId )
					)
	
						insert into #GlobalAttributeGrouplist 
						(LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues)
						select @SetLocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
								GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
								AttributeTypeId,SingleAttributeValue,SelectValues
						from Cte_GetDefaultFilterData
						
						SET @IncrementalId = @IncrementalId +1 
			   End 

			select distinct GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,LocaleId 
			into #GroupMaster from #GlobalAttributeGrouplist
	
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

		Delete from ZnodePublishPortalGlobalAttributeEntity where  VersionId in (Select PreviewVersionId from @Tbl_PreviewVersionId )
		AND PortalId = @PortalId
	 		 

		Insert Into ZnodePublishPortalGlobalAttributeEntity
		(
			VersionId,PublishStartTime,PortalId,PortalName,LocaleId,GlobalAttributeGroups
		)
			  	
			Select Distinct PV.PreviewVersionId, @GetDate,  @PortalId,@StoreName, GM.LocaleId, (
		    Select 
			A.GlobalAttributeGroupId AS 'GlobalAttributeGroup.GlobalAttributeGroupId',
			A.GroupCode AS 'GlobalAttributeGroup.GroupCode',
			A.AttributeGroupName AS 'GlobalAttributeGroup.AttributeGroupName',
			A.AttributeGroupDisplayOrder AS 'GlobalAttributeGroup.AttributeGroupDisplayOrder',
			A.LocaleId AS 'GlobalAttributeGroup.LocaleId', 
			(
				Select GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
				AttributeTypeName,AttributeTypeId,SingleAttributeValue,SelectValues 
				from #GlobalAttributeGrouplist B where A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
				AND A.LocaleId = B.LocaleId
				For JSON Path 
			) AS 'GlobalAttributeGroup.GlobalAttributes'
			from #GroupMaster A  where A.LocaleId = GM.LocaleId  For Json Path) 
			from #GroupMaster  GM Inner join @Tbl_PreviewVersionId  PV on GM.LocaleId = PV.LocaleId 
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishPortalGlobalAttributeEntity where  VersionId in (Select ProductionVersionId from @Tbl_ProductionVersionId)
		AND PortalId = @PortalId
	 		 

		Insert Into ZnodePublishPortalGlobalAttributeEntity
		(
			VersionId,PublishStartTime,PortalId,PortalName,LocaleId,GlobalAttributeGroups
		)
			  	
			Select Distinct PV.ProductionVersionId, @GetDate,  @PortalId,@StoreName, GM.LocaleId, (
		    Select 
			A.GlobalAttributeGroupId AS 'GlobalAttributeGroup.GlobalAttributeGroupId',
			A.GroupCode AS 'GlobalAttributeGroup.GroupCode',
			A.AttributeGroupName AS 'GlobalAttributeGroup.AttributeGroupName',
			A.AttributeGroupDisplayOrder AS 'GlobalAttributeGroup.AttributeGroupDisplayOrder',
			A.LocaleId AS 'GlobalAttributeGroup.LocaleId', 
			(
				Select GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
				AttributeTypeName,AttributeTypeId,SingleAttributeValue,SelectValues 
				from #GlobalAttributeGrouplist B where A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
				AND A.LocaleId = B.LocaleId
				For JSON Path 
			) AS 'GlobalAttributeGroup.GlobalAttributes'
			from #GroupMaster A  where A.LocaleId = GM.LocaleId  For Json Path) 
			from #GroupMaster  GM Inner join @Tbl_ProductionVersionId  PV on GM.LocaleId = PV.LocaleId 

	End
	SET @Status =1 ;



	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();
	
		SET @Status = 0;
		--DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_GetPublishProducts @PublishCatalogId = '+CAST(@PublishCatalogId AS va		rchar(max))+',@PublishCategoryId='+@PublishCategoryId+',@UserId='+CAST(@UserId AS Varchar(50))+',@NotReturnXML='+CAST(@NotReturnXML AS Varchar(50))+',@UserId = '+CAST(@UserId AS Varchar(50))+',@PimProductId='+CAST(@PimProductId AS Varchar(50))+',@VersionI		d='+CAST(@VersionId AS Varchar(50))+',@TokenId='+CAST(@TokenId AS varchar(max))+',@Status='+CAST(@Status AS varchar(10));
		--SELECT 0 AS ID, CAST(0 AS bit) AS Status;
		--ROLLBACK TRAN GetPublishProducts;
		--EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_GetPublishProducts', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishProductPageEntity')
	DROP PROC Znode_SetPublishProductPageEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishProductPageEntity]
(
   @PortalId  INT = 0
  ,@IsPreviewEnable int = 0 
  ,@PreviewVersionId INT = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int  Output
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishProductPageEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	
 Exec [ZnodeSetPublishProductPageEntity]
   @PortalId  = 1 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =89 
  ,@UserId = 0 

  
 Exec [ZnodeSetPublishProductPageEntity]
   @PortalId  = 1 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =0 
  ,@UserId = 0 



	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
   Begin 
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId

		Declare @ZnodeCMSPortalProductPage Table (ProductPageId	int,PortalId	int,ProductType	varchar(500) ,TemplateName	varchar(500))

		INSERT INTO @ZnodeCMSPortalProductPage
					(ProductPageId,PortalId,ProductType,TemplateName)
					 select CMSPortalProductPageId,PortalId,ProductType,TemplateName from ZnodeCMSPortalProductPage 
					 where PortalId = @PortalId OR @PortalId = 0 
					 

	End 
    --select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishProductPageEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishProductPageEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from @Tbl_PreviewVersionId  ) 
		
		Insert Into ZnodePublishProductPageEntity 
		(VersionId,PublishStartTime,ProductPageId,PortalId,ProductType,TemplateName)
		
		SELECT B.PreviewVersionId , @GetDate, ProductPageId,A.PortalId,ProductType,TemplateName
		FROM @ZnodeCMSPortalProductPage A inner join @Tbl_PreviewVersionId B on A.PortalId = B.PortalId
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishProductPageEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from  @TBL_ProductionVersionId ) 
		Insert Into ZnodePublishProductPageEntity 
		(VersionId,PublishStartTime,ProductPageId,PortalId,ProductType,TemplateName)
		
		SELECT B.ProductionVersionId , @GetDate, ProductPageId,A.PortalId,ProductType,TemplateName
		FROM @ZnodeCMSPortalProductPage A inner join @Tbl_ProductionVersionId B on A.PortalId = B.PortalId
	End
	SET @Status = 1;
END TRY 
BEGIN CATCH 
	
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishProductPageEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishProductPageEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishSearchWidgetEntity')
	DROP PROC Znode_SetPublishSearchWidgetEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishSearchWidgetEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSMappingId int = 0
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishSearchWidgetEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishSearchWidgetEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Preview/Production' 
	  ,@CMSMappingId = 0
	  ,@UserId = 0 

	 Exec [ZnodeSetPublishSearchWidgetEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId = 0
  ,@UserId = 0 

  
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
	
		DECLARE @CMSWidgetDataFinal TABLE (CMSSearchWidgetId INT ,LocaleId  INT ,CMSWidgetsId INT ,WidgetsKey NVARCHAR(256) ,
		CMSMappingId INT ,TypeOFMapping NVARCHAR(100) , [AttributeCode]   varchar(300),[SearchKeyword] varchar(300));		

		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			
			If @CMSMappingId > 0 
			Begin
				;With Cte_GetCMSSEODetails AS 
				(
					SELECT CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
					FROM ZnodeCMSSearchWidget AS a 
					WHERE ( a.TypeOFMapping = 'ContentPageMapping' AND 
					EXISTS ( SELECT TOP 1 1	FROM ZnodeCMSContentPages WHERE IsActive=1 AND a.CMSMappingId = CMSContentPagesId 
					AND PortalId = @PortalId  ) 
					AND	(a.LocaleId = @SetLocaleId OR a.LocaleId = @DefaultLocaleId)  
					AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  ))
				)
				, Cte_GetFirstCMSSEODetails  AS
				(
					SELECT 
						CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
					FROM Cte_GetCMSSEODetails 
					WHERE LocaleId = @SetLocaleId
				)
				, Cte_GetDefaultFilterData AS
				(
					SELECT 
						CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
						 FROM  Cte_GetFirstCMSSEODetails 
					UNION ALL 
					SELECT 
						CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
					FROM Cte_GetCMSSEODetails CTEC 
					WHERE LocaleId = @DefaultLocaleId 
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE CTEFD.CMSMappingId = CTEC.CMSMappingId)
				)
	
				INSERT INTO @CMSWidgetDataFinal (CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword)
				SELECT 
					CMSSearchWidgetId , @SetLocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
				FROM Cte_GetDefaultFilterData  A 
			End
			Else 
			Begin
				;With Cte_GetCMSSEODetails AS 
				(
					SELECT CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
					FROM ZnodeCMSSearchWidget AS a 
					WHERE ( a.TypeOFMapping = 'ContentPageMapping' AND 
					EXISTS ( SELECT TOP 1 1	FROM ZnodeCMSContentPages WHERE IsActive =1 And a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  ) 
					OR ( a.TypeOFMapping = 'PortalMapping'	AND	a.CMSMappingId = @PortalId )
					AND	(a.LocaleId = @SetLocaleId OR a.LocaleId = @DefaultLocaleId))
				)
				, Cte_GetFirstCMSSEODetails  AS
				(
					SELECT 
						CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
					FROM Cte_GetCMSSEODetails 
					WHERE LocaleId = @SetLocaleId
				)
				, Cte_GetDefaultFilterData AS
				(
					SELECT 
						CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
						 FROM  Cte_GetFirstCMSSEODetails 
					UNION ALL 
					SELECT 
						CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
					FROM Cte_GetCMSSEODetails CTEC 
					WHERE LocaleId = @DefaultLocaleId 
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE CTEFD.CMSMappingId = CTEC.CMSMappingId)
				)
	
				INSERT INTO @CMSWidgetDataFinal (CMSSearchWidgetId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword)
				SELECT 
					CMSSearchWidgetId , @SetLocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , AttributeCode,SearchKeyword
				FROM Cte_GetDefaultFilterData  A 
			End
			SET @IncrementalId = @IncrementalId +1 
		END 
	End

	--select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishSearchWidgetEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishSearchWidgetEntity where PortalId = @PortalId  and VersionId in 
		( Select PreviewVersionId from @Tbl_PreviewVersionId)
		AND (MappingId = @CMSMappingId OR @CMSMappingId = 0  )

		Insert Into ZnodePublishSearchWidgetEntity 
		(VersionId,PublishStartTime,CMSSearchWidgetId,MappingId,WidgetsId,PortalId,TypeOFMapping,
		 LocaleId,WidgetsKey,AttributeCode,SearchKeyword	)
		SELECT B.PreviewVersionId , @GetDate,CMSSearchWidgetId,CMSMappingId,CMSWidgetsId,@PortalId,TypeOFMapping,
		 B.LocaleId,WidgetsKey,AttributeCode,SearchKeyword	
	    FROM @CMSWidgetDataFinal A inner join @TBL_PreviewVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId
		--	where Not Exists (Select TOP 1 1 from ZnodePublishSearchWidgetEntity where VersionId = @PreviewVersionId) 
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishSearchWidgetEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from @TBL_ProductionVersionId)
		AND (MappingId = @CMSMappingId OR @CMSMappingId = 0  )
		
		Insert Into ZnodePublishSearchWidgetEntity 
		(
			VersionId,PublishStartTime,CMSSearchWidgetId,MappingId,WidgetsId,PortalId,TypeOFMapping,
		 LocaleId,WidgetsKey,AttributeCode,SearchKeyword		
		)
		SELECT B.ProductionVersionId , @GetDate,CMSSearchWidgetId,CMSMappingId,CMSWidgetsId,@PortalId,TypeOFMapping,
		 A.LocaleId,WidgetsKey,AttributeCode,SearchKeyword	
	    FROM @CMSWidgetDataFinal A
		inner join @TBL_ProductionVersionId B on 
		@PortalId= B.PortalId and A.LocaleId = b.LocaleId

	End
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishSearchWidgetEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+''',@CMSMappingId= ' + CAST(@CMSMappingId  AS varchar(20))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishSearchWidgetEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishSEOCodeEntity')
	DROP PROC Znode_SetPublishSEOCodeEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishSEOCodeEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSSEOTypeId int = 0  
  ,@CMSSEOCode varchar(300) = ''
  ,@UserId int = 0 
  ,@Status bit =0  OUTPUT 
  )
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishSEOEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	declare @Status bit =0 
	Exec [dbo].[ZnodeSetPublishSEOCodeEntity]
	@PortalId  = 1 
	,@LocaleId  = 0
	,@RevisionState = 'Production' 
	,@CMSSEOTypeId = 1 
	,@CMSSEOCode = 'frt0987'
	,@UserId  = 2
	,@Status =@Status  OUTPUT 

GO
 

	declare @p8 bit
	set @p8=1
	exec sp_executesql N'ZnodeSetPublishSEOCodeEntity @PortalId,@LocaleId,@RevisionState,@CMSSEOTypeId,@CMSSEOCode,@UserId,@Status OUT',
	N'@PortalId int,@LocaleId int,@RevisionState varchar(50),@CMSSEOTypeId int,@CMSSEOCode varchar(50),@UserId int,@Status bit OUTput',
	@PortalId=1,@LocaleId=1,@RevisionState=N'Production',@CMSSEOTypeId=1,@CMSSEOCode= N'frt0987',@UserId=2,@Status =@p8 OUTPUT
	select @p8

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))

		DECLARE @TBL_SEO TABLE 
		(
			ItemName varchar(50),CMSSEODetailId int ,CMSSEODetailLocaleId int ,CMSSEOTypeId int ,SEOId int ,SEOTypeName varchar(50),SEOTitle nvarchar(Max)
			,SEODescription nvarchar(Max),
			SEOKeywords nvarchar(Max),SEOUrl nvarchar(Max) ,IsRedirect bit ,MetaInformation nvarchar(Max) ,LocaleId int ,
			OldSEOURL nvarchar(Max),CMSContentPagesId int ,PortalId int ,SEOCode varchar(300) ,CanonicalURL varchar(200),RobotTag varchar(50)
		)
		BEGIN 
			INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
						SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
			WHILE @IncrementalId <= @MaxCount
			BEGIN 
				SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				Begin
					;With Cte_GetCMSSEODetails AS 
					(
							select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
								 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
								 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
								 CDL.LocaleId,
								 NULL OldSEOURL, 
								 NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
								 from ZnodeCMSSEODetail CD 
								 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
								 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
								 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
								 AND (CD.PortalId = @PortalId  OR @PortalId  = 0 ) 
								 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
								 AND (CD.CMSSEOTypeId =@CMSSEOTypeId ) )

					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation, LocaleId ,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	
						FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	  FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	 FROM Cte_GetCMSSEODetails CTEC 
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE CTEFD.CMSSEOTypeId = CTEC.CMSSEOTypeId 
						and seoCode = seoCode )
					)
	
					INSERT INTO @TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
					PortalId,SEOCode,CanonicalURL,RobotTag)
					SELECT 
						ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,@SetLocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag	
					FROM Cte_GetDefaultFilterData  A 
				SET @IncrementalId = @IncrementalId +1 
			END 
		End 
		End			
		
		If (@CMSSEOTypeId =3 )
			Begin 
				Delete from ZnodePublishSeoEntity where (PortalId = @PortalId  OR @PortalId = 0 ) and VersionId  in 
				(select VersionId from ZnodePublishWebstoreentity
				where  (PortalId = @PortalId OR @PortalId = 0 ) 
				--AND (LocaleId  = @LocaleId OR @LocaleId  = 0 )
				AND 
				(
					(ZnodePublishWebstoreentity.PublishState =  Case when  (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) then 'Preview' End ) 
					OR 
					(ZnodePublishWebstoreentity.PublishState =  Case when (@RevisionState like '%Production%' OR @RevisionState = 'None') then  'Production'  end )
				)) 
				AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
				AND (@CMSSEOTypeId = 3  )
	    		
				Insert Into ZnodePublishSeoEntity 
				(
					VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
					PortalId,SEOCode,CanonicalURL,RobotTag	
				)
				SELECT B.VersionId , @GetDate, ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
					A.PortalId,SEOCode,CanonicalURL,RobotTag
				FROM @TBL_SEO A Inner join ZnodePublishWebstoreentity B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId
				AND 
				(
					(B.PublishState =  Case when  (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) then 'Preview' End ) 
					OR 
					(B.PublishState =  Case when (@RevisionState like '%Production%' OR @RevisionState = 'None') then  'Production'  end )
				)
			end 
		If @CMSSEOTypeId in (2,1) 
		Begin
				
				Delete from ZnodePublishSeoEntity where 
				(PortalId = @PortalId  OR @PortalId = 0 ) and VersionId  in 
				(
					Select VersionId  from ZnodePublishVersionEntity  ZPVE inner join ZnodePortalCatalog  
					ZPC ON ZPVE.ZnodeCatalogId = ZPC.PublishCatalogId where  (ZPC.PortalId = @PortalId OR @PortalId = 0 )
					--AND (ZPVE.LocaleId  = @LocaleId OR @LocaleId  = 0 )  
					AND 
					(
						(ZPVE.RevisionType =  Case when  (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) then 'Preview' End ) 
						OR 
						(ZPVE.RevisionType =  Case when (@RevisionState like '%Production%' OR @RevisionState = 'None') then  'Production'  end )
					)
				) 
				AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
				AND (@CMSSEOTypeId in (2,1)) 
	    		
				Insert Into ZnodePublishSeoEntity 
				(
					VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
					PortalId,SEOCode,CanonicalURL,RobotTag	
				)
				SELECT ZPVE.VersionId , @GetDate, ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
					A.PortalId,SEOCode,CanonicalURL,RobotTag
				from ZnodePublishVersionEntity  ZPVE inner join ZnodePortalCatalog  
					ZPC ON ZPVE.ZnodeCatalogId = ZPC.PublishCatalogId 
					Inner join @TBL_SEO A On A.PortalId = ZPC.PortalId  and ZPVE.LocaleId  = A.LocaleId  
					where  (ZPC.PortalId = @PortalId OR @PortalId = 0 )
					AND 
					(
						(ZPVE.RevisionType =  Case when  (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) then 'Preview' End ) 
						OR 
						(ZPVE.RevisionType =  Case when (@RevisionState like '%Production%' OR @RevisionState = 'None') then  'Production'  end )
					)		
		End
	End
	If (@RevisionState = 'Preview'  )
	Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPreview()) , ISPublish = 1 
		from @TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId
	else If (@RevisionState = 'Production'  Or @RevisionState = 'None' )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPublish()) , ISPublish = 1 
		from @TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId

	SELECT 0 AS ID,CAST(1 AS BIT) AS Status;  
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishSEOEntity 
	@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+''',@CMSSEOTypeId= ' + CAST(@CMSSEOTypeId  AS varchar(20))
	+',@UserId = ' + CAST(@UserId AS varchar(20))
	+',@CMSSEOCode  = ''' + CAST(@CMSSEOCode  AS varchar(20)) + '''';
	        			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishSEOEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishSEOEntity')
	DROP PROC Znode_SetPublishSEOEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishSEOEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@PreviewVersionId INT = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSSEOTypeId varchar(500) = '' 
  ,@CMSSEOCode varchar(300) = ''
  ,@UserId int = 0 
  ,@Status int OUTPUT 
  ,@IsCatalogPublish bit = 0 
  ,@VersionIdString varchar(2000) = ''
  ,@IsSingleProductPublish bit = 0 
)
AS
/*
    This Procedure is used to publish the SEO details
  
	EXEC ZnodeSetPublishSEOEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishSEOEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Preview/Production' 
	  ,@CMSSEOTypeId = 0
	  ,@CMSSEOCode = ''
	  ,@UserId = 0 

	 Exec [ZnodeSetPublishSEOEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSSEOTypeId = 3
  ,@CMSSEOCode = ''
  ,@UserId = 0 
*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)
		If (@IsCatalogPublish = 0  AND @IsSingleProductPublish = 0 )
		Begin
			If @PreviewVersionId = 0 
				Begin
   					Insert into @Tbl_PreviewVersionId 
					SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
				end
			Else 
					Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
					where VersionId = @PreviewVersionId
			If @ProductionVersionId = 0 
   				Begin
					Insert into @Tbl_ProductionVersionId 
					SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
				End 
			Else 
				Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @ProductionVersionId
 		End
		--Else if (@IsCatalogPublish= 1  AND @IsSingleProductPublish = 0 )
		--Begin
		--	 IF OBJECT_ID('tempdb..#VesionIds') is not null
		--		DROP TABLE #VesionIds
  				 
		--	 SELECT PV.* into #VesionIds FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
		--End

		IF OBJECT_ID('tempdb..#VesionIds') is not null
				DROP TABLE #VesionIds
  				 
			 SELECT PV.* into #VesionIds FROM ZnodePublishVersionEntity PV Inner join Split(@VersionIdString,',') S ON PV.VersionId = S.Item
		
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		CREATE TABLE #TBL_SEO  
		(
			ItemName varchar(50),CMSSEODetailId int ,CMSSEODetailLocaleId int ,CMSSEOTypeId int ,SEOId int ,SEOTypeName varchar(50),SEOTitle nvarchar(Max)
			,SEODescription nvarchar(Max),
			SEOKeywords nvarchar(Max),SEOUrl nvarchar(Max) ,IsRedirect bit ,MetaInformation nvarchar(Max) ,LocaleId int ,
			OldSEOURL nvarchar(Max),CMSContentPagesId int ,PortalId int ,SEOCode varchar(300) ,CanonicalURL varchar(200),RobotTag varchar(50)
		)
		
		BEGIN 
			INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
			
			SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
			WHILE @IncrementalId <= @MaxCount
			BEGIN 
				SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				IF @IsSingleProductPublish = 0
				Begin
					;With Cte_GetCMSSEODetails AS 
					(
							select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
									 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
									 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
									 CDL.LocaleId,
									 NULL OldSEOURL, 
									 NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
									 from ZnodeCMSSEODetail CD 
									 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
									 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
									 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
									 AND (CD.PortalId = @PortalId  OR @PortalId  = 0 ) 
									 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
									 AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )
									union all
									select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
										 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
										 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
										 CDL.LocaleId,
										 NULL OldSEOURL, 
										 NULL CMSContentPagesId,ZPB.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
										 from ZnodeCMSSEODetail CD 
										 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
										 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId
										 INNER JOIN ZnodeBrandDetails ZBD ON CD.SeoCode = ZBD.BrandCode
										 INNER JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
										 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
										 AND (ZPB.PortalId = @PortalId  OR @PortalId  = 0 ) 
										 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
										 AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )
										 AND CT.Name = 'Brand' 
										 AND @IsCatalogPublish = 0
									 Union All 
									 select CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
								 CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
								 CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
								 CDL.LocaleId,
								 NULL OldSEOURL, 
								 NULL CMSContentPagesId,ZPB.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
								 from ZnodeCMSSEODetail CD 
								 INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
								 INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
								 INNER JOIN ZnodeBrandDetails ZBD ON CD.SeoCode = ZBD.BrandCode
								 INNER JOIN ZnodePortalBrand ZPB ON ZBD.BrandId = ZPB.BrandId
								 WHERE (CDL.LocaleId = @SetLocaleId OR CDL.LocaleId = @DefaultLocaleId)  
								 AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
								 AND (CT.Name = 'Brand' ) 
								 AND @IsCatalogPublish= 1 
					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation, LocaleId ,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	
						FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	  FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
							SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
							PortalId,SEOCode,CanonicalURL,RobotTag	 FROM Cte_GetCMSSEODetails CTEC 
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE CTEFD.CMSSEOTypeId = CTEC.CMSSEOTypeId 
						and CTEFD.seoCode = CTEC.seoCode )
					)
	
					INSERT INTO #TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
					SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
					PortalId,SEOCode,CanonicalURL,RobotTag)
					SELECT 
						ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,@SetLocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag	
					FROM Cte_GetDefaultFilterData  A 

					End 
					Else If @IsSingleProductPublish = 1  
						INSERT INTO #TBL_SEO (ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
						SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,
						PortalId,SEOCode,CanonicalURL,RobotTag)
							SELECT CT.Name ItemName,CD.CMSSEODetailId, CDL.CMSSEODetailLocaleId ,  CD.CMSSEOTypeId ,
							CD.SEOId ,CDL.SEOTitle,CDL.SEODescription,
							CDL.SEOKeywords,Lower(CD.SEOUrl) SEOUrl,CD.IsRedirect,CD.MetaInformation,
							CDL.LocaleId,
							NULL OldSEOURL, 
							NULL CMSContentPagesId,CD.PortalId, CD.seoCode,CDL.CanonicalURL,CDL.RobotTag
							from ZnodeCMSSEODetail CD 
							INNER JOIN ZnodeCMSSEOType CT ON CD.CMSSEOTypeId = CT.CMSSEOTypeId 
							INNER JOIN ZnodeCMSSEODetailLocale CDL ON CD.CMSSEODetailId = CDL.CMSSEODetailId 
							WHERE (CDL.LocaleId = @LocaleId )  
							AND (CD.PortalId = @PortalId  ) 
							AND (Isnull(CD.SEOCode ,'') = @CMSSEOCode OR @CMSSEOCode = '' )
							AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CD.CMSSEOTypeId ) )

				SET @IncrementalId = @IncrementalId +1 
			END 
		End 
		End			

	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%' OR  @RevisionState like '%Production%')  AND @IsSingleProductPublish = 0
	Begin
	    --Data inserted into flat table ZnodePublishSeoEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId  in (Select PreviewVersionId  from @TBL_PreviewVersionId ) 
		AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
		AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		AND @IsCatalogPublish= 0   
		

		If @IsCatalogPublish= 0
		BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 
			FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				Inner join @TBL_PreviewVersionId B on A.LocaleId = B.LocaleId AND A.LocaleId = B.LocaleId
				WHERE B.PreviewVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET C.ItemName = A.ItemName ,
				C.SEOTypeName = A.ItemName,C.SEOTitle = A.SEOTitle,C.SEODescription = A.SEODescription,C.SEOKeywords=A.SEOKeywords,C.SEOUrl = A.SEOUrl,
				C.IsRedirect=A.IsRedirect,C.MetaInformation = A.MetaInformation,C.OldSEOURL = A.OldSEOURL,
				C.CanonicalURL = A.CanonicalURL,C.RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			Inner join @TBL_PreviewVersionId B on A.LocaleId = B.LocaleId AND A.LocaleId = B.LocaleId 
			INNER JOIN ZnodePublishSeoEntity C ON B.PreviewVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag, ElasticSearchEvent
			)
			SELECT B.PreviewVersionId , @GetDate, ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A Inner join @TBL_PreviewVersionId B on A.LocaleId = B.LocaleId AND A.LocaleId = B.LocaleId
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishSeoEntity C WHERE B.PreviewVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId)

		END

		If @IsCatalogPublish= 1
		BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 
			FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				--Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PREVIEW'
				WHERE --B.VersionId = C.VersionId AND 
					A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET C.ItemName = A.ItemName ,
				C.SEOTypeName = A.ItemName, C.SEOTitle = A.SEOTitle,C.SEODescription = A.SEODescription,C.SEOKeywords=A.SEOKeywords,C.SEOUrl = A.SEOUrl,
				C.IsRedirect=A.IsRedirect,C.MetaInformation = A.MetaInformation,C.OldSEOURL = A.OldSEOURL,
				C.CanonicalURL = A.CanonicalURL,C.RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			--Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PREVIEW' 
			INNER JOIN ZnodePublishSeoEntity C ON --B.VersionId = C.VersionId AND 
				A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag, ElasticSearchEvent	
			)
			SELECT C.VersionId , @GetDate, A.ItemName,A.CMSSEODetailId,A.CMSSEODetailLocaleId,A.CMSSEOTypeId,A.SEOId,
				A.ItemName,A.SEOTitle,A.SEODescription,A.SEOKeywords,A.SEOUrl,A.IsRedirect,A.MetaInformation,A.LocaleId,
				A.OldSEOURL,Isnull(A.CMSContentPagesId,0),
				A.PortalId,A.SEOCode,A.CanonicalURL,A.RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A --Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PREVIEW'
			INNER JOIN ZnodePublishSeoEntity C ON 
				A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId

		END
	End

	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None') and @IsSingleProductPublish = 0
	Begin
		-- Only production version id will process 
		Delete from ZnodePublishSeoEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId ) 
		AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
		AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
		AND @IsCatalogPublish= 0  
		--AND EXISTS(SELECT * FROM #VesionIds V WHERE V.VersionId = ZnodePublishSeoEntity.VersionId)

		If @IsCatalogPublish= 0 		
		BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 
			FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				INNER JOIN @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId 
				WHERE B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET ItemName = A.ItemName ,
				SEOTypeName = A.ItemName,SEOTitle = A.SEOTitle,SEODescription = A.SEODescription,SEOKeywords=A.SEOKeywords,SEOUrl = A.SEOUrl,
				IsRedirect=A.IsRedirect,MetaInformation = A.MetaInformation,OldSEOURL = A.OldSEOURL,
				CanonicalURL = A.CanonicalURL,RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			INNER JOIN @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId 
			INNER JOIN ZnodePublishSeoEntity C ON B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag, ElasticSearchEvent
			)
			SELECT B.ProductionVersionId , @GetDate, ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				ItemName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,A.LocaleId,OldSEOURL,Isnull(CMSContentPagesId,0),
				A.PortalId,SEOCode,CanonicalURL,RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A Inner join @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId
			WHERE NOT EXISTS(SELECT * FROM ZnodePublishSeoEntity C WHERE B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId)
		END
	   If @IsCatalogPublish= 1 		
	   BEGIN
			UPDATE C SET C.ElasticSearchEvent = 2 FROM ZnodePublishSeoEntity C
			WHERE NOT EXISTS(SELECT * FROM #TBL_SEO A
				INNER JOIN @TBL_ProductionVersionId B on A.PortalId = B.PortalId and A.LocaleId = B.LocaleId 
				WHERE B.ProductionVersionId = C.VersionId AND A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
							AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode)
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			UPDATE C SET C.ItemName = A.ItemName ,
				C.SEOTypeName = A.ItemName,C.SEOTitle = A.SEOTitle,C.SEODescription = A.SEODescription,C.SEOKeywords=A.SEOKeywords,C.SEOUrl = A.SEOUrl,
				C.IsRedirect = A.IsRedirect,C.MetaInformation = A.MetaInformation, C.OldSEOURL = A.OldSEOURL,
				C.CanonicalURL = A.CanonicalURL, C.RobotTag = A.RobotTag, C.ElasticSearchEvent = 1
			FROM #TBL_SEO A 
			--INNER JOIN #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PRODUCTION'
			INNER JOIN ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND c.VersionId in (Select Item from Split(@VersionIdString,','))

			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	,ElasticSearchEvent
			)
			SELECT C.VersionId , @GetDate, A.ItemName,A.CMSSEODetailId,A.CMSSEODetailLocaleId,A.CMSSEOTypeId,A.SEOId,
				A.ItemName,A.SEOTitle,A.SEODescription,A.SEOKeywords,A.SEOUrl,A.IsRedirect,A.MetaInformation,A.LocaleId,
				A.OldSEOURL,Isnull(A.CMSContentPagesId,0),
				A.PortalId,A.SEOCode,A.CanonicalURL,A.RobotTag, 1 AS ElasticSearchEvent
			FROM #TBL_SEO A 
			--Inner join #VesionIds B on A.LocaleId = B.LocaleId AND B.RevisionType = 'PRODUCTION'
			inner join ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId
		END
	
	End

	--Single Product Publish 
	If @IsSingleProductPublish =1  
	Begin
			Delete from ZnodePublishSeoEntity where PortalId = @PortalId  --and VersionId in (Select Item from Split(@VersionIdString,',')) 
			AND (SEOCode = @CMSSEOCode OR @CMSSEOCode = '' )
			AND (Exists  (SELECT TOP 1 1 FROM dbo.Split(@CMSSEOTypeId ,',') SP WHERE SP.Item = CMSSEOTypeId ) )
			--AND EXISTS(SELECT * FROM #VesionIds V WHERE V.VersionId = ZnodePublishSeoEntity.VersionId)

			UPDATE C SET ItemName = A.ItemName ,
				SEOTypeName = A.ItemName,SEOTitle = A.SEOTitle,SEODescription = A.SEODescription,SEOKeywords=A.SEOKeywords,SEOUrl = A.SEOUrl,
				IsRedirect=A.IsRedirect,MetaInformation = A.MetaInformation,OldSEOURL = A.OldSEOURL,
				CanonicalURL = A.CanonicalURL,RobotTag = A.RobotTag
			FROM #TBL_SEO A 
			INNER JOIN ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId 
						AND A.PortalId = C.PortalId AND A.SEOCode = C.SEOCode
			--AND EXISTS(SELECT * FROM #VesionIds V WHERE V.VersionId = C.VersionId)
		
			Insert Into ZnodePublishSeoEntity 
			(
				VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,
				SEOTypeName,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL
				,CMSContentPagesId,	PortalId,SEOCode,CanonicalURL,RobotTag	
			)
			SELECT --(Select Item from Split(@VersionIdString,',')), 
				c.VersionId ,@GetDate,A.ItemName, A.CMSSEODetailId,A.CMSSEODetailLocaleId,A.CMSSEOTypeId,A.SEOId,
				A.ItemName,A.SEOTitle,A.SEODescription,A.SEOKeywords,A.SEOUrl,A.IsRedirect,A.MetaInformation,@LocaleId,
				A.OldSEOURL,Isnull(A.CMSContentPagesId,0),
				A.PortalId,A.SEOCode,A.CanonicalURL,A.RobotTag
			FROM #TBL_SEO A 
			inner join ZnodePublishSeoEntity C ON A.CMSSEODetailId = C.CMSSEODetailId AND A.LocaleId = C.LocaleId AND A.PortalId = C.PortalId
		
	end 

	If (@RevisionState = 'Preview'  )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPreview()) , ISPublish = 1 
		from #TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId
	else If (@RevisionState = 'Production'  Or @RevisionState = 'None' )
		Update B SET PublishStateId = (select dbo.Fn_GetPublishStateIdForPublish()) , ISPublish = 1 
		from #TBL_SEO  A inner join ZnodeCMSSEODetail B  ON A.CMSSEODetailId  = B.CMSSEODetailId

	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishSEOEntity 
	@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+''',@CMSSEOTypeId= ' + CAST(@CMSSEOTypeId  AS varchar(20))
	+',@UserId = ' + CAST(@UserId AS varchar(20))
	+',@CMSSEOCode  = ''' + CAST(@CMSSEOCode  AS varchar(20)) + '''';
	        			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishSEOEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishTextWidgetEntity')
	DROP PROC Znode_SetPublishTextWidgetEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishTextWidgetEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSMappingId INT =0
  ,@UserId int = 0 
  ,@Status int = 0 Output 
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishTextWidgetEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	 Exec [ZnodeSetPublishTextWidgetEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =88 
  ,@UserId = 0 
*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
 		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @CMSWidgetData TABLE (CMSTextWidgetConfigurationId INT ,LocaleId  INT ,CMSWidgetsId INT ,WidgetsKey NVARCHAR(256) ,CMSMappingId  INT ,TypeOFMapping   NVARCHAR(100) ,[Text]  NVARCHAR(MAX));
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN
			    SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
				
				if (@CMSMappingId > 0 )
				Begin  
					;With Cte_GetCMSSEODetails AS 
					(
						SELECT CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM ZnodeCMSTextWidgetConfiguration AS a
						WHERE 
						(a.TypeOFMapping = 'ContentPageMapping'
						AND (EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE IsActive =1 AND a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  ))
						AND (a.LocaleId = @SetLocaleId OR a.LocaleId = @DefaultLocaleId) )
						AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0 )

					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							 CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							 CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM Cte_GetCMSSEODetails p
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS ( SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails AS q WHERE q.CMSWidgetsId = p.CMSWidgetsId
						AND q.WidgetsKey = p.WidgetsKey AND q.TypeOFMapping = p.TypeOFMapping AND q.CMSMappingId = p.CMSMappingId  )
					)
					insert into @CMSWidgetData(CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text])
					SELECT CMSTextWidgetConfigurationId , @SetLocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]	FROM Cte_GetDefaultFilterData  A 
				End 
				Else if (@CMSMappingId = 0 )
				Begin
					;With Cte_GetCMSSEODetails AS 
					(
						SELECT CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM ZnodeCMSTextWidgetConfiguration AS a
						WHERE 
						(a.TypeOFMapping = 'ContentPageMapping'
						AND (EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE  IsActive =1 AND  a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  ))
						OR (a.TypeOFMapping = 'PortalMapping' AND a.CMSMappingId = @PortalId )
						AND (a.LocaleId = @SetLocaleId OR a.LocaleId = @DefaultLocaleId) )
					)
					, Cte_GetFirstCMSSEODetails  AS
					(
						SELECT 
							 CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM Cte_GetCMSSEODetails 
						WHERE LocaleId = @SetLocaleId
					)
					, Cte_GetDefaultFilterData AS
					(
						SELECT 
							CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM  Cte_GetFirstCMSSEODetails 
						UNION ALL 
						SELECT 
							 CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]
						FROM Cte_GetCMSSEODetails p
						WHERE LocaleId = @DefaultLocaleId 
						AND NOT EXISTS ( SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails AS q WHERE q.CMSWidgetsId = p.CMSWidgetsId
						AND q.WidgetsKey = p.WidgetsKey AND q.TypeOFMapping = p.TypeOFMapping AND q.CMSMappingId = p.CMSMappingId  )
					)
					insert into @CMSWidgetData(CMSTextWidgetConfigurationId , LocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text])
					SELECT CMSTextWidgetConfigurationId , @SetLocaleId , CMSWidgetsId , WidgetsKey , CMSMappingId , TypeOFMapping , [Text]	FROM Cte_GetDefaultFilterData  A 
				End

				SET @IncrementalId = @IncrementalId + 1;
				--DELETE FROM @CMSWidgetData;
				--DELETE FROM @CMSWidgetDataFinal;
        END;
	
	End

    --select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishTextWidgetEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishTextWidgetEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId) and
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )

		Insert Into ZnodePublishTextWidgetEntity 
		(VersionId,PublishStartTime,TextWidgetConfigurationId,MappingId,PortalId,TypeOFMapping,LocaleId,WidgetsKey,Text)
		SELECT B.PreviewVersionId , @GetDate, CMSTextWidgetConfigurationId ,CMSMappingId,@PortalId, TypeOFMapping,A.LocaleId,WidgetsKey,[Text]
		FROM @CMSWidgetData A inner join @Tbl_PreviewVersionId B on @PortalId = B.PortalId and  A.LocaleId = B.LocaleId
		
		
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishTextWidgetEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from @TBL_ProductionVersionId ) and 
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )
		
		Insert Into ZnodePublishTextWidgetEntity 
		(
			VersionId,PublishStartTime,TextWidgetConfigurationId,MappingId,PortalId,TypeOFMapping,LocaleId,WidgetsKey,Text
		)
		SELECT B.ProductionVersionId, @GetDate, CMSTextWidgetConfigurationId ,CMSMappingId,@PortalId, TypeOFMapping,A.LocaleId,WidgetsKey,[Text]
		FROM @CMSWidgetData A inner join @Tbl_ProductionVersionId B on @PortalId = B.PortalId and  A.LocaleId = B.LocaleId
		
	End
	SET @Status = 1 
END TRY 
BEGIN CATCH 
	SET @Status = 0  
 
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishTextWidgetEntity 
			@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
			+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
			+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
			+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
			+''',@CMSMappingId= ' + CAST(@CMSMappingId  AS varchar(20))
			+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 

         			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishTextWidgetEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishWebStoreEntity')
	DROP PROC Znode_SetPublishWebStoreEntity
GO

CREATE  PROCEDURE [dbo].[Znode_SetPublishWebStoreEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@PreviewVersionId varchar(1000)= '' 
  ,@ProductionVersionId varchar(1000) = '' 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT 

)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC [ZnodeSetPublishWebStoreEntity] 1 2,3

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		
		DECLARE @TBL_StoreEntity TABLE 
		(
			 Id int Identity, PortalThemeId	int,PortalId	int,ThemeId	int,ThemeName	varchar(200),CSSId	int,CSSName	nvarchar(2000),
			 WebsiteLogo	varchar(300),WebsiteTitle	nvarchar(400),FaviconImage	varchar(300),WebsiteDescription	nvarchar(MAX),
			 PublishState	varchar(100),LocaleId	int	
		)
		
		DECLARE @WebStoreEntityId int 
		
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)

		Insert into @TBL_StoreEntity 
		(
			 PortalThemeId,PortalId,ThemeId,ThemeName,CSSId,CSSName	,
			 WebsiteLogo,WebsiteTitle,FaviconImage,WebsiteDescription,
			 LocaleId
		)
				select CPT.CMSPortalThemeId,	CPT.PortalId , CPT.CMSThemeId  ThemeId , CT.Name ThemeName,ZCTC.CMSThemeCSSId CSSId,ZCTC.CSSName CSSName ,
				ZM.Path WebsiteLogo ,CPT.WebsiteTitle,FavZM.Path FaviconImage,CPT.WebsiteDescription,@SetLocaleId
				from ZnodeCMSPortalTheme CPT Inner join ZnodeCMSTheme CT ON CPT.CMSThemeId = CT.CMSThemeId 
				Inner join ZnodeCMSThemeCSS ZCTC On CPT.CMSThemeCSSId = ZCTC.CMSThemeCSSId 
				Left outer join ZnodeMedia ZM ON CPT.MediaId = ZM.MediaId
				Left outer join ZnodeMedia FavZM ON CPT.FavIconId = FavZM .MediaId
				Where CPT.PortalId  = @PortalId 
			
			SET @IncrementalId = @IncrementalId +1 
		END 
		-- Data inserted into flat table ZnodeWebStoreEntity (Replica of MongoDB Collection )  
		
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

		Delete from ZnodePublishWebstoreEntity where VersionId in  (select Item from DBO.Split(@PreviewVersionId,',') )AND PortalId = @PortalId
	 		 
			 

		Insert Into ZnodePublishWebstoreEntity 
		(
			VersionId,PublishStartTime,PortalThemeId,PortalId,ThemeId,ThemeName,
			CSSId,CSSName,WebsiteLogo,WebsiteTitle,FaviconImage,WebsiteDescription,PublishState,LocaleId
		)
		SELECT B.Item  , @GetDate,PortalThemeId,PortalId,ThemeId,ThemeName,
			CSSId,CSSName,WebsiteLogo,WebsiteTitle,FaviconImage,WebsiteDescription,'PREVIEW',LocaleId FROM 
			@TBL_StoreEntity A Inner JOIN DBO.Split(@PreviewVersionId,',') B 
			On a.ID = b.Id 
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishWebstoreEntity where VersionId in (select Item from DBO.Split(@ProductionVersionId ,',') )   AND PortalId = @PortalId
		
		Insert Into ZnodePublishWebstoreEntity 
		(
			VersionId,PublishStartTime,PortalThemeId,PortalId,ThemeId,ThemeName,
			CSSId,CSSName,WebsiteLogo,WebsiteTitle,FaviconImage,WebsiteDescription,PublishState,LocaleId
		)
		SELECT B.Item  , @GetDate,PortalThemeId,PortalId,ThemeId,ThemeName,
			CSSId,CSSName,WebsiteLogo,WebsiteTitle,FaviconImage,WebsiteDescription,'PRODUCTION',LocaleId FROM 
			@TBL_StoreEntity A Inner JOIN DBO.Split(@ProductionVersionId,',') B 
			On a.ID = b.Id 


	End
	SET @Status =1 ;


	End
END TRY 
BEGIN CATCH 
	SET @Status =0  

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishWebStoreEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishWebStoreEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishWidgetBrandEntity')
	DROP PROC Znode_SetPublishWidgetBrandEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishWidgetBrandEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSMappingId INT =0
  ,@UserId int = 0 
  ,@Status int = 0 Output 
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishWidgetBrandEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	 Exec [ZnodeSetPublishWidgetBrandEntity]
   @PortalId  = 1 
  ,@LocaleId  = 0 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =88 
  ,@UserId = 0 




	
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
 		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
		DECLARE @TBL_CMSContentPagesPortalWise TABLE (CMSContentPagesId int , PortalId int )
		
		INSERT INTO @TBL_CMSContentPagesPortalWise(CMSContentPagesId, PortalId)	SELECT distinct CMSContentPagesId , PortalId FROM ZnodeCMSContentPages
		WHERE PortalId = @PortalId	AND IsActive = 1 

		DECLARE @CMSWidgetData TABLE (BrandId int ,MappingId int ,PortalId int ,WidgetsKey varchar(300),TypeOfMapping varchar(300),DisplayOrder int );
		
		Insert Into @CMSWidgetData (BrandId,WidgetsKey,MappingId,TypeOFMapping,DisplayOrder, PortalId)
						SELECT BrandId,WidgetsKey,CMSMappingId,TypeOFMapping,DisplayOrder,
						
						CASE WHEN a.TypeOFMapping = 'ContentPageMapping' THEN 
						(Select Portalid from @TBL_CMSContentPagesPortalWise X where  X.CMSContentPagesId = a.CMSMappingId)
						Else a.CMSMappingId   End PortalId 

						FROM ZnodeCMSWidgetBrand AS a WHERE 
						(
							(a.TypeOFMapping = 'ContentPageMapping'	AND (EXISTS ( SELECT TOP 1 1 FROM @TBL_CMSContentPagesPortalWise  WHERE a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId  )))
							OR 
							(a.TypeOFMapping = 'PortalMapping' AND a.CMSMappingId  = @PortalId  )
						)

						AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0 )
	End

    --select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetBrandEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishWidgetBrandEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from  @TBL_PreviewVersionId)
		
		Insert Into ZnodePublishWidgetBrandEntity 
		(VersionId,PublishStartDate,BrandId,MappingId,PortalId,WidgetsKey,TypeOfMapping,DisplayOrder)
		SELECT B.PreviewVersionId , @GetDate, A.BrandId,A.MappingId,A.PortalId, A.WidgetsKey,A.TypeOFMapping,A.DisplayOrder
		FROM @CMSWidgetData A inner join @Tbl_PreviewVersionId B on A.PortalId  = B.PortalId 
		
		
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishWidgetBrandEntity where PortalId = @PortalId  and VersionId in (Select ProductionVersionId from  @TBL_ProductionVersionId)
		
		Insert Into ZnodePublishWidgetBrandEntity 
		(VersionId,PublishStartDate,BrandId,MappingId,PortalId,WidgetsKey,TypeOfMapping,DisplayOrder)
		SELECT B.ProductionVersionId , @GetDate, A.BrandId,A.MappingId,A.PortalId, A.WidgetsKey,A.TypeOFMapping,A.DisplayOrder
		FROM @CMSWidgetData A inner join @Tbl_ProductionVersionId B on A.PortalId  = B.PortalId 
		
			
	End
	SET @Status = 1 
END TRY 
BEGIN CATCH 
	SET @Status = 0  
 
	 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishWidgetBrandEntity 
			@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
			+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
			+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
			+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
			+''',@CMSMappingId= ' + CAST(@CMSMappingId  AS varchar(20))
			+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 

         			 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishWidgetBrandEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishWidgetCategoryEntity')
	DROP PROC Znode_SetPublishWidgetCategoryEntity
GO

CREATE  PROCEDURE [dbo].[Znode_SetPublishWidgetCategoryEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@VersionId INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT 
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC [ZnodeSetWidgetCategoryEntity] 1 2,3

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
   Begin 
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
		DECLARE @TBL_WidgetCategoryEntity TABLE (WidgetCategoryId	int,ZnodeCategoryId	int,MappingId	int,PortalId	int
			   ,WidgetsKey	nvarchar(500),TypeOFMapping	varchar(100),DisplayOrder	int,CategoryCode	varchar(600))
		
		Declare @TBL_CMSContentPagesPortalWise TABLE (CMSContentPagesId int )
		INSERT INTO @TBL_CMSContentPagesPortalWise(CMSContentPagesId)	SELECT CMSContentPagesId FROM ZnodeCMSContentPages
			WHERE PortalId = @PortalId	AND IsActive = 1 

			Insert into @TBL_WidgetCategoryEntity 
			(
				WidgetCategoryId,ZnodeCategoryId,MappingId,PortalId,WidgetsKey,TypeOFMapping,DisplayOrder,CategoryCode
			)
			 Select  CMSWidgetCategoryId,Isnull(PublishCategoryId,0),CMSMappingId,@PortalId,WidgetsKey,TypeOFMapping,DisplayOrder,CategoryCode
			 FROM ZnodeCMSWidgetCategory
			 WHERE
			((TypeOfMapping = 'PortalMapping'	AND (CMSMappingId = @PortalId OR @PortalId = 0 ))	OR 
			(TypeOfMapping = 'ContentPageMapping' AND CMSMappingId IN  (SELECT CMSContentPagesId	FROM @TBL_CMSContentPagesPortalWise)))
			
		-- Data inserted into flat table ZnodeWebStoreEntity (Replica of MongoDB Collection )  
		
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishWidgetCategoryEntity where VersionId in (Select  PreviewVersionId from @Tbl_PreviewVersionId)  AND PortalId = @PortalId
	 		 
		Insert Into ZnodePublishWidgetCategoryEntity 
		(
			VersionId,PublishStartTime,WidgetCategoryId,ZnodeCategoryId,MappingId,PortalId,WidgetsKey,
			TypeOFMapping,DisplayOrder,CategoryCode
		)
		SELECT B.PreviewVersionId  , @GetDate,WidgetCategoryId,ZnodeCategoryId,MappingId,A.PortalId,WidgetsKey,TypeOFMapping,DisplayOrder,CategoryCode   FROM @TBL_WidgetCategoryEntity A
		Inner join @Tbl_PreviewVersionId B on A.PortalId = B.PortalId

	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishWidgetCategoryEntity where VersionId in( Select ProductionVersionId from @TBL_ProductionVersionId ) AND PortalId = @PortalId
		
		Insert Into ZnodePublishWidgetCategoryEntity 
		(
			VersionId,PublishStartTime,WidgetCategoryId,ZnodeCategoryId,MappingId,PortalId,WidgetsKey,
			TypeOFMapping,DisplayOrder,CategoryCode
		)
		SELECT B.ProductionVersionId  , @GetDate,WidgetCategoryId,ZnodeCategoryId,MappingId,A.PortalId,WidgetsKey,TypeOFMapping,DisplayOrder,CategoryCode  FROM @TBL_WidgetCategoryEntity A
		Inner join @Tbl_ProductionVersionId B on A.PortalId = B.PortalId

	End
	SET @Status =1 ;


	End
END TRY 
BEGIN CATCH 
	SET @Status =0  

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishWidgetCategoryEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  	
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishWidgetCategoryEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishWidgetProductEntity')
	DROP PROC Znode_SetPublishWidgetProductEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishWidgetProductEntity]
(
   @PortalId  INT = 0
  ,@IsPreviewEnable int = 0 
  ,@PreviewVersionId INT = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSMappingId INT =0
  ,@UserId int = 0 
  ,@Status int  Output
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishWidgetProductEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	
 Exec [ZnodeSetPublishWidgetProductEntity]
   @PortalId  = 1 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =89 
  ,@UserId = 0 

  
 Exec [ZnodeSetPublishWidgetProductEntity]
   @PortalId  = 1 
  ,@PreviewVersionId = 0 
  ,@ProductionVersionId = 0 
  ,@RevisionState = 'Preview&Production' 
  ,@CMSMappingId  =0 
  ,@UserId = 0 
*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON

   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
	

		DECLARE @CMSWidgetDataFinal TABLE (WidgetProductId int ,ZnodeProductId int ,PortalId int  ,MappingId int  ,WidgetsKey nvarchar(500),TypeOFMapping varchar(300),DisplayOrder int ,SKU varchar(300) );

		If @CMSMappingId > 0
			INSERT INTO @CMSWidgetDataFinal
					( WidgetProductId , ZnodeProductId , PortalId , MappingId , WidgetsKey ,TypeOFMapping,DisplayOrder ,SKU )
					 select CMSWidgetProductId , Isnull(PublishProductId,0) , @PortalId , CMSMappingId , WidgetsKey ,TypeOFMapping,DisplayOrder ,SKU 
					 from ZnodeCMSWidgetProduct a  where 
					 (a.TypeOFMapping = 'ContentPageMapping'
                     AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId)))
                     AND (a.CMSMappingId = @CMSMappingId OR @CMSMappingId = 0  )

		Else If @CMSMappingId  = 0 and @PortalId > 0 
			INSERT INTO @CMSWidgetDataFinal
					( WidgetProductId , ZnodeProductId , PortalId , MappingId , WidgetsKey ,TypeOFMapping,DisplayOrder ,SKU )
					 select CMSWidgetProductId , Isnull(PublishProductId,0), @PortalId , CMSMappingId , WidgetsKey ,TypeOFMapping,DisplayOrder ,SKU 
					 from ZnodeCMSWidgetProduct a  where 
					 ( (a.TypeOFMapping = 'ContentPageMapping'  AND ( EXISTS ( SELECT TOP 1 1 FROM ZnodeCMSContentPages  WHERE a.CMSMappingId = CMSContentPagesId AND PortalId = @PortalId)) )
                     OR (a.TypeOFMapping = 'PortalMapping' AND ( a.CMSMappingId = @PortalId OR @PortalId = 0 )))
	End 

	--select * from @TBL_ContentPage 
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetProductEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishWidgetProductEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from @Tbl_PreviewVersionId  ) and
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )


		Delete from ZnodePublishWidgetProductEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from @Tbl_PreviewVersionId  ) and
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )

		Insert Into ZnodePublishWidgetProductEntity 
		(VersionId,PublishStartTime,WidgetProductId,ZnodeProductId,PortalId,MappingId,WidgetsKey,TypeOFMapping,DisplayOrder,SKU)
		SELECT B.PreviewVersionId , @GetDate ,WidgetProductId,Isnull(ZnodeProductId,0),A.PortalId,MappingId,WidgetsKey,TypeOFMapping,DisplayOrder,SKU
		FROM @CMSWidgetDataFinal A inner join @Tbl_PreviewVersionId B on A.PortalId = B.PortalId
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishWidgetProductEntity where PortalId = @PortalId  and VersionId in (select ProductionVersionId from  @TBL_ProductionVersionId ) and 
		(MappingId = @CMSMappingId OR @CMSMappingId = 0 )
		
		Insert Into ZnodePublishWidgetProductEntity 
		(
			VersionId,PublishStartTime,WidgetProductId,ZnodeProductId,PortalId,MappingId,WidgetsKey,TypeOFMapping,DisplayOrder,SKU
		)
		SELECT B.ProductionVersionId , @GetDate ,WidgetProductId,Isnull(ZnodeProductId,0),A.PortalId,MappingId,WidgetsKey,TypeOFMapping,DisplayOrder,SKU
		FROM @CMSWidgetDataFinal A Inner join @TBL_ProductionVersionId B on A.PortalId = B.PortalId
	End
	SET @Status = 1;
END TRY 
BEGIN CATCH 
	
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishWidgetProductEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
	+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
	+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
	+''',@CMSMappingId= ' + CAST(@CMSMappingId  AS varchar(20))
	+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishWidgetProductEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishWidgetSliderBannerEntity')
	DROP PROC Znode_SetPublishWidgetSliderBannerEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishWidgetSliderBannerEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int = 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSContentPagesId int = 0
  ,@CMSSliderId INT = 0 
  ,@UserId int = 0 
  ,@Status int = 0 OUTPUT 
)
AS
/*
    This Procedure is used to publish the slider banner widgets,
	This sp get call for catalog publish , store , and slider 
	  
	EXEC ZnodeSetPublishWidgetSliderBannerEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	

Exec [ZnodeSetPublishWidgetSliderBannerEntity]
@PortalId  = 1
,@LocaleId  = 0 
,@PreviewVersionId = 0 
,@ProductionVersionId = 0 
,@RevisionState = 'Preview@Production' 
,@CMSContentPagesId = 88
,@CMSSliderId = 0
,@UserId = 0 
	*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
   ---Following code is manditory because this sp get call from multiple places
   If Exists (SELECT  * from ZnodePublishStateApplicationTypeMapping PSA where PSA.IsEnabled =1 and  
	Exists (select TOP 1 1  from ZnodePublishState PS where PS.PublishStateId = PSA.PublishStateId ) and ApplicationType =  'WebstorePreview')
		SET @IsPreviewEnable = 1 
	else 
		SET @IsPreviewEnable = 0 

   DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
   DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

   If @PreviewVersionId = 0 
		Begin
   			Insert into @Tbl_PreviewVersionId 
			SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
		end
	Else 
			Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @PreviewVersionId
	
	If @ProductionVersionId = 0 
   		Begin
			Insert into @Tbl_ProductionVersionId 
			SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
		End 
	Else 
		Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 
   If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
   Begin
		If not exists (Select TOP 1 1 from @Tbl_PreviewVersionId) 
			Begin
				SET @Status =0 ;
				If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
					SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
					Return 0
			End
   End
   If  (@RevisionState like '%Production%' OR @RevisionState = 'None')
   Begin
		If not exists (Select TOP 1 1 from @Tbl_ProductionVersionId) 
		Begin
			SET @Status =0 ;
			If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
				SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
			Return 0 
		End
   End


   Begin 
		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1))
	
		--CMSContentPage associated with portal 
		DECLARE @TBL_CMSContentPagesPortalWise TABLE(CMSContentPagesId INT, PortalId int );
		 
		 If @CMSSliderId	 = 0 AND @CMSContentPagesId  > 0 and @PortalId > 0 -- content page  
			INSERT INTO @TBL_CMSContentPagesPortalWise(CMSContentPagesId, PortalId)	SELECT CMSContentPagesId , PortalId FROM ZnodeCMSContentPages
			WHERE PortalId = @PortalId	AND IsActive = 1 AND (CMSContentPagesId = @CMSContentPagesId )
		 Else  If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
			INSERT INTO @TBL_CMSContentPagesPortalWise(CMSContentPagesId , PortalId)	SELECT ZCCP.CMSContentPagesId , ZCCP.PortalId FROM ZnodeCMSContentPages ZCCP
			WHERE ZCCP.IsActive = 1 AND 
			(Exists   (Select TOP 1 1 from @Tbl_ProductionVersionId TPC where TPC.PortalId = ZCCP.PortalId) 
			OR Exists (Select TOP 1 1 from @Tbl_PreviewVersionId TPC where TPC.PortalId = ZCCP.PortalId) )
		 Else If @CMSSliderId	= 0  AND @CMSContentPagesId  = 0 and @PortalId > 0 -- portal publish
			INSERT INTO @TBL_CMSContentPagesPortalWise(CMSContentPagesId,  PortalId )	SELECT CMSContentPagesId ,  PortalId FROM ZnodeCMSContentPages
			WHERE PortalId = @PortalId	AND IsActive = 1 
		

		Declare @CMSWidgetDataFinal TABLE 
		(
			WidgetSliderBannerId	int,MappingId	int,PortalId	int,LocaleId	int,Type	varchar(100),Navigation	varchar(100),
			AutoPlay	bit,AutoplayTimeOut	int,AutoplayHoverPause	bit,TransactionStyle	varchar(100),WidgetsKey	varchar(300),
			TypeOFMapping	varchar(100),SliderId	int,SliderBanners	nvarchar(max)
		)

		    DECLARE @Tlb_ZnodeCMSWidgetSliderBanner TABLE
                     (CMSWidgetSliderBannerId INT,
                      CMSMappingId            INT,
                      PortalId                INT,
                      Type                    NVARCHAR(100) NULL,
                      Navigation              NVARCHAR(100) NULL,
                      AutoPlay                BIT,
                      AutoplayTimeOut         INT,
                      AutoplayHoverPause      BIT,
                      TransactionStyle        NVARCHAR(100) NULL,
                      WidgetsKey              NVARCHAR(256),
                      TypeOFMapping           NVARCHAR(100),
                      CMSSliderId             INT
                     );

                     DECLARE @TBL_ZnodeCMSSliderDetail TABLE
                     (CMSSliderId        INT,
                      CMSSliderBannerId  INT,
                      MediaPath          VARCHAR(300),
                      Title              NVARCHAR(1000),
					  ButtonLabelName    NVARCHAR(1200),
                      ButtonLink         NVARCHAR(600),
                      TextAlignment      NVARCHAR(200),
                      BannerSequence     INT,
                      ActivationDate     DATETIME,
                      ExpirationDate     DATETIME,
                      ImageAlternateText NVARCHAR(1000),
                      DEscription        NVARCHAR(MAX)
                     );

                     DECLARE @TBL_ZnodeCMSSliderDetail_Locale TABLE
                     (CMSSliderId        INT,
                      CMSSliderBannerId  INT,
                      MediaPath          VARCHAR(300),
                      Title              NVARCHAR(1000),
                      ButtonLabelName    NVARCHAR(1200),
                      ButtonLink         NVARCHAR(600),
                      TextAlignment      NVARCHAR(200),
                      BannerSequence     INT,
                      ActivationDate     DATETIME,
                      ExpirationDate     DATETIME,
                      ImageAlternateText NVARCHAR(1000),
                      DEscription        NVARCHAR(MAX),
                      LocaleId           INT
                     );

		If @CMSSliderId	 = 0 AND @CMSContentPagesId  > 0 and @PortalId > 0 -- content page  
		   
			INSERT INTO @Tlb_ZnodeCMSWidgetSliderBanner(CMSWidgetSliderBannerId,CMSMappingId,PortalId,Type,Navigation,AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey,TypeOFMapping,CMSSliderId)
			SELECT ACWSB.CMSWidgetSliderBannerId,ACWSB.CMSMappingId,
			@PortalId PortalId,
			ACWSB.Type,ACWSB.Navigation,ACWSB.AutoPlay,ACWSB.AutoplayTimeOut
			,ACWSB.AutoplayHoverPause,ACWSB.TransactionStyle,ACWSB.WidgetsKey,ACWSB.TypeOfMapping
			OFMapping,ACWSB.CMSSliderId FROM ZnodeCMSWidgetSliderBanner AS ACWSB WHERE
			((TypeOfMapping = 'ContentPageMapping' AND CMSMappingId IN
			(SELECT CMSContentPagesId	FROM @TBL_CMSContentPagesPortalWise	) ))
         Else  If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
			INSERT INTO @Tlb_ZnodeCMSWidgetSliderBanner(CMSWidgetSliderBannerId,CMSMappingId,PortalId,Type,Navigation,AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey,TypeOFMapping,CMSSliderId)
			SELECT ACWSB.CMSWidgetSliderBannerId,ACWSB.CMSMappingId,
			CASE when TypeOfMapping = 'PortalMapping'  THEN ACWSB.CMSMappingId ELSE 
			(SELECT TOP 1 PortalId	FROM @TBL_CMSContentPagesPortalWise  where ACWSB.CMSMappingId =CMSMappingId )
			END 	AS PortalId,
			ACWSB.Type,ACWSB.Navigation,ACWSB.AutoPlay,ACWSB.AutoplayTimeOut
			,ACWSB.AutoplayHoverPause,ACWSB.TransactionStyle,ACWSB.WidgetsKey,ACWSB.TypeOfMapping
			OFMapping,ACWSB.CMSSliderId FROM ZnodeCMSWidgetSliderBanner AS ACWSB 
			WHERE
			((TypeOfMapping = 'PortalMapping'	AND ( Exists (Select TOP 1 1 from @Tbl_ProductionVersionId TPC where TPC.PortalId = CMSMappingId) 
			OR Exists (Select TOP 1 1 from @Tbl_PreviewVersionId TPC where TPC.PortalId = CMSMappingId) )	OR 
			 (TypeOfMapping = 'ContentPageMapping' AND CMSMappingId IN  (SELECT CMSContentPagesId	FROM @TBL_CMSContentPagesPortalWise)))
			AND (ACWSB.CMSSliderId = @CMSSliderId OR @CMSSliderId = 0 ))
			

		Else If @CMSSliderId	= 0  AND @CMSContentPagesId  = 0 and @PortalId > 0 -- portal publish
			INSERT INTO @Tlb_ZnodeCMSWidgetSliderBanner(CMSWidgetSliderBannerId,CMSMappingId,PortalId,Type,Navigation,AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey,TypeOFMapping,CMSSliderId)
			SELECT ACWSB.CMSWidgetSliderBannerId,ACWSB.CMSMappingId,
			CASE when TypeOfMapping = 'PortalMapping'  THEN ACWSB.CMSMappingId ELSE @PortalId END 	AS PortalId,
			ACWSB.Type,ACWSB.Navigation,ACWSB.AutoPlay,ACWSB.AutoplayTimeOut
			,ACWSB.AutoplayHoverPause,ACWSB.TransactionStyle,ACWSB.WidgetsKey,ACWSB.TypeOfMapping
			OFMapping,ACWSB.CMSSliderId FROM ZnodeCMSWidgetSliderBanner AS ACWSB WHERE
			((TypeOfMapping = 'PortalMapping'	AND CMSMappingId = @PortalId OR @PortalId = 0 )	OR 
				(TypeOfMapping = 'ContentPageMapping' AND CMSMappingId IN (SELECT CMSContentPagesId	FROM @TBL_CMSContentPagesPortalWise	) ))
							
		INSERT INTO @TBL_Locale (LocaleId) SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		
		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
	
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			;With Cte_GetCMSSEODetails AS 
			(
					SELECT ZCSB.CMSSliderId,ZCSB.CMSSliderBannerId,ZM.Path MediaPath ,ZCSBL.Title,ZCSBL.ButtonLabelName,ZCSBL.ButtonLink,ZCSB.TextAlignment,ZCSB.BannerSequence,ZCSB.ActivationDate,ZCSB.ExpirationDate,ZCSBL.ImageAlternateText,ZCSBL.DEscription,ISNULL(ZCSBL.LocaleId, @DefaultLocaleId) AS LocaleId
					FROM ZnodeCMSSliderBanner AS ZCSB LEFT JOIN ZnodeCMSSliderBannerLocale AS ZCSBL ON(ZCSB.CMSSliderBannerId = ZCSBL.CMSSliderBannerId
					AND	(ZCSBL.LocaleId  = @SetLocaleId OR ZCSBL.LocaleId  = @DefaultLocaleId))  
					LEFT OUTER JOIN ZnodeMEdia  AS ZM ON ZCSBL.MediaId = ZM.MediaId
					WHERE EXISTS
					(
						SELECT TOP 1 1
						FROM @Tlb_ZnodeCMSWidgetSliderBanner AS ACWSB
						WHERE ACWSB.CMSSliderId = ZCSB.CMSSliderId
					)

			)
			, Cte_GetFirstCMSSEODetails  AS
			(
				SELECT 
					CMSSliderId,CMSSliderBannerId,MediaPath,Title,ButtonLabelName,ButtonLink,TextAlignment,BannerSequence,ActivationDate,ExpirationDate,ImageAlternateText,DEscription
				FROM Cte_GetCMSSEODetails 
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT 
					CMSSliderId,CMSSliderBannerId,MediaPath,Title,ButtonLabelName,ButtonLink,TextAlignment,BannerSequence,ActivationDate,ExpirationDate,ImageAlternateText,DEscription
					 FROM  Cte_GetFirstCMSSEODetails 
				UNION ALL 
				SELECT 
					CMSSliderId,CMSSliderBannerId,MediaPath,Title,ButtonLabelName,ButtonLink,TextAlignment,BannerSequence,ActivationDate,ExpirationDate,ImageAlternateText,DEscription
				FROM Cte_GetCMSSEODetails CTEC 
				WHERE LocaleId = @DefaultLocaleId 
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstCMSSEODetails CTEFD WHERE   CTEC.CMSSliderBannerId = CTEFD.CMSSliderBannerId
                                      AND CTEC.CMSSliderId = CTEFD.CMSSliderId)
			)
	
			INSERT INTO @CMSWidgetDataFinal 
			(
				WidgetSliderBannerId,MappingId,PortalId,LocaleId,Type,Navigation	,
				AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey	,
				TypeOFMapping,SliderId,SliderBanners
			)
		   SELECT DISTINCT
		   CMSWidgetSliderBannerId AS WidgetSliderBannerId,CMSMappingId AS MappingId,PortalId,
		   @SetLocaleId AS LocaleId,Type,Navigation,AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey,TypeOFMapping
		   ,CMSSliderId AS SliderId,
			(  
				SELECT ISNULL(CMSSliderId,'') AS SliderId,ISNULL(CMSSliderBannerId,'') AS SliderBannerId,ISNULL(MediaPath,'')MediaPath
				,ISNULL(Title,'')Title,ISNULL(ButtonLabelName,'')ButtonLabelName,ISNULL(ButtonLink,'')ButtonLink
				,ISNULL(TextAlignment,'')TextAlignment,ISNULL(BannerSequence,'')BannerSequence,ActivationDate
				,ExpirationDate,ISNULL(ImageAlternateText,'')ImageAlternateText,ISNULL(Description,'')Description
				FROM Cte_GetDefaultFilterData AS wd
				WHERE wd.CMSSliderId = a.CMSSliderId 
				FOR JSON PATH  
			)SliderBanners
			FROM @Tlb_ZnodeCMSWidgetSliderBanner AS a

			SET @IncrementalId = @IncrementalId +1 
		END 
	End
		
	If @IsPreviewEnable = 1 AND (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	Begin
	    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

		Delete from ZnodePublishWidgetSliderBannerEntity where VersionId in (Select PreviewVersionId from @Tbl_PreviewVersionId )
	 		 AND (SliderId = @CMSSliderId OR @CMSSliderId = 0   )
			 AND (MappingId in (Select CMSContentPagesId from @TBL_CMSContentPagesPortalWise) OR @CMSContentPagesId  = 0);

		Insert Into ZnodePublishWidgetSliderBannerEntity 
		(VersionId,PublishStartTime,WidgetSliderBannerId,MappingId,PortalId,LocaleId,Type,Navigation	,
				AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey	,
				TypeOFMapping,SliderId,SliderBanners	)

		SELECT B.PreviewVersionId , @GetDate,WidgetSliderBannerId,MappingId,A.PortalId,A.LocaleId,Type,Navigation	,
				AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey	,
				TypeOFMapping,SliderId,SliderBanners
	    FROM @CMSWidgetDataFinal A INNER JOIN @Tbl_PreviewVersionId B
		On A.LocaleId = B.LocaleId AND A.PortalId = B.PortalId 
	
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin
			-- Only production version id will process 
		Delete from ZnodePublishWidgetSliderBannerEntity where VersionId in (Select ProductionVersionId from @Tbl_ProductionVersionId )
	 		 AND (SliderId = @CMSSliderId OR @CMSSliderId = 0   )
			 AND (MappingId in (Select CMSContentPagesId from @TBL_CMSContentPagesPortalWise) OR @CMSContentPagesId  = 0);

		Insert Into ZnodePublishWidgetSliderBannerEntity 
		(
			VersionId,PublishStartTime,WidgetSliderBannerId,MappingId,PortalId,LocaleId,Type,Navigation,
			AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey	,
			TypeOFMapping,SliderId,SliderBanners
		)
		
		SELECT B.ProductionVersionId, @GetDate,WidgetSliderBannerId,MappingId,A.PortalId,A.LocaleId,Type,Navigation	,
				AutoPlay,AutoplayTimeOut,AutoplayHoverPause,TransactionStyle,WidgetsKey	,
				TypeOFMapping,SliderId,SliderBanners
	    FROM @CMSWidgetDataFinal A INNER JOIN @Tbl_ProductionVersionId B
		On A.LocaleId = B.LocaleId AND A.PortalId = B.PortalId
		
	End

	If @RevisionState ='PREVIEW'
	Begin
			update A SET A.IsPublished = 1 , A.PublishStateId = [dbo].[Fn_GetPublishStateIdForPreview]() 
			from ZnodeCMSSlider A INNER JOIN @CMSWidgetDataFinal B on A.CMSSliderId = B.SliderId 
	End
	Else 
			update A SET A.IsPublished = 1 , A.PublishStateId = [dbo].[Fn_GetPublishStateIdForPublish]() 
			from ZnodeCMSSlider A INNER JOIN @CMSWidgetDataFinal B on A.CMSSliderId = B.SliderId 
		

	SET @Status =1 ;
	
	If Not Exists (select TOP 1 1 from @CMSWidgetDataFinal ) 
	Begin
		If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
		Begin
			SET @Status =0 ;
			SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
		End
	End
	Else 
		If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
		SELECT 1 AS ID,cast(@Status as BIT) AS Status;

END TRY 
BEGIN CATCH 
	SET @Status =0 ;
	If @CMSSliderId	> 0  AND @CMSContentPagesId  = 0 and @PortalId = 0  -- Slider Publish 
		SELECT 1 AS ID,cast(@Status as BIT) AS Status;  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
	 @ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishWidgetSliderBannerEntity 
			@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
			+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
			+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
			+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
			+''',@CMSContentPagesId= ' + CAST(@CMSContentPagesId  AS varchar(20))
			+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishWidgetSliderBannerEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;

END CATCH
END


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishWidgetTitleEntity')
	DROP PROC Znode_SetPublishWidgetTitleEntity
GO

CREATE  PROCEDURE [dbo].[Znode_SetPublishWidgetTitleEntity]
(
   @PortalId  INT = 0 
  ,@LocaleId  INT = 0 
  ,@PreviewVersionId INT = 0 
  ,@IsPreviewEnable int= 0 
  ,@ProductionVersionId INT = 0 
  ,@RevisionState varchar(50) = '' 
  ,@CMSContentPagesId int = 0
  ,@UserId int = 0 
  ,@Status int = 0 Output
)
AS
/*
    This Procedure is used to publish the blog news against the store 
  
	EXEC ZnodeSetPublishWidgetTitleEntity 1 2,3
	A. 
		1. Preview - Preview
		2. None    - Production   --- 
		3. Production - Preview/Production
	B.
		select * from ZnodePublishStateApplicationTypeMapping
		select * from ZnodePublishState where PublishStateId in (3,4) 
		select * from ZnodePublishPortalLog 
	C.
		Select * from ZnodePublishState where IsDefaultContentState = 1  and IsContentState = 1  --Production 
    
	Unit testing 
	
	Exec [ZnodeSetPublishWidgetTitleEntity]
	   @PortalId  = 1 
	  ,@LocaleId  = 0 
	  ,@PreviewVersionId = 0 
	  ,@ProductionVersionId = 0 
	  ,@RevisionState = 'Preview/Production' 
	  ,@CMSSEOTypeId = 0
	  ,@CMSSEOCode = ''
	  ,@UserId = 0 
*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
  
   Begin 
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @Tbl_PreviewVersionId    TABLE    (PreviewVersionId int , PortalId int , LocaleId int)
		DECLARE @Tbl_ProductionVersionId TABLE    (ProductionVersionId int  , PortalId int , LocaleId int)

		If @PreviewVersionId = 0 
			Begin
   				Insert into @Tbl_PreviewVersionId 
				SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PREVIEW'
			end
		Else 
				Insert into @Tbl_PreviewVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
				where VersionId = @PreviewVersionId
		If @ProductionVersionId = 0 
   			Begin
				Insert into @Tbl_ProductionVersionId 
				SELECT distinct VersionId , PortalId , LocaleId from  ZnodePublishWebStoreEntity where (PortalId = @PortalId or @PortalId=0 ) and  (LocaleId = 	@LocaleId OR @LocaleId = 0  ) and PublishState ='PRODUCTION'
			End 
		Else 
			Insert into @Tbl_ProductionVersionId SELECT distinct VersionId , PortalId, LocaleId from  ZnodePublishWebStoreEntity 
			where VersionId = @ProductionVersionId
 


		DECLARE @SetLocaleId INT , @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1  
		DECLARE @TBL_LocaleId TABLE ( RowId INT IDENTITY(1,1) PRIMARY KEY , LocaleId INT )
		 		
		DECLARE @TBL_GetDATATable TABLE (WidgetTitleConfigurationId INT ,MappingId INT ,  PortalId INT 
			, LocaleId INT , MediaPath   VARCHAR(300) , Title nvarchar (600) ,TitleCode nvarchar(600) ,TypeOFMapping NVARCHAR(100) 
			,Url nvarchar(600)  , WidgetsKey  NVARCHAR(256),IsNewTab bit, DisplayOrder INT)

		
		INSERT INTO @TBL_LocaleId (LocaleId )  SELECT LocaleId FROm ZnodeLocale WHERE IsActive = 1 AND (LocaleId = @LocaleId OR   ISNULL(@LocaleId,0) = 0)
		DECLARE @CounterId INT = 1 , @MaxRowId INT = (SELECT Max(RowId ) FROM @TBL_LocaleId) 
		--SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		
		WHILE @CounterId <= @MaxRowId
		BEGIN 
			SET @SetLocaleId = (SELECT TOP 1 LocaleID FROM @TBL_LocaleId WHERe RowId =@CounterId )  
			If @CMSContentPagesId > 0 
				Begin
				;With Cte_GetContentPagesId AS 
				(
					SELECT ZCWTC.CMSWidgetTitleConfigurationId WidgetTitleConfigurationId,ZCWTC.CMSMappingId MappingId,
					@PortalId
					AS PortalId,LocaleId LocaleId,ZM.[path]MediaPath,ZCWTCL.Title,ZCWTC.TitleCode,ZCWTC.TypeOFMapping,ZCWTCl.Url,ZCWTC.WidgetsKey,IsNewTab
					,ZCWTCL.DisplayOrder
					FROM ZnodeCMSWidgetTitleConfiguration ZCWTC 
					INNER JOIN ZnodeCMSWidgetTitleConfigurationLocale  ZCWTCL ON (ZCWTCL.CMSWidgetTitleConfigurationId = ZCWTC.CMSWidgetTitleConfigurationId )
					INNER JOIN ZnodeCMSContentPages CCP on CMSContentPagesId= ZCWTC.CMSMappingId   
					LEFT JOIN ZnodeMedia ZM ON (Zm.MediaId = ZCWTCL.MediaId)
					WHERE ZCWTCL.LocaleId   IN (@DefaultLocaleId,@SetLocaleId) 
					and (CCP.PortalId  =  @PortalId OR @PortalId = 0  )
					AND  (ZCWTC.TypeOfMapping = 'ContentPageMapping'	AND ZCWTC.CMSMappingId  = @CMSContentPagesId OR @CMSContentPagesId  = 0)
				) 
				, Cte_LocaleIdFiletr AS 
				(
					SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,LocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
					FROM Cte_GetContentPagesId CET1 WHERE LocaleId = @SetLocaleId
				)
				,Cte_CompleteRecords AS 
				(
					SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,LocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
					FROM Cte_LocaleIdFiletr
					UNION ALL 
					SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,LocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
					FROM Cte_GetContentPagesId  CTE2
					WHERE Cte2.localeId = @DefaultLocaleId
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_LocaleIdFiletr CTE1 WHERE Cte1.WidgetTitleConfigurationId = CTE2.WidgetTitleConfigurationId )
				)

				INSERT INTO @TBL_GetDATATable (WidgetTitleConfigurationId  ,MappingId  ,  PortalId  , LocaleId  , MediaPath   , Title  ,TitleCode  ,TypeOFMapping  ,Url   , WidgetsKey,IsNewTab ,DisplayOrder)
				SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,@SetLocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
				FROM Cte_CompleteRecords 
			End
			ELSE If @CMSContentPagesId = 0  and @PortalId > 0 
				Begin
				;With Cte_GetContentPagesId AS 
				(
					SELECT ZCWTC.CMSWidgetTitleConfigurationId WidgetTitleConfigurationId,ZCWTC.CMSMappingId MappingId,
					@PortalId
					AS PortalId,LocaleId LocaleId,ZM.[path]MediaPath,ZCWTCL.Title,ZCWTC.TitleCode,ZCWTC.TypeOFMapping,ZCWTCl.Url,ZCWTC.WidgetsKey,IsNewTab
					,ZCWTCL.DisplayOrder
					FROM ZnodeCMSWidgetTitleConfiguration ZCWTC 
					INNER JOIN ZnodeCMSWidgetTitleConfigurationLocale  ZCWTCL ON (ZCWTCL.CMSWidgetTitleConfigurationId = ZCWTC.CMSWidgetTitleConfigurationId )
					LEFT JOIN ZnodeMedia ZM ON (Zm.MediaId = ZCWTCL.MediaId)
					WHERE ZCWTCL.LocaleId   IN (@DefaultLocaleId,@SetLocaleId) 
					AND  ((ZCWTC.TypeOfMapping = 'PortalMapping'	AND ZCWTC.CMSMappingId  = @PortalId)
					OR    (ZCWTC.TypeOfMapping = 'ContentPageMapping'	AND Exists 
					(Select TOP 1 1 from ZnodeCMSContentPages CP  where CP.PortalId = @PortalId 
					and CP.IsActive =1 and CP.CMSContentPagesId = ZCWTC.CMSMappingId   )))
				)	 
				, Cte_LocaleIdFiletr AS 
				(
					SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,LocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
					FROM Cte_GetContentPagesId CET1 WHERE LocaleId = @SetLocaleId
				)
				,Cte_CompleteRecords AS 
				(
					SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,LocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
					FROM Cte_LocaleIdFiletr
					UNION ALL 
					SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,LocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
					FROM Cte_GetContentPagesId  CTE2
					WHERE Cte2.localeId = @DefaultLocaleId
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_LocaleIdFiletr CTE1 WHERE Cte1.WidgetTitleConfigurationId = CTE2.WidgetTitleConfigurationId )
				)

				INSERT INTO @TBL_GetDATATable (WidgetTitleConfigurationId  ,MappingId  ,  PortalId  , LocaleId  , MediaPath   , Title  ,TitleCode  ,TypeOFMapping  ,Url   , WidgetsKey,IsNewTab ,DisplayOrder)
				SELECT WidgetTitleConfigurationId WidgetTitleConfigurationId,MappingId MappingId,
					PortalId,@SetLocaleId LocaleId, MediaPath,Title,TitleCode,TypeOFMapping,Url,WidgetsKey,IsNewTab,DisplayOrder
				FROM Cte_CompleteRecords 
			End

			SET @CounterId = @CounterId+1 
		END 

	END 

	If @IsPreviewEnable = 1 AND ( @RevisionState like '%Preview%'  OR @RevisionState like '%Production%' ) 
	Begin
		--Data inserted into flat table ZnodePublishWidgetTitleEntity (Replica of MongoDB Collection )  
		Delete from ZnodePublishWidgetTitleEntity where PortalId = @PortalId  and VersionId in (Select PreviewVersionId from  @Tbl_PreviewVersionId) and
		(MappingId = @CMSContentPagesId OR @CMSContentPagesId = 0 )

		Insert Into ZnodePublishWidgetTitleEntity
		(
			VersionId,PublishStartTime,WidgetTitleConfigurationId,PortalId,MappingId,MediaPath,Title,
		    Url,WidgetsKey,TypeOFMapping,ActivationDate,ExpirationDate,IsActive,LocaleId,TitleCode,DisplayOrder,IsNewTab)

		SELECT B.PreviewVersionId , @GetDate, WidgetTitleConfigurationId  ,A.PortalId  ,MappingId  , MediaPath   , Title  ,
			Url   , WidgetsKey,TypeOFMapping  , NULL, NULL , 0 , A.LocaleId  ,TitleCode ,DisplayOrder,IsNewTab
	    FROM @TBL_GetDATATable  A Inner join @Tbl_PreviewVersionId B on 
		 a.PortalId = B.PortalId AND A.LocaleId = B.LocaleId 		
	End
	-------------------------- End Preview 
	If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	Begin

	 -- Only production version id will process 
		Delete from ZnodePublishWidgetTitleEntity where PortalId = @PortalId  and VersionId in ( select ProductionVersionId from @TBL_ProductionVersionId)  and
		(MappingId = @CMSContentPagesId OR @CMSContentPagesId = 0 )
		
		Insert Into ZnodePublishWidgetTitleEntity 
		(
			VersionId,PublishStartTime,WidgetTitleConfigurationId,PortalId,MappingId,MediaPath,Title,
		    Url,WidgetsKey,TypeOFMapping,ActivationDate,ExpirationDate,IsActive,LocaleId,TitleCode,DisplayOrder,IsNewTab		)
	
		SELECT B.ProductionVersionId , @GetDate, WidgetTitleConfigurationId  ,A.PortalId  ,MappingId  , MediaPath   , Title  ,
			Url   , WidgetsKey,TypeOFMapping  , NULL, NULL , 0, a.LocaleId  ,TitleCode ,DisplayOrder,IsNewTab
	    FROM @TBL_GetDATATable A Inner join @Tbl_ProductionVersionId B on 
		 a.PortalId = B.PortalId AND A.LocaleId = B.LocaleId 		
	End
	SET @Status =1 
END TRY 
BEGIN CATCH 
	SET @Status =0  
	SET @Status = 0;
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC ZnodeSetPublishWidgetTitleEntity 
		@PortalId = '+CAST(@PortalId AS VARCHAR	(max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))
		+',@PreviewVersionId = ' + CAST(@PreviewVersionId  AS varchar(20))
		+',@ProductionVersionId = ' + CAST(@ProductionVersionId  AS varchar(20))
		+',@RevisionState = ''' + CAST(@RevisionState  AS varchar(50))
		+''',@CMSContentPagesId= ' + CAST(@CMSContentPagesId  AS varchar(20))
		+',@UserId = ' + CAST(@UserId AS varchar(20));	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		                			 
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'ZnodeSetPublishWidgetTitleEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_UpdateGlobalLocale')
	DROP PROC Znode_UpdateGlobalLocale
GO

CREATE PROCEDURE [dbo].[Znode_UpdateGlobalLocale]
(
@Status  BIT =0  OUT

)
AS
   /*
     Summary : To Insert / Update Locale 
     Update Logic: 

	 exec [Znode_UpdateGlobalLocale] 
*/
     BEGIN
         
         BEGIN TRY
		 SET NOCOUNT ON
			DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		    DECLARE @TBL_PortalDefaultLocale TABLE (PortalId INT , LocaleId INT,UserId INT )

			INSERT INTO @TBL_PortalDefaultLocale (PortalId,LocaleId,UserId)
			SELECT PortalId , LocaleId ,CreatedBy
			FROM ZnodePortalLocale 
			WHERE IsDefault = 1 

			DECLARE @DefaultLocale INT = dbo.FN_GetDefaultLocaleId()
			
		    DELETE ZnodePortalLocale WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeLocale ZL WHERE ZL.LocaleId = ZnodePortalLocale.LocaleId AND ZL.IsActive = 0 )
		    
			-- 
			UPDATE ZnodePortalLocale 
			SET IsDefault = 1 
			WHERE EXISTS (SELECT TOP 1 1 FROM ZnodeLocale ZL WHERE ZL.LocaleId = ZnodePortalLocale.LocaleId AND ZL.IsDefault = 1  ) 
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalLocale XL WHERE XL.PortalId = ZnodePortalLocale.PortalId AND XL.IsDefault = 1  )
			
			INSERT INTO ZnodePortalLocale (PortalId,LocaleId,IsDefault,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
			SELECT PortalId,@DefaultLocale,1,UserId,@GetDate,UserId,@GetDate
			FROM ZnodeLocale ZL 
			CROSS APPLY @TBL_PortalDefaultLocale TBPDL
			WHERE ZL.IsActive = 1 AND ZL.IsDefault = 1 
			AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalLocale ZPL WHERE ZPL.PortalId = TBPDL.PortalId AND ZPL.LocaleId = TBPDL.LocaleId  AND ZPL.IsDefault = 1  )

			--SELECT PortalId,@DefaultLocale,1,UserId,@GetDate,UserId,@GetDate
			--FROM @TBL_PortalDefaultLocale TBPDL 
			--WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalLocale ZPL WHERE ZPL.PortalId = TBPDL.PortalId AND ZPL.LocaleId = TBPDL.LocaleId )
		
         SET @Status =1 
		 SELECT 1 ID , CAST(1 AS BIT ) Status

		 END TRY

		 BEGIN CATCH
		  SET @Status =1 
		 SELECT 1 ID , CAST(0 AS BIT ) Status
		 SELECT ERROR_MESSAGE()
		 END CATCH

		END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_UpdateInventoryPostOrder')
	DROP PROC Znode_UpdateInventoryPostOrder
GO

CREATE PROCEDURE [dbo].[Znode_UpdateInventoryPostOrder]
(
	@SkuXml xml,
	@PortalId int, 
	@UserId int, 
	@Status bit OUT, 
	@OmsOrderId INT,
	@IsDebug bit= 0
)
AS 
	/*
	Summary: (13671)   Inventory will be updated on the basis of "InventoryTracking" (Attribute Code) value in locale table 
				    If value id "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
				    If "AllowBackordering" then inventory will become negative
				    If "DontTrackInventory" then don't update inventory.
				    inventory will be get deducted from associated warehouse where quantity is available as per warehouse precedence. 
				    Validate total quantity 
	Input Parameters:
	SKU(Comma separated multiple), PortalId
	Unit Testing   
		Declare @Status bit 
		Exec Znode_UpdateInventory  @SkuXml = '<ArrayOfOrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>418</OrderLineItemId>
		<SKU>ap1534</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		<OrderWarehouseLineItemsModel>
		<OrderLineItemId>419</OrderLineItemId>
		<SKU>al8907</SKU>
		<InventoryTracking>DisablePurchasing</InventoryTracking>
		<Quantity>1.000000</Quantity>
		</OrderWarehouseLineItemsModel>
		</ArrayOfOrderWarehouseLineItemsModel>',@PortalId = 1,@UserId = 2,@Status = @Status

	*/
BEGIN
	BEGIN TRAN UpdateInventory;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @RoundOffValue INT= dbo.Fn_GetDefaultValue('InventoryRoundOff');
		DECLARE @TBL_XmlReturnToTable TABLE
		( 
			OrderLineItemId int, SKU nvarchar(max), InventoryTracking nvarchar(1000), Quantity numeric(28, 6),
			AllowBackOrder VARCHAR(100), SequenceNo int IDENTITY, OrderLineItemRelationshipTypeId int 
		);
		DECLARE @TBL_ErrorInventoryTracking TABLE
		( 
			SKU nvarchar(max), Quantity numeric(28, 6), InventoryTracking nvarchar(2000), AllowBackOrder varchar(100)
		);
		INSERT INTO @TBL_XmlReturnToTable( OrderLineItemId, SKU, InventoryTracking, Quantity,AllowBackOrder )
		SELECT Tbl.Col.value( 'OrderLineItemId[1]', 'INT' ) AS OrderLineItemId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) AS InventoryTracking, Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) AS Quantity
		, Tbl.Col.value( 'AllowBackOrder[1]', 'VARCHAR(100)' ) AS AllowBackOrder
		FROM @SkuXml.nodes( '//ArrayOfOrderWarehouseLineItemsModel/OrderWarehouseLineItemsModel' ) AS Tbl(Col)
		WHERE Tbl.Col.value( 'InventoryTracking[1]', 'NVARCHAR(2000)' ) <> 'DontTrackInventory' 
		AND Tbl.Col.value( 'Quantity[1]', 'Numeric(28,6)' ) > 0;

		DECLARE @Cur_WarehouseId int, @Cur_PortalId int, @Cur_PortalWarehouseId int, @Cur_WarehouseSequence int, @Cur_SKU varchar(200), @Cur_Quantity numeric(28, 6), @Cur_ReOrderLevel numeric(28, 6), @Cur_InventoryId int;

		DECLARE @RecurringQuantity numeric(28, 6), @BalanceQuantity numeric(28, 6)
		SET @Status = 0; 

		---Updating order line item
		UPDATE TBL SET OrderLineItemId = ZOOLI.OmsOrderLineItemsId, TBL.OrderLineItemRelationshipTypeId = ZOOLI.OrderLineItemRelationshipTypeId 
		FROM ZnodeOmsOrderLineItems ZOOLI WITH (NOLOCK)
		INNER JOIN @TBL_XmlReturnToTable TBL ON ZOOLI.Sku = TBL.SKU
		WHERE EXISTS(SELECT * FROM ZnodeOmsOrderDetails ZOOD WITH (NOLOCK) WHERE ZOOLI.OmsOrderDetailsId = ZOOD.OmsOrderDetailsId AND ZOOD.OmsOrderId = @OmsOrderId)
		AND ZOOLI.ParentOmsOrderLineItemsId IS NOT NULL

		DECLARE @TBL_CalculateQuntity TABLE
		( 
			WarehouseId int, SKU varchar(200), MainQuantity numeric(28, 6), InventoryId int, OrderQuantity numeric(28, 6), UpdatedQuantity numeric(28, 6), WarehouseSequenceId int, InventoryTracking nvarchar(2000)
			, AllowBackOrder varchar(100)
		);
		
		DECLARE @TBL_AllwareHouseToportal TABLE
		( 
			WarehouseId int, PortalId int, PortalWarehouseId int, WarehouseSequenceFirst int, WarehouseSequence int, SKU varchar(200), Quantity numeric(28, 6), ReOrderLevel numeric(28, 6), InventoryId int
		);
		
		SELECT WarehouseId, PortalId, PortalWarehouseId, Precedence
		INTO #PortalWarehouse
		FROM [ZnodePortalWarehouse] WITH (NOLOCK)
		WHERE PortalId = @PortalId
		UNION 
		SELECT WarehouseId, @PortalId AS PortalId, PortalWarehouseId, Precedence
		FROM [dbo].[ZnodePortalAlternateWarehouse] AS zpaw WITH (NOLOCK)
		WHERE EXISTS ( SELECT TOP 1 1 FROM [ZnodePortalWarehouse] AS a WHERE zpaw.PortalWarehouseId = a.PortalWarehouseId AND  a.PortalId = @PortalId)  
		
		INSERT INTO @TBL_AllwareHouseToportal( WarehouseId, PortalId, PortalWarehouseId, SKU, Quantity, ReOrderLevel, InventoryId, WarehouseSequence, WarehouseSequenceFirst )
		SELECT ZPW.WarehouseId, ZPW.PortalId, zpw.PortalWarehouseId, zi.SKU, zi.Quantity, zi.ReOrderLevel, zi.InventoryId, DENSE_RANK() OVER(ORDER BY ZPW.WarehouseId), 1
		FROM dbo.ZnodeInventory AS zi WITH (NOLOCK)
		LEFT JOIN #PortalWarehouse AS ZPW ON ZPW.WarehouseId = ZI.WareHouseId AND  ZPW.PortalId = @PortalId
		WHERE EXISTS ( SELECT TOP 1 1  FROM @TBL_XmlReturnToTable AS TBXRT WHERE RTRIM(LTRIM(TBXRT.SKU)) = RTRIM(LTRIM(zi.SKU))) 
		AND ZPW.WarehouseId IS NOT NULL
		ORDER BY ZPW.Precedence DESC

		--Total Avaialble qunatity in all warehouse 
		IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
		BEGIN
			INSERT INTO @TBL_ErrorInventoryTracking 
			SELECT TBAHL.SKU, SUM(TBAHL.Quantity), InventoryTracking,TBXML.AllowBackOrder 
			FROM @TBL_XmlReturnToTable AS TBXML
			LEFT JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU) 
			INNER JOIN ZnodeOmsOrderLineItems b on (TBXML.orderlineitemid = b.OmsOrderLineItemsId)
			WHERE InventoryTracking = 'DisablePurchasing'
			AND b.OrderLineItemRelationshipTypeId IS NOT NULL
			GROUP BY TBXML.AllowBackOrder ,TBAHL.SKU, InventoryTracking HAVING SUM(TBAHL.Quantity) < 1 ORDER BY TBAHL.SKU;
			IF EXISTS ( SELECT TOP 1 1 FROM @TBL_ErrorInventoryTracking )
			BEGIN
				SET @Status = 0;
				RAISERROR(15600, -1, -1, 'DisablePurchasing');
			END;
		END;

		---Getting data for simple , configurable and bundle
		INSERT INTO @TBL_CalculateQuntity
		SELECT WarehouseId, TBXML.SKU, TBAHL.Quantity, TBAHL.InventoryId, TBXML.Quantity, NULL AS UpdatedQuantity, DENSE_RANK() 
		OVER(ORDER BY WarehouseSequenceFirst,WarehouseSequence), InventoryTracking, TBXML.AllowBackOrder
		FROM @TBL_XmlReturnToTable AS TBXML	
		INNER  JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU)
		WHERE EXISTS(SELECT * FROM ZnodeOmsOrderLineItems ZOOLI WHERE TBXML.OrderLineItemId = ZOOLI.OmsOrderLineItemsId
			AND ZOOLI.ParentOmsOrderLineItemsId IS NOT NULL) 
		AND isnull(TBXML.OrderLineItemRelationshipTypeId,0) not in (SELECT OrderLineItemRelationshipTypeId FROM ZnodeOmsOrderLineItemRelationshipType WHERE Name IN ('Group'))
		ORDER BY  WarehouseSequenceFirst,WarehouseSequence;

		--Update LineItemId for Group Product
		UPDATE TBXML
		SET TBXML.OrderLineItemId=ZOOLI.ParentOmsOrderLineItemsId
		FROM @TBL_XmlReturnToTable TBXML
		INNER JOIN ZnodeOmsOrderLineItems ZOOLI ON TBXML.OrderLineItemId = ZOOLI.OmsOrderLineItemsId
		WHERE TBXML.OrderLineItemRelationshipTypeId IN (SELECT OrderLineItemRelationshipTypeId FROM ZnodeOmsOrderLineItemRelationshipType WHERE Name IN ('Group'));

		---Getting data for group products
		INSERT INTO @TBL_CalculateQuntity
		SELECT WarehouseId, TBXML.SKU, TBAHL.Quantity, TBAHL.InventoryId, TBXML.Quantity, NULL AS UpdatedQuantity, DENSE_RANK() 
		OVER(ORDER BY WarehouseSequenceFirst,WarehouseSequence), InventoryTracking, TBXML.AllowBackOrder
		FROM @TBL_XmlReturnToTable AS TBXML	
		INNER  JOIN @TBL_AllwareHouseToportal AS TBAHL ON(TBAHL.SKU = TBXML.SKU)
		WHERE EXISTS(SELECT * FROM ZnodeOmsOrderLineItems ZOOLI where TBXML.OrderLineItemId = ZOOLI.OmsOrderLineItemsId and ZOOLI.ParentOmsOrderLineItemsId is null)
		AND TBXML.OrderLineItemRelationshipTypeId in (SELECT OrderLineItemRelationshipTypeId FROM ZnodeOmsOrderLineItemRelationshipType Where Name IN ('Group'))
		ORDER BY  WarehouseSequenceFirst,WarehouseSequence;

		;with cte as
		(
			SELECT WarehouseId,	a.SKU,	MainQuantity,	InventoryId,	WarehouseSequenceId,	a.InventoryTracking,	AllowBackOrder,sum(OrderQuantity) as OrderQuantity
			FROM @TBL_CalculateQuntity A
			GROUP BY WarehouseId,	a.SKU,	MainQuantity,	InventoryId,	WarehouseSequenceId,	InventoryTracking,	AllowBackOrder
		)
		UPDATE b set  b.OrderQuantity = a.OrderQuantity
		FROM cte a
		INNER JOIN @TBL_CalculateQuntity b on a.SKU = b.SKU and a.InventoryId = b.InventoryId and a.WarehouseId = b.WarehouseId

		
		UPDATE @TBL_CalculateQuntity 
		SET UpdatedQuantity = MainQuantity - OrderQuantity  
		WHERE WarehouseSequenceId = 1;
		 		
		DECLARE @CountToRepeate int= ( SELECT count( distinct WarehouseId) FROM @TBL_CalculateQuntity),@Initializationofloop int= 2;
       
		WHILE @Initializationofloop <= @CountToRepeate 
				AND EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity AS a 
					WHERE UpdatedQuantity < 0  )
		BEGIN
		 
			UPDATE a  
			SET a.UpdatedQuantity = a.MainQuantity + b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = (@Initializationofloop - 1)) 
			WHERE a.WarehouseSequenceId = @Initializationofloop 
			AND b.UpdatedQuantity < 0
			AND b.UpdatedQuantity IS NOT NULL 

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			AND UpdatedQuantity < 0
			AND UpdatedQuantity IS NOT NULL 

			SET @Initializationofloop = @Initializationofloop + 1;
		END; 
		
		
		IF EXISTS (SELECT TOP 1 1 FROM @TBL_CalculateQuntity WHERE ISNULL(UpdatedQuantity,0) < 0 AND @CountToRepeate >1)
		BEGIN 
			UPDATE a  
			SET a.UpdatedQuantity = b.UpdatedQuantity 
			FROM @TBL_CalculateQuntity a 
			INNER JOIN @TBL_CalculateQuntity b ON (a.Sku = b.Sku AND b.WarehouseSequenceId = @Initializationofloop -1 ) 
			WHERE a.WarehouseSequenceId = 1 
			AND ISNULL(b.UpdatedQuantity,0) < 0

			UPDATE @TBL_CalculateQuntity 
			SET UpdatedQuantity  = 0 
			WHERE WarehouseSequenceId = @Initializationofloop -1 
			--AND  InventoryTracking <> 'AllowBackordering'
			AND ISNULL(UpdatedQuantity,0) < 0
		END 
			
			
		--If "AllowBackordering" then inventory will go to be negative conside only single warehouse
		IF EXISTS(SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'AllowBackordering')
		BEGIN
			UPDATE ZI SET Quantity = Isnull(TBCQ.UpdatedQuantity,0) 
			FROM dbo.ZnodeInventory ZI 
			INNER JOIN @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId)
			WHERE InventoryTracking = 'AllowBackordering' AND  UpdatedQuantity IS NOT NULL  ;
			SET @Status = 1;
		END;
		
		-- If @InventoryTracking is "DisablePurchasing" then subtracts currently selected quantity only when it will greater than zero.
		IF EXISTS ( SELECT TOP 1 1 FROM @TBL_XmlReturnToTable WHERE InventoryTracking = 'DisablePurchasing')
		BEGIN
			SET @BalanceQuantity = 1;
			UPDATE ZI 
			SET Quantity = CASE WHEN TBCQ.UpdatedQuantity < 0 THEN 0 ELSE TBCQ.UpdatedQuantity END 
			FROM dbo.ZnodeInventory ZI 
			INNER JOIN  @TBL_CalculateQuntity TBCQ ON(Zi.InventoryId = TBCQ.InventoryId) WHERE InventoryTracking = 'DisablePurchasing'
			AND TBCQ.UpdatedQuantity IS NOT NULL 
			;
		END;
		
		INSERT INTO ZnodeOmsOrderWarehouse( OmsOrderLineItemsId, WarehouseId,Quantity, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
		SELECT OrderLineItemId, WarehouseId,CASE WHEN UpdatedQuantity = 0 THEN MainQuantity ELSE MainQuantity - UpdatedQuantity END , @UserId, @GetDate, @UserId, @GetDate 
		FROM @TBL_CalculateQuntity AS TBCQ 
		INNER JOIN @TBL_XmlReturnToTable AS TBXR
			   ON(TBXR.SKU = TBCQ.SKU) WHERE UpdatedQuantity IS NOT NULL;
  
		SELECT DISTINCT SKU,
		 [dbo].[Fn_GetDefaultPriceRoundOffReturnNumeric](UpdatedQuantity) AS Quantity,
		  InventoryTracking,CAST(AllowBackOrder AS BIT) AllowBackOrder
		FROM @TBL_CalculateQuntity
		WHERE UpdatedQuantity IS NOT NULL;

		SET @Status = 1;
		COMMIT TRAN UpdateInventory;
	END TRY
	BEGIN CATCH
	
		SET @Status = 0;
		SELECT SKU, Quantity, InventoryTracking,CAST(AllowBackOrder AS BIT) AllowBackOrder
		FROM @TBL_ErrorInventoryTracking;
		
		ROLLBACK TRAN UpdateInventory;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_UpdateQuoteStatus')
	DROP PROC Znode_UpdateQuoteStatus
GO


CREATE PROCEDURE [dbo].[Znode_UpdateQuoteStatus]
(   
	@OmsQuoteId      VARCHAR(2000),
    @OmsOrderStateId INT           = NULL,
    @Status          INT           = 0 OUT, -- 1 for  sucessfull delete and update 
	@ExceptUpdateStatus VARCHAR(max) = '', -- in this status Quote are not updated 
	@ModifiedBy INT = 0 , 
	@IsAdminUser BIT = 0 
)
AS
  /* 
	Summary :- This Procedure is used to update the Quote status 
				returns 0 or 1 as result depends upon the status
	Unit Testing 
	begin tran
	DECLARE @OutIds INT = 0 
	EXEC Znode_UpdateQuoteStatus '306,281,263',80,@OutIds OUT,'Ordered,Draft'
	SELECT @OutIds
	rollback tran
	SELECT * FROM [ZNodeUserQuoteOrderLineItem]  WHERE omsQuoteId IN (306,281,263)
	SELECT * FROM ZnodeOmsOrderState
   */
BEGIN 
	BEGIN TRY
	SET NOCOUNT ON;
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
		DECLARE @TBL_NotUpdateStatus TABLE (value  VARCHAR(max))
		DECLARE @RejectOmsOrderStateId INT = (SELECT TOP 1 OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'REJECTED')
		DECLARE @ApprovedOmsOrderStateId INT = (SELECT TOP 1 OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'APPROVED')
		DECLARE @TBL_UpdateApprovalState TABLE (UserId INT ,ApprovalLevelId INT ,ApproverUserId INT, ApproverOrder INT   )
		DECLARE @TBL_OrderState TABLE
        (FirstName  VARCHAR(100),
        LastName   VARCHAR(100),
        Email      VARCHAR(50),
        [Status]   NVARCHAR(MAX),
        OmsQuoteId INT,
        UserId     INT,
        PortalId   INT,
		OmsOrderStateId INT
        );
             
		IF @ExceptUpdateStatus = '' 
		BEGIN 
			INSERT INTO @TBL_NotUpdateStatus 
			SELECT value 
			FROM dbo.[Fn_GetProcedureAttributeDefault]('OrderState') FNGP
		END 
		ELSE 
		BEGIN 
			INSERT INTO @TBL_NotUpdateStatus 
			SELECT item 
			FROM dbo.split(@ExceptUpdateStatus,',') FNGP
		END 

		IF EXISTS (SELECT TOP 1 1  FROM  ZnodeUser ZU 
							INNER JOIN AspNetUsers AU ON (AU.Id = ZU.AspNetUserId)
							INNER JOIN AspNetUserRoles RTY ON (RTY.UserId = AU.Id)
							INNER JOIN AspNetRoles TU ON (TU.Id = RTY.RoleId)
							WHERE ZU.UserId = @ModifiedBy  AND (ISNULL(TU.TypeOfRole,'') <> 'B2B' AND   TU.Name <> 'Customer'))
	BEGIN 
		SET @IsAdminUser = 1 
	END 


	DECLARE @OmsQuoteIds TABLE (OmsQuoteId INT )
	INSERT INTO  @OmsQuoteIds
	SELECT Item
    FROM dbo.Split(@OmsQuoteId, ',') SP

			 	 
		INSERT INTO @TBL_OrderState
        (FirstName,
        LastName,
        Email,
        [Status],
        OmsQuoteId,
        UserId,
        PortalId,
		OmsOrderStateId
        )
            SELECT ZU.FirstName,
                    Zu.LastName,
                    ZU.Email,
                    ZOOS.OrderStateName,
                    ZOQ.OmsQuoteId,
                    ZU.UserId,
                    ZOQ.PortalId,
					ZOOS.OmsOrderStateId
            FROM ZnodeUser ZU
                    INNER JOIN ZnodeOmsQuote ZOQ ON(ZOQ.UserId = ZU.UserId)
                    INNER JOIN ZnodeOmsOrderState ZOOS ON(ZOOS.OmsOrderStateId = ZOQ.OmsOrderStateId)
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @OmsQuoteIds SP
                WHERE ZOQ.OmsQuoteId = SP.OmsQuoteId
            );
         

	DECLARE @ApproverUserId TABLE (ApproverUserId INT )
	INSERT INTO @ApproverUserId
	SELECT  ApproverUserId 
	FROM ZnodeUserApprovers 
	WHERE ApproverOrder IN (SELECT ApproverOrder  FROM  ZnodeUserApprovers 
				WHERE ApproverUserId = @ModifiedBy 
				AND USERId  = ( SELECT TOP 1 UserId FROM ZnodeOMSQuoteApproval ZOQ WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @OmsQuoteIds SP
                WHERE ZOQ.OmsQuoteId = SP.OmsQuoteId
            ) )
	) AND USERId  = ( SELECT TOP 1 UserId FROM ZnodeOMSQuoteApproval 
	WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @OmsQuoteIds SP
                WHERE ZnodeOMSQuoteApproval.OmsQuoteId = SP.OmsQuoteId
            ) )
			 
	INSERT INTO @ApproverUserId
	SELECT ApproverUserId 
	FROM ZnodeUserApprovers a 
	INNER JOIN ZnodePortalApproval b ON (b.PortalApprovalId= a.PortalApprovalId)
	WHERE a.IsActive = 1 
	AND b.PortalId = (SELECT TOP 1 PortalId FROM ZnodeOmsQuote asd WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @OmsQuoteIds SP
                WHERE asd.OmsQuoteId = SP.OmsQuoteId
            ) )



	UPDATE ZnodeOMSQuoteApproval
        SET OmsOrderStateId = @OmsOrderStateId
		, ModifiedBy = @ModifiedBy,ModifiedDate = @GetDate
        WHERE EXISTS
        (
            SELECT 1
            FROM dbo.Split(@OmsQuoteId, ',') AS f
            WHERE f.item = ZnodeOMSQuoteApproval.OmsQuoteId
        )
        AND ( (NOT EXISTS 
        (
            SELECT TOP 1 1
            FROM @TBL_OrderState TBOS
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @TBL_NotUpdateStatus FNGP
                WHERE FNGP.Value = TBOS.[Status]
            )
            AND ZnodeOMSQuoteApproval.OmsQuoteId = TBOS.OmsQuoteId
        )
		AND( ApproverUserId = @ModifiedBy  OR ApproverUserId  
		IN (SELECT ApproverUserId FROM @ApproverUserId) OR @IsAdminUser = 1 ))) ; 
			 
		DECLARE @AmountOfQuote NUMERIC(28,8) = (SELECT TOP 1 QuoteOrderTotal FROM ZnodeOmsQuote WHERE OmsQuoteId = @OmsQuoteId  )

	INSERT INTO @TBL_UpdateApprovalState 
	SELECT UserId  ,ApproverLevelId  ,ApproverUserId , ApproverOrder
	FROM ZnodeUserApprovers a 
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval TY 
	WHERE TY.UserId = a.UserId 
	AND TY.ApproverOrder = a.ApproverOrder  
	AND  TY.OmsOrderStateId = @ApprovedOmsOrderStateId
	AND EXISTS
        (
            SELECT 1
            FROM dbo.Split(@OmsQuoteId, ',') AS f
            WHERE f.item = TY.OmsQuoteId
        )
		)
	AND EXISTS (SELECT TOP 1 1 FROM ZnodeOMSQuoteApproval TY 
	WHERE TY.UserId = a.UserId 
	AND EXISTS
        (
            SELECT 1
            FROM dbo.Split(@OmsQuoteId, ',') AS f
            WHERE f.item = TY.OmsQuoteId
        ) )
		AND  a.FromBudgetAmount <= @AmountOfQuote
			
	UPDATE ZnodeOMSQuoteApproval 
	SET IsApprovalRoutingComplete = 1 
		, ModifiedBy = @ModifiedBy,ModifiedDate = @GetDate
        WHERE EXISTS
        (
            SELECT 1
            FROM dbo.Split(@OmsQuoteId, ',') AS f
            WHERE f.item = ZnodeOMSQuoteApproval.OmsQuoteId
        )
        AND (NOT EXISTS (SELECT TOP 1 1  FROM @TBL_UpdateApprovalState) OR @IsAdminUser = 1) 
		AND (@IsAdminUser = 1 OR ZnodeOMSQuoteApproval.ApproverUserId = @ModifiedBy)
		;

	--- SELECT @IsAdminUser 

		UPDATE ZnodeOmsQuote
        SET OmsOrderStateId = @OmsOrderStateId
		,IsConvertedToOrder = CASE WHEN @OmsOrderStateId IN (SELECT OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName = 'REJECTED') 
								THEN 1  
								WHEN @OmsOrderStateId IN (SELECT OmsOrderStateId FROM ZnodeOmsOrderState WHERE OrderStateName IN ('APPROVED','PENDING APPROVAL')
										AND NOT EXISTS (SELECT * FROM ZnodeOmsOrder WHERE OMSQuoteId=ZnodeOmsQuote.OMSQuoteId)) 
								THEN 0
								ELSE IsConvertedToOrder END 
		, ModifiedBy = @ModifiedBy
		,ModifiedDate = @GetDate
        WHERE EXISTS
        (
            SELECT 1
            FROM dbo.Split(@OmsQuoteId, ',') AS f
            WHERE f.item = ZnodeOmsQuote.OmsQuoteId
        )
        AND ((
		NOT EXISTS
        (
            SELECT TOP 1 1
            FROM @TBL_OrderState TBOS
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @TBL_NotUpdateStatus FNGP
                WHERE FNGP.Value = TBOS.[Status]
            )
            AND ZnodeOmsQuote.OmsQuoteId = TBOS.OmsQuoteId
        )
		AND (EXISTS (SELECT TOP 1  1  FROM ZnodeOMSQuoteApproval TY WHERE TY.OmsQuoteId = ZnodeOmsQuote.OmsQuoteId AND TY.IsApprovalRoutingComplete = 1   )
		OR EXISTS (SELECT TOP 1 1   FROM ZnodeOMSQuoteApproval TY WHERE TY.OmsQuoteId = ZnodeOmsQuote.OmsQuoteId  AND TY.OmsOrderStateId = @RejectOmsOrderStateId)) 
		) OR @IsAdminUser = 1 ) ;
			
		IF NOT EXISTS
        (
            SELECT TOP 1 1
            FROM @TBL_OrderState TBOS
            WHERE EXISTS
            (
                SELECT TOP 1 1
                FROM @TBL_NotUpdateStatus FNGP
                WHERE FNGP.Value = TBOS.[Status]
            )
        )  AND EXISTS (SELECT TOP 1 1 FROM @TBL_OrderState TBOS) 
            BEGIN
            SELECT a.FirstName,
                    a.LastName,
                    a.Email,
                    ZOOS.OrderStateName [Status],
                    a.OmsQuoteId,
                    a.UserId,
                    a.PortalId, 
					ZOOS2.OrderStateName ChildOrderStatus,
					aa.QuoteOrderTotal,
					ZOOS2.OmsOrderStateId 
                FROM @TBL_OrderState a 
				INNER JOIN ZnodeOmsQuote aa ON (aa.OmsQuoteId =a.OmsQuoteId)
				INNER JOIN ZnodeOmsOrderState ZOOS ON(ZOOS.OmsOrderStateId =  aa.OmsOrderStateId )
				INNER JOIN ZnodeOmsOrderState ZOOS2 ON(ZOOS2.OmsOrderStateId =  @OmsOrderStateId )
                SET @Status = 1;
                  
            END;
        ELSE
            BEGIN
                SET @Status = 0;
            END;
    END TRY
    BEGIN CATCH
              
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_UpdateQuoteStatus @OmsQuoteId = '+@OmsQuoteId+',@OmsOrderStateId='+CAST(@OmsOrderStateId AS VARCHAR(50))+',@ExceptUpdateStatus='+@ExceptUpdateStatus+',@Status='+CAST(@Status AS VARCHAR(10))+',@ModifiedBy='+@ModifiedBy;
              			 
        SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
        EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_UpdateQuoteStatus',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
    END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_UpdateSearchProfileStateOnIndexCreationFailure')
	DROP PROC Znode_UpdateSearchProfileStateOnIndexCreationFailure
GO

CREATE PROCEDURE [dbo].[Znode_UpdateSearchProfileStateOnIndexCreationFailure] 
(
	@PublishCatalogId INT,
	@UserId INT = 0
) 
AS
/*
	Unit Testing
	EXEC dbo.Znode_UpdateSearchProfileStateOnIndexCreationFailure @PublishCatalogId=5
*/
BEGIN
	BEGIN TRAN UpdateSearchProfileState;
	BEGIN TRY
		SET NOCOUNT ON
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @PublishStateId TINYINT;
		SET @PublishStateId=(SELECT TOP 1 PublishStateId FROM ZnodePublishState WHERE StateName='Publish Failed');

		UPDATE SP
		SET SP.PublishStateId=@PublishStateId, SP.ModifiedBy=@UserId, SP.ModifiedDate=@GetDate
		FROM ZnodePublishCatalogSearchProfile PCSP
		INNER JOIN ZnodeSearchProfile SP ON PCSP.SearchProfileId=SP.SearchProfileId
		WHERE PCSP.PublishCatalogId=@PublishCatalogId;

	COMMIT TRAN UpdateSearchProfileState
	END TRY
	BEGIN CATCH
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_DeleteSearchProfile @PublishCatalogId='+ISNULL(CAST(@PublishCatalogId AS VARCHAR(50)),'''');

		ROLLBACK TRAN UpdateSearchProfileState 

		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_UpdateSearchProfileStateOnIndexCreationFailure',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO











DROP TABLE IF EXISTS #UpdatePimAttributeValue;

SELECT A.* 
INTO #UpdatePimAttributeValue
FROM 
(
SELECT a1.PimProductId, c1.AttributeCode, d1.AttributeDefaultValueCode As AttributeValue
FROM ZnodePimAttributeValue a1 WITH (NOLOCK)  --on a.pimproductid = a1.pimproductid
INNER JOIN ZnodePimProductAttributeDefaultValue b1  WITH (NOLOCK) ON a1.Pimattributevalueid = b1.Pimattributevalueid
INNER JOIN ZnodePimAttributeDefaultValue d1 WITH (NOLOCK)  ON b1.PimAttributeDefaultValueId = d1.PimAttributeDefaultValueId
INNER JOIN ZnodePimAttributeDefaultValueLocale d2 WITH (NOLOCK) ON (d1.pimattributedefaultvalueid = d2.pimattributedefaultvalueid AND d2.localeid = 1)
INNER JOIN ZnodePimAttribute c1 WITH (NOLOCK) ON a1.pimattributeid = c1.pimattributeid
--INNER JOIN ZnodeAttributeType f1 ON c1.AttributeTypeId = f1.AttributeTypeId
INNER JOIN ZnodePimProduct PP WITH (NOLOCK) ON a1.PimProductId=PP.PimProductId --AND PP.SKU IS NULL
WHERE c1.AttributeCode in ('ProductType','Assortment','Brand','Vendor','Highlights','IsActive','Weight','IsDownloadable')

UNION ALL 

SELECT a1.PimProductId, c1.attributeCode, b1.AttributeValue As AttributeValue
from ZnodePimAttributeValue a1 WITH (NOLOCK)  --on a.pimproductid = a1.pimproductid
INNER JOIN ZnodePimAttributeValueLocale b1 ON a1.PimAttributeValueId = b1.PimAttributeValueId and b1.LocaleId =1 
INNER JOIN ZnodePimAttribute c1 WITH (NOLOCK) ON a1.pimattributeid = c1.pimattributeid
--INNER JOIN ZnodeAttributeType f1 WITH (NOLOCK) ON c1.AttributeTypeId = f1.AttributeTypeId
INNER JOIN ZnodePimProduct PP WITH (NOLOCK) ON a1.PimProductId=PP.PimProductId --AND PP.SKU IS NULL
WHERE c1.AttributeCode in ('SKU', 'ProductCode','ProductName')

UNION ALL

SELECT PAV.PimProductId, PA.AttributeCode, CAST(PPAM.MediaId As VARCHAR(20)) As AttributeValue
FROM ZnodePimProductAttributeMedia PPAM WITH (NOLOCK)
INNER JOIN ZnodePimAttributeValue PAV WITH (NOLOCK) ON PAV.PimAttributeValueId=PPAM.PimAttributeValueId
INNER JOIN ZnodePimAttribute PA WITH (NOLOCK) ON PAV.PimAttributeId=PA.PimAttributeId
INNER JOIN ZnodePimProduct PP WITH (NOLOCK) ON PAV.PimProductId=PP.PimProductId --AND PP.SKU IS NULL
WHERE PA.AttributeCode IN ('ProductImage')
) A 
WHERE ISNULL(A.AttributeValue,'')<>''

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'Idx_101' AND object_id = OBJECT_ID('#UpdatePimAttributeValue'))
BEGIN
	CREATE INDEX Idx_101 ON #UpdatePimAttributeValue (AttributeCode);
END

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'Idx_102' AND object_id = OBJECT_ID('#UpdatePimAttributeValue'))
BEGIN
	CREATE INDEX Idx_102 ON #UpdatePimAttributeValue (PimProductId,AttributeCode);
END

IF EXISTS (SELECT TOP 1 1 FROM #UpdatePimAttributeValue)
BEGIN
 	DECLARE @sqlt NVARCHAR(MAX) = ''
	DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr INT

	DECLARE Cur_AttributeDataUpdate CURSOR FOR 

	SELECT b.AttributeCode , PimAttributeId 
	FROM INFORMATION_SCHEMA.COLUMNS a 
	INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
	WHERE TABLE_NAME = 'ZnodePimProduct'
		AND IsCategory = 0 
		AND EXISTS (SELECT TOP 1 1 FROM #UpdatePimAttributeValue n  WHERE n.AttributeCode = b.AttributeCode  )

	OPEN Cur_AttributeDataUpdate 
	FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		SET @sqlt = 
			'
				UPDATE a  
				SET '+@AttributeCodeAtt+'= AttributeValue 
				FROM ZnodePimProduct a 
				INNER JOIN #UpdatePimAttributeValue m ON(m.PimProductId = a.pimProductId ) 
				WHERE m.AttributeCode = '''+@AttributeCodeAtt+'''
			' 
		PRINT @sqlt
		EXEC (@sqlt)

		FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
	END 
	CLOSE Cur_AttributeDataUpdate
	DEALLOCATE Cur_AttributeDataUpdate 
END

GO

INSERT INTO ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
SELECT
(SELECT top 1 MenuId   FROM ZnodeMenu    WHERE MenuName = 'Export') ,
(SELECT top 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Export' and ActionName = 'DownloadExportFile')
,1,2,Getdate(),2,Getdate() 
WHERE NOT EXISTS
(SELECT * from ZnodeMenuActionsPermission WHERE MenuId =
(SELECT top 1 MenuId from ZnodeMenu WHERE MenuName = 'Export') and ActionId =
(SELECT top 1 ActionId from ZnodeActions WHERE ControllerName = 'Export' and ActionName = 'DownloadExportFile'))

INSERT INTO ZnodeMenuActionsPermission ( MenuId, ActionId, AccessPermissionId, CreatedBy ,CreatedDate, ModifiedBy, ModifiedDate )
SELECT
(SELECT top 1 MenuId   FROM ZnodeMenu    WHERE MenuName = 'Export') ,
(SELECT top 1 ActionId FROM ZnodeActions WHERE ControllerName = 'Export' and ActionName = 'Deletelogs')
,1,2,Getdate(),2,Getdate() 
WHERE NOT EXISTS
(SELECT * from ZnodeMenuActionsPermission WHERE MenuId =
(SELECT top 1 MenuId from ZnodeMenu WHERE MenuName = 'Export') and ActionId =
(SELECT top 1 ActionId from ZnodeActions WHERE ControllerName = 'Export' and ActionName = 'Deletelogs'))

GO


IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportImportErrorLog')
	DROP PROC Znode_ExportImportErrorLog
GO

CREATE PROCEDURE [dbo].[Znode_ExportImportErrorLog]
(
    @WhereClause NVARCHAR(MAX),
	@FileType NVARCHAR(20),
	@ImportProcessLogId INT,
	@Status	BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to export Import Error Log data based on input values.

	Unit Testing :
		EXEC [dbo].[Znode_ExportImportErrorLog]  @WhereClause='',@FileType=N'CSV',@ImportProcessLogId=1034,@Status=1
*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @Count INT, 
				@Table NVARCHAR(MAX),
				@SSQLString NVARCHAR(MAX),
				@ExportProcessLogId INT=0,
				@ImportType NVARCHAR(50);

		DECLARE @Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		SET @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause);

		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'RowNumber','zil.RowNumber')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ColumnName','zil.ColumnName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'Data','zil.Data')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ErrorDescription','zil.ErrorDescription')
		
		SET @ImportType =
                         (
						 SELECT TOP 1 NAME AS IMPORTTYPE FROM ZnodeImportProcessLog zip
                         inner join  ZnodeImportTemplate zit WITH (NOLOCK) ON zip.ImportTemplateId=zit.ImportTemplateId
                         inner join ZnodeImportHead zih WITH (NOLOCK) on zit.ImportHeadId=zih.ImportHeadId
                         Where zip.ImportProcessLogId=@ImportProcessLogId
						 );

		INSERT INTO ZnodeExportProcessLog (ExportType,FileType,[Status],ProcessStartedDate,ProcessCompletedDate,TableName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @ImportType,@FileType,'Started',@GetDate,NULL,NULL,3,@GetDate,3,@GetDate

		SET @ExportProcessLogId = SCOPE_IDENTITY()

		SET @Table = 'ImportErrorLog'+ @ImportType +'_'+ CAST(@ExportProcessLogId As VARCHAR(20));

		UPDATE ZnodeExportProcessLog
		SET TableName = @Table
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SET @SSQLString='    	
				SELECT zil.ImportLogId ID, zil.ImportProcessLogId, ISNULL(zil.RowNumber, 0) [Row Number], ISNULL(zil.ColumnName, '''') [Column Name],
					ISNULL(zil.Data, '''') [Column Data], zm.MessageName + 
					CASE 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1)
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') like ''%Quantity%''  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') -1) 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Inventory'')  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''')  like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Inventory'') THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (44) AND '''+@ImportType+''' in (''Pricing'') THEN +''  ''+ isnull(DefaultErrorValue,''0000000.00'' )
						WHEN zm.MessageCode IN (129) AND '''+@ImportType+''' NOT IN (''Product'') THEN +'' ''+ isnull(DefaultErrorValue,''0000000.00'')+''.''
						ELSE ''''END ''Error Description'' 
				INTO '+@Table+' 
				FROM ZnodeImportLog AS zil WITH (NOLOCK) 
				INNER JOIN ZnodeMessage AS zm WITH (NOLOCK) ON zil.ErrorDescription = CONVERT(VARCHAR(50) , zm.MessageCode)
				WHERE zil.ImportProcessLogId='+CAST(@ImportProcessLogId AS NVARCHAR(20))+' '+ @Fn_GetFilterWhereClause+'  			
				'
	    EXEC (@SSQLString);
		
		SET @Count = @@ROWCOUNT;
				
		SET @GetDate = dbo.Fn_GetDate();

		UPDATE ZnodeExportProcessLog 
		SET [Status]= 'In Progress'
		WHERE ExportProcessLogId =@ExportProcessLogId;

		SELECT TableName
		FROM ZnodeExportProcessLog
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SELECT @Count As [COUNT];

		SET @Status = 1;
	END TRY
 
	BEGIN CATCH
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'Znode_ExportImportErrorLog 
					@WhereClause = '+CAST(@WhereClause AS NVARCHAR(MAX))+',
					@FileType='+CAST(@FileType AS VARCHAR(20))+',
					@Status='+CAST(@Status AS VARCHAR(10));
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportImportErrorLog',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetProductTypeAttributesValue')
	DROP PROC Znode_GetProductTypeAttributesValue
GO

CREATE PROCEDURE [dbo].[Znode_GetProductTypeAttributesValue]
(
	@WhereClause	NVARCHAR(MAX),
	@Rows			INT = 100,
	@PageNo			INT = 1,
	@Order_BY		VARCHAR(100) = '',
	@RowsCount		INT OUT
)
AS
/*
	Summary :- This Procedure is used to get the AttributeCode='ProductType' and SelectValues.Value='Configurable Product'
	Unit Testig 
	EXEC Znode_GetProductTypeAttributesValue 'ProductType','',100,1,'',0
	EXEC Znode_GetProductTypeAttributesValue 'ProductType',null,100,1,'',0
*/
BEGIN 
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @SQL NVARCHAR(MAX);--ZnodePublishProductEntity

		DECLARE @TBL_ZnodePublishProductEntity TABLE
		(PublishProductEntityId INT, VersionId INT, IndexId VARCHAR(300), ZnodeProductId INT, ZnodeCatalogId INT,
			SKU VARCHAR(300), LocaleId INT, [Name] VARCHAR(300), ZnodeCategoryIds INT, IsActive BIT,
			Attributes NVARCHAR(MAX), Brands NVARCHAR(MAX), CategoryName VARCHAR(300), CatalogName VARCHAR(300),
			DisplayOrder INT, RevisionType VARCHAR(50), AssociatedProductDisplayOrder INT, ProductIndex INT,
			SalesPrice VARCHAR(50), RetailPrice VARCHAR(50), CultureCode VARCHAR(50), CurrencySuffix VARCHAR(50),
			CurrencyCode VARCHAR(50), SeoDescription VARCHAR(1000), SeoKeywords VARCHAR(1000),
			SeoTitle VARCHAR(1000), SeoUrl VARCHAR(1000), ImageSmallPath VARCHAR(500), SKULower VARCHAR(50),
			RowId INT ,CountId INT
		)
		SET @SQL = '
		;With Cte_ZnodePublishProductEntity
		AS
		(
		SELECT DISTINCT PPE.PublishProductEntityId,PPE.VersionId,PPE.IndexId,PPE.ZnodeProductId,PPE.ZnodeCatalogId,PPE.SKU,
			PPE.LocaleId,PPE.[Name],PPE.ZnodeCategoryIds,PPE.IsActive,PPE.Attributes,PPE.Brands,PPE.CategoryName,
			PPE.CatalogName,PPE.DisplayOrder,PPE.RevisionType,PPE.AssociatedProductDisplayOrder,PPE.ProductIndex,
			PPE.SalesPrice,PPE.RetailPrice,PPE.CultureCode,PPE.CurrencySuffix,PPE.CurrencyCode,PPE.SeoDescription,
			PPE.SeoKeywords,PPE.SeoTitle,PPE.SeoUrl,PPE.ImageSmallPath,PPE.SKULower--,PPAJ.AttributeCode
			,PP2.ProductType
		FROM dbo.ZnodePublishProductEntity PPE WITH (NOLOCK)
		INNER JOIN ZnodePublishProductEntity PP WITH (NOLOCK) ON PPE.ZnodeProductId=PP.ZnodeProductId
			AND PPE.ZnodeCatalogId=PP.ZnodeCatalogId
		--INNER JOIN ZnodePublishProductAttributeJson PPAJ WITH (NOLOCK) ON PP.PimProductId=PPAJ.PimProductId
		INNER JOIN ZnodePimProduct PP2 WITH (NOLOCK) ON PPE.ZnodeProductId=PP2.PimProductId
		)

		,Cte_ZnodePublishProductEntity1
		AS (
		SELECT PublishProductEntityId,VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU,
			LocaleId,[Name],ZnodeCategoryIds,IsActive,Attributes,Brands,CategoryName,
			CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,
			SalesPrice,RetailPrice,CultureCode,CurrencySuffix,CurrencyCode,SeoDescription,
			SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,
		'+[dbo].[Fn_GetPagingRowId](@Order_BY,'PublishProductEntityId DESC')+',COUNT(*) OVER() CountId
		FROM Cte_ZnodePublishProductEntity
		WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+')

		SELECT PublishProductEntityId,VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU,LocaleId,[Name],
			ZnodeCategoryIds,IsActive,Attributes,Brands,CategoryName,CatalogName,DisplayOrder,RevisionType,
			AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix,
			CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,RowId,CountId
		FROM Cte_ZnodePublishProductEntity1 
		'+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '
	
		PRINT @sql
		INSERT INTO @TBL_ZnodePublishProductEntity
		EXEC (@SQL)

		SELECT PublishProductEntityId,VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU,LocaleId,[Name],
			ZnodeCategoryIds,IsActive,Attributes,Brands,CategoryName,CatalogName,DisplayOrder,RevisionType,
			AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix,
			CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower
		FROM @TBL_ZnodePublishProductEntity

		SET @RowsCount = ISNULL((SELECT TOP 1 CountId FROM @TBL_ZnodePublishProductEntity),0)
	END TRY
	BEGIN CATCH
	DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductTypeAttributesValue @WhereClause = '''+ISNULL(@WhereClause,'''''')
					+''',@Rows='+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+',@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')
					+',@Order_BY='''+ISNULL(@Order_BY,'''''')+''',@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')

		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

		EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductTypeAttributesValue',
				@ErrorInProcedure = 'Znode_GetProductTypeAttributesValue',
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
	END CATCH
END


GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_UpdateProductAttributeValue')
	DROP PROC Znode_UpdateProductAttributeValue
GO

CREATE PROCEDURE [dbo].[Znode_UpdateProductAttributeValue]
(
	@SKU				 NVARCHAR(MAX),
	@LocaleCode			 nvarchar(100),
	@AttributeCodeValues XML,
	@UserId				 INT = 0,
	@Status				 BIT OUT,
	@IsUnAssociated		 BIT = 0
)
AS    
/* ---------------------------------------------------------------------------------------------------------------
    --Summary : Update AttributeValue for specific product 
    --          Input parameter : @LocaleId , @PimAttributeCode,  @ProductId,@AttributeValue,@UserId
    --Unit Testing : 

     BEGIN TRANSACTION 
    DECLARE @Status bit 
    EXEC [Znode_UpdateProductAttributeValue]
    @SKU        = 10637,
    @LocaleCode         = 'en-US',
    @AttributeCodeValues   = 'Tropicana',
    @UserId           =2,
    @Status           =@Status OUT
    SELECT @Status 
    --SELECT zpa.AttributeCode ,ZpAVL .AttributeValue  FROM ZnodePimAttributeValueLocale ZpAVL INNER JOIN ZnodePimAttributeValue zpav ON ZpAVL.PimAttributeValueId = zpav.PimAttributeValueId
    --INNER JOIN dbo.ZnodePimAttribute zpa ON zpav.PimAttributeId = zpa.PimAttributeId
    --WHERE zpav.PimProductId =12 AND ZpAVL.LocaleId = 1 AND zpa.AttributeCode = 'ProductName' 
    ROLLBACK Transaction 
    ---------------------------------------------------------------------------------------------------------------
	*/

     BEGIN
         BEGIN TRAN UpdateAttributeValue;
         BEGIN TRY
             DECLARE @GetDate DATETIME= dbo.Fn_GetDate();
             DECLARE @PimDefaultFamily INT= dbo.Fn_GetDefaultPimProductFamilyId();
			 DECLARE @ProductId INT, @LocaleId INT
			 
             DECLARE @TBL_PimProductId TABLE
             ( RowId INT IDENTITY(1,1),
				PimProductId INT,
				PimAttributeId INT,
                AttributeCode VARCHAR(300),
                AttributeValue NVARCHAR(MAX),
                PimAttributeDefaultValueId INT
             ); -- table holds the PimProductId 

			  DECLARE @TBL_DefaultAttributeId TABLE 
			  ( 
				PimAttributeId INT PRIMARY KEY , 
				AttributeCode VARCHAR(600)
			  )
			 SELECT TOP 1 @LocaleId  =  LocaleId  from ZnodeLocale where Code = @LocaleCode
			 If @LocaleId is null 
			 Begin
				SET @Status = 0 
				 Rollback TRAN UpdateAttributeValue;
				Return 0
			 End
		     INSERT INTO @TBL_DefaultAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  ZnodePimAttribute a 
			 INNER JOIN ZnodeAttributeType r ON (r.AttributeTypeId = a.AttributeTypeId)
			 WHERE AttributeTypeName IN ('Simple Select', 'Multi Select')
			 		 AND IsCategory = 0 

			  DECLARE @TBL_TextAreaAttributeId TABLE 
			  ( 
				PimAttributeId INT PRIMARY KEY , 
				AttributeCode VARCHAR(600)
			  )

		     INSERT INTO @TBL_TextAreaAttributeId (PimAttributeId,AttributeCode)
			 SELECT PimAttributeId,AttributeCode FROM  ZnodePimAttribute a 
			 INNER JOIN ZnodeAttributeType r ON (r.AttributeTypeId = a.AttributeTypeId)
			 WHERE AttributeTypeName IN ('Text Area')
			 AND IsCategory = 0 


             DECLARE @TBL_PimAttributeValueId TABLE
             (
				
				PimAttributeValueId INT,
				PimAttributeId      INT,
				PimProductId        INT,
				PimAttributeDefaultValueId int 
             );

			 SELECT @ProductId = PAV.PimProductId FROM ZnodePimAttributeValueLocale PAVL 
			 INNER JOIN ZnodePimAttributeValue PAV ON PAVL.PimAttributeValueId = PAV.PimAttributeValueId
			 INNER JOIN ZnodePimAttribute PA ON PA.PimAttributeId = PAV.PimAttributeId
			 WHERE PA.AttributeCode = 'SKU' AND PAVL.AttributeValue = @SKU

			 INSERT INTO @TBL_PimProductId ( PimProductId, AttributeCode, AttributeValue )
			 SELECT @ProductId, Tbl.Col.value( 'AttributeCode[1]', 'NVARCHAR(max)' ) AS AttributeCode
				,Tbl.Col.value( 'AttributeValues[1]', 'NVARCHAR(max)' ) AS AttributeValue
			 FROM @AttributeCodeValues.nodes( '//ArrayOfPIMAttributeCodeValueModel/PIMAttributeCodeValueModel' ) AS Tbl(Col)

			 UPDATE @TBL_PimProductId
			 SET PimAttributeId = ZPA.PimAttributeId, PimAttributeDefaultValueId = ZPADV.PimAttributeDefaultValueId
			 FROM @TBL_PimProductId Tbl
			 inner JOIN ZnodePimAttribute AS ZPA ON( ZPA.AttributeCode = Tbl.AttributeCode )
			 LEFT JOIN ZnodePimAttributeDefaultValue ZPADV ON (ZPA.PimAttributeId = ZPADV.PimAttributeId and ZPADV.AttributeDefaultValueCode = Tbl.AttributeValue )
			 where ZPA.IsCategory <> 1

			 ;WITH Cte_DeleteDuplicate As
			 (
			   SELECT  Row_Number()over(Partition By PimProductId, PimAttributeId, PimAttributeDefaultValueId order by PimProductId, PimAttributeId, PimAttributeDefaultValueId, rowid )SRNO ,*
			   FROM @TBL_PimProductId 		 
			 ),
			 CTE_Last_Dataset as
			 (
				SELECT MAX(SRNO)SRNO, PimProductId, PimAttributeId, PimAttributeDefaultValueId from Cte_DeleteDuplicate
				GROUP BY PimProductId, PimAttributeId, PimAttributeDefaultValueId
			 )
			 DELETE A FROM Cte_DeleteDuplicate a
			 WHERE NOT EXISTS ( SELECT * FROM CTE_Last_Dataset b WHERE a.SRNO = b.SRNO and ISNULL(a.PimProductId,0) = ISNULL(B.PimProductId,0)  and ISNULL(a.PimAttributeId,0) = ISNULL(B.PimAttributeId,0) )
			 AND PimAttributeId IS NOT NULL

	
             IF @IsUnAssociated = 1
                 BEGIN
                     INSERT INTO @TBL_PimAttributeValueId ( PimAttributeValueId, PimAttributeId, PimProductId, PimAttributeDefaultValueId )
                     SELECT PimAttributeValueId, ZPAV.PimAttributeId, ZPAV.PimProductId, TBLP.PimAttributeDefaultValueId
                     FROM ZnodePimAttributeValue ZPAV
                     INNER JOIN @TBL_PimProductId TBLP ON(TBLP.PimProductId = ZPAV.PimProductId AND TBLP.PimAttributeId = ZPAV.PimAttributeId );

			
                     DELETE FROM ZnodePimProductAttributeDefaultValue
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimAttributeValueId TBLAP
                         WHERE TBLAP.PimAttributeValueId = ZnodePimProductAttributeDefaultValue.PimAttributeValueId
                               AND ZnodePimProductAttributeDefaultValue.PimAttributeDefaultValueId = TBLAP.PimAttributeDefaultValueId --@PimAttributeDefaultValueId
                     )
                     AND LocaleId = @LocaleId;
					 

                     DELETE FROM ZnodePimAttributeValue
                     WHERE EXISTS
                     (
                         SELECT TOP 1 1
                         FROM @TBL_PimAttributeValueId TBLAP
                         WHERE TBLAP.PimAttributeValueId = ZnodePimAttributeValue.PimAttributeValueId
                               AND ZnodePimAttributeValue.PimAttributeDefaultValueId =TBLAP.PimAttributeDefaultValueId -- @PimAttributeDefaultValueId
                     );
                     --AND LocaleId = @LocaleId 					

                 END;

             INSERT INTO ZnodePimAttributeValue ( PimProductId, PimAttributeId, PimAttributeDefaultValueId, AttributeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, PimAttributeFamilyId )
             OUTPUT INSERTED.PimAttributeValueId, INSERTED.PimAttributeId, INSERTED.PimProductId, INSERTED.PimAttributeDefaultValueId INTO @TBL_PimAttributeValueId
             SELECT DISTINCT TBPP.PimProductId, TBPP.PimAttributeId, NULL,NULL, @UserId, @GetDate, @UserId, @GetDate, @PimDefaultFamily
             FROM @TBL_PimProductId TBPP
             WHERE NOT EXISTS
             (
                SELECT TOP 1 1
                FROM ZnodePimAttributeValue ZAV
                WHERE ZAV.PimProductId = TBPP.PimProductId
                        AND ZAV.PimAttributeId = TBPP.PimAttributeId
             )
             AND @IsUnAssociated = 0 AND TBPP.PimProductId IS NOT NULL;
              
			 UPDATE ZnodePimAttributeValue 
			 SET  ModifiedBy = @UserId , 
				  ModifiedDate = @GetDate,
				  PimAttributeDefaultValueId = ZAV.PimAttributeDefaultValueId
			 OUTPUT INSERTED.PimAttributeValueId,
                    INSERTED.PimAttributeId,
                    INSERTED.PimProductId,
				    INSERTED.PimAttributeDefaultValueId
             INTO @TBL_PimAttributeValueId
			 FROM ZnodePimAttributeValue  
			 INNER JOIN @TBL_PimProductId ZAV ON ( ZAV.PimProductId = ZnodePimAttributeValue.PimProductId AND ZAV.PimAttributeId = ZnodePimAttributeValue.PimAttributeId) 
			 WHERE @IsUnAssociated = 0
			  
             UPDATE A
             SET PimAttributeDefaultValueId = C.PimAttributeDefaultValueId,
				 ModifiedBy = @UserId ,
			     ModifiedDate = @GetDate
             FROM ZnodePimProductAttributeDefaultValue A
             INNER JOIN ZnodePimAttributeValue B ON(B.PimAttributeValueId = A.PimAttributeValueId)
             INNER JOIN @TBL_PimProductId C ON(B.PimAttributeId = C.PimAttributeId AND B.PimProductId = C.PimProductId);
			
             UPDATE A
             SET AttributeValue = C.AttributeValue,
				 ModifiedBy = @UserId ,
			     ModifiedDate = @GetDate
             FROM ZnodePimAttributeValueLocale A
             INNER JOIN ZnodePimAttributeValue B ON(B.PimAttributeValueId = A.PimAttributeValueId)
             INNER JOIN @TBL_PimProductId C ON(B.PimAttributeId = C.PimAttributeId AND B.PimProductId = C.PimProductId)
			 WHERE LocaleId = @LocaleId;

             INSERT INTO ZnodePimProductAttributeDefaultValue ( PimAttributeValueId, LocaleId, PimAttributeDefaultValueId, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
             SELECT TBPAV.PimAttributeValueId, @LocaleId, TBPP.PimAttributeDefaultValueId, @UserId, @GetDate, @UserId, @GetDate
             FROM @TBL_PimProductId TBPP 
			 INNER JOIN @TBL_PimAttributeValueId TBPAV ON(TBPAV.PimProductId = TBPP.PimProductId AND TBPAV.PimAttributeId = TBPP.PimAttributeId)
             WHERE @IsUnAssociated = 0
			 AND EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBL WHERE TBL.PimAttributeId = TBPP.PimAttributeId)
			 AND NOT EXISTS ( SELECT * FROM ZnodePimProductAttributeDefaultValue Z WHERE Z.PimAttributeValueId = TBPAV.PimAttributeValueId AND Z.PimAttributeDefaultValueId = TBPP.PimAttributeDefaultValueId ) ;
			 

			  UPDATE ZPAVL
			  SET AttributeValue = PP.AttributeValue			      
			  FROM ZnodePimAttributeValueLocale ZPAVL 
			  INNER JOIN @TBL_PimAttributeValueId TBPAV ON( TBPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId AND  ZPAVL.LocaleId = @localeId )  AND @IsUnAssociated = 0
			  INNER JOIN @TBL_PimProductId PP ON ( TBPAV.PimProductId = PP.PimProductId AND TBPAV.PimAttributeId = PP.PimAttributeId ) 
																	-- AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBL WHERE TBL.PimAttributeId = TBPP.PimAttributeId)

             
			 INSERT INTO ZnodePimAttributeValueLocale ( PimAttributeValueId, LocaleId, AttributeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
             SELECT DISTINCT TBPAV.PimAttributeValueId, @LocaleId, TBPP.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
             FROM @TBL_PimProductId TBPP
             INNER JOIN @TBL_PimAttributeValueId TBPAV ON(TBPAV.PimProductId = TBPP.PimProductId AND TBPAV.PimAttributeId = TBPP.PimAttributeId)
             WHERE @IsUnAssociated = 0
			 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBL WHERE TBL.PimAttributeId = TBPP.PimAttributeId)
			 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimAttributeValueLocale TBH WHERE TBH.PimAttributeValueId = TBPAV.PimAttributeValueId AND TBH.LocaleId = @LocaleId )
			 AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBL WHERE TBL.PimAttributeId = TBPP.PimAttributeId)
			
			  UPDATE ZPAVL
			  SET AttributeValue = PP.AttributeValue			      
			  FROM ZnodePimProductAttributeTextAreaValue ZPAVL 
			  INNER JOIN @TBL_PimAttributeValueId TBPAV ON( TBPAV.PimAttributeValueId = ZPAVL.PimAttributeValueId AND  ZPAVL.LocaleId = @localeId )  AND @IsUnAssociated = 0
			  INNER JOIN @TBL_PimProductId PP ON ( TBPAV.PimProductId = PP.PimProductId AND TBPAV.PimAttributeId = PP.PimAttributeId ) 
																	-- AND NOT EXISTS (SELECT TOP 1 1 FROM @TBL_DefaultAttributeId TBL WHERE TBL.PimAttributeId = TBPP.PimAttributeId)
             
			 INSERT INTO ZnodePimProductAttributeTextAreaValue ( PimAttributeValueId, LocaleId, AttributeValue, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate )
             SELECT DISTINCT TBPAV.PimAttributeValueId, @LocaleId, TBPP.AttributeValue, @UserId, @GetDate, @UserId, @GetDate
             FROM @TBL_PimProductId TBPP
             INNER JOIN @TBL_PimAttributeValueId TBPAV ON(TBPAV.PimProductId = TBPP.PimProductId AND TBPAV.PimAttributeId = TBPP.PimAttributeId)
             WHERE @IsUnAssociated = 0
			 AND  EXISTS (SELECT TOP 1 1 FROM @TBL_TextAreaAttributeId TBL WHERE TBL.PimAttributeId = TBPP.PimAttributeId)
			 AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductAttributeTextAreaValue TBH WHERE TBH.PimAttributeValueId = TBPAV.PimAttributeValueId AND TBH.LocaleId = @LocaleId );

			 
			 SELECT @SKU SKU, AttributeCode, AttributeValue --PimProductId ,
			 FROM @TBL_PimProductId a
			 WHERE NOT EXISTS ( SELECT * FROM @TBL_PimAttributeValueId b WHERE isnull(a.PimProductId,0) = isnull(b.PimProductId,0) and a.PimAttributeId = b.PimAttributeId )--and a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId )

			 IF NOT EXISTS ( SELECT PimProductId , AttributeCode, AttributeValue
							 FROM @TBL_PimProductId a
							 WHERE NOT EXISTS ( SELECT * FROM @TBL_PimAttributeValueId b WHERE a.PimProductId = b.PimProductId and a.PimAttributeId = b.PimAttributeId ))--and a.PimAttributeDefaultValueId = b.PimAttributeDefaultValueId ) )
			 BEGIN
				SET @Status = 1;
				--SELECT 1 AS ID, CAST(1 AS BIT) AS [Status];
			 END
			 ELSE 
			 BEGIN
				SET @Status = 0;
				--SELECT 1 AS ID, CAST(0 AS BIT) AS [Status];
			 END

             --SELECT 1 AS ID, CAST(1 AS BIT) AS [Status];
			 --SELECT @Status

			 SELECT *  INTO #TBL_PimProductId
			 FROM @TBL_PimProductId


			  IF @LocaleId = 1
			 BEGIN 	 
	
DECLARE @sqlt NVARCHAr(max) = ''
DECLARE @AttributeCodeAtt VARCHAR(600) , @PimAttributeIdAttr int 

DECLARE Cur_AttributeDataUpdate CURSOR FOR 



SELECT b.AttributeCode , PimAttributeId 
FROM INFORMATION_SCHEMA.COLUMNS a 
INNER JOIN ZnodePimAttribute b ON (a.COLUMN_NAME = b.AttributeCode )
WHERE TABLE_NAME = 'ZnodePimProduct'
AND IsCategory = 0 
AND IsShowOnGrid = 1 
AND EXISTS (SELECT TOP 1 1 FROM @TBL_PimProductId n  WHERE n.AttributeCode = b.AttributeCode  )
OPEN Cur_AttributeDataUpdate 
FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
WHILE @@FETCH_STATUS = 0 
BEGIN 

 SET @sqlt = 'UPDATE a  
 SET '+@AttributeCodeAtt+'= AttributeValue 
 FROM ZnodePimProduct a 
 INNER JOIN #TBL_PimProductId m ON(m.PimProductId = a.pimProductId ) 
 WHERE m.ProductAttributeCode = '''+@AttributeCodeAtt+'''
 ' 

 EXEC (@sqlt)

FETCH NEXT FROM Cur_AttributeDataUpdate INTO @AttributeCodeAtt,@PimAttributeIdAttr 
END 
CLOSE Cur_AttributeDataUpdate
DEALLOCATE Cur_AttributeDataUpdate 

END 



             COMMIT TRAN UpdateAttributeValue;
         END TRY
         BEGIN CATCH

			 SELECT @SKU SKU, AttributeCode, AttributeValue --PimProductId ,
			 FROM @TBL_PimProductId a
			 WHERE NOT EXISTS ( SELECT * FROM @TBL_PimAttributeValueId b WHERE a.PimProductId = b.PimProductId and a.PimAttributeId = b.PimAttributeId )

		  --SELECT ERROR_MESSAGE ()
             DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
			         @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_UpdateProductAttributeValue @ProductId = '+ @ProductId+',@Status='+CAST(@Status AS VARCHAR(50))+
		             ',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@AttributeCodeValues='+CAST(@AttributeCodeValues AS NVARCHAR(MAX))+',@UserId='+CAST(@UserId AS NVARCHAR(50));
             SET @Status = 0;
             SELECT 1 AS ID,
                    CAST(0 AS BIT) AS [Status],
                    @ErrorMessage;
             ROLLBACK TRAN UpdateAttributeValue;
             EXEC Znode_InsertProcedureErrorLog
                  @ProcedureName = 'Znode_UpdateProductAttributeValue',
                  @ErrorInProcedure = @Error_procedure,
                  @ErrorMessage = @ErrorMessage,
                  @ErrorLine = @ErrorLine,
                  @ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishCatalogEntity')
	DROP PROC Znode_PublishCatalogEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishCatalogEntity]  
(  
	@PimCatalogId  INT = 0   
	,@RevisionState VARCHAR(50) = ''   
	,@UserId INT = 0  
	,@NewGUID NVARCHAR(500)   
	,@IsDraftProductsOnly BIT = 1  
	,@PimProductId  INT = 0  
	,@PimCategoryHierarchyId INT = 0 
)  
AS  
/*  
To publish all catalog product and their details  
Unit Testing :   
Exec [dbo].[Znode_PublishCatalogEntity]  
@PimCatalogId  = 5  
,@RevisionState = 'PRODUCTION'   
,@UserId = 2  
,@NewGUID = '123'  
   
EXEC Znode_DeletePublishCatalogEntity @PublishCatalogId = 3,@UserId = 2 , @IsRevertPublish = 0 ,  
@NewGUID ='123'   
  
*/  
BEGIN  
BEGIN TRY   
	SET NOCOUNT ON  

	
	DECLARE @Tbl_versions  TABLE (RevisionState VARCHAr(300))
	DECLARE @DefaultLocaleId Int = dbo.fn_getDefaultLocaleId() , @messagestring varchar(300) =''  ,@PublishType varchar(2000)= 'Catalog'
			,@Getdate DATETIME = dbo.fn_getdate(), @CultureCode varchar(200) = '', @CurrencySuffix varchar(200) = '',@CurrencyCode varchar(200) = ''
			,@CatalogName VARCHAR(600), @IsAllowIndexing bit ,@Status bit, @email nvarchar(200) = (SELECT TOP 1 Username FROM znodeUSer WHERE UserId = @UserId) 
	DECLARE @Versions_new TABLE (VersionId int , LocaleId int , PublishStateId int, RevisionState VARCHAR(100) )
	DECLARE @Versions_working TABLE (VersionId int , LocaleId int , PublishStateId int, RevisionState VARCHAR(100) )
	CREATE TABLE  #PimProduct_catalog  (PimProductId int , ParentPimProductId INT, PimCategoryId INT , PimCategoryHierarchyId INT 
			,ParentPimCategoryHierarchyId INT ,DisplayOrder INT  ,IsActive INT,ActivationDate DATETIME , ExpirationDate DATETIME  ,IsDefault bit,PimAddonGroupId INT 
			, BundleQuantity int , IsAssocitedProduct bit   )
    DECLARE @inserted_pimIds TABLE (PimProductId INT )

	SET @messagestring = CASE WHEN @PimProductId > 0  THEN ' Product-'+(SELECT TOP 1 SKU FROM ZnodePimProduct WIth (Nolock) WHERE PimProductId = @PimProductId )+' ' ELSE '' END 

	SELECT TOp 1 @CatalogName= CatalogName,  @IsAllowIndexing= ISNULL(IsAllowIndexing,0)
	FROM ZnodePimCatalog with(nolock)  WHERE PimCatalogId = @PimCatalogId   
	
	SELECT TOp 1  @CurrencyCode = FeatureValues
	FROM ZnodeGlobalSetting a 
	WHERE FeatureName='Currency'

	SELECT TOp 1  @CultureCode = FeatureValues
	FROM ZnodeGlobalSetting a 
	WHERE FeatureName='Culture'

	SELECT TOP 1 @CurrencySuffix = Symbol
	FROM ZnodeCulture
	WHERE CultureCode = @CultureCode

	INSERT INTO ZnodePublishProgressNotifierEntity (VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	SELECT 0 , @NewGUID, 'Catalog-'+@CatalogName+'-Publish Started ', 10 , 0 , 0 , '',@UserId ,  @email

	INSERT INTO @Tbl_versions 
	SELECT 'PREVIEW'
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishStateApplicationTypeMapping with(nolock) WHERE ApplicationType = 'WebstorePreview' AND IsActive =1 AND IsEnabled = 1 )
	UNION ALL 
	SELECT 'PRODUCTION'
	WHERE @RevisionState = 'Production' OR  @RevisionState = 'None'
	
    SET @PublishType = CASE WHEN @PimProductId > 0 THEN 'Product'
	  WHEN @PimCategoryHierarchyId > 0 THEN 'Category'
	ELSE 'Catalog' END 

	INSERT INTO ZnodePublishCatalogLog(PublishCatalogId,PimCatalogId,IsCatalogPublished,PublishCategoryId,  
			IsCategoryPublished,PublishProductId,  
			IsProductPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Token,LocaleId,PublishStateId,PublishType)  
	OUTPUT inserted.PublishCatalogLogId , inserted.LocaleId, inserted.PublishStateId, inserted.Token INTO @Versions_new
	SELECT DISTINCT @PimCatalogId,  @PimCatalogId,NULL,0,  NULL,@PimProductId,  NULL,@UserId, @Getdate, @UserId, @Getdate, @UserId ,@Getdate,  r.RevisionState
				,a.LocaleId ,DBO.Fn_GetPublishStateIdForProcessing() ,@PublishType 
	FROM ZnodePortalLocale a with(nolock) 
	INNER JOIN ZnodePortalCatalog b with(nolock)  ON (b.PortalId = a.PortalId)
	CROSS APPLY @Tbl_versions  r
	WHERE  b.PublishCatalogId = @PimCatalogId 
	AND a.LocaleId IN (SELECT LocaleId FROM ZnodeLocale p with(nolock)  WHERE p.IsActive = 1 )
	UNION ALL 
	SELECT DISTINCT @PimCatalogId,  @PimCatalogId,NULL,0,  NULL,0,  NULL,@UserId, @Getdate, @UserId, @Getdate, @UserId ,@Getdate,  r.RevisionState
				,@DefaultLocaleId ,DBO.Fn_GetPublishStateIdForProcessing() ,@PublishType
	FROM  @Tbl_versions  r
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t WHERE t.PublishCatalogId = @PimCatalogId)
	

	INSERT INTO ZnodePublishCatalogEntity (VersionId,ZnodeCatalogId,CatalogName,RevisionType,LocaleId,IsAllowIndexing) 
	SELECT VersionId, @PimCatalogId, @CatalogName, RevisionState, LocaleId, @IsAllowIndexing
	FROM @Versions_new p
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogEntity y with(nolock)  WHERE y.ZnodeCatalogId = @PimCatalogId AND y.RevisionType = p.RevisionState
		 AND y.LocaleId = p.LocaleId
	)
	INSERT INTO ZnodePublishVersionEntity (VersionId,ZnodeCatalogId,RevisionType,LocaleId,IsPublishSuccess)  
	SELECT VersionId, @PimCatalogId,  RevisionState, LocaleId, 0
	FROM @Versions_new p
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishVersionEntity y with(nolock)  WHERE y.ZnodeCatalogId = @PimCatalogId AND y.RevisionType = p.RevisionState
		AND y.LocaleId = p.LocaleId
	)

	INSERT INTO @Versions_working 
	SELECT VersionId , a.LocaleId, g.PublishStateId,UPPER( a.RevisionType)RevisionType
	FROM ZnodePublishVersionEntity a with(nolock)
	INNER JOIN ZnodePublishState g with(nolock) ON (g.PublishStateCode = a.RevisionType)
	WHERE a.ZnodeCatalogId = @PimCatalogId
	AND RevisionType IN (SELECT RevisionState FROM @Tbl_versions)
	AND a.LocaleId IN (SELECT p.LocaleId FROM @Versions_new p )
	

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'Collecting Products'
		,ProgressMark = 20
	WHERE Jobid = @NewGUID


    INSERT INTO #PimProduct_catalog 
    SELECT DISTINCT PimProductId , 0  , b.PimCategoryId, b.PimCategoryHierarchyId , b.ParentPimCategoryHierarchyId
        ,b.DisplayOrder ,b.IsActive,b.ActivationDate,b.ExpirationDate, 0 IsDefault , 0 PimAddonGroupId , 0, 0
    FROM ZnodePimCategoryProduct a with(nolock)
    INNER JOIN ZnodePimCategoryHierarchy b with(nolock) ON (b.PimCategoryId = a.PimCategoryId)
    WHERE b.PimCatalogId = @PimCatalogId
    AND ( a.PimProductId =  @PimProductId   OR @PimProductId =  0 ) 
    AND ( B.PimCategoryHierarchyId =  @PimCategoryHierarchyId   OR @PimCategoryHierarchyId =  0 )
	

INSERT INTO #PimProduct_catalog 
SELECT DISTINCT a.PimProductId , b.PimProductId , b.PimCategoryId, b.PimCategoryHierarchyId, b.ParentPimCategoryHierarchyId
,b.DisplayOrder ,b.IsActive,b.ActivationDate,b.ExpirationDate, 0 IsDefault, 0 PimAddonGroupId , 0,0
FROM ZnodePimLinkProductDetail a with(nolock)
INNER JOIN #PimProduct_catalog b ON (b.PimProductId = a.PimParentProductId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = a.PimProductId )

SELECT DISTINCT ZPAPD.PimChildProductId PimProductId,ZPAP.PimProductId ParentPimProductId, 0 PimCategoryId , 0 PimCategoryHierarchyId,0 ParentPimCategoryHierarchyId , ZPAPD.DisplayOrder ,1 IsActive
,NULL ActivationDate,NULL ExpirationDate ,IsDefault
, ZPAP.PimAddonGroupId PimAddonGroupId , 0 BundleQuantity,RequiredType
INTO #TBL_AddOnProduct
FROM ZnodePimAddOnProductDetail AS ZPAPD with(nolock)
INNER JOIN ZnodePimAddOnProduct AS ZPAP with(nolock) ON (ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog ty WHERE ty.PimProductId = ZPAP.PimProductId )

-- SELECT * FROM ZnodePimAddOnProduct
INSERT INTO #PimProduct_catalog 
SELECT DISTINCT ZPAPD.PimProductId,ZPAPD.ParentPimProductId, 0 PimCategoryId , 0 PimCategoryHierarchyId , 0 ,DisplayOrder ,0 ,NULL,NULL,IsDefault
,PimAddonGroupId  , 0 ,0
FROM #TBL_AddOnProduct ZPAPD
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = ZPAPD.PimProductId )

INSERT INTO #PimProduct_catalog 
SELECT DISTINCT a.PimProductId , a.PimParentProductId , 0 PimCategoryId , 0 PimCategoryHierarchyId,a.DisplayOrder,0,0,NULL,NULL,IsDefault
, 0 PimAddonGroupId , BundleQuantity, 1
FROM ZnodePimProductTypeAssociation a with(nolock)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog ty WHERE ty.PimProductId = a.PimParentProductId )
--AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = a.PimProductId )

CREATE INDEX IDX_#PimProduct_catalog ON #PimProduct_catalog(PimProductId)

	IF @IsDraftProductsOnly = 0  
    BEGIN 
      --  EXEC Znode_CatalogProductDraftForPublish @PublishCatalogId=@PimCatalogId   
	  ---To draft all catalog products AND associated products for full catalog publish  

	  UPDATE ZnodePimProduct 
	  SET PublishStateId = 2 
	  WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog y WHERE y.PimProductId = ZnodePimProduct.PimProductId )
    END 
    


DROP TABLE IF EXISTS #PimProduct_distinct

SELECT DISTINCT a.PimProductId, PimCategoryHierarchyId PimCategoryId ,sku,ProductName, CAST(b.IsActive AS VARCHAR(50)) IsActive,b.PublishStateId, b.ProductType
INTO #PimProduct_distinct
FROM #PimProduct_catalog a
INNER JOIN ZnodePimProduct b with(nolock) ON (b.PimProductId = a.PimProductId)


CREATE INDEX IDX_#PimProduct_distinct ON #PimProduct_distinct(PimProductId,IsActive)

DELETE tt FROM #PimProduct_distinct tt 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProduct t with(nolock) WHERE t.PimProductId = tt.PimProductId AND t.ProductType = 'SimpleProduct' ) 
AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation ty with(nolock) WHERE ty.PimParentProductId = tt.PimProductId)

	

UPDATE ZnodePublishProgressNotifierEntity
SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'Create backup of version'
	,ProgressMark = 25
WHERE Jobid = @NewGUID

DECLARE @Deleted_Products TABLE (PimProductId INT )

SELECT p.PublishProductEntityId
INTO #PublishProductEntityId
FROM ZnodePublishProductEntity p With(nolock)  WHERE  NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct ty WHERE ty.PimProductId = p.ZnodeProductId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND  @PimProductId = 0 AND @PimCategoryHierarchyId = 0 
UNION ALL 
SELECT p.PublishProductEntityId
FROM ZnodePublishProductEntity p With(nolock)  WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct ty WHERE ty.PimProductId = p.ZnodeProductId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND EXISTS (SELECT TOP 1 1 FROM ZnodePimProduct t with(nolock) WHERE t.PimProductId = p.ZnodeProductId AND t.IsActive = 'false' ) 
AND @PimCategoryHierarchyId = 0 


UPDATE ZnodePublishProductEntity 
SET ElasticSearchEvent = 2 
WHERE EXISTS (SELECT TOP 1 1  FROM #PublishProductEntityId t WHERE t.PublishProductEntityId = ZnodePublishProductEntity.PublishProductEntityId ) 


SELECT AttributeCode , AttributeName , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(d.IsFacets,0) IsFacets
, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, b.LocaleId
INTO #temp_attributename 
FROM ZnodePimAttribute a with(nolock)
INNER JOIN ZnodePimAttributeLocale b with(nolock) ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId =@DefaultLocaleId)
INNER JOIN ZnodeAttributeType c with(nolock) ON (c.AttributeTypeId = a.AttributeTypeId)
LEFT JOIN ZnodePimFrontendProperties d with(nolock) ON (d.PimAttributeId = a.PimAttributeId )

	
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing category'
		,ProgressMark = 30
	WHERE Jobid = @NewGUID


SELECT DISTINCT  rt.PimCategoryHierarchyId, c.AttributeCode,b.CategoryValue AttributeValues, 0 DisplayOrder , 
rt.ParentPimCategoryHierarchyId,b.LocaleId,a.PimCategoryAttributeValueId, rt.PimCategoryId,rt.IsActive
INTO #Temp_Categoryvalue
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN  #PimProduct_catalog rt ON ( rt.PimCategoryId = a.PimCategoryId  )


INSERT INTO #Temp_Categoryvalue
SELECT DISTINCT  ty.PimCategoryHierarchyId, c.AttributeCode,b.CategoryValue AttributeValues, ty.DisplayOrder ,
ty.ParentPimCategoryHierarchyId,b.LocaleId,a.PimCategoryAttributeValueId,ty.PimCategoryId,ty.IsActive
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN ZnodePimCategoryHierarchy ty with(nolock) ON (ty.PimCategoryId = a.PimCategoryId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue ut WHERE ut.PimCategoryHierarchyId = ty.PimCategoryHierarchyId)
AND ty.PimCatalogId =@PimCatalogId
AND @PimProductId = 0 


UPDATE a SET a.AttributeValues = ZM.Path
FROM #Temp_Categoryvalue a
INNER  JOIN ZnodeMedia ZM ON (CAST(zm.MediaId AS VARCHAR(200)) = a.AttributeValues)
WHERE a.AttributeCode IN (SELECT n.AttributeCode FROM #temp_attributename n WHERE n.AttributeTypeName = 'Image' )

DELETE p 
FROM ZnodePublishCategoryEntity p 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue ty WHERE ty.PimCategoryHierarchyId = p.ZnodeCategoryId and ty.IsActive =1)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND @PimProductId = 0 AND @PimCategoryHierarchyId = 0 

IF EXISTS (SELECT TOP 1 1 FROM @Versions_working r WHERE r.LocaleId <> @DefaultLocaleId)
BEGIN 
    
	INSERT INTO #Temp_Categoryvalue(PimCategoryHierarchyId, AttributeCode, AttributeValues, DisplayOrder , ParentPimCategoryHierarchyId, t.LocaleId,PimCategoryAttributeValueId,PimCategoryId,IsActive)
	SELECT PimCategoryHierarchyId, AttributeCode, ISNULL(b.CategoryValue,a.AttributeValues)AttributeValues, DisplayOrder , ParentPimCategoryHierarchyId, t.LocaleId,a.PimCategoryAttributeValueId,a.PimCategoryId,a.IsActive
	FROM #Temp_Categoryvalue a 
	CROSS APPLY @Versions_working t 
	LEFT JOIN ZnodePimCategoryAttributeValueLocale b ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

	INSERT INTO #temp_attributename
	SELECT AttributeCode , IIF(b.AttributeName IS NULL, a.AttributeName ,b.AttributeName) , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
		,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(a.IsFacets,0) IsFacets
		, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, t.LocaleId
	FROM #temp_attributename a
	CROSS APPLY @Versions_working t 
	LEFT JOIN ZnodePimAttributeLocale b ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

END 

SELECT DISTINCT PimCategoryHierarchyId, DisplayOrder ,ParentPimCategoryHierarchyId ,LocaleId,a.PimCategoryId,a.IsActive
INTO #Temp_categoryDetails
FROM #Temp_Categoryvalue a 


ALTER TABLE #Temp_categoryDetails ADD  ActivationDate DATETIME ,ExpirationDate DATETIME  ,CategoryName NVARCHAr(max), CategoryCode NVARCHAr(600)

UPDATE a  
SET CategoryName = (SELECT TOP 1 AttributeValues FROM #Temp_Categoryvalue tu WHERE tu.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND tu.LocaleId = a.LocaleId AND tu.AttributeCode = 'CategoryName')
,CategoryCode = (SELECT TOP 1 AttributeValues FROM #Temp_Categoryvalue tu WHERE tu.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND tu.LocaleId = a.LocaleId AND tu.AttributeCode = 'CategoryCode')
,DisplayOrder = ISNULL(b.DisplayOrder,a.DisplayOrder) , ActivationDate = b.ActivationDate , ExpirationDate = b.ExpirationDate
FROM #Temp_categoryDetails  a
LEFT JOIN #PimProduct_catalog b ON (b.PimCategoryHierarchyId = a.PimCategoryHierarchyId)
--WHERE @PimProductId = 0 


UPDATE a
SET a.Name = t.CategoryName
,a.CategoryCode = t.CategoryCode
,a.Attributes = (SELECT r.AttributeCode, AttributeValues,jk.AttributeName, jk.AttributeTypeName  ,jk.IsUseInSearch,jk.IsHtmlTags,jk.IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId  AND jk.IsCategory = 1 )
					WHERE r.PimCategoryHierarchyId = t.PimCategoryHierarchyId AND r.LocaleId = t.LocaleId
					FOR JSON PATH ) 

,a.ZnodeParentCategoryIds  = '['+CAST(t.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
,a.ProductIds = '['+(SELECT  STRING_AGG(  CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM #PimProduct_catalog ty WHERE ty.PimCategoryHierarchyId = a.ZnodeCategoryId  )+']' 
,a.DisplayOrder = t.DisplayOrder 
,a.IsActive = t.IsActive, a.ActivationDate = t.ActivationDate, a.ExpirationDate = t.ExpirationDate

FROM ZnodePublishCategoryEntity a with(nolock)
INNER JOIN @Versions_working q ON ( q.VersionId = a.VersionId)
INNER JOIN #Temp_categoryDetails t ON (t.PimCategoryHierarchyId = a.ZnodeCategoryId AND t.LocaleId = a.LocaleId )
WHERE a.ZnodeCatalogId = @PimCatalogId
--AND @PimProductId = 0 


INSERT INTO ZnodePublishCategoryEntity (VersionId,ZnodeCategoryId,Name,CategoryCode,ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds
,ProductIds,LocaleId,IsActive,DisplayOrder,Attributes,ActivationDate,ExpirationDate,CategoryIndex,ElasticSearchEvent)

SELECT q.VersionId, a.PimCategoryHierarchyId, a.CategoryName, a.CategoryCode,@PimCatalogId,@CatalogName,'['+CAST(a.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
	,'['+(SELECT  STRING_AGG(   CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM #PimProduct_catalog ty WHERE ty.PimCategoryHierarchyId = a.PimCategoryHierarchyId  )+']' 
	,q.LocaleId, a.IsActive,a.DisplayOrder,(SELECT r.AttributeCode , AttributeName, AttributeValues, AttributeTypeName,IsUseInSearch,IsHtmlTags,IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId AND jk.IsCategory =1 )
					WHERE r.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND q.LocaleId = r.LocaleId					FOR JSON PATH ) , a.ActivationDate, a.ExpirationDate,1,1
FROM #Temp_categoryDetails a
CROSS APPLY @Versions_working q 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryEntity Tot with(nolock) WHERE tot.VersionId = q.VersionId AND tot.ZnodeCategoryId = a.PimCategoryHierarchyId )
AND a.LocaleId = q.LocaleId AND a.IsActive=1
  


	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing Product'
		,ProgressMark = 35
	WHERE Jobid = @NewGUID


SELECT  a.PimProductId,a.sku,a.ProductName,a.IsActive ,a.PublishStateId , max(a.PimCategoryId) ZnodeCategoryIds , CAST('' AS NVARCHAR(2000)) CategoryName
         ,STRING_AGG( CONVERT(VARCHAR(MAX),a.PimCategoryId),',') WITHIN GROUP (ORDER BY a.PimCategoryId) ZnodeParentCategoryIds
		 ,CAST('' AS VARCHAR(1000)) SeoDescription,CAST('' AS VARCHAR(1000))SeoKeywords
	   ,CAST('' AS VARCHAR(1000))SeoTitle,CAST('' AS VARCHAR(1000)) SeoUrl
	   , CAST('' AS VARCHAR(50)) SalesPrice,CAST('' AS VARCHAR(50)) RetailPrice
INTO #TBL_finalProducts
FROM #PimProduct_distinct a
GROUP BY  a.PimProductId,a.sku,a.ProductName,a.IsActive ,a.PublishStateId--, a.PimCategoryId




SELECT CAST(SKU AS VARCHAR(2000)) SeoCode 
INTO #filterSEOCOde
FROM #TBL_finalProducts
WHERE PublishStateId IN (2 ,1)
UNION ALL 
SELECT CAST(CategoryCode AS VARCHAR(2000))
FROM #Temp_categoryDetails

CREATE INDEX IDX_#filterSEOCOde_SEOCode ON #filterSEOCOde(SeoCode)

UPDATE ZnodeCMSSEODetail 
SET PublishStateId = 2 
WHERE EXISTS (SELECT TOP 1 1 FROM  #filterSEOCOde y WHERE y.SeoCode = ZnodeCMSSEODetail.SEOCode)
AND CMSSEOTypeId IN (1,2)
AND EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t with(nolock) WHERE t.PublishCatalogId =@PimCatalogId AND ZnodeCMSSEODetail.PortalId = t.PortalId  )
AND PublishStateId <> 2 
--CREATE INDEX IDX_ZnodeCMSSEODetail_SEOCode_CMSSEOTypeId_PortalId ON ZnodeCMSSEODetail(SEOCode,CMSSEOTypeId,PortalId)

DROP TABLE IF EXISTS  #Seo_entity



SELECT 0 VersionId
,@Getdate PublishStartTime,c.Name ItemName,a.CMSSEODetailId,b.CMSSEODetailLocaleId,c.CMSSEOTypeId,a.SEOId,c.name SEOTypeName,b.SEOTitle
,b.SEODescription,b.SEOKeywords,a.SEOUrl,a.IsRedirect,a.MetaInformation,b.LocaleId,'' OldSEOURL,0 CMSContentPagesId,a.PortalId,a.SEOCode,b.CanonicalURL
,b.RobotTag,1 ElasticSearchEvent, 0 PublishSeoEntityId
INTO #Seo_entity
FROM ZnodeCMSSEODetail a with (nolock)
INNER JOIN ZnodeCMSSEODetailLocale b with(nolock) ON (b.CMSSEODetailId = a.CMSSEODetailId)
INNER JOIN ZnodeCMSSEOType c with(nolock) ON (c.CMSSEOTypeId = a.CMSSeoTypeId ) 
WHERE c.CMSSEOTypeId IN (1,2) AND a.PublishStateId = 2
AND EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t with(nolock) WHERE t.PublishCatalogId =@PimCatalogId AND a.PortalId = t.PortalId  )




UPDATE ZnodeCMSSEODetail
SET PublishStateId = CASE WHEN @RevisionState = 'Preview' THEN 4 ELSE 3 END 
WHERE EXISTS (SELECT TOP 1 1 FROM #Seo_entity m WHERE m.CMSSEODetailId = ZnodeCMSSEODetail.CMSSEODetailId )

CREATE INDEX IDX_#Seo_entity_PublishSeoEntityId ON #Seo_entity(PublishSeoEntityId)


IF  @IsAllowIndexing = 1  
BEGIN 



SELECT SEoCode SKU ,MAX(SeoDescription)SeoDescription,Max(SeoKeywords) SeoKeywords,Max(SeoTitle)SeoTitle,Max(SeoUrl)SeoUrl
INTO #Distinct_seo
FROM #Seo_entity
WHERE CMSSEOTypeId = 1 
GROUP BY SEoCode


SELECT SKU , MIN(RetailPrice) RetailPrice, MIN(SalesPrice ) SalesPrice
INTO #price_data
FROM ZnodePrice a with (nolock)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct r WHERE r.SKU = a.SKU )
GROUP BY SKU

UPDATE a
SET SeoDescription = ISNULL(p.SeoDescription,'') ,SeoKeywords= ISNULL(p.SeoKeywords,'')
	   ,SeoTitle=ISNULL(p.SeoTitle,''),SeoUrl=ISNULL(p.SeoUrl,'')
FROM #TBL_finalProducts a
INNER JOIN #Distinct_seo p ON (p.SKU = a.SKU )
WHERE a.PublishStateId IN (2,1)

UPDATE a
SET SalesPrice =ISNULL(toe.SalesPrice,0) ,RetailPrice=ISNULL(toe.RetailPrice,0) 
FROM #TBL_finalProducts a
INNER JOIN #price_data toe ON (toe.SKU = a.SKU  )
 WHERE a.PublishStateId IN (2,1)
END
ELSE 
BEGIN 

 UPDATE ZnodePublishProductEntity 
SET SeoUrl = '' , SeoDescription = '', SeoKeywords = '', SeoTitle = '', SalesPrice = 0 
, RetailPrice =0 
WHERE @IsAllowIndexing = 0 AND ZnodeCatalogId =@PimCatalogId 
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working t WHERE t.VersionId = ZnodePublishProductEntity.VersionId)

END 




DECLARE @VersionId_l INT ,@LocaleId_l INT ,@RevisionState_l VARCHAR(300)

DECLARE cur_localeId CURSOR FOR 
SELECT VersionId,LocaleId,RevisionState
FROM @Versions_working

OPEN cur_localeId

FETCH NEXT FROM cur_localeId INTO @VersionId_l,@LocaleId_l,@RevisionState_l
WHILE @@FETCH_STATUS = 0
BEGIN 


--AND  1=0 

UPDATE a
SET a.PublishSeoEntityId = n.PublishSeoEntityId
FROM #Seo_entity a
INNER  JOIN ZnodePublishSeoEntity n with(nolock) ON (n.VersionId = @VersionId_l AND n.SEOCode = a.SEOCode AND n.PortalId = a.PortalId AND n.CMSSEOTypeId = a.CMSSEOTypeId AND n.LocaleId =@LocaleId_l)
WHERE a.LocaleId = @LocaleId_l


UPDATE a 
SET PublishStateId = 1 
FROM #TBL_finalProducts a 
WHERE NOT EXISTS (
SELECT TOP 1 1 FROM ZnodePublishProductEntity y with(nolock) WHERE y.ZnodeProductId = a.PimProductId AND y.ZnodeCategoryIds = a.ZnodeCategoryIds
AND y.VersionId =@VersionId_l
)



UPDATE a SET CategoryName = uy.Name
FROM #TBL_finalProducts a 
INNER JOIN ZnodePublishCategoryEntity uy  with(nolock) ON (uy.ZnodeCategoryId = a.ZnodeCategoryIds)
WHERE uy.VersionId =@VersionId_l
AND a.PublishStateId IN (2,1)




DROP TABLE IF EXISTS  #insertedPublishEntity

SELECT  @VersionId_l VersionId , ROW_NUMBER()Over(ORDER BY a.PimProductId )IndexId, a.PimProductId ZnodeProductId , @PimCatalogId ZnodeCatalogId,a.sku,@LocaleId_l LocaleId,a.ProductName Name , ZnodeCategoryIds ,a.IsActive,'' Attributes,'[]' Brands
       , CategoryName, @CatalogName CatalogName, 0 DisplayOrder, @RevisionState_l  RevisionType, 0 AssociatedProductDisplayOrder, ROW_NUMBER()Over(partition By  a.PimProductId ORDER BY  a.PimProductId  )  ProductIndex,  SalesPrice, RetailPrice
	   ,@CultureCode CultureCode,@CurrencySuffix CurrencySuffix
	   ,@CurrencyCode CurrencyCode, SeoDescription,SeoKeywords
	   ,SeoTitle, SeoUrl,'' ImageSmallPath,LOWER(a.sku) SKULower,1 ElasticSearchEvent, ZnodeParentCategoryIds ,@Getdate ModifiedDate,0 IsSingleProductPublish
	   ,0 IsCacheClear, 0 PublishProductEntityId,a.PublishStateId
INTO #insertedPublishEntity 
FROM #TBL_finalProducts a 
WHERE a.IsActive = 'true'  AND a.PublishStateId IN (2,1)



UPDATE a
SET a.PublishProductEntityId=ty.PublishProductEntityId
FROM #insertedPublishEntity a
INNER JOIN ZnodePublishProductEntity ty with(nolock) ON ( ty.VersionId = @VersionId_l AND ty.ZnodeProductId  = a.ZnodeProductId AND ty.ZnodeCatalogId =@PimCatalogId )


UPDATE a
SET Name = b.name , a.SalesPrice = b.SalesPrice , a.RetailPrice = b.RetailPrice, CurrencyCode = b.CurrencyCode , CultureCode= b.CultureCode, CurrencySuffix = b.CurrencySuffix
, CategoryName = b.CategoryName, a.ElasticSearchEvent = 1 , ZnodeParentCategoryIds = b.ZnodeParentCategoryIds , a.SKU = b.SKU , a.SKULower = b.SKULower, a.SeoUrl = b.SeoUrl
, a.SeoTitle = b.SeoTitle , a.SeoKeywords = b.SeoKeywords , a.SeoDescription = b.SeoDescription
FROM ZnodePublishProductEntity a 
INNER JOIN #insertedPublishEntity b ON (b.PublishProductEntityId = a.PublishProductEntityId)
WHERE b.PublishProductEntityId <> 0 --AND b.PublishStateId = 2 



INSERT INTO ZnodePublishProductEntity(VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU,LocaleId,Name,ZnodeCategoryIds,IsActive,Attributes,Brands
,CategoryName,CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix
,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,ElasticSearchEvent,ZnodeParentCategoryIds,ModifiedDate,IsSingleProductPublish
,IsCacheClear)
SELECT VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU ,LocaleId,Name,ZnodeCategoryIds,IsActive,Attributes,Brands
,CategoryName,CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix
,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,ElasticSearchEvent,ZnodeParentCategoryIds,ModifiedDate,IsSingleProductPublish
,IsCacheClear
FROM #insertedPublishEntity
WHERE PublishProductEntityId = 0 



--UPDATE a 
--SET a.ItemName					=b.ItemName,a.CMSSEODetailId				=b.CMSSEODetailId		,a.CMSSEODetailLocaleId			=b.CMSSEODetailLocaleId	
--,a.CMSSEOTypeId					=b.CMSSEOTypeId	,a.SEOId						=b.SEOId,a.SEOTypeName					=b.SEOTypeName			
--,a.SEOTitle						=b.SEOTitle,a.SEODescription				=b.SEODescription	,a.SEOKeywords					=b.SEOKeywords			
--,a.SEOUrl						=b.SEOUrl	,a.IsRedirect					=b.IsRedirect	,a.MetaInformation				=b.MetaInformation		
--,a.LocaleId						=b.LocaleId	,a.OldSEOURL					=b.OldSEOURL	,a.CMSContentPagesId			=b.CMSContentPagesId	
--,a.PortalId						=b.PortalId	,a.SEOCode						=b.SEOCode	,a.CanonicalURL					=b.CanonicalURL			
--,a.RobotTag						=b.RobotTag	,a.ElasticSearchEvent			=b.ElasticSearchEvent	
DELETE a 
FROM  ZnodePublishSeoEntity a 
INNER JOIN #Seo_entity b ON (b.PublishSeoEntityId = a.PublishSeoEntityId)

INSERT INTO ZnodePublishSeoEntity (VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName
,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL
,RobotTag,ElasticSearchEvent)
SELECT @VersionId_l,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName
,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL
,RobotTag,ElasticSearchEvent
FROM #Seo_entity a 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishSeoEntity r with(nolock) WHERE r.PublishSeoEntityId = a.PublishSeoEntityId )
AND a.LocaleId = @LocaleId_l

FETCH NEXT FROM cur_localeId INTO @VersionId_l,@LocaleId_l,@RevisionState_l


 END 

 CLOSE cur_localeId
 DEALLOCATE cur_localeId

 DROP TABLE IF EXISTS #TBL_finalProducts
 DROP TABLE IF EXISTS #filterSEOCOde
 
DECLARE @pimProductId_oi transferId 
DECLARE @Version_str VARCHAr(2000) 

SELECT @Version_str= STRING_AGG( CONVERT(VARCHAR(200), q.VersionId) ,',')
FROM @Versions_working q

INSERT INTO @pimProductId_oi 
SELECT DISTINCT  pimProductId 
FROM #PimProduct_distinct a
WHERE a.PublishStateId IN (1,2)
UNION  
SELECT ZnodeProductId
FROM #insertedPublishEntity
WHERE PublishProductEntityId = 0  


 DROP TABLE IF EXISTS  #insertedPublishEntity

 IF  EXISTS ( SELECT TOP 1 1 FROM @pimProductId_oi )
 BEGIN 

EXEC Znode_PublishUpdateProductJson @PimProductIds=@pimProductId_oi
,@VersionId = @Version_str
,@LocaleId = 1 
,@IsSingleProductPublish = 0 ,@NewGUID=@NewGUID, @CatalogName = @CatalogName,@messagestring=@messagestring

END 

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing Catalog Attribute'
		,ProgressMark = 60
	WHERE Jobid = @NewGUID


SELECT VersionId,@PimCatalogId PimCatalogId,AttributeCode,AttributeTypeName,0 IsPromoRuleCondition
,ISNULL(IsComparable,0)IsComparable,ISNULL(IsHtmlTags,0)IsHtmlTags,ISNULL(IsFacets,0)IsFacets,ISNULL(IsUseInSearch,0)IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,a.LocaleId,DisplayOrder
	,ISNULL((
	SELECT  p.AttributeDefaultValue Value, m.DisplayOrder 
	FROM ZnodePimAttributeDefaultValue m
	INNER JOIN ZnodePimAttributeDefaultValueLocale p ON (p.PimAttributeDefaultValueId = m.PimAttributeDefaultValueId)
	WHERE m.PimAttributeId = a.PimAttributeId AND p.LocaleId = a.LocaleId
	FOR JSON PATH 
	),'[]')SelectValues
INTO #temp_updatecatalogAttribute 
FROM #temp_attributename a 
INNER JOIN @Versions_working h ON (h.LocaleId = a.LocaleId) 

UPDATE a 
SET AttributeTypeName=b.AttributeTypeName,IsPromoRuleCondition
=b.IsPromoRuleCondition,IsComparable=b.IsComparable,IsHtmlTags=b.IsHtmlTags,IsFacets=b.IsFacets
,IsUseInSearch=b.IsUseInSearch,IsPersonalizable=b.IsPersonalizable,IsConfigurable=b.IsConfigurable,AttributeName=b.AttributeName
,LocaleId=b.LocaleId,DisplayOrder=b.DisplayOrder,SelectValues=b.SelectValues
FROM ZnodePublishCatalogAttributeEntity a 
INNER JOIN #temp_updatecatalogAttribute b ON (b.VersionId = a.VersionId AND b.AttributeCode = a.AttributeCode)


INSERT INTO ZnodePublishCatalogAttributeEntity (VersionId,ZnodeCatalogId,AttributeCode,AttributeTypeName,IsPromoRuleCondition
,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,LocaleId,DisplayOrder,SelectValues)
SELECT VersionId,PimCatalogId,AttributeCode,AttributeTypeName,IsPromoRuleCondition
,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,LocaleId,DisplayOrder,SelectValues
FROM #temp_updatecatalogAttribute a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogAttributeEntity r WHERE r.AttributeCode = a.AttributeCode AND r.VersionId = a.VersionId)



	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing SEO data'
		,ProgressMark = 65
	WHERE Jobid = @NewGUID




SELECT q.VersionId,a.PimProductId, @PimCatalogId ZnodeCatalogId, b.PimProductId AssociatedZnodeProductId , b.DisplayOrder,'' SelectValues
, ISNULL((SELECT CONCAT('["',STRING_AGG([AttributeCode], '","'),'"]') FROM #temp_attributename n 
INNER JOIN ZnodePimConfigureProductAttribute g WITH (nolock) ON (g.PimProductId = a.PimProductId )
WHERE n.PimAttributeId = g.PimAttributeId AND n.LocaleId = q.LocaleId),'[]') ConfigurableAttributeCodes
, IsDefault,1 ElasticSearchEvent
INTO #temp_configProductids 
FROM ZnodePimConfigureProductAttribute a  WITH (nolock)
INNER JOIN #PimProduct_catalog b ON (b.ParentPimProductId = a.PimProductId AND b.IsAssocitedProduct =1 )
CROSS APPLY @Versions_working q 
GROUP BY q.VersionId,a.PimProductId, b.PimProductId  , b.DisplayOrder, IsDefault,q.LocaleId

DELETE a FROM ZnodePublishConfigurableProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_configProductids t WHERE t.PimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND t.AssociatedZnodeProductId <> a.AssociatedZnodeProductId
)
  
 INSERT INTO ZnodePublishConfigurableProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,SelectValues,ConfigurableAttributeCodes,IsDefault,ElasticSearchEvent)
 SELECT VersionId,PimProductId,ZnodeCatalogId,AssociatedZnodeProductId,DisplayOrder,SelectValues,ConfigurableAttributeCodes,IsDefault,ElasticSearchEvent
 FROM #temp_configProductids a
 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishConfigurableProductEntity t WHERE t.VersionId = a.VersionId AND a.PimProductId = t.ZnodeProductId AND t.AssociatedZnodeProductId = a.AssociatedZnodeProductId )

SELECT q.VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, a.PimProductId, a.DisplayOrder, a.BundleQuantity ,1 ElasticSearchEvent
INTO #temp_bundleProduct 
FROM #PimProduct_catalog a 
CROSS APPLY @Versions_working q 
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct tt WHERE tt.PimProductId = a.ParentPimProductId AND tt.ProductType = 'BundleProduct')
AND a.IsAssocitedProduct =1 

DELETE a FROM ZnodePublishBundleProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_bundleProduct t WHERE t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND  t.PimProductId <> a.ZnodeProductId   
)


UPDATE a
SET  a.AssociatedProductBundleQuantity = t.BundleQuantity, a.AssociatedProductDisplayOrder = t.DisplayOrder
FROM ZnodePublishBundleProductEntity a
INNER JOIN  #temp_bundleProduct t ON( t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND  t.PimProductId = a.ZnodeProductId   ) 

INSERT INTO ZnodePublishBundleProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,AssociatedProductBundleQuantity,ElasticSearchEvent)
SELECT VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, PimProductId, DisplayOrder, ISNULL(BundleQuantity,0) BundleQuantity , ElasticSearchEvent
FROM #temp_bundleProduct a
WHERE  NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishBundleProductEntity t WHERE t.VersionId = a.VersionId AND t.ZnodeProductId = a.ParentPimProductId AND t.AssociatedZnodeProductId = a.PimProductId)


SELECT q.VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, PimProductId, a.DisplayOrder ,1 ElasticSearchEvent
INTO #temp_groupProduct
FROM #PimProduct_catalog a 
CROSS APPLY @Versions_working q 
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct tt WHERE tt.PimProductId = a.ParentPimProductId AND tt.ProductType = 'GroupedProduct')
AND a.IsAssocitedProduct =1 

DELETE a FROM ZnodePublishGroupProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_groupProduct t WHERE t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND t.PimProductId <> a.ZnodeProductId
)

INSERT INTO ZnodePublishGroupProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,ElasticSearchEvent)
SELECT VersionId, ParentPimProductId,ZnodeCatalogId, PimProductId, DisplayOrder ,ElasticSearchEvent
FROM #temp_groupProduct a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishGroupProductEntity t WHERE t.VersionId = a.VersionId AND t.ZnodeProductId = a.ParentPimProductId AND t.AssociatedZnodeProductId = a.PimProductId)
 	
		--For full catalog publish
	IF @PimProductId =  0   
	BEGIN
		Delete from ZnodePublishAddonEntity 
		WHERE EXISTS (SELECT TOP 1 1 FROM @Versions_working q  
		where ZnodePublishAddonEntity.VersionId = q.VersionId)
	END 

	-- for single product publish
	ELSE 
	BEGIN 
		DELETE FROM ZnodePublishAddonEntity 
		WHERE EXISTS (	SELECT TOP 1 1 FROM   @Versions_working q  
						WHERE ZnodePublishAddonEntity.VersionId = q.VersionId)
			AND @PimProductId = ZnodePublishAddonEntity.ZnodeProductId   
	END 

INSERT INTO ZnodePublishAddonEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder
,LocaleId,GroupName,DisplayType,DisplayOrder,IsRequired,RequiredType,IsDefault,ElasticSearchEvent)
SELECT VersionId,ParentPimProductId,@PimCatalogId,PimProductId,DisplayOrder
,q.LocaleId,[AddonGroupName] GroupName, DisplayType,DisplayOrder,IIF(RequiredType='requierd',1,0) IsRequired, RequiredType,IsDefault,1 ElasticSearchEvent
FROM  #TBL_AddOnProduct a
CROSS APPLY @Versions_working q 
Inner join ZnodePimAddonGroup AS ZPADG with(nolock) on ( ZPADG.PimAddonGroupId = a.PimAddonGroupId ) 
Inner join ZnodePimAddonGroupLocale AS ZPADGL  with(nolock) on ( ZPADG.PimAddonGroupId = ZPADGL.PimAddonGroupId  and ZPADGL.LocaleId = @DefaultLocaleId ) 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishAddonEntity ty WHERE ty.VersionId = q.VersionId AND ty.ZnodeProductId = a.ParentPimProductId
AND ty.AssociatedZnodeProductId = a.PimProductId  )
AND a.PimAddonGroupId > 0 

		
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Started Elastic update'
		,ProgressMark = 80
	WHERE Jobid = @NewGUID
	
	SET @Status = 1  
  
    UPDATE a 
	SET --PublishSTateId = c.PublishStateId, IsCatalogPublished = 1 	    ,
	PublishCategoryId = (SELECT COUNT(DISTINCT PimCategoryHierarchyId )  FROM #Temp_Categoryvalue n )
		, PublishProductId = CASE WHEN @PimProductId <> 0 THEN @PimProductId ELSE  (SELECT COUNT(DISTINCT PimProductId )  FROM #PimProduct_distinct np  ) END 
	FROM ZnodePublishCatalogLog a 
	INNER JOIN @Versions_new b ON (b.VersionId = a.PublishCatalogLogId)
	INNER JOIN ZnodePublishState c with(nolock) ON (c.PublishStateCode = b.RevisionState)
    
	UPDATE ZnodePublishVersionEntity SET IsPublishSuccess = 1 WHERE ZnodeCatalogId = @PimCatalogId

	UPDATE ZnodePimProduct 
	SET PublishStateId =  CASE WHEN EXISTS (SELECT TOP 1 1 FROM @Versions_working WHERE PublishStateId = 3 ) THEN 3 ELSE 4 END
	WHERE PublishStateId IN (1,2)
	AND PimProductId IN ( SELECT PimProductId FROM  #PimProduct_distinct ) 
	AND @PimProductId = 0 

	UPDATE ZnodePimCategory 
	SET PublishStateId = CASE WHEN EXISTS (SELECT TOP 1 1 FROM @Versions_working WHERE PublishStateId = 3 ) THEN 3 ELSE 4 END 
	WHERE PublishStateId IN (1,2)
	AND PimCategoryId IN ( SELECT t.PimCategoryId FROM  #Temp_categoryDetails t  ) 


	IF @PimProductId = 0 
	BEGIN 
		SELECT @PimCatalogId AS id,@Status AS Status;     
    END 
	ELSE 
	BEGIN 
	
	  SELECT PimProductId , 0 IsDeleted , @PimCatalogId ZnodecatalogId , n.VersionId
	  FROM #PimProduct_distinct a 
	  CROSS APPLY @Versions_working n 
	  UNION ALL 
	  SELECT PimProductId , 1 IsDeleted , @PimCatalogId , n.VersionId
	  FROM @Deleted_Products 
	  CROSS APPLY @Versions_working n 
	END 

END TRY   
BEGIN CATCH
	SET @Status =0    
	SELECT ERROR_MESSAGE(), ERROR_LINE(),ERROR_PROCEDURE()
	SELECT 1 AS ID,@Status AS Status;     
   
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),   
	@ErrorLine VARCHAR(100)= ERROR_LINE(),  
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishCatalogEntity   
	@PimCatalogId = '+CAST(@PimCatalogId  AS VARCHAR (max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))  
	+',@PreviewVersionId = ' + CAST(0  AS VARCHAR(20))  
	+',@ProductionVersionId = ' + CAST(0  AS VARCHAR(20))  
	+',@RevisionState = ''' + CAST(@RevisionState  AS VARCHAR(50))  
	+',@UserId = ' + CAST(@UserId AS VARCHAR(20)); SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
   
    	
	EXEC Znode_InsertProcedureErrorLog  
	@ProcedureName = 'Znode_PublishCatalogEntity',  
	@ErrorInProcedure = @Error_procedure,  
	@ErrorMessage = @ErrorMessage,  
	@ErrorLine = @ErrorLine,  
	@ErrorCall = @ErrorCall;  
END CATCH  
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishUpdateProductJson')
	DROP PROC Znode_PublishUpdateProductJson
GO

CREATE PROC [dbo].[Znode_PublishUpdateProductJson]
(
	@PimProductIds transferId readonly 
	, @VersionId varchar(200) = ''
	, @LocaleId INT = 1  
	, @IsSingleProductPublish bit = 0 
	, @NewGUID varchar(600)= ''
	, @CatalogName nvarchar(1000) = ''
	, @messagestring varchar(300) = ''
)

AS 
BEGIN 
BEGIN TRY 
SET NOCOUNT ON 
	DECLARE @col VARCHAR(max)= '', @wherecls varchar(2000)=''
	SET @wherecls = CASE WHEN @VersionId = '' THEN '' ELSE ' VersionId IN ('+@VersionId+')' END  
	DECLARE @DefaultLocaleId INT = dbo.fn_getDefaultLocaleId()
	DECLARE @LocaleIds_distinct TABLE (LocaleId INT, VersionId INT  )

	INSERT INTO @LocaleIds_distinct
	SELECT DISTINCT LocaleId ,VersionId
	FROM ZnodePublishVersionEntity a 
	WHERE  EXISTS (SELECT TOP 1 1 FROM string_split(@VersionId , ',') w WHERE w.value = a.VersionId)

	SELECT id PimProductId 
	INTO #pimProductIds
	FROM @PimProductIds

	CREATE INDEX IDX_#pimProductIds ON #pimProductIds(PimProductId)

SELECT b.PimAttributeId, b.AttributeCode, c.AttributeName,e.IsUseInSearch ,e.IsHtmlTags 
				,e.IsComparable ,e.IsFacets,b.DisplayOrder
				,d.AttributeTypeName , b.IsPersonalizable
				,IsConfigurable ,CASE WHEN b.IsSwatch = 1 THEN 'true' 
				WHEN b.IsSwatch = 0 THEN 'false' ELSE '' END IsSwatch , c.LocaleId
INTO #Attributes_Dt
FROM ZnodePimAttribute b 
LEFT JOIN ZnodePimAttributeLocale c with(nolock) ON (c.PimAttributeId = b.PimAttributeId AND c.LocaleId =@DefaultLocaleId )
LEFT JOIN ZnodeAttributeType d with(nolock) ON (d.AttributeTypeId = b.AttributeTypeId )
LEFT JOIN ZnodePimFrontendProperties e with(nolock) ON (e.PimAttributeId = b.PimAttributeId)
WHERE b.IsCategory = 0
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-Collecting Attribute Data'
		,ProgressMark = 40
	WHERE Jobid = @NewGUID

	DROP TABLE if exists  #tbl_ProductValueid
	DROP TABLE if exists  #tbl_AttributeValue
	DROP TABLE if exists  #tbl_Productjson
	DROP TABLE IF EXISTS  #default_value
	DROP TABLE IF EXISTS  #PublishProductEntityIdJson

	SELECT PimAttributeValueid , PimProductId ,  a.PimAttributeId
	INTO #tbl_ProductValueid
	FROM ZnodePimAttributeValue a with(nolock)
	WHERE EXISTS (SELECT TOP 1 1 FROM  #pimProductIds  t WHERE t.PimProductId = a.PimProductId)

	SELECT b.PimProductId, b.PimAttributeId , a.AttributeValue,'' CustomCode , 0 IsDefaultValue ,@DefaultLocaleId LocaleId, 0 Iscustomfield
	INTO #tbl_AttributeValue 
	FROM ZnodePimAttributeValueLocale a with(nolock)
	INNER JOIN #tbl_ProductValueid b ON (b.PimAttributeValueId = a.PimAttributeValueId)
	WHERE a.LocaleId = @DefaultLocaleId
	UNION ALL 
	SELECT b.PimProductId, b.PimAttributeId , a.AttributeValue ,'' CustomCode , 0 IsDefaultValue ,@DefaultLocaleId LocaleId, 0 Iscustomfield
	FROM ZnodePimProductAttributeTextAreaValue a with(nolock)
	INNER JOIN #tbl_ProductValueid b ON (b.PimAttributeValueId = a.PimAttributeValueId)
	WHERE a.LocaleId = @DefaultLocaleId
	UNION ALL 
	SELECT b.PimProductId, b.PimAttributeId , '' AttributeValue ,'' CustomCode , 1 IsDefaultValue ,@DefaultLocaleId LocaleId, 0 Iscustomfield
	FROM ZnodePimProductAttributeDefaultValue a with(nolock)
	INNER JOIN #tbl_ProductValueid b ON (b.PimAttributeValueId = a.PimAttributeValueId)
	WHERE a.LocaleId = @DefaultLocaleId
	UNION ALL 
	SELECT b.PimProductId, b.PimAttributeId , STRING_AGG( CONVERT(NVARCHAR(MAX),c.Path),',') AttributeValue,'' CustomCode, 0 IsDefaultValue 
				,@DefaultLocaleId LocaleId, 0 Iscustomfield
	FROM ZnodePimProductAttributeMedia a with(nolock)
	INNER JOIN ZnodeMedia c with(nolock) ON (c.MediaId = a.MediaId)
	INNER JOIN #tbl_ProductValueid b ON (b.PimAttributeValueId = a.PimAttributeValueId)
	WHERE a.LocaleId = @DefaultLocaleId
	GROUP BY b.PimProductId, b.PimAttributeId
	UNION ALL 
	SELECT b.PimProductId, c.PimCustomFieldId , a.CustomKeyValue AttributeValue,c.CustomCode, 0 IsDefaultValue ,@DefaultLocaleId LocaleId, 1 Iscustomfield
	FROM ZnodePimCustomFieldLocale a with(nolock)
	INNER JOIN ZnodePimCustomField c with(nolock) ON (c.PimCustomFieldId = a.PimCustomFieldId)
	INNER JOIN #tbl_ProductValueid b ON (b.PimProductId = C.PimProductId)
	WHERE a.LocaleId = @DefaultLocaleId
	UNION ALL 
	SELECT b.PimProductId, a.PimAttributeId , '' AttributeValue ,'' CustomCode , 1 IsDefaultValue ,@DefaultLocaleId LocaleId, 0 Iscustomfield
	FROM ZnodePimConfigureProductAttribute a with(nolock)
	INNER JOIN #pimProductIds  b ON (b.PimProductId = a.PimProductId)
	UNION ALL 
	SELECT DISTINCT  a.PimParentProductId, a.PimAttributeId , (SELECT STRING_AGG(po.SKU,',') 
				FROM ZnodePimLinkProductDetail aa with(nolock)
				INNER JOIN ZnodePimProduct po with(nolock) ON (po.PimProductId = aa.PimProductId)
				WHERE aa.PimParentProductId = a.PimParentProductId and aa.PimAttributeId = a.PimAttributeId 
				) AttributeValue ,'' CustomCode , 0 IsDefaultValue ,@DefaultLocaleId LocaleId, 0 Iscustomfield
	FROM ZnodePimLinkProductDetail a with(nolock)
	INNER JOIN #pimProductIds  b ON (b.PimProductId = a.PimParentProductId)

	-- If want child product configurable attributes 
	SELECT DISTINCT ty.PimProductId ,ty.PimAttributeId, ac.AttributeDefaultValueCode Code , bc.LocaleId	, bc.AttributeDefaultValue Value,ac.DisplayOrder,IsEditable,SwatchText,Path,rt.PimAttributeDefaultValueId, CAST('' AS VARCHAr(600)) VariantSKU ,0 VariantDisplayOrder
	INTO #default_value
	FROM ZnodePimAttributeDefaultValue ac with(nolock)
	INNER JOIN ZnodePimProductAttributeDefaultValue rt with(nolock) ON (rt.PimAttributeDefaultValueId = ac.PimAttributeDefaultValueId)
	INNER JOIN ZnodePimAttributeDefaultValueLocale bc with(nolock) ON (ac.PimAttributeDefaultValueId = bc.PimAttributeDefaultValueId)
	INNER JOIN #tbl_ProductValueid ty ON (ty.PimAttributeValueId = rt.PimAttributeValueId)
	LEFT JOIN ZnodeMedia ZM with(nolock) ON (zm.MediaId = ac.MediaId)
	WHERE  bc.LocaleId = @DefaultLocaleId AND rt.LocaleId = bc.LocaleId

	INSERT INTO #default_value 
	SELECT a.PimParentProductId PimProductId ,c.PimAttributeId, b.Code , b.LocaleId	, b.Value,b.DisplayOrder,IsEditable,SwatchText,Path,b.PimAttributeDefaultValueId , po.SKU VariantSKU ,a.DisplayOrder VariantDisplayOrder
	FROM ZnodePimProductTypeAssociation a with(nolock)
	INNER JOIN ZnodePimConfigureProductAttribute c with(nolock) ON (c.PimProductId = a.PimParentProductId)
	INNER JOIN #default_value b ON (b.PimProductId = a.PimProductId AND b.PimAttributeId = c.PimAttributeId )
	INNER JOIN #pimProductIds  bb ON (bb.PimProductId = c.PimProductId)
	INNER JOIN ZnodePimProduct po with(nolock) ON (po.PimProductId = a.PimProductId)

	create nonclustered index IDX_TempTable_AttributeValue on #tbl_AttributeValue (PimProductId) INCLUDE(PimAttributeId)
	create nonclustered index IDX_TempTable_defaultValue on #default_value (PimProductId) INCLUDE(PimAttributeId)

	SELECT DISTINCT PublishProductEntityId,ZnodeProductId,LocaleId
	INTO #PublishProductEntityIdJson
	FROM ZnodePublishProductEntity a WITH (nolock)
	WHERE EXISTS (SELECT TOP 1 1 FROM #pimProductIds  n WHERE n.PimProductId =  a.ZnodeProductId ) 
	AND EXISTS (SELECT TOP 1 1 FROM @LocaleIds_distinct w WHERE w.VersionId = a.VersionId)

	CREATE TABLE #tbl_AttributeValueLocale (PimProductId INT ,   AttributeValue NVARCHAR(max), PimAttributeId INT  , LocaleId INT)
	CREATE TABLE #default_valuelocale (PimAttributeDefaultValueId INT , AttributeDefaultValue NVARCHAR(max), LocaleId int  )

	IF EXISTS (SELECT TOP 1 1 FROM @LocaleIds_distinct WHERE LocaleId <> @DefaultLocaleId )
	BEGIN 

	INSERT INTO #Attributes_Dt 
	SELECT PimAttributeId, AttributeCode, AttributeName,IsUseInSearch ,IsHtmlTags 
				,IsComparable ,IsFacets,DisplayOrder
				,AttributeTypeName , IsPersonalizable
				,IsConfigurable ,IsSwatch , m.LocaleId
		FROM #Attributes_Dt 
		CROSS APPLY @LocaleIds_distinct m
		WHERE m.LocaleId <> @DefaultLocaleId

		UPDATE a 
		SET a.AttributeName = b.AttributeName
		FROM #Attributes_Dt a 
		INNER JOIN ZnodePimAttributeLocale b with(nolock)  ON (a.PimAttributeId = b.PimAttributeId AND a.LocaleId = b.LocaleId)
		WHERE a.LocaleId <> @DefaultLocaleId

		INSERT INTO #tbl_AttributeValueLocale
		SELECT b.PimProductId,   aa.AttributeValue , a.PimAttributeId , aa.LocaleId
		FROM #tbl_AttributeValue a 
		LEFT JOIN #tbl_ProductValueid b  ON (b.PimProductId = a.PimProductId AND b.PimAttributeId = a.PimAttributeId AND a.Iscustomfield = 0 )
		LEFT JOIN  ZnodePimAttributeValueLocale aa with(nolock) ON (b.PimAttributeValueId = aa.PimAttributeValueId  )
		WHERE aa.LocaleId <> @DefaultLocaleId

		INSERT INTO #tbl_AttributeValueLocale
		SELECT b.PimProductId,   aa.AttributeValue , a.PimAttributeId , aa.LocaleId
		FROM #tbl_AttributeValue a 
		INNER JOIN #tbl_ProductValueid b  ON (b.PimProductId = a.PimProductId AND b.PimAttributeId = a.PimAttributeId AND a.Iscustomfield = 0 )
		INNER JOIN  ZnodePimProductAttributeTextAreaValue aa with(nolock) ON (b.PimAttributeValueId = aa.PimAttributeValueId  )
		WHERE aa.LocaleId <> @DefaultLocaleId
 
		INSERT INTO #default_valuelocale
		SELECT DISTINCT   bc.PimAttributeDefaultValueId, bc.AttributeDefaultValue, bc.LocaleId 
		FROM #default_value a 
		INNER JOIN ZnodePimAttributeDefaultValueLocale bc with(nolock) ON (a.PimAttributeDefaultValueId = bc.PimAttributeDefaultValueId AND  a.LocaleId =@DefaultLocaleId)
		WHERE bc.LocaleId <> @DefaultLocaleId
	END 

	CREATE INDEX IDX_#default_valuelocale ON #default_valuelocale(PimAttributeDefaultValueId,LocaleId)
	CREATE INDEX IDX_#tbl_AttributeValueLocale ON #tbl_AttributeValueLocale (PimProductId,PimAttributeId,LocaleId)

	DROP TABLE IF EXISTS #tbl_ProductValueid
	
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'-Processing Attribute JSON'
		,ProgressMark = 50
	WHERE Jobid = @NewGUID
	
	DECLARE @intCount INT = (SELECT COUNT(1) FROM #PublishProductEntityIdJson)

	DECLARE @PublishTable  TABLE(PublishProductEntityId int PRIMARY KEY,ZnodeProductId int ,LocaleId int )

	WHILE EXISTS (SELECT TOP 1 1 FROM #PublishProductEntityIdJson)
	BEGIN 
	
	INSERT INTO @PublishTable
	SELECT TOP 10000 PublishProductEntityId,ZnodeProductId,LocaleId
	FROM #PublishProductEntityIdJson

	DROP TABLE IF EXISTS #ProductJsonData

	SELECT PublishProductEntityId,  (SELECT DISTINCT  IIF(ISNULL(b.AttributeCode,'') = '', a.CustomCode,b.AttributeCode)AttributeCode ,IIF(ISNULL(b.AttributeName,'') = '', f.CustomKey,b.AttributeName)AttributeName
		,ISNULL(b.IsUseInSearch,'false')IsUseInSearch ,ISNULL(b.IsHtmlTags,'false') IsHtmlTags
				,ISNULL(b.IsComparable,'false')IsComparable ,ISNULL(b.IsFacets,'false') IsFacets,ISNULL(b.DisplayOrder,0) DisplayOrder 
				,ISNULL(b.AttributeTypeName,'') AttributeTypeName, ISNULL(b.IsPersonalizable,'false')IsPersonalizable 
				,IIF(CustomCode= '','false' , 'true' )IsCustomField,ISNULL(IsConfigurable,'false') IsConfigurable,ISNULL(b.IsSwatch,'false') IsSwatch, ISNULL(IIF(ut.AttributeValue IS NULL , a.AttributeValue,ut.AttributeValue),'') AttributeValues
				,ISNULL((
				   SELECT   Code,m.LocaleId,IIF(  op.AttributeDefaultValue IS NULL ,nt.Value, op.AttributeDefaultValue) Value,DisplayOrder,ISNULL(IsEditable,'false') IsEditable,ISNULL(SwatchText,'')SwatchText,ISNULL(Path,'')Path,VariantSKU,VariantDisplayOrder
				   FROM #default_value nt 
				   LEFT JOIN #default_valuelocale op ON (op.PimAttributeDefaultValueId = nt.PimAttributeDefaultValueId AND op.LocaleId = m.LocaleId )
				   WHERE nt.PimProductId = m.ZnodeProductId AND nt.PimAttributeId = a.PimAttributeId AND a.IsDefaultValue = 1 
				   AND nt.LocaleId =@DefaultLocaleId
				   FOR JSON PATH 
				),'[]')  SelectValues
	FROM #tbl_AttributeValue a 
	LEFT JOIN #tbl_AttributeValueLocale ut ON (ut.PimProductId = m.ZnodeProductId AND ut.PimAttributeId = a.PimAttributeId 
											AND ut.LocaleId = m.LocaleId AND a.Iscustomfield = 0)
	LEFT JOIN #Attributes_Dt b ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId = m.LocaleId AND a.Iscustomfield = 0)
	LEFT JOIN ZnodePimCustomFieldLocale f with(nolock) ON (f.PimCustomFieldId = a.PimAttributeId AND f.LocaleId =m.LocaleId AND a.Iscustomfield = 1 )
	WHERE a.PimProductId = m.ZnodeProductId AND a.LocaleId = @DefaultLocaleId

	FOR JSON PATH 
		) Attributes
	INTO #ProductJsonData
	FROM @PublishTable m

	UPDATE m
	SET m.Attributes = h.Attributes
	FROM ZnodePublishProductEntity m
	INNER JOIN #ProductJsonData h ON (h.PublishProductEntityId = m.PublishProductEntityId)

	UPDATE  a
	SET name  = ty.AttributeValue 
	FROM ZnodePublishProductEntity a 
	INNER JOIN #tbl_AttributeValueLocale ty ON ( ty.PimProductId = a.ZnodeProductId AND ty.LocaleId = a.LocaleId 
		AND ty.PimAttributeId = (SELECT TOP 1 w.PimAttributeId FROM #Attributes_Dt W WHERE w.AttributeCode = 'ProductName')  )
	WHERE PublishProductEntityId  IN (SELECT PublishProductEntityId FROM @PublishTable)
	AND a.LocaleId <> @DefaultLocaleId
	
	DELETE p FROM #PublishProductEntityIdJson p WHERE EXISTS (SELECT TOP 1 1 FROM @PublishTable o WHERE o.PublishProductEntityId = p.PublishProductEntityId)
	DELETE FROM @PublishTable
	
	SET @intCount = @intCount-10000

	IF IS_SRVROLEMEMBER('sysadmin', SUSER_NAME())=1
	DBCC DROPCLEANBUFFERS
	

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'-Processing Attribute JSON-'+CAST(@intCount AS VARCHAR(2000))+' Products Remain'
		,ProgressMark = 50
	WHERE Jobid = @NewGUID

	END 

	DROP TABLE IF EXISTS #pimProductIds

	END TRY 
	BEGIN CATCH 
		SELECT ERROR_MESSAGE(), ERROR_LINE()
	END CATCH 
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ExportImportErrorLog')
	DROP PROC Znode_ExportImportErrorLog
GO

CREATE PROCEDURE [dbo].[Znode_ExportImportErrorLog]
(
    @WhereClause NVARCHAR(MAX),
	@FileType NVARCHAR(20),
	@ImportProcessLogId INT,
	@Status	BIT = 0 OUT
)
/*
	Summary: 
		This Procedure is used to export Import Error Log data based on input values.

	Unit Testing :
		EXEC [dbo].[Znode_ExportImportErrorLog]  @WhereClause='',@FileType=N'CSV',@ImportProcessLogId=1034,@Status=1
*/
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		DECLARE @Count INT, 
				@Table NVARCHAR(MAX),
				@SSQLString NVARCHAR(MAX),
				@ExportProcessLogId INT=0,
				@ImportType NVARCHAR(50);

		DECLARE @Fn_GetFilterWhereClause NVARCHAR(MAX) = ''
		SET @Fn_GetFilterWhereClause=dbo.Fn_GetFilterWhereClause(@WhereClause);

		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'RowNumber','zil.RowNumber')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ColumnName','zil.ColumnName')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'Data','zil.Data')
		SET @Fn_GetFilterWhereClause = REPLACE(@Fn_GetFilterWhereClause,'ErrorDescription','zil.ErrorDescription')
		
		SET @ImportType =
                         (
						 SELECT TOP 1 NAME AS IMPORTTYPE FROM ZnodeImportProcessLog zip
                         inner join  ZnodeImportTemplate zit WITH (NOLOCK) ON zip.ImportTemplateId=zit.ImportTemplateId
                         inner join ZnodeImportHead zih WITH (NOLOCK) on zit.ImportHeadId=zih.ImportHeadId
                         Where zip.ImportProcessLogId=@ImportProcessLogId
						 );

		INSERT INTO ZnodeExportProcessLog (ExportType,FileType,[Status],ProcessStartedDate,ProcessCompletedDate,TableName,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate)
		SELECT @ImportType,@FileType,'Started',@GetDate,NULL,NULL,3,@GetDate,3,@GetDate

		SET @ExportProcessLogId = SCOPE_IDENTITY()

		SET @Table = 'ImportErrorLog'+ @ImportType +'_'+ CAST(@ExportProcessLogId As VARCHAR(20));

		UPDATE ZnodeExportProcessLog
		SET TableName = @Table
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SET @SSQLString='    	
				SELECT zil.ImportLogId ID, zil.ImportProcessLogId, ISNULL(zil.RowNumber, 0) [Row Number], ISNULL(zil.ColumnName, '''') [Column Name],
					ISNULL(zil.Data, '''') [Column Data], zm.MessageName + 
					CASE 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1)
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') like ''%Quantity%''  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') -1) 
						WHEN zm.MessageCode IN (17)	AND '''+@ImportType+''' in (''Inventory'')  THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'') - 1) 
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''') NOT like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultPriceRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Pricing'') AND ISNULL(zil.ColumnName, '''')  like ''%Quantity%'' THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (41) AND '''+@ImportType+''' in (''Inventory'') THEN +''  ''+ dbo.Fn_GetDefaultInventoryRoundOff(isnull(DefaultErrorValue,''0000000.00'' ))
						WHEN zm.MessageCode IN (44) AND '''+@ImportType+''' in (''Pricing'') THEN +''  ''+ isnull(DefaultErrorValue,''0000000.00'' )
						WHEN zm.MessageCode IN (129) AND '''+@ImportType+''' NOT IN (''Product'') THEN +'' ''+ isnull(DefaultErrorValue,''0000000.00'')+''.''
						ELSE ''''END ''Error Description'' 
				INTO '+@Table+' 
				FROM ZnodeImportLog AS zil WITH (NOLOCK) 
				INNER JOIN ZnodeMessage AS zm WITH (NOLOCK) ON zil.ErrorDescription = CONVERT(VARCHAR(50) , zm.MessageCode)
				WHERE zil.ImportProcessLogId='+CAST(@ImportProcessLogId AS NVARCHAR(20))+' '+ @Fn_GetFilterWhereClause+'  			
				'
	    EXEC (@SSQLString);
		
		SET @Count = @@ROWCOUNT;
				
		SET @GetDate = dbo.Fn_GetDate();

		UPDATE ZnodeExportProcessLog 
		SET [Status]= 'In Progress'
		WHERE ExportProcessLogId =@ExportProcessLogId;

		SELECT TableName
		FROM ZnodeExportProcessLog
		WHERE ExportProcessLogId = @ExportProcessLogId;

		SELECT @Count As [COUNT];

		SET @Status = 1;
	END TRY
 
	BEGIN CATCH
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'Znode_ExportImportErrorLog 
					@WhereClause = '+CAST(@WhereClause AS NVARCHAR(MAX))+',
					@FileType='+CAST(@FileType AS VARCHAR(20))+',
					@ImportProcessLogId='+CAST(@ImportProcessLogId AS NVARCHAR(20))+',
					@Status='+CAST(@Status AS VARCHAR(10));
		
		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ExportImportErrorLog',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_InsertUpdateSaveCartLineItem')
	DROP PROC Znode_InsertUpdateSaveCartLineItem
GO


CREATE PROCEDURE [dbo].[Znode_InsertUpdateSaveCartLineItem](
	  @CartLineItemXML xml, @UserId int,@Status bit OUT )
AS 
   /* 
    Summary: THis Procedure is USed to save and edit the saved cart line item      
    Unit Testing 
	begin tran  
    Exec Znode_InsertUpdateSaveCartLineItem @CartLineItemXML= '<ArrayOfSavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>BlueGreenYellow</SKU>
    <Quantity>1.000000</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>1</Sequence>
    <AddonProducts>YELLOW</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts>GREEN</ConfigurableProducts>
  </SavedCartLineItemModel>
  <SavedCartLineItemModel>
    <OmsSavedCartLineItemId>0</OmsSavedCartLineItemId>
    <ParentOmsSavedCartLineItemId>0</ParentOmsSavedCartLineItemId>
    <OmsSavedCartId>1259</OmsSavedCartId>
    <SKU>ap1534</SKU>
    <Quantity>1.0</Quantity>
    <OrderLineItemRelationshipTypeId>0</OrderLineItemRelationshipTypeId>
    <Sequence>2</Sequence>
    <AddonProducts >PINK</AddonProducts>
    <BundleProducts />
    <ConfigurableProducts />
    <PersonaliseValuesList>Address~Hello</PersonaliseValuesList>
  </SavedCartLineItemModel>
</ArrayOfSavedCartLineItemModel>' , @UserId=1 ,@Status=0
	rollback tran
*/
BEGIN
	BEGIN TRAN InsertUpdateSaveCartLineItem;
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @GetDate datetime= dbo.Fn_GetDate();
		DECLARE @AddOnQuantity numeric(28, 6)= 0;
		DECLARE @IsAddProduct   BIT = 0 
		
		DECLARE @TBL_SavecartLineitems TABLE
		( 
			RowId int , OmsSavedCartLineItemId int, ParentOmsSavedCartLineItemId int, OmsSavedCartId int, SKU nvarchar(600), Quantity numeric(28, 6), OrderLineItemRelationshipTypeID int, CustomText nvarchar(max), 
			CartAddOnDetails nvarchar(max), Sequence int, AddOnValueIds varchar(max), BundleProductIds varchar(max), ConfigurableProductIds varchar(max), GroupProductIds varchar(max), PersonalisedAttribute XML, 
			AutoAddon varchar(max), OmsOrderId int, ItemDetails nvarchar(max),
			Custom1	nvarchar(max),Custom2 nvarchar(max),Custom3 nvarchar(max),Custom4
			nvarchar(max),Custom5 nvarchar(max),GroupId NVARCHAR(max) ,ProductName Nvarchar(1000) , Description NVARCHAR(max)
		);
		DECLARE @OrderLineItemRelationshipTypeIdAddon int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'AddOns'
		);
		DECLARE @OrderLineItemRelationshipTypeIdSimple int =
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Simple'
		);
		DECLARE @OrderLineItemRelationshipTypeIdBundle int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Bundles'
		);
		DECLARE @OrderLineItemRelationshipTypeIdConfigurable int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Configurable'
		);
		DECLARE @OrderLineItemRelationshipTypeIdGroup int=
		(
			SELECT TOP 1 OrderLineItemRelationshipTypeId
			FROM ZnodeOmsOrderLineItemRelationshipType
			WHERE [Name] = 'Group'
		);
		INSERT INTO @TBL_SavecartLineitems( RowId,OmsSavedCartLineItemId, ParentOmsSavedCartLineItemId, OmsSavedCartId, SKU, Quantity, OrderLineItemRelationshipTypeID, CustomText, CartAddOnDetails, Sequence, AddOnValueIds, BundleProductIds, ConfigurableProductIds, GroupProductIds, PersonalisedAttribute, AutoAddon, OmsOrderId, ItemDetails,
		Custom1,Custom2,Custom3,Custom4,Custom5,GroupId,ProductName,Description )
			   SELECT DENSE_RANK()Over(Order BY Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' )) RowId ,Tbl.Col.value( 'OmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartLineItemId, Tbl.Col.value( 'ParentOmsSavedCartLineItemId[1]', 'NVARCHAR(2000)' ) AS ParentOmsSavedCartLineItemId, Tbl.Col.value( 'OmsSavedCartId[1]', 'NVARCHAR(2000)' ) AS OmsSavedCartId, Tbl.Col.value( 'SKU[1]', 'NVARCHAR(2000)' ) AS SKU, Tbl.Col.value( 'Quantity[1]', 'NVARCHAR(2000)' ) AS Quantity
			   , Tbl.Col.value( 'OrderLineItemRelationshipTypeID[1]', 'NVARCHAR(2000)' ) AS OrderLineItemRelationshipTypeID, Tbl.Col.value( 'CustomText[1]', 'NVARCHAR(2000)' ) AS CustomText, Tbl.Col.value( 'CartAddOnDetails[1]', 'NVARCHAR(2000)' ) AS CartAddOnDetails, Tbl.Col.value( 'Sequence[1]', 'NVARCHAR(2000)' ) AS Sequence, Tbl.Col.value( 'AddonProducts[1]', 'NVARCHAR(2000)' ) AS AddOnValueIds, ISNULL(Tbl.Col.value( 'BundleProducts[1]', 'NVARCHAR(2000)' ),'') AS BundleProductIds, ISNULL(Tbl.Col.value( 'ConfigurableProducts[1]', 'NVARCHAR(2000)' ),'') AS ConfigurableProductIds, ISNULL(Tbl.Col.value( 'GroupProducts[1]', 'NVARCHAR(Max)' ),'') AS GroupProductIds, 
			          Tbl.Col.query('(PersonaliseValuesDetail/node())') AS PersonaliseValuesDetail, Tbl.Col.value( 'AutoAddon[1]', 'NVARCHAR(Max)' ) AS AutoAddon, Tbl.Col.value( 'OmsOrderId[1]', 'NVARCHAR(Max)' ) AS OmsOrderId,
					  Tbl.Col.value( 'ItemDetails[1]', 'NVARCHAR(Max)' ) AS ItemDetails,
					  Tbl.Col.value( 'Custom1[1]', 'NVARCHAR(Max)' ) AS Custom1,
					  Tbl.Col.value( 'Custom2[1]', 'NVARCHAR(Max)' ) AS Custom2,
					  Tbl.Col.value( 'Custom3[1]', 'NVARCHAR(Max)' ) AS Custom3,
					  Tbl.Col.value( 'Custom4[1]', 'NVARCHAR(Max)' ) AS Custom4,
					  Tbl.Col.value( 'Custom5[1]', 'NVARCHAR(Max)' ) AS Custom5,
					  Tbl.Col.value( 'GroupId[1]', 'NVARCHAR(Max)' ) AS GroupId,
					  Tbl.Col.value( 'ProductName[1]', 'NVARCHAR(Max)' ) AS ProductName,
					  Tbl.Col.value( 'Description[1]', 'NVARCHAR(Max)' ) AS Description
			   FROM @CartLineItemXML.nodes( '//ArrayOfSavedCartLineItemModel/SavedCartLineItemModel' ) AS Tbl(Col);

			    DELETE FROM ZnodeOmsPersonalizeCartItem
			WHERE EXISTS
			(
				SELECT TOP 1 1
				FROM ZnodeOmsSavedCartLineItem TYF
				WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_SavecartLineitems TY WHERE TYF.OmsSavedCartId = TY.OmsSavedCartId  ) 
				AND TYF.OmsSavedCartLineItemId = ZnodeOmsPersonalizeCartItem.OmsSavedCartLineItemId
			);
	  DELETE ZnodeOmsSavedCartLineItemDetails
				WHERE EXISTS
			(
				SELECT TOP 1 1
				FROM ZnodeOmsSavedCartLineItem TYF
				WHERE EXISTS(SELECT TOP 1 1 FROM @TBL_SavecartLineitems TY WHERE TYF.OmsSavedCartId = TY.OmsSavedCartId  ) 
				AND TYF.OmsSavedCartLineItemId = ZnodeOmsSavedCartLineItemDetails.OmsSavedCartLineItemId
			)
	
		EXEC Znode_InsertUpdateSaveCartLineItemQuantity @CartLineItemXML , @UserId, @Status
        		
	SET @Status = 1;
	COMMIT TRAN InsertUpdateSaveCartLineItem;
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE()	
		SET @Status = 0;
		DECLARE @Error_procedure varchar(1000)= ERROR_PROCEDURE(), @ErrorMessage nvarchar(max)= ERROR_MESSAGE(), @ErrorLine varchar(100)= ERROR_LINE(), @ErrorCall nvarchar(max)= 'EXEC Znode_InsertUpdateSaveCartLineItem @CartLineItemXML = '+CAST(@CartLineItemXML
 AS varchar(max))+',@UserId = '+CAST(@UserId AS varchar(50))+',@Status='+CAST(@Status AS varchar(10));

		SELECT 0 AS ID, CAST(0 AS bit) AS Status,ERROR_MESSAGE();
		ROLLBACK TRAN InsertUpdateSaveCartLineItem;
		EXEC Znode_InsertProcedureErrorLog @ProcedureName = 'Znode_InsertUpdateSaveCartLineItem', @ErrorInProcedure = @Error_procedure, @ErrorMessage = @ErrorMessage, @ErrorLine = @ErrorLine, @ErrorCall = @ErrorCall;
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportAssociateProducts')
	DROP PROC Znode_ImportAssociateProducts
GO

CREATE PROCEDURE [dbo].[Znode_ImportAssociateProducts]
(
	@TableName			NVARCHAR(100),
	@Status				BIT OUT,
	@UserId				INT,
	@ImportProcessLogId INT,
	@NewGUId			NVARCHAR(200),
	@PimCatalogId		INT= 0
)
AS
--------------------------------------------------------------------------------------
-- Summary : Import Product Association 

-- Unit Testing : 
--BEGIN TRANSACTION;
--UPDATE ZnodeGlobalSetting SET FeatureValues = '5' WHERE FeatureName = 'InventoryRoundOff'
--DECLARE @status INT;
--EXEC [Znode_ImportInventory] @InventoryXML = '<ArrayOfImportInventoryModel>
--<ImportInventoryModel>
--<SKU>S1002</SKU>
--<Quantity>999998.33</Quantity>
--<ReOrderLevel>10</ReOrderLevel>
--<RowNumber>1</RowNumber>
--<ListCode>TestInventory</ListCode>
--<ListName>TestInventory</ListName>
--</ImportInventoryModel>
--</ArrayOfImportInventoryModel>' , @status = @status OUT , @UserId = 2;
--SELECT @status;
--ROLLBACK TRANSACTION;
--------------------------------------------------------------------------------------
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	BEGIN TRAN A;
		DECLARE @MessageDisplay NVARCHAR(100), @SSQL NVARCHAR(MAX);
		DECLARE @GetDate DATETIME= dbo.Fn_GetDate();

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation') IS NOT NULL 
			DROP TABLE #InsertProductAssociation;

		IF OBJECT_ID('TEMPDB..#InsertProduct') IS NOT NULL 
			DROP TABLE #InsertProduct;

		IF OBJECT_ID('TEMPDB..#SKU') IS NOT NULL 
			DROP TABLE #SKU;

		IF OBJECT_ID('TEMPDB..#InsertProductAssociation_Parent_type') IS NOT NULL 
			DROP TABLE #InsertProductAssociation_Parent_type;

		IF OBJECT_ID('TEMPDB..#ParentChildSKU') IS NOT NULL 
			DROP TABLE #ParentChildSKU;
		-- Retrive RoundOff Value FROM global setting 

		CREATE TABLE #InsertProductAssociation 
		( 
			RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, ParentSKU VARCHAR(300), ChildSKU VARCHAR(200), DisplayOrder INT,
				IsDefault VARCHAR(10), GUID NVARCHAR(400),BundleQuantity VARCHAR(10) NULL
		);

		CREATE TABLE #InsertProductAssociation_Parent_type
		( 
			RowId INT PRIMARY KEY, RowNumber INT, ParentSKU VARCHAR(300), ChildSKU VARCHAR(200), DisplayOrder INT,IsDefault VARCHAR(10),
				GUID NVARCHAR(400),BundleQuantity VARCHAR(10) NULL,PT_ParentProductId VARCHAR(300), PT_ProductType NVARCHAR(100)
		);
		
		CREATE TABLE #InsertProduct 
		( 
			RowId INT IDENTITY(1, 1) PRIMARY KEY, RowNumber INT, ParentProductId VARCHAR(300), ChildProductId VARCHAR(200), DisplayOrder INT,
				IsDefault VARCHAR(10), GUID NVARCHAR(400), ProductType NVARCHAR(100),BundleQuantity VARCHAR(10) NULL
		);

		DECLARE @CategoryAttributId INT, @InventoryListId INT;

		SET @SSQL = 'SELECT RowNumber,ParentSKU,ChildSKU,DisplayOrder,IsDefault,GUID,Quantity FROM '+@TableName;
		INSERT INTO #InsertProductAssociation( RowNumber, ParentSKU,ChildSKU,DisplayOrder,IsDefault, GUID, BundleQuantity)
		EXEC sys.sp_sqlexec @SSQL;

		SELECT ChildSKU As ParentChildSKU
		INTO #ParentChildSKU
		FROM #InsertProductAssociation
		UNION 
		SELECT ParentSku As ParentChildSKU
		FROM #InsertProductAssociation

		--@MessageDisplay will use to display validate message for input inventory value
		CREATE TABLE #SKU
		(
			SKU NVARCHAR(300), PimProductId INT
		);

		INSERT INTO #SKU
		SELECT SKU, PimProductId
		FROM ZnodePimProduct WITH (NOLOCK)
		WHERE SKU IN (SELECT ParentChildSKU FROM #ParentChildSKU);

		DECLARE @ProductType TABLE
		( 
			ProductType NVARCHAR(100), PimProductId INT
		);

		INSERT INTO @ProductType
		SELECT ProductType, PimProductId
		FROM ZnodePimProduct WITH (NOLOCK)
		WHERE ProductType IN ('GroupedProduct','BundleProduct','ConfigurableProduct')
			AND SKU IN (SELECT ParentChildSKU FROM #ParentChildSKU);

		INSERT INTO #InsertProductAssociation_Parent_type
		SELECT IPAC.*,SKUParent.PimProductId, PT.ProductType
		FROM #InsertProductAssociation AS IPAC
		INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU 
		INNER JOIN @ProductType PT on PT.PimProductId = SKUParent.PimProductId;

		-- start Functional Validation 
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '84', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE ISNULL(ii.IsDefault,'') = '' AND ii.PT_ProductType ='ConfigurableProduct';

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE ISNULL(ii.IsDefault,'') not in ('true','1','false','0') AND ISNULL(ii.IsDefault,'') <> '' AND ii.PT_ProductType ='ConfigurableProduct';

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '68', 'IsDefault', IsDefault, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE ISNULL(ii.IsDefault,'') not in ('true','1','false','0') AND ISNULL(ii.IsDefault,'') <> '' AND ii.PT_ProductType ='BundleProduct';

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '98', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE NOT EXISTS( SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '53', 'ParentSKU / ChildSKU', ParentSKU+' / '+ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation AS ii
		WHERE ii.ParentSKU IN
		(
			SELECT ParentSKU FROM #InsertProductAssociation_Parent_type
			GROUP BY ParentSKU,ChildSKU
			HAVING COUNT(1)>1
		);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '49', 'ParentSKU', ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation AS ii
		WHERE NOT EXISTS
			( SELECT SKU FROM #SKU SKU INNER JOIN @ProductType PT ON SKU.PimProductId = PT.PimProductId WHERE ii.ParentSKU = SKU.SKU )
			AND EXISTS (SELECT SKU FROM #SKU SKU WHERE ii.ParentSKU = SKU.SKU);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '94', 'ParentSKU', ParentSKU , @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation AS ii
		WHERE NOT EXISTS (SELECT SKU FROM #SKU SKU WHERE ii.ParentSKU = SKU.SKU);


		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '51', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation AS ii
		WHERE EXISTS 
			(SELECT SKU FROM #SKU SKU INNER JOIN @ProductType PT ON SKU.PimProductId = PT.PimProductId AND ii.ChildSKU = SKU.SKU)
			AND EXISTS (SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU);
			
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '94', 'ChildSKU', ChildSKU, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation AS ii
		WHERE NOT EXISTS (SELECT SKU FROM #SKU SKU WHERE ii.ChildSKU = SKU.SKU);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '101', 'ParentSKU', 'Configure Attribute Missing: '+ Convert(NVARCHAR(400),ISNULL(ParentSKU,'')), @NewGUId, RowNumber, 2, @GetDate, 2, 
			@GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii 
		INNER JOIN #SKU PS ON ii.ParentSKU = PS.SKU 
		INNER JOIN @ProductType PT ON PS.PimProductId = PT.PimProductId AND PT.ProductType IN ('ConfigurableProduct')
		WHERE NOT EXISTS (SELECT PimProductId FROM ZnodePimConfigureProductAttribute d WHERE PS.PimProductId = d.PimProductId);
		-- END Function Validation 	

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '16', 'DisplayOrder', DisplayOrder, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE (ISNUMERIC(ii.DisplayOrder)=0 OR ii.DisplayOrder < 0 OR ii.DisplayOrder > 99999);

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '26', 'BundleQuantity', BundleQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE ((ISNULL(ii.BundleQuantity,0) < 1 ) AND ii.PT_ProductType ='BundleProduct' ); --or ii.DisplayOrder = 0

		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, RowNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '2', 'BundleQuantity', BundleQuantity, @NewGUId, RowNumber, 2, @GetDate, 2, @GetDate, @ImportProcessLogId
		FROM #InsertProductAssociation_Parent_type AS ii
		WHERE (ii.BundleQuantity ='' AND ii.PT_ProductType ='BundleProduct'); --or ii.DisplayOrder = 0

		UPDATE ZIL
		SET ZIL.ColumnName = ZIL.ColumnName + ' [ SKU - ' + ISNULL(ParentSKU,'') + ' ] '
		FROM ZnodeImportLog ZIL 
		INNER JOIN #InsertProductAssociation_Parent_type IPA ON (ZIL.RowNumber = IPA.RowNumber)
		WHERE ZIL.ImportProcessLogId = @ImportProcessLogId AND ZIL.RowNumber IS NOT NULL;

		--- Delete Invalid Data after functional validation
		DELETE FROM #InsertProductAssociation_Parent_type
		WHERE RowNumber IN
		(
			SELECT DISTINCT RowNumber
			FROM ZnodeImportLog
			WHERE ImportProcessLogId = @ImportProcessLogId AND GUID = @NewGUID
		);

		SELECT RowNumber, SKUParent.PimProductId SKUParentId,
			( SELECT TOP 1 SKUChild.PimProductId FROM #SKU AS SKUChild WHERE SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
			CASE WHEN ISNULL(DisplayOrder,'')= '' AND IPAC.PT_ProductType ='ConfigurableProduct' THEN 99 ELSE DisplayOrder END DisplayOrder ,
				CASE WHEN (ISNULL(IsDefault,'')= '' OR IsDefault =0 OR IsDefault > 999) AND IPAC.PT_ProductType !='ConfigurableProduct' THEN '0' 
					ELSE IsDefault END IsDefault, IPAC.PT_ProductType
			, BundleQuantity
		FROM #InsertProductAssociation_Parent_type AS IPAC 
		INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU;

		INSERT INTO #InsertProduct (RowNumber, ParentProductId , ChildProductId , DisplayOrder, IsDefault, ProductType, BundleQuantity)
		SELECT RowNumber , SKUParent.PimProductId SKUParentId,
				( SELECT TOP 1 SKUChild.PimProductId FROM #SKU AS SKUChild WHERE SKUChild.SKU = IPAC.ChildSKU ) SKUChildId,
				CASE WHEN ISNULL(DisplayOrder,'')= '' AND IPAC.PT_ProductType ='ConfigurableProduct' THEN 99 ELSE DisplayOrder END DisplayOrder ,
					CASE WHEN (ISNULL(IsDefault,'')= '' OR IsDefault =0 OR IsDefault > 999) AND IPAC.PT_ProductType !='ConfigurableProduct' THEN '0' 
						ELSE IsDefault END IsDefault, IPAC.PT_ProductType
				, BundleQuantity
		FROM #InsertProductAssociation_Parent_type AS IPAC INNER JOIN #SKU AS SKUParent ON IPAC.ParentSKU = SKUParent.SKU;

		-- UPDATE Record count in log 
		DECLARE @FailedRecordCount BIGINT, @SuccessRecordCount BIGINT

		SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND ImportProcessLogId = @ImportProcessLogId;

		SELECT @SuccessRecordCount = COUNT(DISTINCT RowNumber) FROM #InsertProduct;

		UPDATE ZnodeImportProcessLog 
		SET FailedRecordcount = @FailedRecordCount , 
			SuccessRecordCount = @SuccessRecordCount, 
			TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
		WHERE ImportProcessLogId = @ImportProcessLogId;
		-- END

		UPDATE #InsertProduct
		SET IsDefault =0
		WHERE RowNumber < (SELECT MAX(RowNumber) FROM #InsertProduct WHERE IsDefault = '1' OR IsDefault = 'True' AND ProductType ='ConfigurableProduct')
			AND ProductType ='ConfigurableProduct';

		UPDATE ZnodePimProductTypeAssociation
		SET IsDefault =0
		WHERE EXISTS (SELECT top 1 1 FROM #InsertProduct IP WHERE IsDefault = '1' OR IsDefault = 'true' AND PimParentProductId = IP.ParentProductId 
			AND ProductType ='ConfigurableProduct');

		UPDATE B 
		SET b.ModifiedDate = @GetDate, b.ModifiedBy = @UserId, b.DisplayOrder = CASE WHEN ISNULL(a.DisplayOrder,0)<>0 THEN a.DisplayOrder ELSE b.DisplayOrder END
			,b.IsDefault = A.IsDefault,b.BundleQuantity= CASE WHEN A.Producttype = 'BundleProduct' THEN CASE WHEN ISNULL(a.BundleQuantity,'') ='' THEN
				CASE WHEN b.BundleQuantity >=1 THEN b.BundleQuantity ELSE 1 END ELSE cast (a.BundleQuantity as INT) END ELSE NULL END
		FROM #InsertProduct A
		INNER JOIN ZnodePimProductTypeAssociation B ON a.ParentProductId = b.PimParentProductId AND a.ChildProductId = b.PimProductId;

		INSERT INTO ZnodePimProductTypeAssociation 
			(PimParentProductId, PimProductId, DisplayOrder, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, IsDefault,BundleQuantity) 
		SELECT ParentProductId , ChildProductId , CASE WHEN ISNULL(DisplayOrder,0)=0 THEN 1 ELSE DisplayOrder END, @UserId, @GetDate, @UserId, 
			@GetDate, IsDefault ,CASE WHEN Producttype = 'BundleProduct' THEN CASE WHEN ISNULL(BundleQuantity,'') ='' THEN 1 
				ELSE CAST (BundleQuantity as INT) END ELSE NULL END
		FROM #InsertProduct
		WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation WHERE PimParentProductId = #InsertProduct.ParentProductId
			AND PimProductId = #InsertProduct.ChildProductId);

		SET @GetDate = dbo.Fn_GetDate();
		--Updating the import process status
		UPDATE ZnodeImportProcessLog
		SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
						WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
						WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
					 END, 
			ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		COMMIT TRAN A;
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN A;

		SET @Status = 0;
		SELECT ERROR_LINE(), ERROR_MESSAGE(), ERROR_PROCEDURE();

		DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(), 
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportAssociateProducts
					@TableName = '+CAST(@TableName AS VARCHAR(MAX)) +',
					@Status='+ CAST(@Status AS VARCHAR(10))+',
					@UserId = '+CAST(@UserId AS VARCHAR(50))+',
					@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',
					@NewGUId='+CAST(@NewGUId AS VARCHAR(200))+',
					@PimCatalogId='+CAST(@PimCatalogId AS VARCHAR(MAX));

		---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId, @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount WITH (NOLOCK) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount WITH (NOLOCK) WHERE ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_ImportAssociateProducts',
			@ErrorInProcedure = @Error_procedure,
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishContentContainerVariantEntity')
	DROP PROC Znode_PublishContentContainerVariantEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishContentContainerVariantEntity]
(
	 @ContainerKey VARCHAR(100) = ''
	,@RevisionState VARCHAR(50) = 'Production'
	,@UserId INT = 0
	,@OldPreviewId INT = 0
	,@OldProductionId INT = 0
	,@ContainerProfileVariantId INT = 0
	,@Status BIT = 0 OUTPUT
)
AS
/*
	if profileid and portalid will null then it must be publish.
	This Procedure is used to publish the Content Container Variant against the store 

	EXEC [Znode_PublishContentContainerVariantEntity] 1 2,3

	EXEC Znode_PublishContentContainerVariantEntity @@ContainerKey='',@RevisionState='Production',@UserId=2,
	@OldPreviewId=0,@OldProductionId=

	SELECT * FROM ZnodePublishContentContainerVariantEntity

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @VersionId Int
	SET @VersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState = @RevisionState )

	IF ISNULL(@VersionId,0) = 0 AND @RevisionState = 'PREVIEW'
	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PREVIEW'
		SET @VersionId = @@IDENTITY
	END
	
	IF ISNULL(@VersionId,0) = 0 AND @RevisionState = 'PRODUCTION'
 	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PRODUCTION'
		SET @VersionId = @@IDENTITY
	END 


		DECLARE @SetLocaleId INT, @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1;
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1));
		DECLARE @TBL_ContentContainerVariantEntity TABLE
			(CMSContainerProfileVariantId INT,PortalId INT, LocaleId INT, Name NVARCHAR(100), ContainerKey NVARCHAR(100),	CMSContentContainerId INT, ProfileId INT,
				CMSContainerTemplateId INT, CreatedBy INT, CreatedDate DATETIME, ModifiedBy INT, ModifiedDate DATETIME,IsActive BIT);

		INSERT INTO @TBL_Locale (LocaleId)
		SELECT LocaleId
		FROM ZnodeLocale
		WHERE IsActive =1 --AND (LocaleId = @LocaleId OR @LocaleId = 0);

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0);

		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT TOP 1 LocaleId FROM @TBL_locale WHERE  RowId = @IncrementalId);

			;WITH Cte_CMSContainerProfileVariant AS
			(
				SELECT DISTINCT WPV.CMSContainerProfileVariantId, ZCW.ContainerKey, WPV.PortalId, --ZCW.Tags,
					CASE WHEN WPV.PortalId IS NULL THEN  'Any Store' ELSE ZP.StoreName END StoreName  ,
					CASE WHEN WPV.ProfileId IS NULL THEN  'Any User Profile' ELSE ZPR.ProfileName END ProfileName, 
					@GetDate As CreatedDate, @GetDate As ModifiedDate,
					CAST(CASE WHEN WPV.ProfileId IS NULL AND WPV.PortalId IS NULL THEN 1 ELSE 0 END AS BIT) AS IsDefaultVarient,
					CASE WHEN WPV.PortalId IS NULL THEN  'AnyStore' ELSE ZP.StoreCode END StoreCode ,
					CASE WHEN WPV.ProfileId IS NULL THEN  'AnyUserProfile' ELSE ZPR.DefaultExternalAccountNo END ProfileCode,
					CPVL.LocaleId,ZCW.Name,ZCW.CMSContentContainerId,WPV.ProfileId,CPVL.CMSContainerTemplateId,CPVL.IsActive
				FROM ZnodeCMSContentContainer ZCW
				INNER JOIN ZnodeCMSContainerProfileVariant WPV ON WPV.CMSContentContainerId = ZCW.CMSContentContainerId
				INNER JOIN ZnodeCMSContainerProfileVariantLocale CPVL ON WPV.CMSContainerProfileVariantId=CPVL.CMSContainerProfileVariantId
				LEFT JOIN ZnodePortal ZP ON (WPV.PortalId = ZP.PortalId ) 
				LEFT JOIN ZnodeProfile ZPR ON WPV.ProfileId = ZPR.ProfileId
				WHERE (CPVL.LocaleId = @SetLocaleId) -- OR CPVL.LocaleId = @DefaultLocaleId
				--AND CPVL.IsActive = 1 
				AND (ZCW.ContainerKey = @ContainerKey OR @ContainerKey = '' )
				AND ( WPV.CMSContainerProfileVariantId = @ContainerProfileVariantId OR @ContainerProfileVariantId = 0)
			)
			, Cte_GetFirstFilterData AS
			(
				SELECT CMSContainerProfileVariantId,ContainerKey,PortalId,StoreName,ProfileName,CreatedDate,ModifiedDate,IsDefaultVarient,
					StoreCode,ProfileCode,LocaleId,Name,CMSContentContainerId,ProfileId,CMSContainerTemplateId,IsActive
				FROM Cte_CMSContainerProfileVariant
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT CMSContainerProfileVariantId,ContainerKey,PortalId,StoreName,ProfileName,CreatedDate,ModifiedDate,IsDefaultVarient,
					StoreCode,ProfileCode,LocaleId,Name,CMSContentContainerId,ProfileId,CMSContainerTemplateId,IsActive
				FROM Cte_GetFirstFilterData
				UNION ALL
				SELECT CMSContainerProfileVariantId,ContainerKey,PortalId,StoreName,ProfileName,CreatedDate,ModifiedDate,IsDefaultVarient,
					StoreCode,ProfileCode,LocaleId,Name,CMSContentContainerId,ProfileId,CMSContainerTemplateId,IsActive
				FROM Cte_CMSContainerProfileVariant CTEC
				WHERE  LocaleId = @DefaultLocaleId
					AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.CMSContainerProfileVariantId = CTEC.CMSContainerProfileVariantId)
			)
			INSERT INTO @TBL_ContentContainerVariantEntity
				(CMSContainerProfileVariantId,PortalId, LocaleId, Name, ContainerKey,	CMSContentContainerId, ProfileId, CMSContainerTemplateId,
					CreatedBy, CreatedDate, ModifiedBy,	ModifiedDate,IsActive)
			SELECT CMSContainerProfileVariantId,PortalId, LocaleId, Name, ContainerKey,	CMSContentContainerId, ProfileId, CMSContainerTemplateId,
					@UserId, CreatedDate, @UserId,	ModifiedDate,IsActive
			FROM Cte_GetDefaultFilterData

			SET @IncrementalId = @IncrementalId +1;
		END 

		CREATE TABLE #ContentContainerGlobalAttribute(CMSContainerProfileVariantId INT,LocaleId INT, GlobalAttributes NVARCHAR(MAX))

		INSERT INTO #ContentContainerGlobalAttribute (CMSContainerProfileVariantId ,LocaleId , GlobalAttributes )
		EXEC [Znode_SetPublishContentContainerGlobalAttributeEntity] @ContainerKey = @ContainerKey, @ContainerProfileVariantId = @ContainerProfileVariantId
		-- Data inserted INTO flat table ZnodeBlogNewsEntity (Replica of MongoDB Collection )
		IF (@RevisionState like '%Preview%' ) 
		BEGIN
			--Data inserted INTO flat table ZnodePublishContentContainerVariantEntity (Replica of MongoDB Collection )
			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @VersionId
			AND EXISTS(SELECT * FROM @TBL_ContentContainerVariantEntity cc WHERE ZnodePublishContentContainerVariantEntity.ContainerKey = CC.ContainerKey
						AND ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)
			OR NOT EXISTS (SELECT * FROM ZnodeCMSContainerProfileVariant cc WHERE ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)

			INSERT INTO ZnodePublishContentContainerVariantEntity
			(
				VersionId,PortalId,LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CMSContainerProfileVariantId, GlobalAttributes,IsActive
			)
			SELECT @VersionId,A.PortalId,A.LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,A.CMSContainerProfileVariantId, B.GlobalAttributes,A.IsActive
			FROM @TBL_ContentContainerVariantEntity A
			LEFT JOIN #ContentContainerGlobalAttribute B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId AND A.LocaleId = B.LocaleId

			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @OldPreviewId

		END
		---------------------------- END Preview 
		IF (@RevisionState LIKE '%Production%' OR @RevisionState = 'None')
		BEGIN
			-- Only production version id will process 
			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @VersionId
			AND EXISTS(SELECT * FROM @TBL_ContentContainerVariantEntity cc WHERE ZnodePublishContentContainerVariantEntity.ContainerKey = CC.ContainerKey
					AND ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)
			OR NOT EXISTS (SELECT * FROM ZnodeCMSContainerProfileVariant cc WHERE ZnodePublishContentContainerVariantEntity.CMSContainerProfileVariantId = CC.CMSContainerProfileVariantId)

			INSERT INTO ZnodePublishContentContainerVariantEntity
			(
				VersionId,PortalId,LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,CMSContainerProfileVariantId,GlobalAttributes,IsActive
			)
			SELECT DISTINCT @VersionId,A.PortalId,A.LocaleId,Name,ContainerKey,CMSContentContainerId,ProfileId,CMSContainerTemplateId,
				CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,A.CMSContainerProfileVariantId,B.GlobalAttributes,A.IsActive
			FROM @TBL_ContentContainerVariantEntity A
			LEFT JOIN #ContentContainerGlobalAttribute B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId AND A.LocaleId = B.LocaleId

			DELETE FROM ZnodePublishContentContainerVariantEntity WHERE VersionId = @OldProductionId
		
		END

		SET @Status =1 ;
		IF (@RevisionState = 'Preview')
			UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPreview()) --, ISPublish = 1 
			FROM @TBL_ContentContainerVariantEntity A
			INNER JOIN ZnodeCMSContainerProfileVariant B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
				
		ELSE IF (@RevisionState = 'Production' Or @RevisionState = 'None' )
			UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPublish()) --, ISPublish = 1 
			FROM @TBL_ContentContainerVariantEntity A
			INNER JOIN ZnodeCMSContainerProfileVariant B ON A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
				

		SELECT 1 ID, @Status Status;
END TRY 
BEGIN CATCH
	SET @Status =0

	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
		@ErrorLine VARCHAR(100)= ERROR_LINE(),
		@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishContentContainerVariantEntity
		@ContainerKey = '+CAST(@ContainerKey AS VARCHAR	(max))
		+',@ContainerProfileVariantId = ''' + CAST(@ContainerProfileVariantId AS VARCHAR(50))
		+',@RevisionState = ''' + CAST(@RevisionState AS VARCHAR(50))
		+',@UserId = ' + CAST(@UserId AS VARCHAR(20))
		+',@Status='+CAST(@Status AS VARCHAR(10));
		SELECT 0 AS ID,@Status AS Status;
	EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_PublishContentContainerVariantEntity',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishContainerEntity')
	DROP PROC Znode_SetPublishContainerEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishContainerEntity]
(
	 @PreviewVersionId INT = 0
	,@IsPreviewEnable INT = 0
	,@ProductionVersionId INT = 0
	,@RevisionState VARCHAR(50) = 'PRODUCTION'
	,@ContainerKey NVARCHAR(100) = ''
	,@UserId INT = 0
	,@Status INT = 0 OUTPUT
)
AS
/*

	This Procedure is used to publish the Content Container and its varients publish

	EXEC  [Znode_SetPublishContainerEntity] @VersionId = 0,@PreviewVersionId=0,@IsPreviewEnable=1,@ProductionVersionId=0,
		@RevisionState='Preview',@ContainerKey='DiwaliOffer11',@UserId=2,@Status=0

				EXEC  [Znode_SetPublishContainerEntity] @PreviewVersionId=0,@IsPreviewEnable=1,@ProductionVersionId=0,
		@RevisionState='Preview',@ContainerKey='',@UserId=2,@Status=0

		EXEC  [Znode_SetPublishContainerEntity] @VersionId = 0,@PreviewVersionId=0,@IsPreviewEnable=0,@ProductionVersionId=0,
		@RevisionState='Production',@ContainerKey='',@UserId=2,@Status=0

*/
BEGIN 
BEGIN TRY 
SET NOCOUNT ON
BEGIN TRAN ContentContainer
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	DECLARE @OldPreviewId INT, @OldProductionId INT
	IF @PreviewVersionId = 0 AND @ContainerKey = '' AND @RevisionState = 'PREVIEW'
	BEGIN
		SET @OldPreviewId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PREVIEW')
			
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PREVIEW'
		SET @PreviewVersionId = @@IDENTITY

		DELETE FROM ZnodePublishContetContainerVersionEntity WHERE VersionId = @OldPreviewId 
	END
	ELSE IF @RevisionState = 'PREVIEW'
	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PREVIEW'
		WHERE NOT EXISTS (SELECT * FROM ZnodePublishContetContainerVersionEntity WHERE PublishState <> 'PREVIEW')
		
		SET @PreviewVersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PREVIEW')
	END
			
	IF @ProductionVersionId = 0 AND @ContainerKey = '' AND @RevisionState = 'PRODUCTION'
 	BEGIN
		SET @OldProductionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PRODUCTION')
			
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PRODUCTION'
		SET @ProductionVersionId = @@IDENTITY

		DELETE FROM ZnodePublishContetContainerVersionEntity WHERE VersionId = @OldProductionId 
	END 
	ELSE IF @RevisionState = 'PRODUCTION'
	BEGIN
		INSERT INTO ZnodePublishContetContainerVersionEntity(PublishStartTime,PublishState)
		SELECT @GetDate,'PRODUCTION'
		WHERE NOT EXISTS (SELECT * FROM ZnodePublishContetContainerVersionEntity WHERE PublishState <> 'PRODUCTION')

		SET @ProductionVersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState ='PRODUCTION')
	END

	
	DECLARE @TBL_ContentContainerEntity TABLE
	(
		CMSContentContainerId INT, Name NVARCHAR(100), ContainerKey NVARCHAR(100),	FamilyId INT, Tags NVARCHAR(1000),
		CreatedBy INT, CreatedDate DATETIME, ModifiedBy INT,	ModifiedDate DATETIME
	);

	INSERT INTO @TBL_ContentContainerEntity(CMSContentContainerId, Name, ContainerKey, FamilyId, Tags, CreatedDate, ModifiedDate)
	SELECT DISTINCT ZCW.CMSContentContainerId, ZCW.Name, ZCW.ContainerKey, ZCW.FamilyId, ZCW.Tags,
		@GetDate, @GetDate
	FROM ZnodeCMSContentContainer ZCW WITH (NOLOCK)
	WHERE ( ZCW.ContainerKey = @ContainerKey OR ISNULL(@ContainerKey,'') = '' )

	IF (@RevisionState LIKE '%Preview%') 
	BEGIN
		--Data inserted INTO flat table ZnodePublishContentContainerEntity 
		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @PreviewVersionId
		AND EXISTS(SELECT * FROM @TBL_ContentContainerEntity cc WHERE ZnodePublishContentContainerEntity.ContainerKey = CC.ContainerKey)

		INSERT INTO ZnodePublishContentContainerEntity
		(
			VersionId,Name,ContainerKey,FamilyId,Tags,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		)
		SELECT @PreviewVersionId,Name, ContainerKey, FamilyId, Tags, @UserId, CreatedDate, @UserId, ModifiedDate
		FROM @TBL_ContentContainerEntity A

		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @OldPreviewId

	END
	---------------------------- END Preview 
	IF (@RevisionState LIKE '%Production%' OR @RevisionState = 'None')
	BEGIN

		-- Only production version id will process 
		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @ProductionVersionId
		AND EXISTS(SELECT * FROM @TBL_ContentContainerEntity cc WHERE ZnodePublishContentContainerEntity.ContainerKey = CC.ContainerKey)
		
		INSERT INTO ZnodePublishContentContainerEntity
		(
			VersionId,Name,ContainerKey,FamilyId,Tags,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		)
		SELECT @ProductionVersionId,Name, ContainerKey, FamilyId, Tags, @UserId, CreatedDate, @UserId, ModifiedDate
		FROM @TBL_ContentContainerEntity A
				
		DELETE FROM ZnodePublishContentContainerEntity WHERE VersionId = @OldProductionId
	END

	-- Content container varient publish
	EXEC [Znode_PublishContentContainerVariantEntity] @ContainerKey = @ContainerKey,@RevisionState=@RevisionState, @UserId = @UserId,@OldPreviewId=@OldPreviewId,@OldProductionId=@OldProductionId,@Status = 0
	
	SET @Status =1 ;
	IF (@RevisionState = 'Preview')
		UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPreview()) --, ISPublish = 1 
		FROM @TBL_ContentContainerEntity A
		INNER JOIN ZnodeCMSContentContainer B ON A.CMSContentContainerId = B.CMSContentContainerId
				
	ELSE IF (@RevisionState = 'Production' Or @RevisionState = 'None' )
		UPDATE B SET PublishStateId = (SELECT dbo.Fn_GetPublishStateIdForPublish()) --, ISPublish = 1 
		FROM @TBL_ContentContainerEntity A
		INNER JOIN ZnodeCMSContentContainer B ON A.CMSContentContainerId = B.CMSContentContainerId
	
COMMIT TRAN ContentContainer
SELECT 1 ID, @Status Status;
END TRY 
BEGIN CATCH
	SET @Status =0
	ROLLBACK TRAN ContentContainer
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
	@ErrorLine VARCHAR(100)= ERROR_LINE(),
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_SetPublishContainerEntity
	@PreviewVersionId = ' + CAST(@PreviewVersionId AS VARCHAR(20))
	+',@IsPreviewEnable='+CAST(@IsPreviewEnable AS VARCHAR(10))
	+',@ProductionVersionId = ' + CAST(@ProductionVersionId AS VARCHAR(20))
	+',@RevisionState = ''' + CAST(@RevisionState AS VARCHAR(50))
	+',@UserId = ' + CAST(@UserId AS VARCHAR(20))
	+',@Status='+CAST(@Status AS VARCHAR(10));
	SELECT 0 AS ID,CAST(@Status AS BIT) AS Status;

	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName = 'Znode_SetPublishContainerEntity',
	@ErrorInProcedure = @Error_procedure,
	@ErrorMessage = @ErrorMessage,
	@ErrorLine = @ErrorLine,
	@ErrorCall = @ErrorCall;
END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_SetPublishContentContainerGlobalAttributeEntity')
	DROP PROC Znode_SetPublishContentContainerGlobalAttributeEntity
GO

CREATE PROCEDURE [dbo].[Znode_SetPublishContentContainerGlobalAttributeEntity]
(
	 @ContainerKey VARCHAR(100) = ''
	 ,@ContainerProfileVariantId INT = 0
)
AS
    
/*
exec [Znode_SetPublishContentContainerGlobalAttributeEntity] @ContainerKey = 'HomePagePromo', @ContainerProfileVariantId = 0
    Summary :	Publish Product on the basis of publish catalog
				Retrive all Product details with attributes and INSERT INTO following tables 
				1.	ZnodePublishedXml
				2.	ZnodePublishCategoryProduct
				3.	ZnodePublishProduct
				4.	ZnodePublishProductDetail

                Product details include all the type of products link, grouped, configure and bundel products (include addon) their associated products 
				collect their attributes and values into tables variables to process for publish.  
                
				Finally genrate XML for products with their attributes and inserted into ZnodePublishedXml Znode Admin process xml from sql server to mongodb
				one by one.
 */
BEGIN
	
	BEGIN TRY
		SET NOCOUNT ON;
		DECLARE @VersionId Int, @CMSContentContainerId int
		--SET @VersionId = ( SELECT TOP 1 VersionId FROM ZnodePublishContetContainerVersionEntity WHERE PublishState = @RevisionState )

		DECLARE @SetLocaleId INT, @DefaultLocaleId INT = dbo.Fn_GetDefaultLocaleId(), @MaxCount INT =0 , @IncrementalId INT = 1;
		DECLARE @TBL_Locale TABLE (LocaleId INT , RowId INT IDENTITY(1,1));

		DECLARE @V_MediaServerThumbnailPath VARCHAR(4000);
          SET @V_MediaServerThumbnailPath =
         (
             SELECT ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) 
             FROM ZnodeMediaConfiguration ZMC 
			 --INNER JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMC.MediaServerMasterId)
		     WHERE IsActive = 1 
         );
	
		DECLARE @TBL_GlobalAttributeGrouplist TABLE ([GlobalAttributeGroupId] INT , [AttributeGroupDisplayOrder] INT,Groups int )
		DECLARE @TBL_GlobalAttributelist      TABLE ([GlobalAttributeGroupId] INT , [GlobalAttributeId] INT,[AttributeDisplayOrder] int ,Attributes int )
		Declare	@EntityAttributeValueList as	table
		(
			IsInput bit, IsMedia BIT, AttributeValues int,WidgetGlobalAttributeValueId int,GlobalAttributeId int,AttributeValue nvarchar(max),
			GlobalAttributeValueId int,GlobalAttributeDefaultValueId int,AttributeDefaultValueCode nvarchar(300),
			AttributeDefaultValue nvarchar(300),MediaId int,MediaPath nvarchar(300) ,SwatchText nvarchar(300),DisplayOrder int,
			SingleAttributeValue nvarchar(max), CMSContainerProfileVariantId INT,LocaleId INT
		)
		Declare	@EntityAttributeSingleValueList as table(AttributeValues int,PortalGlobalAttributeValueId int,GlobalAttributeId int)

		Declare @LocaleId INT , @GetDate DATETIME =dbo.Fn_GetDate()

		IF @ContainerKey <> ''
		BEGIN
			Select @CMSContentContainerId= CMSContentContainerId 
			from ZnodeCMSContentContainer  
			WHERE ContainerKey = @ContainerKey
		END

		INSERT INTO @EntityAttributeValueList
		(
			IsInput, IsMedia,AttributeValues,WidgetGlobalAttributeValueId,GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,
			AttributeValue ,MediaId,MediaPath,SingleAttributeValue,CMSContainerProfileVariantId, LocaleId
		)
		Select case when zga.GroupAttributeType in('Input','TextArea')   then 1  else 0 end ,
				0, 1, aa.WidgetGlobalAttributeValueId,aa.GlobalAttributeId,aa.WidgetGlobalAttributeValueId,bb.GlobalAttributeDefaultValueId,

			case when zga.GroupAttributeType in('Input','TextArea')   then null  else  bb.AttributeValue  end AttributeValue,	  
			bb.MediaId,CASE WHEN bb.MediaPath IS NOT NULL THEN @V_MediaServerThumbnailPath+bb.MediaPath ELSE bb.MediaPath END AS MediaPath ,
			case when zga.GroupAttributeType in('Input','TextArea')   then bb.AttributeValue   else null end  SingleAttributeValue,
			aa.CMSContainerProfileVariantId, bb.LocaleId
		FROM ZnodeWidgetGlobalAttributeValue aa
		INNER JOIN ZnodeWidgetGlobalAttributeValueLocale bb ON bb.WidgetGlobalAttributeValueId = aa.WidgetGlobalAttributeValueId 
		INNER JOIN View_ZnodeGlobalAttribute zga on zga.[GlobalAttributeId]=aa.[GlobalAttributeId]
		WHERE (aa.CMSContainerProfileVariantId = @ContainerProfileVariantId OR @ContainerProfileVariantId = 0)
		AND (AA.CMSContentContainerId = @CMSContentContainerId OR ISNULL(@CMSContentContainerId,0) = 0 )
		AND bb.MediaId IS NULL 
				

		INSERT INTO @EntityAttributeValueList
		(IsInput,IsMedia,AttributeValues,WidgetGlobalAttributeValueId,GlobalAttributeId,GlobalAttributeValueId,GlobalAttributeDefaultValueId,AttributeValue ,MediaId,MediaPath,SingleAttributeValue,CMSContainerProfileVariantId,LocaleId)
		Select 1,1 ,1, aa.WidgetGlobalAttributeValueId,aa.GlobalAttributeId,aa.WidgetGlobalAttributeValueId,null GlobalAttributeDefaultValueId,
			NULL AttributeValue,	  
			NULL MediaId,null MediaPath,
			NULL SingleAttributeValue, aa.CMSContainerProfileVariantId	,bb.LocaleId
		FROM dbo.ZnodeWidgetGlobalAttributeValue aa
		INNER JOIN ZnodeWidgetGlobalAttributeValueLocale bb ON bb.WidgetGlobalAttributeValueId = aa.WidgetGlobalAttributeValueId 
		INNER JOIN View_ZnodeGlobalAttribute zga on zga.[GlobalAttributeId]=aa.[GlobalAttributeId]
		WHERE (AA.CMSContentContainerId = @CMSContentContainerId OR ISNULL(@CMSContentContainerId,0) = 0 )
		AND zga.GroupAttributeType ='Media'

		UPDATE aa
		Set SingleAttributeValue= ( Select CASE WHEN bb.MediaPath IS NOT NULL THEN @V_MediaServerThumbnailPath+bb.MediaPath ELSE bb.MediaPath END AS MediaPath FROM  ZnodeWidgetGlobalAttributeValueLocale bb 
			WHERE bb.WidgetGlobalAttributeValueId = aa.WidgetGlobalAttributeValueId AND aa.LocaleId = bb.LocaleId
			FOR XML PATH ('') )				
		FROM  @EntityAttributeValueList aa
		WHERE aa.IsMedia=1

		UPDATE aa
		Set SingleAttributeValue= replace(replace(SingleAttributeValue,'</MediaPath>',','),'<MediaPath>','')
		FROM  @EntityAttributeValueList aa
		WHERE aa.IsMedia=1

		UPDATE aa
		Set SingleAttributeValue= Substring(SingleAttributeValue,1,len(SingleAttributeValue)-1)
		FROM  @EntityAttributeValueList aa
		WHERE aa.IsMedia=1 and aa.SingleAttributeValue<>''

		UPDATE aa
		SET AttributeDefaultValueCode= h.AttributeDefaultValueCode,
			SwatchText=h.SwatchText,
			AttributeValue=g.AttributeDefaultValue,
			GlobalAttributeDefaultValueId=g.GlobalAttributeDefaultValueId,
			DisplayOrder=h.DisplayOrder
		FROM  @EntityAttributeValueList aa
		INNER JOIN dbo.ZnodeGlobalAttributeDefaultValue h ON h.GlobalAttributeDefaultValueId = aa.GlobalAttributeDefaultValueId                                       
		INNER JOIN dbo.ZnodeGlobalAttributeDefaultValueLocale g ON h.GlobalAttributeDefaultValueId = g.GlobalAttributeDefaultValueId and aa.LocaleId = g.LocaleId
          
		INSERT INTO @TBL_GlobalAttributeGrouplist
		([GlobalAttributeGroupId] , [AttributeGroupDisplayOrder],Groups )
		SELECT ss.[GlobalAttributeGroupId],ss.[AttributeGroupDisplayOrder],1
		FROM [dbo].[ZnodeGlobalGroupEntityMapper] SS
		INNER JOIN dbo.ZnodeGlobalEntity aa on ss.[GlobalEntityId]=aa.[GlobalEntityId]
		WHERE aa.EntityName='Content Containers'
		--FOR XML PATH('')

		INSERT INTO @TBL_GlobalAttributelist
		([GlobalAttributeGroupId] , [GlobalAttributeId],[AttributeDisplayOrder],Attributes )
		SELECT aa.[GlobalAttributeGroupId],aa.[GlobalAttributeId] ,aa.[AttributeDisplayOrder],1
		FROM [dbo].[ZnodeGlobalAttributeGroupMapper] aa
		INNER JOIN @TBL_GlobalAttributeGrouplist ss on ss.GlobalAttributeGroupId=aa.GlobalAttributeGroupId
			
		IF object_id('tempdb..[#GlobalAttributeGrouplist]') IS NOT NULL
			drop table tempdb..#GlobalAttributeGrouplist

		CREATE TABLE #GlobalAttributeGrouplist 
		( 
			CMSContainerProfileVariantId INT,LocaleId	int,GlobalAttributeGroupId	int	,GroupCode	varchar	(200),AttributeGroupName nvarchar(600),AttributeGroupDisplayOrder int,
			GlobalAttributeId	int	,AttributeDisplayOrder	int	,AttributeCode	nvarchar	(600),AttributeName	nvarchar	(600),IsRequired	bit	,
			AttributeTypeName	varchar	(300),AttributeTypeId	int	,SingleAttributeValue	nvarchar(max),SelectValues	nvarchar(max)
		)

		SET @LocaleId = 0 

		INSERT INTO @TBL_Locale (LocaleId) 
		SELECT LocaleId FROM ZnodeLocale WHERE IsActive =1 AND (LocaleId  = @LocaleId OR @LocaleId = 0 )

		SET @MaxCount = ISNULL((SELECT MAx(RowId) FROM @TBL_Locale),0)
		WHILE @IncrementalId <= @MaxCount
		BEGIN 
			SET @SetLocaleId = (SELECT Top 1 LocaleId FROM @TBL_locale WHERE RowId = @IncrementalId)
			;With Cte_GetCmsContentContainerData AS 
			(
			Select distinct @SetLocaleId AS LocaleId, sv.CMSContainerProfileVariantId,
				aa.[GlobalAttributeGroupId] AS 'GlobalAttributeGroupId' ,
				zgag.GroupCode	AS 'GroupCode'		 ,  
				zgagl.AttributeGroupName  AS 'AttributeGroupName'   ,
				AttributeGroupDisplayOrder 	 , 
				ss.GlobalAttributeId	 AS 'GlobalAttributeId'	 ,
				ss.[AttributeDisplayOrder] AS 'AttributeDisplayOrder'	,
				zga.AttributeCode AS 'AttributeCode'	,			
				zgal.AttributeName AS 'AttributeName'	,
				zga.IsRequired AS 'IsRequired'	,
				zga.AttributeTypeName AS 'AttributeTypeName'      ,
				zga.AttributeTypeId AS 'AttributeTypeId' 		,
				sv.SingleAttributeValue AS 'SingleAttributeValue'	,	
	   
				( Select 
				SelectValuesEntity.DisplayOrder					as DisplayOrder,
				SelectValuesEntity.GlobalAttributeDefaultValueId as GlobalAttributeDefaultValueId,
				SelectValuesEntity.AttributeValue				as [Value]	,
				SelectValuesEntity.AttributeDefaultValueCode		as Code	,
				SelectValuesEntity.SwatchText                    as SwatchText	,
				SelectValuesEntity.MediaPath		         		as [Path]	
				FROM  @EntityAttributeValueList SelectValuesEntity 
				WHERE SelectValuesEntity.WidgetGlobalAttributeValueId = sv.WidgetGlobalAttributeValueId
				and SelectValuesEntity.LocaleId = sv.LocaleId and 
				zga.GroupAttributeType ='Select'
				FOR JSON Auto, INCLUDE_NULL_VALUES    
				)  as 'SelectValues'
			FROM 
				@TBL_GlobalAttributeGrouplist aa				
				INNER JOIN @TBL_GlobalAttributelist ss on  ss.GlobalAttributeGroupId=aa.GlobalAttributeGroupId
				INNER JOIN ZnodeGlobalAttributeGroup zgag on zgag.[GlobalAttributeGroupId]=aa.[GlobalAttributeGroupId]
				INNER JOIN ZnodeGlobalAttributeGroupLocale zgagl on zgagl.GlobalAttributeGroupId=zgag.GlobalAttributeGroupId
				INNER JOIN View_ZnodeGlobalAttribute zga       on zga.[GlobalAttributeId]=ss.[GlobalAttributeId]
				INNER JOIN ZnodeGlobalAttributeLocale zgal on zga.[GlobalAttributeId]=zgal.[GlobalAttributeId]
				INNER JOIN @EntityAttributeValueList sv   on sv.[GlobalAttributeId]=ss.[GlobalAttributeId]
				WHERE zgagl.LocaleId= zgal.LocaleId and 
				(sv.LocaleId = @SetLocaleId)  
			)
	     	, Cte_GetFirstFilterData AS
			(
				SELECT CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues
				FROM Cte_GetCmsContentContainerData 
				WHERE LocaleId = @SetLocaleId
			)
			, Cte_GetDefaultFilterData AS
			(
				SELECT CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues
				FROM  Cte_GetFirstFilterData 
				UNION ALL 
				SELECT CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
						GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
						AttributeTypeId,SingleAttributeValue,SelectValues
				FROM Cte_GetCmsContentContainerData CTEC 
				WHERE LocaleId = @DefaultLocaleId 
				AND NOT EXISTS (SELECT TOP 1 1 FROM Cte_GetFirstFilterData CTEFD WHERE CTEFD.GlobalAttributeGroupId = CTEC.GlobalAttributeGroupId )
			)
			INSERT INTO #GlobalAttributeGrouplist 
			(
				CMSContainerProfileVariantId,LocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
				GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
				AttributeTypeId,SingleAttributeValue,SelectValues
			)
			SELECT DISTINCT CMSContainerProfileVariantId,@SetLocaleId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,
					GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName,IsRequired,AttributeTypeName,
					AttributeTypeId,SingleAttributeValue,SelectValues
			FROM Cte_GetDefaultFilterData
						
				SET @IncrementalId = @IncrementalId +1 
		End 
		--select * into ##GlobalAttributeGrouplist from #GlobalAttributeGrouplist
	--select distinct CMSContainerProfileVariantId,GlobalAttributeGroupId,GroupCode,AttributeGroupName,AttributeGroupDisplayOrder,LocaleId 
	--into #GroupMaster from #GlobalAttributeGrouplist
	
	--If (@RevisionState like '%Preview%'  OR @RevisionState like '%Production%'  ) 
	--Begin
	--    --Data inserted into flat table ZnodePublishWidgetSliderBannerEntity (Replica of MongoDB Collection )  

	--	Delete from ZnodePublishContentContainerVariantEntity WHERE  VersionId = @VersionId
	 		 

	--	INSERT INTO ZnodePublishPortalGlobalAttributeEntity
	--	(
	--		VersionId,PublishStartTime,PortalId,PortalName,LocaleId,GlobalAttributeGroups
	--	)
	  	
			--Select Distinct PV.CMSContainerProfileVariantId,PV.LocaleId,  (Select 
			--A.GlobalAttributeGroupId AS 'GlobalAttributeGroupId',
			--A.GroupCode AS 'GroupCode',
			--A.AttributeGroupName AS 'AttributeGroupName',
			--A.AttributeGroupDisplayOrder AS 'AttributeGroupDisplayOrder',
			--A.LocaleId AS 'LocaleId', 
			--(
			--	Select DISTINCT GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
			--	AttributeTypeName,AttributeTypeId,SingleAttributeValue,SelectValues 
			--	from #GlobalAttributeGrouplist B WHERE A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
			--	AND A.LocaleId = B.LocaleId AND A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
			--	For JSON Path 
			--) AS 'GlobalAttributes'
			--from #GlobalAttributeGrouplist A WHERE A.CMSContainerProfileVariantId = PV.CMSContainerProfileVariantId AND A.LocaleId = PV.LocaleId For Json Path) GlobalAttributes
			--FROM  #GlobalAttributeGrouplist  PV 

			SELECT DISTINCT A.CMSContainerProfileVariantId,A.LocaleId,  
			REPLACE((
				SELECT DISTINCT GlobalAttributeGroupId, GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
				AttributeTypeName,AttributeTypeId,SingleAttributeValue As AttributeValue,SelectValues 
				FROM #GlobalAttributeGrouplist B
				WHERE A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
				AND A.LocaleId = B.LocaleId AND A.CMSContainerProfileVariantId = B.CMSContainerProfileVariantId
				--AND GlobalAttributeId=32 and A.GlobalAttributeGroupId=23
				For JSON Path 
			),'\','') AS 'GlobalAttributes'
			FROM #GlobalAttributeGrouplist  A
	--End
	---------------------------- End Preview 
	--If (@RevisionState like '%Production%' OR @RevisionState = 'None')
	--Begin
	--	-- Only production version id will process 
	--	Delete from ZnodePublishPortalGlobalAttributeEntity WHERE  VersionId in (Select ProductionVersionId from @Tbl_ProductionVersionId)
	--	AND PortalId = @PortalId
	 		 

	--	INSERT INTO ZnodePublishPortalGlobalAttributeEntity
	--	(
	--		VersionId,PublishStartTime,PortalId,PortalName,LocaleId,GlobalAttributeGroups
	--	)
			  	
	--		Select Distinct PV.ProductionVersionId, @GetDate,  @PortalId,@StoreName, PV.LocaleId, (Select 
	--		A.GlobalAttributeGroupId AS 'GlobalAttributeGroupId',
	--		A.GroupCode AS 'GroupCode',
	--		A.AttributeGroupName AS 'AttributeGroupName',
	--		A.AttributeGroupDisplayOrder AS 'AttributeGroupDisplayOrder',
	--		A.LocaleId AS 'LocaleId', 
	--		(
	--			Select GlobalAttributeId,AttributeDisplayOrder,AttributeCode,AttributeName ,IsRequired ,	
	--			AttributeTypeName,AttributeTypeId,SingleAttributeValue,SelectValues 
	--			from #GlobalAttributeGrouplist B WHERE A.GlobalAttributeGroupId = B.GlobalAttributeGroupId 
	--			AND A.LocaleId = B.LocaleId
	--			For JSON Path 
	--		) AS 'GlobalAttributes'
	--		from #GroupMaster A  WHERE A.LocaleId = PV.LocaleId  For Json Path) 
	--		FROM  @Tbl_ProductionVersionId  PV 

	--End

END TRY
BEGIN CATCH
	SELECT ERROR_MESSAGE(), ERROR_PROCEDURE();

END CATCH;
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetCMSContainerProfileVariantlist')
	DROP PROC Znode_GetCMSContainerProfileVariantlist
GO

CREATE PROCEDURE [dbo].[Znode_GetCMSContainerProfileVariantlist]  
(  
 @WhereClause NVARCHAR(MAX)  
 ,@ContainerKey NVARCHAR(MAX)  
 ,@Rows INT = 100     
 ,@PageNo INT = 1     
 ,@Order_BY VARCHAR(1000) = ''  
 ,@RowsCount INT OUT  
)  
AS  
-- EXEC Znode_GetCMSContainerProfileVariantlist '','',0,0,'',0  
BEGIN    
BEGIN TRY   
SET NOCOUNT ON  
 DECLARE @SQL NVARCHAR(MAX)  
 IF OBJECT_ID('tempdb..#TBL_ContentContainer') IS NOT NULL  
  DROP TABLE #TBL_ContentContainer;  
  
 IF OBJECT_ID('tempdb..#Cte_ContentContainerVarient') IS NOT NULL  
  DROP TABLE #Cte_ContentContainerVarient;  
  
 IF OBJECT_ID('tempdb..#Users') IS NOT NULL  
  DROP TABLE #Users;  
  
 CREATE TABLE #TBL_ContentContainer (CMSContainerProfileVariantId INT, ContainerKey NVARCHAR(MAX), PortalId INT, StoreName NVARCHAR(MAX), ProfileName NVARCHAR(200),CreatedByName VARCHAR(500), CreatedDate DATETIME, ModifiedByName VARCHAR(500),  
  ModifiedDate DATETIME, IsDefaultVarient BIT,StoreCode VARCHAR(200),ProfileCode Varchar(200),RowId INT,CountNo INT,IsActive BIT,PublishStatus VARCHAR(32))    
   
 SELECT CAST(UserName AS NVARCHAR(500)) AS UserName , ZU.UserId  
 INTO #Users  
 FROM ZnodeUser ZU WITH (NOLOCK)  
 WHERE EXISTS( SELECT * FROM ZnodeCMSContainerProfileVariant CWPV WHERE ZU.UserId = CWPV.CreatedBy )  
 UNION  
 SELECT UserName, ZU.UserId  
 FROM ZnodeUser ZU  
 WHERE EXISTS( SELECT * FROM ZnodeCMSContainerProfileVariant CWPV WHERE ZU.UserId = CWPV.ModifiedBy ) 
 
 SELECT DISTINCT WPV.CMSContainerProfileVariantId, ZCW.ContainerKey, WPV.PortalId, --ZCW.Tags,  
  CASE WHEN WPV.PortalId IS NULL THEN  'Any Store' ELSE ZP.StoreName END StoreName  ,  
  CASE WHEN WPV.ProfileId IS NULL THEN  'Any User Profile' ELSE ZPr.ProfileName END ProfileName,   
  U.UserName AS CreatedByName, WPV.CreatedDate, ISNULL(U1.UserName,U.UserName) AS ModifiedByName, WPV.ModifiedDate,  
  CAST(CASE WHEN WPV.ProfileId IS NULL AND WPV.PortalId IS NULL THEN 1 ELSE 0 END AS BIT) AS IsDefaultVarient,  
  CASE WHEN WPV.PortalId IS NULL THEN  'AnyStore' ELSE ZP.StoreCode END StoreCode ,  
  CASE WHEN WPV.ProfileId IS NULL THEN  'AnyUserProfile' ELSE ZPr.DefaultExternalAccountNo END ProfileCode,  
  CPVL.IsActive As Status,ZPS.DisplayName As PublishStatus  
 INTO #Cte_ContentContainerVarient  
 FROM ZnodeCMSContentContainer ZCW   
 INNER JOIN ZnodeCMSContainerProfileVariant WPV ON WPV.CMSContentContainerId = ZCW.CMSContentContainerId  
 LEFT JOIN ZnodeCMSContainerProfileVariantLocale CPVL ON WPV.CMSContainerProfileVariantId=CPVL.CMSContainerProfileVariantId  
 LEFT JOIN ZnodePublishState ZPS ON WPV.PublishStateId=ZPS.PublishStateId  
 LEFT JOIN ZnodePortal ZP ON (WPV.PortalId = ZP.PortalId )   
 LEFT JOIN ZnodeProfile ZPr ON WPV.ProfileId = ZPr.ProfileId  
 LEFT JOIN #Users U ON WPV.CreatedBy = U.UserId  
 LEFT JOIN #Users U1 ON WPV.ModifiedBy = U1.UserId  
 WHERE ZCW.ContainerKey = @ContainerKey
SET @SQL = '     
 ;With Cte_ContentContainerVarientList AS  
 (  
  SELECT CMSContainerProfileVariantId, ContainerKey, PortalId, StoreName, ProfileName,CreatedByName, CreatedDate, ModifiedByName, ModifiedDate, IsDefaultVarient,StoreCode,ProfileCode,  
  '+dbo.Fn_GetPagingRowId(@Order_BY,'IsDefaultVarient ASC,CMSContainerProfileVariantId DESC')+',Count(*)Over() CountNo,Status,PublishStatus  
  FROM #Cte_ContentContainerVarient  
  WHERE 1=1 '+dbo.Fn_GetFilterWhereClause(@WhereClause)+'  
 ) 
INSERT INTO #TBL_ContentContainer   
 SELECT *   
 FROM Cte_ContentContainerVarientList  
  
 SELECT CMSContainerProfileVariantId as ContainerProfileVariantId, ContainerKey, PortalId, StoreName, ProfileName,CreatedByName, CreatedDate, ModifiedByName, ModifiedDate, IsDefaultVarient ,StoreCode,ProfileCode,IsActive,PublishStatus  
 FROM #TBL_ContentContainer     
 '+dbo.Fn_GetPaginationWhereClause(@PageNo,@Rows) +'  
  ORDER BY RowId'  
  
 EXEC (@SQL)  
 SET @RowsCount = ISNULL((SELECT TOP 1 CountNo FROM #TBL_ContentContainer ),0)    
  
END TRY  
BEGIN CATCH  
 DECLARE @Status BIT ;  
 SET @Status = 0;  
 DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)=   
 ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)=   
 'EXEC Znode_GetCMSContainerProfileVariantlist @WhereClause = '+CAST(@WhereClause AS VARCHAR(max))+',  
 @Rows='+CAST(@Rows AS VARCHAR(50))+',@PageNo='+CAST(@PageNo AS VARCHAR(50))+',@Order_BY='+@Order_BY+',  
 @RowsCount='+CAST(@RowsCount AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
  
 SELECT 0 AS ID,CAST(0 AS BIT) AS Status;     
  
 EXEC Znode_InsertProcedureErrorLog  
 @ProcedureName = 'Znode_GetCMSContainerProfileVariantlist',  
 @ErrorInProcedure = @Error_procedure,  
 @ErrorMessage = @ErrorMessage,  
 @ErrorLine = @ErrorLine,  
 @ErrorCall = @ErrorCall;  
END CATCH;   
END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetProductInfoForWebStore')
	DROP PROC Znode_GetProductInfoForWebStore
GO

CREATE PROCEDURE [dbo].[Znode_GetProductInfoForWebStore]
(   
	@PortalId         INT,
    @LocaleId         INT,
	@UserId			  INT = 2,
	@currentUtcDate    VARCHAR(200) = '',
	@ProductDetailsFromWebStore   DBO.ProductDetailsFromWebStore READONLY,
	@IsAllLocation bit =0)
AS 
     BEGIN
         BEGIN TRY
             SET NOCOUNT ON;
			 
			 DECLARE @Tlb_SKU TABLE (SKU VARCHAR(100))
			 DECLARE @PublishProductIds  NVARCHAR(max) ,@SKU NVARCHAR(max) 

			 DECLARE @Fn_GetDefaultLocaleId int = Dbo.Fn_GetDefaultLocaleId()
				
			 DECLARE @TBL_PricebyCatalogforAssociateProduct TABLE (PimProductId int ,AssociatedProductId int,ParentSKU NVARCHAR(300),
				ChildSKU NVARCHAR(300),RetailPrice  numeric(28,6),AssociatedProductDisplayOrder int ,
				TypeOfProduct nvarchar(100),SalesPrice  numeric(28,6))
		     DECLARE @tbl_PricingSkuOfAssociatedProduct TABLE (sku nvarchar(200),RetailPrice numeric(28,6),SalesPrice numeric(28,6),TierPrice numeric(28,6),
				TierQuantity numeric(28,6),CurrencyCode varchar(200),CurrencySuffix varchar(2000), ExternalId NVARCHAR(2000))				
		

			--Create TABLE #Tlb_PromotionProductData 
   --          (
			--	  PromotionId      INT,
			--	  PromotionType	   INT, 
			--	  ExpirationDate   Datetime, 
			--	  ActivationDate   Datetime,
			--	  PublishProductId INT,
			--	  PromotionMessage Nvarchar(max)  
   --          );
			 Create TABLE #Tbl_PriceListWisePrice 
             (
				  SKU            VARCHAR(300),
				  RetailPrice    NUMERIC(28, 6),
				  SalesPrice     NUMERIC(28, 6),
				  TierPrice      NUMERIC(28, 6),
				  TierQuantity   NUMERIC(28, 6),
				  CurrencyCode   Varchar(100),
				  CurrencySuffix Varchar(1000),
				  CultureCode      VARCHAr(1000),
				  ExternalId NVARCHAR(2000),
				  Custom1        NVARCHAR(MAX),
				  Custom2        NVARCHAR(MAX),
				  Custom3        NVARCHAR(MAX)
             );

			 CREATE TABLE #Tlb_ProductData 
             (
				  PublishProductId INT,
				  SKU              NVARCHAR(100),
				  SEOTitle         NVARCHAR(200),
				  SEODescription   NVARCHAR(MAX),
				  SEOKeywords      NVARCHAR(MAX),
				  SEOUrl           NVARCHAR(MAX),
				  Rating           Numeric(28,6),
				  TotalReviews     INT,
				  RetailPrice      NUMERIC(28, 6),
				  SalesPrice       NUMERIC(28, 6),
				  TierPrice        NUMERIC(28, 6),
				  TierQuantity     NUMERIC(28, 6),
				  CurrencyCode     Varchar(100),
				  CurrencySuffix   Varchar(1000),
				
				  ExternalId       NVARCHAR(2000),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  Custom1        NVARCHAR(MAX),
				  Custom2        NVARCHAR(MAX),
				  Custom3        NVARCHAR(MAX),
				  CanonicalURL VARCHAR(200),   
				  RobotTag VARCHAR(50)
			   );


			 Create TABLE #Tbl_Inventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel     NUMERIC(28, 6),
				  PortalId      int,
				  WarehouseName	varchar(100),
			      WarehouseCode	varchar(100),
			      DefaultInventoryCount varchar(1000),
				
             );
			 
			 Create TABLE #Tbl_WarehouseWiseInventory
             (
				  SKU            VARCHAR(300),
				  Quantity    NUMERIC(28, 6),
				  ReOrderLevel NUMERIC(28, 6),
				  PortalId      int,
				  WarehouseCode VARCHAR(100),
				  WarehouseName VARCHAR(100),
				  IsDefaultWarehouse BIT

             );

            INSERT INTO #Tlb_ProductData (PublishProductId,SKU)
            SELECT id,SKU FROM @ProductDetailsFromWebStore
			  		
			SELECT @SKU = Substring((SELECT ',' + SKU FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 

			SELECT @PublishProductIds = Substring((SELECT ',' + CONVERT(NVARCHAR(100),id ) FROM @ProductDetailsFromWebStore FOR XML PAth('')),2,4000) 
			
			--INSERT INTO  #Tlb_PromotionProductData(PromotionId,PromotionType, ExpirationDate,  ActivationDate, PublishProductId,PromotionMessage)
			--Exec [Znode_GetPromotionByPublishProductId] @PublishProductIds = @PublishProductIds ,@UserId  = @UserId	,@PortalId  = @PortalId  
			 
			INSERT INTO #Tbl_PriceListWisePrice( SKU, RetailPrice,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix,CultureCode,ExternalId,Custom1,Custom2,Custom3)
			EXEC Znode_GetPublishProductPricingBySku @SKU = @SKU ,@PortalId = @PortalId ,@currentUtcDate = @currentUtcDate,@UserId = @UserId 

			IF @IsAllLocation=1
			BEGIN 
				Insert into #Tbl_WarehouseWiseInventory(SKU,	Quantity,ReOrderLevel,PortalId,	WarehouseCode,	WarehouseName,	IsDefaultWarehouse)
				EXEC Znode_GetWarehouseInventoryBySkus  @SKUs=@SKU,@PortalId=@PortalId
			END

			insert into #Tbl_Inventory (SKU,	Quantity,	ReOrderLevel,	PortalId, WarehouseName, WarehouseCode, DefaultInventoryCount)
			EXEC Znode_GetInventoryBySkus @SKUs=@SKU,@PortalId=@PortalId
			
			--Price logic for Associate products
			----INSERT INTO @TBL_PricebyCatalogforAssociateProduct(AssociatedProductId,ChildSKU,ParentSKU,PimProductId,RetailPrice,SalesPrice,TypeOfProduct)
			----SELECT cl.Item, NULL , PR.SKU, PR.ID, null, null , PR.[ProductType]  FROM @ProductDetailsFromWebStore PR
			----Cross Apply dbo.split (AssociateProducts, ',') CL 

			----UPDATE PDI SET PDI.ChildSKU = ZPPD.SKU 
			----from @TBL_PricebyCatalogforAssociateProduct PDI inner join
			----ZnodePublishProductDetail ZPPD On PDI.AssociatedProductId = ZPPD.PublishProductId
			
			----SELECT @SKU = Substring((SELECT ',' + Convert(nvarchar(100),AssociatedProductId) 
			----FROM @TBL_PricebyCatalogforAssociateProduct where AssociatedProductId is not null FOR XML PAth('')),2,4000) 

			----INSERT INTO @tbl_PricingSkuOfAssociatedProduct (SKU,RetailPrice ,SalesPrice,TierPrice,TierQuantity,CurrencyCode,CurrencySuffix, ExternalId)	
			----EXEC Znode_GetPublishProductPricingBySku  @Sku ,@portalID  ,@currentUtcDate,@UserId 

			----update PLC SET PLC.RetailPrice = PLCA.RetailPrice ,
			----PLC.SalesPrice = PLCA.SalesPrice 
			----from @TBL_PricebyCatalogforAssociateProduct PLC inner join @tbl_PricingSkuOfAssociatedProduct
			----PLCA on PLC.ChildSKU = PLCA.sku
			
			----Update PBC SET PBC.RetailPrice = 
			----	(Select TOP 1 Isnull(RetailPrice ,SalesPrice) from @TBL_PricebyCatalogforAssociateProduct PCBA  where PCBA.ParentSKU =PBC.SKU
			----		and PCBA.ParentSKU is not null and PCBA.ChildSKU is not null
			----	Order by AssociatedProductDisplayOrder)
			----	from #Tbl_PriceListWisePrice  PBC  where 
			----	Exists (Select TOP 1 1  from @TBL_PricebyCatalogforAssociateProduct PCBA
			----	where PCBA.ParentSKU =PBC.SKU and PCBA.TypeOfProduct = 'ConfigurableProduct')
			----	and PBC.RetailPrice IS null 

			Update PD SET 
			 PD.SKU             = PLWP.SKU            
			,PD.RetailPrice     = PLWP.RetailPrice     
			,PD.SalesPrice      = PLWP.SalesPrice      
			,PD.TierPrice       = PLWP.TierPrice       
			,PD.TierQuantity    = PLWP.TierQuantity    
			,PD.CurrencyCode    = PLWP.CurrencyCode    
			,PD.CurrencySuffix  = PLWP.CurrencySuffix  
			,PD.ExternalId 	    = PLWP.ExternalId
			,PD.Custom1			= PLWP.Custom1
			,PD.Custom2			= PLWP.Custom2
			,PD.Custom3			= PLWP.Custom3
			FROM #Tlb_ProductData PD Inner join #Tbl_PriceListWisePrice PLWP on 
			PD.SKU = PLWP.SKU

			Update PD SET 
			 PD.Quantity = TLI.Quantity,
			 PD.ReOrderLevel= TLI.ReOrderLevel
			 FROM #Tlb_ProductData PD Inner join #Tbl_Inventory TLI on 
			PD.SKU = TLI.SKU

			 

			----Update PD SET 
			----	  PD.PromotionId      =PLWP.PromotionId,
			----	  PD.PromotionType	  =PLWP.PromotionType, 
			----	  PD.ExpirationDate   =PLWP.ExpirationDate, 
			----	  PD.ActivationDate   =PLWP.ActivationDate,
			----	  PD.PublishProductId =PLWP.PublishProductId,
			----	  PD.PromotionMessage  =PLWP.PromotionMessage   
			----from #Tlb_ProductData PD Inner join #Tlb_PromotionProductData PLWP on 
			----PD.PublishProductId = PLWP.PublishProductId


			 DECLARE @Tlb_CustomerAverageRatings TABLE
             (PublishProductId INT,
              Rating           NUMERIC(28,6),
              TotalReviews     INT
             ); 
             -- Calculate Average rating 
             INSERT INTO @Tlb_CustomerAverageRatings(PublishProductId,Rating,TotalReviews)
             SELECT CCR.PublishProductId,SUM(CAST(CCR.Rating AS NUMERIC(28,6)) )/ COUNT(CCR.PublishProductId),COUNT(CCR.PublishProductId) 
			 FROM ZnodeCMSCustomerReview AS CCR
             INNER JOIN #Tlb_ProductData AS PD ON CCR.PublishProductId = PD.PublishProductId AND CCR.Status = 'A' 
			 AND  (CCR.PortalId  = @PortalId OR @PortalId = 0 )
			 GROUP BY CCR.PublishProductId    ;

             UPDATE PD SET PD.Rating = CAR.Rating,PD.TotalReviews = CAR.TotalReviews 
			 FROM @Tlb_CustomerAverageRatings CAR
             INNER JOIN #Tlb_ProductData PD ON CAR.PublishProductId = PD.PublishProductId;

             UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl,
			               PD.CanonicalURL = ZCSDL.CanonicalURL, PD.RobotTag = ZCSDL.RobotTag
			 FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
             LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
             INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 WHERE ZCSO.PortalId = @PortalId
             
			 --UPDATE PD SET PD.SEOTitle = ZCSDL.SEOTitle,PD.SEODescription = ZCSDL.SEODescription,PD.SEOKeywords = ZCSDL.SEOKeywords,PD.SEOUrl = ZCSO.SEOUrl 
			 --FROM #Tlb_ProductData PD
    --         INNER JOIN ZnodeCMSSEODetail ZCSO ON PD.SKU = ZCSO.SEOCode
    --         LEFT JOIN ZnodeCMSSEODetailLocale ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSO.CMSSEODetailId AND ZCSDL.LocaleId = @LocaleId)
    --         INNER JOIN ZnodeCMSSEOType ZCOT ON ZCOT.CMSSEOTypeId = ZCSO.CMSSEOTypeId AND ZCOT.Name = 'Product'
			 --WHERE ZCSO.PortalId = @PortalId

             UPDATE PD SET PD.SEOTitle = ZCPS.ProductTitle,PD.SEODescription = ZCPS.ProductDescription,PD.SEOKeywords = ZCPS.ProductKeyword FROM #Tlb_ProductData PD
             INNER JOIN ZnodeCMSPortalSEOSetting ZCPS ON ZCPS.PortalId = @PortalId WHERE PD.SEOTitle IS NULL AND PD.SEODescription IS NULL AND PD.SEOKeywords IS NULL AND PD.SEOUrl IS NULL
			  --AND ZCSO.PortalId = @PortalId

			 
			 -- ;With Cte_Catalogdaata AS 
			 --(
			   SELECT  a.PublishCatalogId ,Max(PublishCatalogLogId) PublishCatalogLogId
			   into #Cte_Catalogdaata
			   FROM ZnodePortalCatalog a 
			   INNER JOIN ZnodePublishCatalogLog b ON (b.PublishCatalogId = a.PublishCatalogId )
			   WHERE a.PortalId = @PortalId
			   GROUP BY a.PublishCatalogId 
	 
			 --)
			 SELECT Row_Number()Over( PARTITION BY  BTY.SKU ORDER BY ZPAP.DisplayOrder, ZPAP.PublishAssociatedProductId) RowId ,
					BTY.SKU ParentSKU, BTY1.SKU --, UI.Quantity, UI.ReOrderLevel ,UI.WarehouseId
			 INTO #TempPublishData
			 FROM ZnodePublishProduct CTR 
			 INNER JOIN ZnodePublishProductDetail BTY ON (BTY.PublishProductId = CTR.PublishProductId)
			 INNER JOIN ZnodePublishAssociatedProduct ZPAP ON (ZPAP.ParentPimProductId = CTR.PimProductId)	
			 INNER JOIN ZnodePublishProduct CTR1 ON (ZPAP.PimProductId = CTR1.PimProductId)
			 INNER JOIN ZnodePublishProductDetail BTY1 ON (BTY1.PublishProductId = CTR1.PublishProductId)
			 --LEFT JOIN ZnodeInventory UI ON (UI.SKU = BTY1.SKU)
			 WHERE ZPAP.IsConfigurable = 1  
			 AND EXISTS (SELECT TOP 1 1 FROM #Cte_Catalogdaata TY WHERE TY.PublishCatalogId = CTR.PublishCatalogId )-- AND TY.PublishCatalogLogId =ZPXML.PublishCatalogLogId)
			 AND EXISTS (SELECT TOP 1 1 FROM #Tlb_ProductData TU WHERE TU.SKU = BTY.SKU)
			 AND BTY.LocaleId = @Fn_GetDefaultLocaleId
			 AND BTY1.LocaleId = @Fn_GetDefaultLocaleId

			 alter table #TempPublishData add Quantity numeric(28,6), ReOrderLevel numeric(28,6), WarehouseId int

			 update TPD set Quantity = UI.Quantity ,  ReOrderLevel = UI.ReOrderLevel , WarehouseId = UI.WarehouseId
			 from #TempPublishData TPD
			 inner join ZnodeInventory UI ON (UI.SKU = TPD.SKU)

			DELETE FROM #TempPublishData WHERE RowId <> 1
			IF @IsAllLocation=1
			BEGIN 
				SELECT A.PublishProductId,a.SKU,a.SEOTitle,a.SEODescription,a.SEOKeywords,a.SEOUrl,a.Rating,a.TotalReviews ,  
				a.RetailPrice,a.SalesPrice,a.TierPrice, a.TierQuantity,a.CurrencyCode,a.CurrencySuffix,a.ExternalId, 
				CASE WHEN TYI.ParentSKU IS NULL AND ZPCPA.PimProductId IS NULL THEN  b.Quantity ELSE ISNULL(TYI.Quantity,0) END as Quantity , 
				CASE WHEN TYI.ParentSKU IS NULL THEN  b.ReOrderLevel ELSE TYI.ReOrderLevel END ReOrderLevel, a.CanonicalURL, a.RobotTag,
				INV.Quantity AllLocationQuantity,
				b.WarehouseCode,b.WarehouseName,ISNULL(b.IsDefaultWarehouse,0) AS IsDefaultWarehouse, INV.DefaultInventoryCount
				FROM #Tlb_ProductData a
				LEFT JOIN #TempPublishData TYI ON (TYI.ParentSKU = a.SKU AND  TYI.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId))
				LEFT JOIN  #Tbl_WarehouseWiseInventory   b ON b.SKU  = a.SKU   
				LEFT JOIN ZnodePublishProduct ZPP on a.PublishProductId = ZPP.PublishProductId 
				LEFT join ZnodePimConfigureProductAttribute ZPCPA on ZPP.PimProductId = ZPCPA.PimProductId
				LEFT JOIN #Tbl_Inventory INV ON b.SKU = INV.SKU
			END
			ELSE 
			Begin 
			declare @wid int;
			SELECT  @wid=WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId
			 SELECT A.PublishProductId,a.SKU,a.SEOTitle,a.SEODescription,a.SEOKeywords,a.SEOUrl,a.Rating,a.TotalReviews ,  
					a.RetailPrice,a.SalesPrice,a.TierPrice, a.TierQuantity,a.CurrencyCode,a.CurrencySuffix,a.ExternalId, 
					CASE WHEN TYI.ParentSKU IS NULL AND ZPCPA.PimProductId IS NULL THEN  ISNULL(ISNULL(b.Quantity,a.Quantity),0) ELSE ISNULL(TYI.Quantity,0) END as Quantity , 
			 CASE WHEN TYI.ParentSKU IS NULL THEN  b.ReOrderLevel ELSE TYI.ReOrderLevel END ReOrderLevel, a.CanonicalURL, a.RobotTag,
			 ISNULL(ISNULL(b.Quantity,a.Quantity),0) AllLocationQuantity
			 FROM #Tlb_ProductData a
			 LEFT JOIN #TempPublishData TYI ON (TYI.ParentSKU = a.SKU AND  TYI.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId))
			 LEFT JOIN ZnodeInventory b ON (b.SKU  = a.SKU  AND  b.WarehouseId  IN (SELECT  WarehouseId FROM ZnodePortalWarehouse WHERE PortalId = @PortalId)) 
			 LEFT JOIN ZnodePimProduct ZPP on a.PublishProductId = ZPP.PimProductId 
			 LEFT join ZnodePimConfigureProductAttribute ZPCPA on ZPP.PimProductId = ZPCPA.PimProductId
			 LEFT JOIN #Tbl_Inventory INV ON b.SKU = INV.SKU
			
			 END
	
		
         END TRY
         BEGIN CATCH
		
              DECLARE @Status BIT ;
		     SET @Status = 0;
		     DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
			 @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
			  @ErrorLine VARCHAR(100)= ERROR_LINE(),
			   @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductInfoForWebStore @PortalId='+CAST(@PortalId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50));
              			 
             SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		  
             EXEC Znode_InsertProcedureErrorLog
				@ProcedureName = 'Znode_GetProductInfoForWebStore',
				@ErrorInProcedure = @Error_procedure,
				@ErrorMessage = @ErrorMessage,
				@ErrorLine = @ErrorLine,
				@ErrorCall = @ErrorCall;
         END CATCH;
     END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PublishCatalogEntity')
	DROP PROC Znode_PublishCatalogEntity
GO

CREATE PROCEDURE [dbo].[Znode_PublishCatalogEntity]  
(  
	@PimCatalogId  INT = 0   
	,@RevisionState VARCHAR(50) = ''   
	,@UserId INT = 0  
	,@NewGUID NVARCHAR(500)   
	,@IsDraftProductsOnly BIT = 1  
	,@PimProductId  INT = 0  
	,@PimCategoryHierarchyId INT = 0 
)  
AS  
/*  
To publish all catalog product and their details  
Unit Testing :   
Exec [dbo].[Znode_PublishCatalogEntity]  
@PimCatalogId  = 5  
,@RevisionState = 'PRODUCTION'   
,@UserId = 2  
,@NewGUID = '123'  
   
EXEC Znode_DeletePublishCatalogEntity @PublishCatalogId = 3,@UserId = 2 , @IsRevertPublish = 0 ,  
@NewGUID ='123'   
  
*/  
BEGIN  
BEGIN TRY   
	SET NOCOUNT ON  

	
	DECLARE @Tbl_versions  TABLE (RevisionState VARCHAr(300))
	DECLARE @DefaultLocaleId Int = dbo.fn_getDefaultLocaleId() , @messagestring varchar(300) =''  ,@PublishType varchar(2000)= 'Catalog'
			,@Getdate DATETIME = dbo.fn_getdate(), @CultureCode varchar(200) = '', @CurrencySuffix varchar(200) = '',@CurrencyCode varchar(200) = ''
			,@CatalogName VARCHAR(600), @IsAllowIndexing bit ,@Status bit, @email nvarchar(200) = (SELECT TOP 1 Username FROM znodeUSer WHERE UserId = @UserId) 
	DECLARE @Versions_new TABLE (VersionId int , LocaleId int , PublishStateId int, RevisionState VARCHAR(100) )
	DECLARE @Versions_working TABLE (VersionId int , LocaleId int , PublishStateId int, RevisionState VARCHAR(100) )
	CREATE TABLE  #PimProduct_catalog  (PimProductId int , ParentPimProductId INT, PimCategoryId INT , PimCategoryHierarchyId INT 
			,ParentPimCategoryHierarchyId INT ,DisplayOrder INT  ,IsActive INT,ActivationDate DATETIME , ExpirationDate DATETIME  ,IsDefault bit,PimAddonGroupId INT 
			, BundleQuantity int , IsAssocitedProduct bit   )
    DECLARE @inserted_pimIds TABLE (PimProductId INT )

	SET @messagestring = CASE WHEN @PimProductId > 0  THEN ' Product-'+(SELECT TOP 1 SKU FROM ZnodePimProduct WIth (Nolock) WHERE PimProductId = @PimProductId )+' ' ELSE '' END 

	SELECT TOp 1 @CatalogName= CatalogName,  @IsAllowIndexing= ISNULL(IsAllowIndexing,0)
	FROM ZnodePimCatalog with(nolock)  WHERE PimCatalogId = @PimCatalogId   
	
	SELECT TOp 1  @CurrencyCode = FeatureValues
	FROM ZnodeGlobalSetting a 
	WHERE FeatureName='Currency'

	SELECT TOp 1  @CultureCode = FeatureValues
	FROM ZnodeGlobalSetting a 
	WHERE FeatureName='Culture'

	SELECT TOP 1 @CurrencySuffix = Symbol
	FROM ZnodeCulture
	WHERE CultureCode = @CultureCode

	INSERT INTO ZnodePublishProgressNotifierEntity (VersionId,JobId,JobName,ProgressMark,IsCompleted,IsFailed,ExceptionMessage,StartedBy,StartedByFriendlyName)
	SELECT 0 , @NewGUID, 'Catalog-'+@CatalogName+'-Publish Started ', 10 , 0 , 0 , '',@UserId ,  @email

	INSERT INTO @Tbl_versions 
	SELECT 'PREVIEW'
	WHERE EXISTS (SELECT TOP 1 1 FROM ZnodePublishStateApplicationTypeMapping with(nolock) WHERE ApplicationType = 'WebstorePreview' AND IsActive =1 AND IsEnabled = 1 )
	UNION ALL 
	SELECT 'PRODUCTION'
	WHERE @RevisionState = 'Production' OR  @RevisionState = 'None'
	
    SET @PublishType = CASE WHEN @PimProductId > 0 THEN 'Product'
	  WHEN @PimCategoryHierarchyId > 0 THEN 'Category'
	ELSE 'Catalog' END 

	INSERT INTO ZnodePublishCatalogLog(PublishCatalogId,PimCatalogId,IsCatalogPublished,PublishCategoryId,  
			IsCategoryPublished,PublishProductId,  
			IsProductPublished,UserId,LogDateTime,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Token,LocaleId,PublishStateId,PublishType)  
	OUTPUT inserted.PublishCatalogLogId , inserted.LocaleId, inserted.PublishStateId, inserted.Token INTO @Versions_new
	SELECT DISTINCT @PimCatalogId,  @PimCatalogId,NULL,0,  NULL,@PimProductId,  NULL,@UserId, @Getdate, @UserId, @Getdate, @UserId ,@Getdate,  r.RevisionState
				,a.LocaleId ,DBO.Fn_GetPublishStateIdForProcessing() ,@PublishType 
	FROM ZnodePortalLocale a with(nolock) 
	INNER JOIN ZnodePortalCatalog b with(nolock)  ON (b.PortalId = a.PortalId)
	CROSS APPLY @Tbl_versions  r
	WHERE  b.PublishCatalogId = @PimCatalogId 
	AND a.LocaleId IN (SELECT LocaleId FROM ZnodeLocale p with(nolock)  WHERE p.IsActive = 1 )
	UNION ALL 
	SELECT DISTINCT @PimCatalogId,  @PimCatalogId,NULL,0,  NULL,0,  NULL,@UserId, @Getdate, @UserId, @Getdate, @UserId ,@Getdate,  r.RevisionState
				,@DefaultLocaleId ,DBO.Fn_GetPublishStateIdForProcessing() ,@PublishType
	FROM  @Tbl_versions  r
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t WHERE t.PublishCatalogId = @PimCatalogId)
	

	INSERT INTO ZnodePublishCatalogEntity (VersionId,ZnodeCatalogId,CatalogName,RevisionType,LocaleId,IsAllowIndexing) 
	SELECT VersionId, @PimCatalogId, @CatalogName, RevisionState, LocaleId, @IsAllowIndexing
	FROM @Versions_new p
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogEntity y with(nolock)  WHERE y.ZnodeCatalogId = @PimCatalogId AND y.RevisionType = p.RevisionState
		 AND y.LocaleId = p.LocaleId
	)
	INSERT INTO ZnodePublishVersionEntity (VersionId,ZnodeCatalogId,RevisionType,LocaleId,IsPublishSuccess)  
	SELECT VersionId, @PimCatalogId,  RevisionState, LocaleId, 0
	FROM @Versions_new p
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishVersionEntity y with(nolock)  WHERE y.ZnodeCatalogId = @PimCatalogId AND y.RevisionType = p.RevisionState
		AND y.LocaleId = p.LocaleId
	)

	INSERT INTO @Versions_working 
	SELECT VersionId , a.LocaleId, g.PublishStateId,UPPER( a.RevisionType)RevisionType
	FROM ZnodePublishVersionEntity a with(nolock)
	INNER JOIN ZnodePublishState g with(nolock) ON (g.PublishStateCode = a.RevisionType)
	WHERE a.ZnodeCatalogId = @PimCatalogId
	AND RevisionType IN (SELECT RevisionState FROM @Tbl_versions)
	AND a.LocaleId IN (SELECT p.LocaleId FROM @Versions_new p )
	

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'Collecting Products'
		,ProgressMark = 20
	WHERE Jobid = @NewGUID


    INSERT INTO #PimProduct_catalog 
    SELECT DISTINCT PimProductId , 0  , b.PimCategoryId, b.PimCategoryHierarchyId , b.ParentPimCategoryHierarchyId
        ,b.DisplayOrder ,b.IsActive,b.ActivationDate,b.ExpirationDate, 0 IsDefault , 0 PimAddonGroupId , 0, 0
    FROM ZnodePimCategoryProduct a with(nolock)
    INNER JOIN ZnodePimCategoryHierarchy b with(nolock) ON (b.PimCategoryId = a.PimCategoryId)
    WHERE b.PimCatalogId = @PimCatalogId
    AND ( a.PimProductId =  @PimProductId   OR @PimProductId =  0 ) 
    AND ( B.PimCategoryHierarchyId =  @PimCategoryHierarchyId   OR @PimCategoryHierarchyId =  0 )
	

INSERT INTO #PimProduct_catalog 
SELECT DISTINCT a.PimProductId , b.PimProductId ,0 As PimCategoryId, 0 As PimCategoryHierarchyId, 0 As ParentPimCategoryHierarchyId
,b.DisplayOrder ,b.IsActive,b.ActivationDate,b.ExpirationDate, 0 IsDefault, 0 PimAddonGroupId , 0,0
FROM ZnodePimLinkProductDetail a with(nolock)
INNER JOIN #PimProduct_catalog b ON (b.PimProductId = a.PimParentProductId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = a.PimProductId )

SELECT DISTINCT ZPAPD.PimChildProductId PimProductId,ZPAP.PimProductId ParentPimProductId, 0 PimCategoryId , 0 PimCategoryHierarchyId,0 ParentPimCategoryHierarchyId , ZPAPD.DisplayOrder ,1 IsActive
,NULL ActivationDate,NULL ExpirationDate ,IsDefault
, ZPAP.PimAddonGroupId PimAddonGroupId , 0 BundleQuantity,RequiredType
INTO #TBL_AddOnProduct
FROM ZnodePimAddOnProductDetail AS ZPAPD with(nolock)
INNER JOIN ZnodePimAddOnProduct AS ZPAP with(nolock) ON (ZPAP.PimAddOnProductId = ZPAPD.PimAddOnProductId)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog ty WHERE ty.PimProductId = ZPAP.PimProductId )

-- SELECT * FROM ZnodePimAddOnProduct
INSERT INTO #PimProduct_catalog 
SELECT DISTINCT ZPAPD.PimProductId,ZPAPD.ParentPimProductId, 0 PimCategoryId , 0 PimCategoryHierarchyId , 0 ,DisplayOrder ,0 ,NULL,NULL,IsDefault
,PimAddonGroupId  , 0 ,0
FROM #TBL_AddOnProduct ZPAPD
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = ZPAPD.PimProductId )

INSERT INTO #PimProduct_catalog 
SELECT DISTINCT a.PimProductId , a.PimParentProductId , 0 PimCategoryId , 0 PimCategoryHierarchyId,a.DisplayOrder,0,0,NULL,NULL,IsDefault
, 0 PimAddonGroupId , BundleQuantity, 1
FROM ZnodePimProductTypeAssociation a with(nolock)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog ty WHERE ty.PimProductId = a.PimParentProductId )
--AND NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog rt WHERE rt.PimProductId = a.PimProductId )

CREATE INDEX IDX_#PimProduct_catalog ON #PimProduct_catalog(PimProductId)

	IF @IsDraftProductsOnly = 0  
    BEGIN 
      --  EXEC Znode_CatalogProductDraftForPublish @PublishCatalogId=@PimCatalogId   
	  ---To draft all catalog products AND associated products for full catalog publish  

	  UPDATE ZnodePimProduct 
	  SET PublishStateId = 2 
	  WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_catalog y WHERE y.PimProductId = ZnodePimProduct.PimProductId )
    END 
    


DROP TABLE IF EXISTS #PimProduct_distinct

SELECT DISTINCT a.PimProductId, PimCategoryHierarchyId PimCategoryId ,sku,ProductName, CAST(b.IsActive AS VARCHAR(50)) IsActive,b.PublishStateId, b.ProductType
INTO #PimProduct_distinct
FROM #PimProduct_catalog a
INNER JOIN ZnodePimProduct b with(nolock) ON (b.PimProductId = a.PimProductId)


CREATE INDEX IDX_#PimProduct_distinct ON #PimProduct_distinct(PimProductId,IsActive)

DELETE tt FROM #PimProduct_distinct tt 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProduct t with(nolock) WHERE t.PimProductId = tt.PimProductId AND t.ProductType = 'SimpleProduct' ) 
AND NOT EXISTS (SELECT TOP 1 1 FROM ZnodePimProductTypeAssociation ty with(nolock) WHERE ty.PimParentProductId = tt.PimProductId)

	

UPDATE ZnodePublishProgressNotifierEntity
SET JobName =  @messagestring+'Catalog-'+@CatalogName+'-'+'Create backup of version'
	,ProgressMark = 25
WHERE Jobid = @NewGUID

DECLARE @Deleted_Products TABLE (PimProductId INT )

SELECT p.PublishProductEntityId
INTO #PublishProductEntityId
FROM ZnodePublishProductEntity p With(nolock)  WHERE  NOT EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct ty WHERE ty.PimProductId = p.ZnodeProductId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND  @PimProductId = 0 AND @PimCategoryHierarchyId = 0 
UNION ALL 
SELECT p.PublishProductEntityId
FROM ZnodePublishProductEntity p With(nolock)  WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct ty WHERE ty.PimProductId = p.ZnodeProductId)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND EXISTS (SELECT TOP 1 1 FROM ZnodePimProduct t with(nolock) WHERE t.PimProductId = p.ZnodeProductId AND t.IsActive = 'false' ) 
AND @PimCategoryHierarchyId = 0 


UPDATE ZnodePublishProductEntity 
SET ElasticSearchEvent = 2 
WHERE EXISTS (SELECT TOP 1 1  FROM #PublishProductEntityId t WHERE t.PublishProductEntityId = ZnodePublishProductEntity.PublishProductEntityId ) 


SELECT AttributeCode , AttributeName , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(d.IsFacets,0) IsFacets
, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, b.LocaleId
INTO #temp_attributename 
FROM ZnodePimAttribute a with(nolock)
INNER JOIN ZnodePimAttributeLocale b with(nolock) ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId =@DefaultLocaleId)
INNER JOIN ZnodeAttributeType c with(nolock) ON (c.AttributeTypeId = a.AttributeTypeId)
LEFT JOIN ZnodePimFrontendProperties d with(nolock) ON (d.PimAttributeId = a.PimAttributeId )

	
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing category'
		,ProgressMark = 30
	WHERE Jobid = @NewGUID


SELECT DISTINCT  rt.PimCategoryHierarchyId, c.AttributeCode,b.CategoryValue AttributeValues, 0 DisplayOrder , 
rt.ParentPimCategoryHierarchyId,b.LocaleId,a.PimCategoryAttributeValueId, rt.PimCategoryId,rt.IsActive
INTO #Temp_Categoryvalue
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN  #PimProduct_catalog rt ON ( rt.PimCategoryId = a.PimCategoryId  )


INSERT INTO #Temp_Categoryvalue
SELECT DISTINCT  ty.PimCategoryHierarchyId, c.AttributeCode,b.CategoryValue AttributeValues, ty.DisplayOrder ,
ty.ParentPimCategoryHierarchyId,b.LocaleId,a.PimCategoryAttributeValueId,ty.PimCategoryId,ty.IsActive
FROM ZnodePimCategoryAttributeValue a with(nolock)
INNER JOIN ZnodePimCategoryAttributeValueLocale b with(nolock) ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = @DefaultLocaleId)
INNER JOIN #temp_attributename c ON (c.PimAttributeId = a.PimAttributeId AND c.IsCategory =1 )
INNER JOIN ZnodePimCategoryHierarchy ty with(nolock) ON (ty.PimCategoryId = a.PimCategoryId)
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue ut WHERE ut.PimCategoryHierarchyId = ty.PimCategoryHierarchyId)
AND ty.PimCatalogId =@PimCatalogId
AND @PimProductId = 0 


UPDATE a SET a.AttributeValues = ZM.Path
FROM #Temp_Categoryvalue a
INNER  JOIN ZnodeMedia ZM ON (CAST(zm.MediaId AS VARCHAR(200)) = a.AttributeValues)
WHERE a.AttributeCode IN (SELECT n.AttributeCode FROM #temp_attributename n WHERE n.AttributeTypeName = 'Image' )

DELETE p 
FROM ZnodePublishCategoryEntity p 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #Temp_Categoryvalue ty WHERE ty.PimCategoryHierarchyId = p.ZnodeCategoryId and ty.IsActive =1)
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working n WHERE n.VersionId = p.VersionId ) 
AND @PimProductId = 0 AND @PimCategoryHierarchyId = 0 

IF EXISTS (SELECT TOP 1 1 FROM @Versions_working r WHERE r.LocaleId <> @DefaultLocaleId)
BEGIN 
    
	INSERT INTO #Temp_Categoryvalue(PimCategoryHierarchyId, AttributeCode, AttributeValues, DisplayOrder , ParentPimCategoryHierarchyId, t.LocaleId,PimCategoryAttributeValueId,PimCategoryId,IsActive)
	SELECT PimCategoryHierarchyId, AttributeCode, ISNULL(b.CategoryValue,a.AttributeValues)AttributeValues, DisplayOrder , ParentPimCategoryHierarchyId, t.LocaleId,a.PimCategoryAttributeValueId,a.PimCategoryId,a.IsActive
	FROM #Temp_Categoryvalue a 
	CROSS APPLY @Versions_working t 
	LEFT JOIN ZnodePimCategoryAttributeValueLocale b ON (b.PimCategoryAttributeValueId = a.PimCategoryAttributeValueId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

	INSERT INTO #temp_attributename
	SELECT AttributeCode , IIF(b.AttributeName IS NULL, a.AttributeName ,b.AttributeName) , AttributeTypeName ,ISNULL( IsUseInSearch,0) IsUseInSearch,ISNULL(IsHtmlTags,0)IsHtmlTags
		,ISNULL(IsComparable,0)IsComparable, a.PimAttributeId ,ISNULL(a.IsFacets,0) IsFacets
		, ISNULL(a.IsConfigurable,0)IsConfigurable, ISNULL( a.IsPersonalizable, 0)IsPersonalizable
		, a.DisplayOrder,IsCategory, t.LocaleId
	FROM #temp_attributename a
	CROSS APPLY @Versions_working t 
	LEFT JOIN ZnodePimAttributeLocale b ON (b.PimAttributeId = a.PimAttributeId AND b.LocaleId = t.LocaleId)
	WHERE t.LocaleId <> @DefaultLocaleId

END 

SELECT DISTINCT PimCategoryHierarchyId, DisplayOrder ,ParentPimCategoryHierarchyId ,LocaleId,a.PimCategoryId,a.IsActive
INTO #Temp_categoryDetails
FROM #Temp_Categoryvalue a 


ALTER TABLE #Temp_categoryDetails ADD  ActivationDate DATETIME ,ExpirationDate DATETIME  ,CategoryName NVARCHAr(max), CategoryCode NVARCHAr(600)

UPDATE a  
SET CategoryName = (SELECT TOP 1 AttributeValues FROM #Temp_Categoryvalue tu WHERE tu.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND tu.LocaleId = a.LocaleId AND tu.AttributeCode = 'CategoryName')
,CategoryCode = (SELECT TOP 1 AttributeValues FROM #Temp_Categoryvalue tu WHERE tu.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND tu.LocaleId = a.LocaleId AND tu.AttributeCode = 'CategoryCode')
,DisplayOrder = ISNULL(b.DisplayOrder,a.DisplayOrder) , ActivationDate = b.ActivationDate , ExpirationDate = b.ExpirationDate
FROM #Temp_categoryDetails  a
LEFT JOIN #PimProduct_catalog b ON (b.PimCategoryHierarchyId = a.PimCategoryHierarchyId)
--WHERE @PimProductId = 0 


UPDATE a
SET a.Name = t.CategoryName
,a.CategoryCode = t.CategoryCode
,a.Attributes = (SELECT r.AttributeCode, AttributeValues,jk.AttributeName, jk.AttributeTypeName  ,jk.IsUseInSearch,jk.IsHtmlTags,jk.IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId  AND jk.IsCategory = 1 )
					WHERE r.PimCategoryHierarchyId = t.PimCategoryHierarchyId AND r.LocaleId = t.LocaleId
					FOR JSON PATH ) 

,a.ZnodeParentCategoryIds  = '['+CAST(t.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
,a.ProductIds = '['+(SELECT  STRING_AGG(  CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM #PimProduct_catalog ty WHERE ty.PimCategoryHierarchyId = a.ZnodeCategoryId  )+']' 
,a.DisplayOrder = t.DisplayOrder 
,a.IsActive = t.IsActive, a.ActivationDate = t.ActivationDate, a.ExpirationDate = t.ExpirationDate

FROM ZnodePublishCategoryEntity a with(nolock)
INNER JOIN @Versions_working q ON ( q.VersionId = a.VersionId)
INNER JOIN #Temp_categoryDetails t ON (t.PimCategoryHierarchyId = a.ZnodeCategoryId AND t.LocaleId = a.LocaleId )
WHERE a.ZnodeCatalogId = @PimCatalogId
--AND @PimProductId = 0 


INSERT INTO ZnodePublishCategoryEntity (VersionId,ZnodeCategoryId,Name,CategoryCode,ZnodeCatalogId,CatalogName,ZnodeParentCategoryIds
,ProductIds,LocaleId,IsActive,DisplayOrder,Attributes,ActivationDate,ExpirationDate,CategoryIndex,ElasticSearchEvent)

SELECT q.VersionId, a.PimCategoryHierarchyId, a.CategoryName, a.CategoryCode,@PimCatalogId,@CatalogName,'['+CAST(a.ParentPimCategoryHierarchyId AS VARCHAR(580))+']'
	,'['+(SELECT  STRING_AGG(   CONVERT(VARCHAR(MAX),PimProductId) ,',') FROM #PimProduct_catalog ty WHERE ty.PimCategoryHierarchyId = a.PimCategoryHierarchyId  )+']' 
	,q.LocaleId, a.IsActive,a.DisplayOrder,(SELECT r.AttributeCode , AttributeName, AttributeValues, AttributeTypeName,IsUseInSearch,IsHtmlTags,IsComparable
					FROM #Temp_Categoryvalue r 
					INNER JOIN #temp_attributename jk ON (jk.AttributeCode = r.AttributeCode AND jk.LocaleId= r.LocaleId AND jk.IsCategory =1 )
					WHERE r.PimCategoryHierarchyId = a.PimCategoryHierarchyId AND q.LocaleId = r.LocaleId					FOR JSON PATH ) , a.ActivationDate, a.ExpirationDate,1,1
FROM #Temp_categoryDetails a
CROSS APPLY @Versions_working q 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCategoryEntity Tot with(nolock) WHERE tot.VersionId = q.VersionId AND tot.ZnodeCategoryId = a.PimCategoryHierarchyId )
AND a.LocaleId = q.LocaleId AND a.IsActive=1
  


	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing Product'
		,ProgressMark = 35
	WHERE Jobid = @NewGUID


SELECT  a.PimProductId,a.sku,a.ProductName,a.IsActive ,a.PublishStateId , max(a.PimCategoryId) ZnodeCategoryIds , CAST('' AS NVARCHAR(2000)) CategoryName
         ,STRING_AGG( CONVERT(VARCHAR(MAX),a.PimCategoryId),',') WITHIN GROUP (ORDER BY a.PimCategoryId) ZnodeParentCategoryIds
		 ,CAST('' AS VARCHAR(1000)) SeoDescription,CAST('' AS VARCHAR(1000))SeoKeywords
	   ,CAST('' AS VARCHAR(1000))SeoTitle,CAST('' AS VARCHAR(1000)) SeoUrl
	   , CAST('' AS VARCHAR(50)) SalesPrice,CAST('' AS VARCHAR(50)) RetailPrice
INTO #TBL_finalProducts
FROM #PimProduct_distinct a
GROUP BY  a.PimProductId,a.sku,a.ProductName,a.IsActive ,a.PublishStateId--, a.PimCategoryId




SELECT CAST(SKU AS VARCHAR(2000)) SeoCode 
INTO #filterSEOCOde
FROM #TBL_finalProducts
WHERE PublishStateId IN (2 ,1)
UNION ALL 
SELECT CAST(CategoryCode AS VARCHAR(2000))
FROM #Temp_categoryDetails

CREATE INDEX IDX_#filterSEOCOde_SEOCode ON #filterSEOCOde(SeoCode)

UPDATE ZnodeCMSSEODetail 
SET PublishStateId = 2 
WHERE EXISTS (SELECT TOP 1 1 FROM  #filterSEOCOde y WHERE y.SeoCode = ZnodeCMSSEODetail.SEOCode)
AND CMSSEOTypeId IN (1,2)
AND EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t with(nolock) WHERE t.PublishCatalogId =@PimCatalogId AND ZnodeCMSSEODetail.PortalId = t.PortalId  )
AND PublishStateId <> 2 
--CREATE INDEX IDX_ZnodeCMSSEODetail_SEOCode_CMSSEOTypeId_PortalId ON ZnodeCMSSEODetail(SEOCode,CMSSEOTypeId,PortalId)

DROP TABLE IF EXISTS  #Seo_entity



SELECT 0 VersionId
,@Getdate PublishStartTime,c.Name ItemName,a.CMSSEODetailId,b.CMSSEODetailLocaleId,c.CMSSEOTypeId,a.SEOId,c.name SEOTypeName,b.SEOTitle
,b.SEODescription,b.SEOKeywords,a.SEOUrl,a.IsRedirect,a.MetaInformation,b.LocaleId,'' OldSEOURL,0 CMSContentPagesId,a.PortalId,a.SEOCode,b.CanonicalURL
,b.RobotTag,1 ElasticSearchEvent, 0 PublishSeoEntityId
INTO #Seo_entity
FROM ZnodeCMSSEODetail a with (nolock)
INNER JOIN ZnodeCMSSEODetailLocale b with(nolock) ON (b.CMSSEODetailId = a.CMSSEODetailId)
INNER JOIN ZnodeCMSSEOType c with(nolock) ON (c.CMSSEOTypeId = a.CMSSeoTypeId ) 
WHERE c.CMSSEOTypeId IN (1,2) AND a.PublishStateId = 2
AND EXISTS (SELECT TOP 1 1 FROM ZnodePortalCatalog t with(nolock) WHERE t.PublishCatalogId =@PimCatalogId AND a.PortalId = t.PortalId  )




UPDATE ZnodeCMSSEODetail
SET PublishStateId = CASE WHEN @RevisionState = 'Preview' THEN 4 ELSE 3 END 
WHERE EXISTS (SELECT TOP 1 1 FROM #Seo_entity m WHERE m.CMSSEODetailId = ZnodeCMSSEODetail.CMSSEODetailId )

CREATE INDEX IDX_#Seo_entity_PublishSeoEntityId ON #Seo_entity(PublishSeoEntityId)


IF  @IsAllowIndexing = 1  
BEGIN 



SELECT SEoCode SKU ,MAX(SeoDescription)SeoDescription,Max(SeoKeywords) SeoKeywords,Max(SeoTitle)SeoTitle,Max(SeoUrl)SeoUrl
INTO #Distinct_seo
FROM #Seo_entity
WHERE CMSSEOTypeId = 1 
GROUP BY SEoCode


SELECT SKU , MIN(RetailPrice) RetailPrice, MIN(SalesPrice ) SalesPrice
INTO #price_data
FROM ZnodePrice a with (nolock)
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct r WHERE r.SKU = a.SKU )
GROUP BY SKU

UPDATE a
SET SeoDescription = ISNULL(p.SeoDescription,'') ,SeoKeywords= ISNULL(p.SeoKeywords,'')
	   ,SeoTitle=ISNULL(p.SeoTitle,''),SeoUrl=ISNULL(p.SeoUrl,'')
FROM #TBL_finalProducts a
INNER JOIN #Distinct_seo p ON (p.SKU = a.SKU )
WHERE a.PublishStateId IN (2,1)

UPDATE a
SET SalesPrice =ISNULL(toe.SalesPrice,0) ,RetailPrice=ISNULL(toe.RetailPrice,0) 
FROM #TBL_finalProducts a
INNER JOIN #price_data toe ON (toe.SKU = a.SKU  )
 WHERE a.PublishStateId IN (2,1)
END
ELSE 
BEGIN 

 UPDATE ZnodePublishProductEntity 
SET SeoUrl = '' , SeoDescription = '', SeoKeywords = '', SeoTitle = '', SalesPrice = 0 
, RetailPrice =0 
WHERE @IsAllowIndexing = 0 AND ZnodeCatalogId =@PimCatalogId 
AND EXISTS (SELECT TOP 1 1 FROM @Versions_working t WHERE t.VersionId = ZnodePublishProductEntity.VersionId)

END 




DECLARE @VersionId_l INT ,@LocaleId_l INT ,@RevisionState_l VARCHAR(300)

DECLARE cur_localeId CURSOR FOR 
SELECT VersionId,LocaleId,RevisionState
FROM @Versions_working

OPEN cur_localeId

FETCH NEXT FROM cur_localeId INTO @VersionId_l,@LocaleId_l,@RevisionState_l
WHILE @@FETCH_STATUS = 0
BEGIN 


--AND  1=0 

UPDATE a
SET a.PublishSeoEntityId = n.PublishSeoEntityId
FROM #Seo_entity a
INNER  JOIN ZnodePublishSeoEntity n with(nolock) ON (n.VersionId = @VersionId_l AND n.SEOCode = a.SEOCode AND n.PortalId = a.PortalId AND n.CMSSEOTypeId = a.CMSSEOTypeId AND n.LocaleId =@LocaleId_l)
WHERE a.LocaleId = @LocaleId_l


UPDATE a 
SET PublishStateId = 1 
FROM #TBL_finalProducts a 
WHERE NOT EXISTS (
SELECT TOP 1 1 FROM ZnodePublishProductEntity y with(nolock) WHERE y.ZnodeProductId = a.PimProductId AND y.ZnodeCategoryIds = a.ZnodeCategoryIds
AND y.VersionId =@VersionId_l
)



UPDATE a SET CategoryName = uy.Name
FROM #TBL_finalProducts a 
INNER JOIN ZnodePublishCategoryEntity uy  with(nolock) ON (uy.ZnodeCategoryId = a.ZnodeCategoryIds)
WHERE uy.VersionId =@VersionId_l
AND a.PublishStateId IN (2,1)




DROP TABLE IF EXISTS  #insertedPublishEntity

SELECT  @VersionId_l VersionId , ROW_NUMBER()Over(ORDER BY a.PimProductId )IndexId, a.PimProductId ZnodeProductId , @PimCatalogId ZnodeCatalogId,a.sku,@LocaleId_l LocaleId,a.ProductName Name , ZnodeCategoryIds ,a.IsActive,'' Attributes,'[]' Brands
       , CategoryName, @CatalogName CatalogName, 0 DisplayOrder, @RevisionState_l  RevisionType, 0 AssociatedProductDisplayOrder, ROW_NUMBER()Over(partition By  a.PimProductId ORDER BY  a.PimProductId  )  ProductIndex,  SalesPrice, RetailPrice
	   ,@CultureCode CultureCode,@CurrencySuffix CurrencySuffix
	   ,@CurrencyCode CurrencyCode, SeoDescription,SeoKeywords
	   ,SeoTitle, SeoUrl,'' ImageSmallPath,LOWER(a.sku) SKULower,1 ElasticSearchEvent, ZnodeParentCategoryIds ,@Getdate ModifiedDate,0 IsSingleProductPublish
	   ,0 IsCacheClear, 0 PublishProductEntityId,a.PublishStateId
INTO #insertedPublishEntity 
FROM #TBL_finalProducts a 
WHERE a.IsActive = 'true'  AND a.PublishStateId IN (2,1)



UPDATE a
SET a.PublishProductEntityId=ty.PublishProductEntityId
FROM #insertedPublishEntity a
INNER JOIN ZnodePublishProductEntity ty with(nolock) ON ( ty.VersionId = @VersionId_l AND ty.ZnodeProductId  = a.ZnodeProductId AND ty.ZnodeCatalogId =@PimCatalogId )


UPDATE a
SET Name = b.name , a.SalesPrice = b.SalesPrice , a.RetailPrice = b.RetailPrice, CurrencyCode = b.CurrencyCode , CultureCode= b.CultureCode, CurrencySuffix = b.CurrencySuffix
, CategoryName = b.CategoryName, a.ElasticSearchEvent = 1 , ZnodeParentCategoryIds = b.ZnodeParentCategoryIds , a.SKU = b.SKU , a.SKULower = b.SKULower, a.SeoUrl = b.SeoUrl
, a.SeoTitle = b.SeoTitle , a.SeoKeywords = b.SeoKeywords , a.SeoDescription = b.SeoDescription
FROM ZnodePublishProductEntity a 
INNER JOIN #insertedPublishEntity b ON (b.PublishProductEntityId = a.PublishProductEntityId)
WHERE b.PublishProductEntityId <> 0 --AND b.PublishStateId = 2 



INSERT INTO ZnodePublishProductEntity(VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU,LocaleId,Name,ZnodeCategoryIds,IsActive,Attributes,Brands
,CategoryName,CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix
,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,ElasticSearchEvent,ZnodeParentCategoryIds,ModifiedDate,IsSingleProductPublish
,IsCacheClear)
SELECT VersionId,IndexId,ZnodeProductId,ZnodeCatalogId,SKU ,LocaleId,Name,ZnodeCategoryIds,IsActive,Attributes,Brands
,CategoryName,CatalogName,DisplayOrder,RevisionType,AssociatedProductDisplayOrder,ProductIndex,SalesPrice,RetailPrice,CultureCode,CurrencySuffix
,CurrencyCode,SeoDescription,SeoKeywords,SeoTitle,SeoUrl,ImageSmallPath,SKULower,ElasticSearchEvent,ZnodeParentCategoryIds,ModifiedDate,IsSingleProductPublish
,IsCacheClear
FROM #insertedPublishEntity
WHERE PublishProductEntityId = 0 



--UPDATE a 
--SET a.ItemName					=b.ItemName,a.CMSSEODetailId				=b.CMSSEODetailId		,a.CMSSEODetailLocaleId			=b.CMSSEODetailLocaleId	
--,a.CMSSEOTypeId					=b.CMSSEOTypeId	,a.SEOId						=b.SEOId,a.SEOTypeName					=b.SEOTypeName			
--,a.SEOTitle						=b.SEOTitle,a.SEODescription				=b.SEODescription	,a.SEOKeywords					=b.SEOKeywords			
--,a.SEOUrl						=b.SEOUrl	,a.IsRedirect					=b.IsRedirect	,a.MetaInformation				=b.MetaInformation		
--,a.LocaleId						=b.LocaleId	,a.OldSEOURL					=b.OldSEOURL	,a.CMSContentPagesId			=b.CMSContentPagesId	
--,a.PortalId						=b.PortalId	,a.SEOCode						=b.SEOCode	,a.CanonicalURL					=b.CanonicalURL			
--,a.RobotTag						=b.RobotTag	,a.ElasticSearchEvent			=b.ElasticSearchEvent	
DELETE a 
FROM  ZnodePublishSeoEntity a 
INNER JOIN #Seo_entity b ON (b.PublishSeoEntityId = a.PublishSeoEntityId)

INSERT INTO ZnodePublishSeoEntity (VersionId,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName
,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL
,RobotTag,ElasticSearchEvent)
SELECT @VersionId_l,PublishStartTime,ItemName,CMSSEODetailId,CMSSEODetailLocaleId,CMSSEOTypeId,SEOId,SEOTypeName
,SEOTitle,SEODescription,SEOKeywords,SEOUrl,IsRedirect,MetaInformation,LocaleId,OldSEOURL,CMSContentPagesId,PortalId,SEOCode,CanonicalURL
,RobotTag,ElasticSearchEvent
FROM #Seo_entity a 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishSeoEntity r with(nolock) WHERE r.PublishSeoEntityId = a.PublishSeoEntityId )
AND a.LocaleId = @LocaleId_l

FETCH NEXT FROM cur_localeId INTO @VersionId_l,@LocaleId_l,@RevisionState_l


 END 

 CLOSE cur_localeId
 DEALLOCATE cur_localeId

 DROP TABLE IF EXISTS #TBL_finalProducts
 DROP TABLE IF EXISTS #filterSEOCOde
 
DECLARE @pimProductId_oi transferId 
DECLARE @Version_str VARCHAr(2000) 

SELECT @Version_str= STRING_AGG( CONVERT(VARCHAR(200), q.VersionId) ,',')
FROM @Versions_working q

INSERT INTO @pimProductId_oi 
SELECT DISTINCT  pimProductId 
FROM #PimProduct_distinct a
WHERE a.PublishStateId IN (1,2)
UNION  
SELECT ZnodeProductId
FROM #insertedPublishEntity
WHERE PublishProductEntityId = 0  


 DROP TABLE IF EXISTS  #insertedPublishEntity

 IF  EXISTS ( SELECT TOP 1 1 FROM @pimProductId_oi )
 BEGIN 

EXEC Znode_PublishUpdateProductJson @PimProductIds=@pimProductId_oi
,@VersionId = @Version_str
,@LocaleId = 1 
,@IsSingleProductPublish = 0 ,@NewGUID=@NewGUID, @CatalogName = @CatalogName,@messagestring=@messagestring

END 

	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing Catalog Attribute'
		,ProgressMark = 60
	WHERE Jobid = @NewGUID


SELECT VersionId,@PimCatalogId PimCatalogId,AttributeCode,AttributeTypeName,0 IsPromoRuleCondition
,ISNULL(IsComparable,0)IsComparable,ISNULL(IsHtmlTags,0)IsHtmlTags,ISNULL(IsFacets,0)IsFacets,ISNULL(IsUseInSearch,0)IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,a.LocaleId,DisplayOrder
	,ISNULL((
	SELECT  p.AttributeDefaultValue Value, m.DisplayOrder 
	FROM ZnodePimAttributeDefaultValue m
	INNER JOIN ZnodePimAttributeDefaultValueLocale p ON (p.PimAttributeDefaultValueId = m.PimAttributeDefaultValueId)
	WHERE m.PimAttributeId = a.PimAttributeId AND p.LocaleId = a.LocaleId
	FOR JSON PATH 
	),'[]')SelectValues
INTO #temp_updatecatalogAttribute 
FROM #temp_attributename a 
INNER JOIN @Versions_working h ON (h.LocaleId = a.LocaleId) 

UPDATE a 
SET AttributeTypeName=b.AttributeTypeName,IsPromoRuleCondition
=b.IsPromoRuleCondition,IsComparable=b.IsComparable,IsHtmlTags=b.IsHtmlTags,IsFacets=b.IsFacets
,IsUseInSearch=b.IsUseInSearch,IsPersonalizable=b.IsPersonalizable,IsConfigurable=b.IsConfigurable,AttributeName=b.AttributeName
,LocaleId=b.LocaleId,DisplayOrder=b.DisplayOrder,SelectValues=b.SelectValues
FROM ZnodePublishCatalogAttributeEntity a 
INNER JOIN #temp_updatecatalogAttribute b ON (b.VersionId = a.VersionId AND b.AttributeCode = a.AttributeCode)


INSERT INTO ZnodePublishCatalogAttributeEntity (VersionId,ZnodeCatalogId,AttributeCode,AttributeTypeName,IsPromoRuleCondition
,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,LocaleId,DisplayOrder,SelectValues)
SELECT VersionId,PimCatalogId,AttributeCode,AttributeTypeName,IsPromoRuleCondition
,IsComparable,IsHtmlTags,IsFacets,IsUseInSearch,IsPersonalizable,IsConfigurable,AttributeName,LocaleId,DisplayOrder,SelectValues
FROM #temp_updatecatalogAttribute a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishCatalogAttributeEntity r WHERE r.AttributeCode = a.AttributeCode AND r.VersionId = a.VersionId)



	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Publishing SEO data'
		,ProgressMark = 65
	WHERE Jobid = @NewGUID




SELECT q.VersionId,a.PimProductId, @PimCatalogId ZnodeCatalogId, b.PimProductId AssociatedZnodeProductId , b.DisplayOrder,'' SelectValues
, ISNULL((SELECT CONCAT('["',STRING_AGG([AttributeCode], '","'),'"]') FROM #temp_attributename n 
INNER JOIN ZnodePimConfigureProductAttribute g WITH (nolock) ON (g.PimProductId = a.PimProductId )
WHERE n.PimAttributeId = g.PimAttributeId AND n.LocaleId = q.LocaleId),'[]') ConfigurableAttributeCodes
, IsDefault,1 ElasticSearchEvent
INTO #temp_configProductids 
FROM ZnodePimConfigureProductAttribute a  WITH (nolock)
INNER JOIN #PimProduct_catalog b ON (b.ParentPimProductId = a.PimProductId AND b.IsAssocitedProduct =1 )
CROSS APPLY @Versions_working q 
GROUP BY q.VersionId,a.PimProductId, b.PimProductId  , b.DisplayOrder, IsDefault,q.LocaleId

DELETE a FROM ZnodePublishConfigurableProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_configProductids t WHERE t.PimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND t.AssociatedZnodeProductId <> a.AssociatedZnodeProductId
)
  
 INSERT INTO ZnodePublishConfigurableProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,SelectValues,ConfigurableAttributeCodes,IsDefault,ElasticSearchEvent)
 SELECT VersionId,PimProductId,ZnodeCatalogId,AssociatedZnodeProductId,DisplayOrder,SelectValues,ConfigurableAttributeCodes,IsDefault,ElasticSearchEvent
 FROM #temp_configProductids a
 WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishConfigurableProductEntity t WHERE t.VersionId = a.VersionId AND a.PimProductId = t.ZnodeProductId AND t.AssociatedZnodeProductId = a.AssociatedZnodeProductId )

SELECT q.VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, a.PimProductId, a.DisplayOrder, a.BundleQuantity ,1 ElasticSearchEvent
INTO #temp_bundleProduct 
FROM #PimProduct_catalog a 
CROSS APPLY @Versions_working q 
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct tt WHERE tt.PimProductId = a.ParentPimProductId AND tt.ProductType = 'BundleProduct')
AND a.IsAssocitedProduct =1 

DELETE a FROM ZnodePublishBundleProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_bundleProduct t WHERE t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND  t.PimProductId <> a.ZnodeProductId   
)


UPDATE a
SET  a.AssociatedProductBundleQuantity = t.BundleQuantity, a.AssociatedProductDisplayOrder = t.DisplayOrder
FROM ZnodePublishBundleProductEntity a
INNER JOIN  #temp_bundleProduct t ON( t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND  t.PimProductId = a.ZnodeProductId   ) 

INSERT INTO ZnodePublishBundleProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,AssociatedProductBundleQuantity,ElasticSearchEvent)
SELECT VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, PimProductId, DisplayOrder, ISNULL(BundleQuantity,0) BundleQuantity , ElasticSearchEvent
FROM #temp_bundleProduct a
WHERE  NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishBundleProductEntity t WHERE t.VersionId = a.VersionId AND t.ZnodeProductId = a.ParentPimProductId AND t.AssociatedZnodeProductId = a.PimProductId)


SELECT q.VersionId, ParentPimProductId,@PimCatalogId ZnodeCatalogId, PimProductId, a.DisplayOrder ,1 ElasticSearchEvent
INTO #temp_groupProduct
FROM #PimProduct_catalog a 
CROSS APPLY @Versions_working q 
WHERE EXISTS (SELECT TOP 1 1 FROM #PimProduct_distinct tt WHERE tt.PimProductId = a.ParentPimProductId AND tt.ProductType = 'GroupedProduct')
AND a.IsAssocitedProduct =1 

DELETE a FROM ZnodePublishGroupProductEntity a 
WHERE EXISTS (SELECT TOP 1 1 FROM #temp_groupProduct t WHERE t.ParentPimProductId = a.ZnodeProductId AND t.VersionId = a.VersionId
AND t.PimProductId <> a.ZnodeProductId
)

INSERT INTO ZnodePublishGroupProductEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder,ElasticSearchEvent)
SELECT VersionId, ParentPimProductId,ZnodeCatalogId, PimProductId, DisplayOrder ,ElasticSearchEvent
FROM #temp_groupProduct a
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishGroupProductEntity t WHERE t.VersionId = a.VersionId AND t.ZnodeProductId = a.ParentPimProductId AND t.AssociatedZnodeProductId = a.PimProductId)
 	
		--For full catalog publish
	IF @PimProductId =  0   
	BEGIN
		Delete from ZnodePublishAddonEntity 
		WHERE EXISTS (SELECT TOP 1 1 FROM @Versions_working q  
		where ZnodePublishAddonEntity.VersionId = q.VersionId)
	END 

	-- for single product publish
	ELSE 
	BEGIN 
		DELETE FROM ZnodePublishAddonEntity 
		WHERE EXISTS (	SELECT TOP 1 1 FROM   @Versions_working q  
						WHERE ZnodePublishAddonEntity.VersionId = q.VersionId)
			AND @PimProductId = ZnodePublishAddonEntity.ZnodeProductId   
	END 

INSERT INTO ZnodePublishAddonEntity (VersionId,ZnodeProductId,ZnodeCatalogId,AssociatedZnodeProductId,AssociatedProductDisplayOrder
,LocaleId,GroupName,DisplayType,DisplayOrder,IsRequired,RequiredType,IsDefault,ElasticSearchEvent)
SELECT VersionId,ParentPimProductId,@PimCatalogId,PimProductId,DisplayOrder
,q.LocaleId,[AddonGroupName] GroupName, DisplayType,DisplayOrder,IIF(RequiredType='requierd',1,0) IsRequired, RequiredType,IsDefault,1 ElasticSearchEvent
FROM  #TBL_AddOnProduct a
CROSS APPLY @Versions_working q 
Inner join ZnodePimAddonGroup AS ZPADG with(nolock) on ( ZPADG.PimAddonGroupId = a.PimAddonGroupId ) 
Inner join ZnodePimAddonGroupLocale AS ZPADGL  with(nolock) on ( ZPADG.PimAddonGroupId = ZPADGL.PimAddonGroupId  and ZPADGL.LocaleId = @DefaultLocaleId ) 
WHERE NOT EXISTS (SELECT TOP 1 1 FROM ZnodePublishAddonEntity ty WHERE ty.VersionId = q.VersionId AND ty.ZnodeProductId = a.ParentPimProductId
AND ty.AssociatedZnodeProductId = a.PimProductId  )
AND a.PimAddonGroupId > 0 

		
	UPDATE ZnodePublishProgressNotifierEntity
	SET JobName =   @messagestring+'Catalog-'+@CatalogName+'-'+'Started Elastic update'
		,ProgressMark = 80
	WHERE Jobid = @NewGUID
	
	SET @Status = 1  
  
    UPDATE a 
	SET --PublishSTateId = c.PublishStateId, IsCatalogPublished = 1 	    ,
	PublishCategoryId = (SELECT COUNT(DISTINCT PimCategoryHierarchyId )  FROM #Temp_Categoryvalue n )
		, PublishProductId = CASE WHEN @PimProductId <> 0 THEN @PimProductId ELSE  (SELECT COUNT(DISTINCT PimProductId )  FROM #PimProduct_distinct np  ) END 
	FROM ZnodePublishCatalogLog a 
	INNER JOIN @Versions_new b ON (b.VersionId = a.PublishCatalogLogId)
	INNER JOIN ZnodePublishState c with(nolock) ON (c.PublishStateCode = b.RevisionState)
    
	UPDATE ZnodePublishVersionEntity SET IsPublishSuccess = 1 WHERE ZnodeCatalogId = @PimCatalogId

	UPDATE ZnodePimProduct 
	SET PublishStateId =  CASE WHEN EXISTS (SELECT TOP 1 1 FROM @Versions_working WHERE PublishStateId = 3 ) THEN 3 ELSE 4 END
	WHERE PublishStateId IN (1,2)
	AND PimProductId IN ( SELECT PimProductId FROM  #PimProduct_distinct ) 
	AND @PimProductId = 0 

	UPDATE ZnodePimCategory 
	SET PublishStateId = CASE WHEN EXISTS (SELECT TOP 1 1 FROM @Versions_working WHERE PublishStateId = 3 ) THEN 3 ELSE 4 END 
	WHERE PublishStateId IN (1,2)
	AND PimCategoryId IN ( SELECT t.PimCategoryId FROM  #Temp_categoryDetails t  ) 


	IF @PimProductId = 0 
	BEGIN 
		SELECT @PimCatalogId AS id,@Status AS Status;     
    END 
	ELSE 
	BEGIN 
	
	  SELECT PimProductId , 0 IsDeleted , @PimCatalogId ZnodecatalogId , n.VersionId
	  FROM #PimProduct_distinct a 
	  CROSS APPLY @Versions_working n 
	  UNION ALL 
	  SELECT PimProductId , 1 IsDeleted , @PimCatalogId , n.VersionId
	  FROM @Deleted_Products 
	  CROSS APPLY @Versions_working n 
	END 

END TRY   
BEGIN CATCH
	SET @Status =0    
	SELECT ERROR_MESSAGE(), ERROR_LINE(),ERROR_PROCEDURE()
	SELECT 1 AS ID,@Status AS Status;     
   
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),   
	@ErrorLine VARCHAR(100)= ERROR_LINE(),  
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PublishCatalogEntity   
	@PimCatalogId = '+CAST(@PimCatalogId  AS VARCHAR (max))+',@UserId='+CAST(@UserId AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10))  
	+',@PreviewVersionId = ' + CAST(0  AS VARCHAR(20))  
	+',@ProductionVersionId = ' + CAST(0  AS VARCHAR(20))  
	+',@RevisionState = ''' + CAST(@RevisionState  AS VARCHAR(50))  
	+',@UserId = ' + CAST(@UserId AS VARCHAR(20)); SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
   
    	
	EXEC Znode_InsertProcedureErrorLog  
	@ProcedureName = 'Znode_PublishCatalogEntity',  
	@ErrorInProcedure = @Error_procedure,  
	@ErrorMessage = @ErrorMessage,  
	@ErrorLine = @ErrorLine,  
	@ErrorCall = @ErrorCall;  
END CATCH  
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_ImportPimCategoryData')
	DROP PROC Znode_ImportPimCategoryData

GO

CREATE PROCEDURE [dbo].[Znode_ImportPimCategoryData]
(   @TableName          VARCHAR(200),
    @NewGUID            NVARCHAR(200),
    @TemplateId         NVARCHAR(200),
    @ImportProcessLogId INT,
    @UserId             INT,
    @LocaleId           INT,
    @DefaultFamilyId    INT)
AS

    /*
      Summary : Finally Import data into ZnodePimProduct, ZnodePimAttributeValue and ZnodePimAttributeValueLocale Table 
      Process : Flat global temporary table will split into cloumn wise and associted with Znode Attributecodes,
    		    Create group of product with their attribute code and values and inseerted one by one products. 	   
    
      SourceColumnName : CSV file column headers
      TargetColumnName : Attributecode from ZnodePimAttribute Table 

	 ***  Need to log error if transaction failed during insertion of records into table.

	EXEC Znode_ImportPimCategoryData 
    */

     BEGIN
         SET NOCOUNT ON;
         BEGIN TRY
             
             DECLARE @SQLQuery NVARCHAR(MAX);
			 DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
             DECLARE @AttributeTypeName NVARCHAR(10), @AttributeCode NVARCHAR(300), @AttributeId INT, @IsRequired BIT, @SourceColumnName NVARCHAR(600), @PimAttributeFamilyId INT, @NewProductId INT, @PimAttributeValueId INT, @status BIT= 0; 
             --Declare error Log Table 

			 IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

			 IF OBJECT_ID('tempdb.dbo.#DefaultHideCategoryonMenu', 'U') IS NOT NULL   
			 DROP TABLE tempdb.dbo.#DefaultHideCategoryonMenu

             DECLARE @FamilyAttributeDetail TABLE
             (PimAttributeId       INT,
              AttributeTypeName    VARCHAR(300),
              AttributeCode        VARCHAR(300),
              SourceColumnName     NVARCHAR(600),
              IsRequired           BIT,
              PimAttributeFamilyId INT
             );
             IF @DefaultFamilyId = 0
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @IsCategory = 1,
						  @DefaultFamilyId=@DefaultFamilyId;
                     UPDATE @FamilyAttributeDetail
                       SET
                           PimAttributeFamilyId = DBO.Fn_GetCategoryDefaultFamilyId();

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;
             ELSE
                 BEGIN
                     INSERT INTO @FamilyAttributeDetail
                     (PimAttributeId,
                      AttributeTypeName,
                      AttributeCode,
                      SourceColumnName,
                      IsRequired,
                      PimAttributeFamilyId
                     )
                     --Call Process to insert data of defeult family with cource column name and target column name 
                     EXEC Znode_ImportGetTemplateDetails
                          @TemplateId = @TemplateId,
                          @IsValidationRules = 0,
                          @IsIncludeRespectiveFamily = 1,
                          @DefaultFamilyId = @DefaultFamilyId,
                          @IsCategory = 1;

					---- Deleted Attribute which are not provided in product import CSV and required attribute not mapped with AttributeGroup
					Delete FAD from @FamilyAttributeDetail FAD
					where AttributeCode not in (select Name from tempdb.sys.columns where object_id = object_id(@TableName))
					and not exists(select * from ZnodePimAttributeGroupMapper ZPAGM inner join ZnodePimFamilyGroupMapper ZPFGM on ZPAGM.PimAttributeGroupId = ZPFGM.PimAttributeGroupId 
					               inner join ZnodePimAttribute ZPA on ZPAGM.PimAttributeId = ZPA.PimAttributeId and FAD.AttributeCode = ZPA.AttributeCode)
                 END;  
			 --Read all matched CategoryId with respect to their CategoryCode 

             --Read all attribute details with their datatype 

             IF NOT EXISTS
             (
                 SELECT TOP 1 1
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE INFORMATION_SCHEMA.TABLES.TABLE_NAME = '#DefaultAttributeValue'
             )
                 BEGIN
                     CREATE TABLE #DefaultAttributeValue
                     (AttributeTypeName          VARCHAR(300),
                      PimAttributeDefaultValueId INT,
                      PimAttributeId             INT,
                      AttributeDefaultValueCode  VARCHAR(100)
                     );
                     INSERT INTO #DefaultAttributeValue
                     (AttributeTypeName,
                      PimAttributeDefaultValueId,
                      PimAttributeId,
                      AttributeDefaultValueCode
                     )
                     --Call Process to insert default data value 
                     EXEC Znode_ImportGetPimAttributeDefaultValue;
                 END;
             ELSE
                 BEGIN
                     DROP TABLE #DefaultAttributeValue;
                 END;  
         
             -- Split horizontal table into verticle table by column name and attribute Value with their 
             -- corresponding AttributeId, Default family , Default AttributeValue Id  
             DECLARE @PimCategoryDetail TABLE
             ([PimCategoryId]              [INT] NULL,
              [PimAttributeId]             [INT] NULL,
              [PimAttributeValueId]        [INT] NULL,
              [PimAttributeDefaultValueId] [INT] NULL,
              [PimAttributeFamilyId]       [INT] NULL,
              [LocaleId]                   [INT] NULL,
              [AttributeCode]              [VARCHAR](500) NULL,
              [AttributeValue]             [NVARCHAR](MAX) NULL,
              [RowNumber]                  INT 
             );
             -- Column wise split data from source table ( global temporary table ) and inserted into temporary table variable @PimCategoryDetail
             -- Add PimAttributeDefaultValue 

             DECLARE Cr_AttributeDetails CURSOR LOCAL FAST_FORWARD
             FOR SELECT PimAttributeId,
                        AttributeTypeName,
                        AttributeCode,
                        IsRequired,
                        SourceColumnName,
                        PimAttributeFamilyId
                 FROM @FamilyAttributeDetail
                 WHERE ISNULL(SourceColumnName, '') <> '';
             OPEN Cr_AttributeDetails;
             FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
             WHILE @@FETCH_STATUS = 0
                 BEGIN
                     SET @NewProductId = 0;
                     SET @SQLQuery = 'SELECT '''+CONVERT(VARCHAR(100), @PimAttributeFamilyId)+''' PimAttributeFamilyId, 0 PimCategoryId,'''+CONVERT(VARCHAR(100), @AttributeId)+''' AttributeId ,
						   (SELECT TOP 1 PimAttributeDefaultValueId FROM #DefaultAttributeValue Where PimAttributeId =  '+CONVERT(VARCHAR(100), @AttributeId)+'AND  AttributeDefaultValueCode = TN.'+@SourceColumnName+' ) PimAttributeDefaultValueId,'+@SourceColumnName+','+CONVERT(VARCHAR(100), @LocaleId)+'LocaleId,RowNumber FROM '+@TableName+' TN';
                     INSERT INTO @PimCategoryDetail
                     ([PimAttributeFamilyId],
                      [PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeDefaultValueId],
                      AttributeValue,
                      LocaleId,
                      RowNumber
                     )
                     EXEC sys.sp_sqlexec
                          @SQLQuery;
                     FETCH NEXT FROM Cr_AttributeDetails INTO @AttributeId, @AttributeTypeName, @AttributeCode, @IsRequired, @SourceColumnName, @PimAttributeFamilyId;
                 END;
             CLOSE Cr_AttributeDetails;
             DEALLOCATE Cr_AttributeDetails;
             UPDATE ppdti
               SET
                   ppdti.AttributeValue = CASE
                                              WHEN ppdti.AttributeValue = 'Yes/No'
                                              THEN 'False'
                                          END
             FROM @PimCategoryDetail ppdti
                  INNER JOIN #DefaultAttributeValue dav ON dav.PimAttributeDefaultValueId = ppdti.PimAttributeDefaultValueId
             WHERE ISNULL(ppdti.AttributeValue, '') = '';

			 SELECT PCD.AttributeValue
			 INTO #DuplicateCategory
			 FROM @PimCategoryDetail PCD
			 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
			 where PA.AttributeCode = 'CategoryCode' 
			 GROUP BY PCD.AttributeValue
			 Having Count(*) > 1


			INSERT INTO ZnodeImportLog
			(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId)
			 SELECT '53' ,'CategoryCode',PCD.AttributeValue,PCD.RowNumber,@NewGUID,2,@GetDate,2,@GetDate,@ImportProcessLogId
			 FROM @PimCategoryDetail PCD
			 WHERE RowNumber IN (SELECT RowNumber frOM #DuplicateCategory DC 
								 INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)
								 WHERE PA.AttributeCode = 'CategoryCode' 
								 AND PCD.AttributeValue = DC.AttributeValue )

			SELECT PIMDTL.AttributeValue,PA.AttributeCode 
			INTO #DefaultHideCategoryonMenu
			FROM @PimCategoryDetail PIMDTL INNER JOIN ZnodePimAttribute PA ON (PIMDTL.PimAttributeId = PA.PimAttributeId)
			WHERE PA.AttributeCode='HideCategoryonMenu'

			INSERT INTO ZnodeImportLog  
			(ErrorDescription,ColumnName,Data,RowNumber,GUID,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,ImportProcessLogId) 
			SELECT '68' ,'HideCategoryonMenu',PCD.AttributeValue,PCD.RowNumber,@NewGUID,2,@GetDate,2,@GetDate,@ImportProcessLogId  
			FROM @PimCategoryDetail PCD  
			WHERE RowNumber IN (SELECT RowNumber frOM #DefaultHideCategoryonMenu DC   
			INNER JOIN ZnodePimAttribute PA ON (PCD.PimAttributeId = PA.PimAttributeId)  
			WHERE PA.AttributeCode = 'HideCategoryonMenu'   
			AND PCD.AttributeValue = DC.AttributeValue ) AND PCD.AttributeValue NOT IN ('1','0','yes','no','true','false')

            UPDATE PIMDTL
		    SET PIMDTL.AttributeValue= CASE PIMDTL.AttributeValue WHEN 'NO' THEN 'FALSE' WHEN 'YES' THEN 'TRUE' ELSE PIMDTL.AttributeValue END
		    FROM @PimCategoryDetail PIMDTL 
		    INNER JOIN ZnodePimAttribute PA ON (PIMDTL.PimAttributeId = PA.PimAttributeId)
		    WHERE PA.AttributeCode='HideCategoryonMenu';
			
			 ----update mediaid for CategoryImage
			 select zm.FileName,max(MediaId) as MediaId, PCD.RowNumber
			 into #CategoryImage
			 from ZnodeMedia ZM
			 inner join @PimCategoryDetail PCD on ZM.FileName = PCD.AttributeValue
			 where exists(select * from ZnodePimAttribute c where PCD.PimAttributeId = c.PimAttributeId and c.AttributeCode = 'CategoryImage')
			 group by zm.FileName, PCD.RowNumber 
			 
			update a set a.AttributeValue = b.MediaId
			from @PimCategoryDetail a
			inner join #CategoryImage b on a.AttributeValue = b.FileName and a.RowNumber = b.RowNumber
				
			 ----update PimCategoryId present in znode on basis of CategoryCode
			 update d set  d.PimCategoryId = a.PimCategoryId
			 from ZnodePimCategoryAttributeValue a
			 inner join ZnodePimCategoryAttributeValueLocale b on a.PimCategoryAttributeValueId = b.PimCategoryAttributeValueId
			 inner join ZnodePimAttribute c on a.PimAttributeId = c.PimAttributeId
			 inner join @PimCategoryDetail d on d.AttributeValue = b.CategoryValue and c.PimAttributeId = d.PimAttributeId
			 where c.AttributeCode = 'CategoryCode' 

			 ----update PimCategoryId for other attributes if category is present
			 ;WITH CTE_UpdateCategoryId AS
			(
				select PimCategoryId, RowNumber from @PimCategoryDetail where isnull(PimCategoryId,0) <> 0
			)
			UPDATE PCD set PCD.PimCategoryId = UC.PimCategoryId
			FROM @PimCategoryDetail PCD
			INNER JOIN CTE_UpdateCategoryId UC on PCD.RowNumber = UC.RowNumber
			 ---------------------------

             -- Pass product records one by one 
             DECLARE @IncrementalId INT= 1;
             DECLARE @SequenceId INT=
             (
                 SELECT MAX(RowNumber)
                 FROM @PimCategoryDetail
             );
             DECLARE @PimCategoryDetailToInsert PIMCATEGORYDETAIL;  --User define table type to pass multiple records of product in single step

             WHILE @IncrementalId <= @SequenceId
                 BEGIN
                     INSERT INTO @PimCategoryDetailToInsert
                     ([PimCategoryId],
                      [PimAttributeId],
                      [PimAttributeValueId],
                      [PimAttributeDefaultValueId],
                      [PimAttributeFamilyId],
                      [LocaleId],
                      [AttributeCode],
                      [AttributeValue]
                     )
                            SELECT [PimCategoryId],
                                   [PimAttributeId],
                                   [PimAttributeValueId],
                                   [PimAttributeDefaultValueId],
                                   [PimAttributeFamilyId],
                                   [LocaleId],
                                   [AttributeCode],
                                   [AttributeValue]
                            FROM @PimCategoryDetail
                            WHERE [@PimCategoryDetail].RowNumber = @IncrementalId AND LTRIM(RTRIM([AttributeValue])) <> '';
                     --ORDER BY [@PimCategoryDetail].RowNumber;
                     ----Call process to finally insert data into 
                     ----------------------------------------------------------
                     --1. [dbo].[ZnodePimProduct]
                     --2. [dbo].[ZnodePimAttributeValue]
                     --3. [dbo].[ZnodePimAttributeValueLocale]

                     EXEC [Znode_ImportInsertUpdatePimCategory]
                          @InsertCategory = @PimCategoryDetailToInsert,
                          @UserID = @UserID,
                          @status = @status OUT,
						  @IsImport=1;--,@IsNotReturnOutput=1;
                     DELETE FROM @PimCategoryDetailToInsert;
                     SET @IncrementalId = @IncrementalId + 1;
                 END;

			
				-- Update Record count in log 
				DECLARE @FailedRecordCount BIGINT
				DECLARE @SuccessRecordCount BIGINT
				SELECT @FailedRecordCount = COUNT(DISTINCT RowNumber) FROM ZnodeImportLog WHERE RowNumber IS NOT NULL AND  ImportProcessLogId = @ImportProcessLogId;
				SET @SQLQuery = ' Select @SuccessRecordCount = count(DISTINCT RowNumber) FROM '+ @TableName ;
				EXEC	sp_executesql @SQLQuery, N'@SuccessRecordCount BIGINT out' , @SuccessRecordCount=@SuccessRecordCount OUTPUT
				UPDATE ZnodeImportProcessLog SET FailedRecordcount = @FailedRecordCount , SuccessRecordCount = @SuccessRecordCount, TotalProcessedRecords = (ISNULL(@FailedRecordCount,0) + ISNULL(@SuccessRecordCount,0))
				WHERE ImportProcessLogId = @ImportProcessLogId;
				
			SET @GetDate = dbo.Fn_GetDate();
             --Updating the import process status
			UPDATE ZnodeImportProcessLog
			SET Status = CASE WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 4 )
								WHEN ISNULL(@FailedRecordCount,0) = 0 AND ISNULL(@SuccessRecordCount,0) > 0 THEN dbo.Fn_GetImportStatus( 2 )
								WHEN ISNULL(@FailedRecordCount,0) > 0 AND ISNULL(@SuccessRecordCount,0) = 0 THEN dbo.Fn_GetImportStatus( 3 )
							END, 
				ProcessCompletedDate = @GetDate
			WHERE ImportProcessLogId = @ImportProcessLogId;	   	  
            
			IF OBJECT_ID('tempdb.dbo.#DuplicateCategory', 'U') IS NOT NULL 
		     DROP TABLE tempdb.dbo.#DuplicateCategory

			IF OBJECT_ID('tempdb.dbo.#DefaultHideCategoryonMenu', 'U') IS NOT NULL   
			DROP TABLE tempdb.dbo.#DefaultHideCategoryonMenu

         END TRY
         BEGIN CATCH
             SELECT ERROR_MESSAGE(),ERROR_LINE(),ERROR_PROCEDURE();
 
			 DECLARE @Error_procedure VARCHAR(8000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_ImportPimCategoryData @TableName = '+CAST(@TableName AS VARCHAR(max))+',@NewGUId='+CAST(@NewGUId AS VARCHAR(200)) +',@TemplateId='+CAST(@TemplateId AS VARCHAR(200)) +',@ImportProcessLogId='+CAST(@ImportProcessLogId AS VARCHAR(10))+',@UserId = '+CAST(@UserId AS VARCHAR(50))+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@DefaultFamilyId='+CAST(@DefaultFamilyId AS VARCHAR(200));
            ---Import process updating fail due to database error
		UPDATE ZnodeImportProcessLog
		SET Status = dbo.Fn_GetImportStatus( 3 ), ProcessCompletedDate = @GetDate
		WHERE ImportProcessLogId = @ImportProcessLogId;

		---Loging error for Import process due to database error
		INSERT INTO ZnodeImportLog( ErrorDescription, ColumnName, Data, GUID, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, ImportProcessLogId )
		SELECT '93', '', '', @NewGUId,  @UserId, @GetDate, @UserId, @GetDate, @ImportProcessLogId

		--Updating total and fail record count
		UPDATE ZnodeImportProcessLog SET FailedRecordcount = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) WHERE ImportProcessLogId = @ImportProcessLogId) , SuccessRecordCount = 0 ,
		TotalProcessedRecords = (SELECT TOP 1 RowsCount FROM Znode_ImportCsvRowCount with (nolock) Where ImportProcessLogId = @ImportProcessLogId)
		WHERE ImportProcessLogId = @ImportProcessLogId;

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_ImportPimCategoryData',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
            
         END CATCH;
     END;

GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimProduct' AND COLUMN_NAME = 'CategoryBanner')
BEGIN
    ALTER TABLE ZnodePimProduct DROP COLUMN CategoryBanner;
END             
        
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimProduct' AND COLUMN_NAME = 'CategoryName')
BEGIN
    ALTER TABLE ZnodePimProduct DROP COLUMN CategoryName;
END
              
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimProduct' AND COLUMN_NAME = 'CategoryTitle')
BEGIN
    ALTER TABLE ZnodePimProduct DROP COLUMN CategoryTitle;
END       
               
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimProduct' AND COLUMN_NAME = 'DisplayOrderCategory')
BEGIN
    ALTER TABLE ZnodePimProduct DROP COLUMN DisplayOrderCategory;
END      
        
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimProduct' AND COLUMN_NAME = 'CategoryImage')
BEGIN
    ALTER TABLE ZnodePimProduct DROP COLUMN CategoryImage;
END       
     
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ZnodePimProduct' AND COLUMN_NAME = 'CategoryCode')
BEGIN
    ALTER TABLE ZnodePimProduct DROP COLUMN CategoryCode;
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteOrderById')
	DROP PROC Znode_DeleteOrderById

GO

CREATE PROCEDURE [dbo].[Znode_DeleteOrderById]
(@OrderDetailId INT = 0 ,
 @Status   BIT OUT,
 @OmsOrderIds TransferId READONLY 

)
AS

/*
begin tran
exec Znode_DeleteOrderById 6
rollback tran
*/
BEGIN
  SET NOCOUNT ON
   BEGIN  TRAN DeleteOrderById
  BEGIN TRY 
		   	DECLARE @OmsOrderId TABLE (OmsOrderId INT ) 
			DECLARE @OmsOrderDetailsId TABLE (OmsOrderDetailsId  INT ) 
			
			INSERT INTO  @OmsOrderId 
			SELECT Id 
			FROM  @OmsOrderIds


			Insert into @OmsOrderId
				Select OmsOrderId from ZnodeOmsOrderDetails a
				Where OmsOrderDetailsId = @OrderDetailId and not exists 
				(select * from @OmsOrderId b where b.OmsOrderId = a.OmsOrderId)


			INSERT INTO @OmsOrderDetailsId 
			SELECT OmsOrderDetailsId 
			FROM ZnodeOmsOrderDetails  ZP 
			WHERE (OmsOrderDetailsId = @OrderDetailId OR 
			EXISTS (SELECT TOP 1 1  FROM @OmsOrderId WHERE OmsOrderId = ZP.OmsOrderId)  ) 

			
			DECLARE @TBL_OmsOrderLineItems TABLE (OmsOrderLineItemsId INT,OmsOrderShipmentId INT, OmsOrderDetailsId INT)
			INSERT INTO @TBL_OmsOrderLineItems
			SELECT OmsOrderLineItemsId,OmsOrderShipmentId, OmsOrderDetailsId 
			FROM ZnodeOmsOrderLineItems S 
			WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId TR WHERE TR.OmsOrderDetailsId = S.OmsOrderDetailsId )
			DELETE FROM ZnodeOmsOrderAttribute WHERE EXISTS (SELECT OmsOrderLineItemsId FROM @TBL_OmsOrderLineItems )
			DELETE FROM ZnodeOmsOrderDiscount WHERE EXISTS (SELECT OmsOrderLineItemsId FROM @TBL_OmsOrderLineItems TY WHERE TY.OmsOrderDetailsId = ZnodeOmsOrderDiscount.OmsOrderDetailsId   or TY.OmsOrderLineItemsId = ZnodeOmsOrderDiscount.OmsOrderLineItemId  )
			DELETE FROM ZnodeOmsOrderWarehouse WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsOrderWarehouse.OmsOrderLineItemsId  )
			DELETE FROM ZnodeRmaRequestItem WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeRmaRequestItem.OmsOrderLineItemsId  )
			DELETE FROM ZnodeOmsOrderLineItemsAdditionalCost WHERE EXISTS ( SELECT TOP 1 1 FROM 
			ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)
			AND ZnodeOmsOrderLineItems.OmsOrderLineItemsId = ZnodeOmsOrderLineItemsAdditionalCost.OmsOrderLineItemsId)

			DELETE FROM ZnodeOmsDownloadableProductKey
			WHERE EXISTS(SELECT * FROM ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsOrderLineItems.OmsOrderDetailsId)
						AND ZnodeOmsDownloadableProductKey.OmsOrderLineItemsId = ZnodeOmsOrderLineItems.OmsOrderLineItemsId)

			DELETE FROM ZnodeOmsPersonalizeItem WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsPersonalizeItem.OmsOrderLineItemsId)
		   	DELETE FROM ZnodeOmsTaxOrderLineDetails WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsTaxOrderLineDetails.OmsOrderLineItemsId)
		   	DELETE FROM znodeGiftCardHistory WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =znodeGiftCardHistory.OmsOrderDetailsId)
		   	DELETE FROM znodeOmsEmailHistory WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =znodeOmsEmailHistory.OmsOrderDetailsId)
		   	DELETE FROM ZnodeOmsReferralCommission WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsReferralCommission.OmsOrderDetailsId)
		   	DELETE FROM ZnodeOmsTaxOrderDetails WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsTaxOrderDetails.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsHistory   WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsHistory.OmsOrderDetailsId)
			DELETE FROM znodeOmsNotes WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =znodeOmsNotes.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsOrderShipment WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderShipmentId = ZnodeOmsOrderShipment.OmsOrderShipmentId )
		   	DELETE FROM ZnodeOmsCustomerShipping WHERE EXISTS(SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId =ZnodeOmsCustomerShipping.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsOrderDetails  WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsOrderDetails.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsTaxRule WHERE EXISTS (SELECT TOP 1 1  FROM @OmsOrderId T WHERE T.OmsOrderId = ZnodeOmsTaxRule.OmsOrderId)
            DELETE FROM ZnodeOrderPayment WHERE EXISTS (SELECT TOP 1 1  FROM @OmsOrderId T WHERE T.OmsOrderId = ZnodeOrderPayment.OmsOrderId)
		   	DELETE FROM ZnodeOmsOrder WHERE EXISTS (SELECT TOP 1 1  FROM @OmsOrderId T WHERE T.OmsOrderId = ZnodeOmsOrder.OmsOrderId)
            









		SELECT 1 AS ID , CAST(1 AS BIT) AS Status;

        SET @Status = 1;    
		 COMMIT  TRAN DeleteOrderById
	END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE	()
	   SELECT 0 AS ID , CAST(0 AS BIT) AS Status;
	SET @Status = 0;
		ROLLBACK TRAN DeleteOrderById
	SELECT ERROR_MESSAGE()
	END CATCH

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetCatalogList')
	DROP PROC Znode_GetCatalogList

GO

CREATE PROCEDURE [dbo].[Znode_GetCatalogList]
(
	@WhereClause	NVARCHAR(MAX),
	@Rows			INT = 100,
	@PageNo			INT = 1,
	@Order_BY		VARCHAR(100) = '',
	@RowsCount		INT OUT
)
AS
/*
	Summary :- This Procedure is used to get the publish status of the catalog
	Unit Testig
	EXEC Znode_GetCatalogList '',100,1,'',0
	EXEC Znode_GetCatalogList null,100,1,'',0
*/
BEGIN 
	BEGIN TRY
	SET NOCOUNT ON

	DECLARE @SQL NVARCHAR(MAX)
	DECLARE @TBL_CatalogId TABLE (PimCatalogId INT, PublishCatalogLogId INT,CatalogName VARCHAR(MAX),PublishStatus VARCHAR(300),RowId INT, CountId INT,
		PublishCreatedDate DATETIME, PublishModifiedDate DATETIME, PublishCategoryCount INT, PublishProductCount INT, IsActive BIT, CatalogCode NVARCHAR(100));

	SET @SQL = '

		;With Cte_MaxPublish AS
		(
			SELECT max(PublishCatalogLogId) PublishCatalogLogId,PimCatalogId
			FROM ZnodePublishCatalogLog ZPCL 
			WHERE ZPCL.PublishType=''Catalog'' OR ZPCL.PublishType IS NULL
			GROUP BY PimCatalogId
		)
		,Cte_CatalogLog AS
		(
			SELECT ZPC.CatalogName CatalogName, PublishCatalogLogId PublishCatalogLogId, TYU.DisplayName PublishStatus ,ZPC.PimCatalogId
				,ZPCL.CreatedDate AS PublishCreatedDate,ZPCL.ModifiedDate AS PublishModifiedDate,
				ISNULL(ZPCL.PublishCategoryId,0)PublishCategoryCount,ISNULL(ZPCL.PublishProductId,0) PublishProductCount,ZPC.IsActive, ZPC.CatalogCode
			FROM ZnodePimCatalog ZPC 
			LEFT JOIN ZnodePublishCatalogLog ZPCL WITH (NOLOCK) ON ( EXISTS (SELECT TOP 1 1 FROM Cte_MaxPublish CTE 											
			WHERE CTE.PimCatalogId = ZPC.PimCatalogId AND CTE.PublishCatalogLogId = ZPCL.PublishCatalogLogId) )	
			LEFT JOIN ZnodePublishState TYU ON (TYU.PublishStateId = ZPCL.PublishStateId )
		)
		,Cte_PublishStatus AS
		(
			SELECT PimCatalogId, PublishCatalogLogId, CatalogName, PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,
				PublishProductCount,IsActive,CatalogCode,
				'+[dbo].[Fn_GetPagingRowId](@Order_BY,'PublishCatalogLogId DESC')+' , Count(*)Over() CountId FROM Cte_CatalogLog
			WHERE 1=1 '+[dbo].[Fn_GetFilterWhereClause](@WhereClause)+' 
		)

		SELECT PimCatalogId, PublishCatalogLogId,CatalogName,PublishStatus,RowId,CountId,PublishCreatedDate,PublishModifiedDate,
			PublishCategoryCount,PublishProductCount,IsActive,CatalogCode
		FROM Cte_PublishStatus 
		'+[dbo].[Fn_GetPaginationWhereClause](@PageNo,@Rows)+' '

		INSERT INTO @TBL_CatalogId
		EXEC (@SQL);

		SELECT PimCatalogId,PublishCatalogLogId,CatalogName,PublishStatus,PublishCreatedDate,PublishModifiedDate,PublishCategoryCount,
			PublishProductCount,IsActive, CatalogCode
		FROM @TBL_CatalogId;

		SET @RowsCount = ISNULL((SELECT TOP 1 COUNTID FROM @TBL_CatalogId),0);

	END TRY
	BEGIN CATCH
		DECLARE @Status BIT ;
		SET @Status = 0;
			
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(),
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(),
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCatalogList 
					@WhereClause = '''+ISNULL(@WhereClause,'''''')+''',
					@Rows='+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+',
					@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
					@Order_BY='''+ISNULL(@Order_BY,'''''')+''',
					@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''');

	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;

	EXEC Znode_InsertProcedureErrorLog
			@ProcedureName = 'Znode_GetCatalogList',
			@ErrorInProcedure = 'Znode_GetCatalogList',
			@ErrorMessage = @ErrorMessage,
			@ErrorLine = @ErrorLine,
			@ErrorCall = @ErrorCall;
	END CATCH
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetMediaFolderDetails')
	DROP PROC Znode_GetMediaFolderDetails

GO

CREATE PROCEDURE [dbo].[Znode_GetMediaFolderDetails]
( 
	@WhereClause VARCHAR(1000),
	@MediaPathId INT,
	@Rows        INT           = 1000,
	@PageNo      INT           = 0,
	@Order_BY    VARCHAR(1000) = '',
	@RowsCount   INT OUT,
	@LocaleId    INT           = 1
)
AS
/*
	Summary: This Procedure is Used to Get Details of Media Folder

	Unit Testing:
	begin tran
		DECLARE @RowsCount BIGINT  
		EXEC Znode_GetMediaFolderDetails @MediaPathId = -1 , @WhereClause='',@Rows=2147483647,@PageNo=1 ,@Order_By='', @RowsCount = @RowsCount OUT  
	rollback tran

	begin tran
		DECLARE @RowsCount BIGINT  
		EXEC Znode_GetMediaFolderDetails @MediaPathId = 1 , @WhereClause='' ,@Rows=10,@PageNo=1 ,@RowsCount =@RowsCount
	rollback tran
*/
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
	DECLARE @DisplayNameId INT,
	@DescriptionId INT

	SELECT @DisplayNameId =MediaAttributeId FROM ZnodeMediaAttribute WHERE AttributeCode = 'DisplayName';
	SELECT @DescriptionId =MediaAttributeId FROM ZnodeMediaAttribute WHERE AttributeCode = 'Description';

	DROP TABLE IF EXISTS #GetMediaPathDetail;
	DROP TABLE IF EXISTS ##GetMediaPathHierarchy;

	CREATE TABLE #ZnodeMediaAttributeValue_DisplayName (MediaCategoryId INT,AttributeValue VARCHAR(500));

	INSERT INTO #ZnodeMediaAttributeValue_DisplayName
	SELECT MediaCategoryId, AttributeValue 
	FROM ZnodeMediaAttributeValue 
	WHERE MediaAttributeId =@DisplayNameId;

	CREATE TABLE #ZnodeMediaAttributeValue_Description (MediaCategoryId INT,AttributeValue VARCHAR(500));

	INSERT INTO #ZnodeMediaAttributeValue_Description
	SELECT MediaCategoryId, AttributeValue 
	FROM ZnodeMediaAttributeValue 
	WHERE MediaAttributeId =@DescriptionId;

	CREATE TABLE #GetMediaPathDetail
	(MediaCategoryId INT, MediaPathId INT, [Folder] VARCHAR(1000), [FileName] VARCHAR(1000), Size VARCHAR(30), Height VARCHAR(30) , 
		Width VARCHAR(30), [Type] VARCHAR(100), [MediaType] VARCHAR(100), CreatedDate DATETIME, ModifiedDate DATETIME,
		MediaId INT, [Path] VARCHAR(1000), MediaServerPath VARCHAR(1000), MediaServerThumbnailPath VARCHAR(1000), FamilyCode VARCHAR(100),
		CreatedBy INT, [DisplayName] VARCHAR(5000), [ShortDescription] VARCHAR(1000), [PathName] VARCHAR(1000), [Version] INT
	);

	INSERT INTO #GetMediaPathDetail
	(MediaCategoryId, MediaPathId, [Folder], [FileName], Size, Height, Width, Type, [MediaType], CreatedDate, ModifiedDate, MediaId,
		Path, MediaServerPath, MediaServerThumbnailPath, FamilyCode, CreatedBy, [DisplayName], [ShortDescription], [PathName], Version
	)
	SELECT Zmc.MediaCategoryId, ZMPL.MediaPathId, ZMPL.[PathName] [Folder], zM.[FileName], Zm.Size, Zm.Height, Zm.Width, Zm.Type, 
		Zm.Type [MediaType], zm.CreatedDate CreatedDate, zm.ModifiedDate ModifiedDate, Zm.MediaId, 
		ISNULL(ZMCF.CDNUrl, ZMCF.URL)+ZMSM.ThumbnailFolderName+'\'+zM.Path MediaThumbnailPath, ISNULL(ZMCF.CDNUrl, ZMCF.URL)+zM.Path MediaServerPath, 
		zM.Path, zmafl.FamilyCode FamilyCode, Zm.CreatedBy,ZMAVD.AttributeValue,ZMAVS.AttributeValue,ZMPL.[PathName], Zm.Version
	FROM ZnodeMediaCategory ZMC
	LEFT JOIN ZnodeMediaAttributeFamily zmafl ON(zmc.MediaAttributeFamilyId = zmafl.MediaAttributeFamilyId)
	INNER JOIN ZnodeMediaPathLocale ZMPL ON(ZMC.MediaPathId = ZMPL.MediaPathId)
	INNER JOIN ZnodeMedia ZM ON(Zm.MediaId = Zmc.MediaId)
	LEFT JOIN ZnodeMediaConfiguration ZMCF ON (ZMCF.MediaConfigurationId = ZM.MediaConfigurationId AND ZMCF.IsActive = 1)
	LEFT JOIN ZnodeMediaServerMaster ZMSM ON (ZMSM.MediaServerMasterId = ZMCF.MediaServerMasterId)
	LEFT JOIN #ZnodeMediaAttributeValue_DisplayName ZMAVD ON ZMAVD.MediaCategoryId = Zmc.MediaCategoryId AND ZMAVD.AttributeValue IS NOT NULL
	LEFT JOIN #ZnodeMediaAttributeValue_Description ZMAVS ON ZMAVS.MediaCategoryId = Zmc.MediaCategoryId AND ZMAVS.AttributeValue IS NOT NULL;

	CREATE INDEX Ind_#GetMediaPathDetail_MediaCategoryId ON #GetMediaPathDetail (MediaPathId);

	DECLARE @Rows_start VARCHAR(1000), @Rows_end VARCHAR(1000);

	SET @MediaPathId = CASE WHEN @MediaPathId = -1 THEN 1 ELSE @MediaPathId END;

	SET @Rows_start = CASE WHEN @Rows >= 1000000 THEN 0 ELSE(@Rows * (@PageNo - 1)) + 1 END;
				 
	SET @Rows_end = CASE WHEN @Rows >= 1000000 THEN @Rows ELSE @Rows * (@PageNo) END;
				 
	DECLARE @SQL NVARCHAR(MAX);

	SET @Order_BY = REPLACE(@Order_BY, 'MediaPathId', 'Convert(numeric,MediaPathId)');
	SET @Order_BY = REPLACE(@Order_BY, 'Size', 'Convert(numeric,Size)');
	SET @Order_BY = REPLACE(@Order_BY, 'MediaId', 'Convert(numeric,MediaId)');
	SET @Order_BY = REPLACE(@Order_BY, 'CreatedBy', 'Convert(numeric,CreatedBy)');
	SET @Order_BY = REPLACE(@Order_BY, 'MediaCategoryId', 'Convert(numeric,MediaCategoryId)');

	SET @SQL = '
		SELECT * INTO ##GetMediaPathHierarchy FROM DBO.FN_GetMediaPathHierarchy('+CAST( @MediaPathId  AS VARCHAR(1000))+')';

	EXEC SP_executesql @SQL;

	SET @SQL = ' 
		DECLARE @V_MediaServerPath  VARCHAR(MAX) , @V_MediaServerThumbnailPath  VARCHAR(MAX)  
		SELECT RANK()OVER(ORDER BY '+CASE
										WHEN @Order_BY IS NULL
											OR @Order_BY = ''
										THEN ''
										ELSE @Order_BY+' ,'
								END+'MediaId ) RowId, [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
			[MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath,
			ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,[FamilyCode],[CreatedBy],[ShortDescription],[DisplayName], [Version]
		INTO #MediaPathDetail FROM '+CASE
										WHEN @MediaPathId = -1
										THEN ' View_GetAllMediaInRoot '
										ELSE ' #GetMediaPathDetail ZMC '
								END+' WHERE 1=1 '+CASE
													WHEN @WhereClause = ''
														OR @WhereClause IS NULL
														OR @WhereClause = '-1'
													THEN 'AND exists (select top 1 1 FROM ##GetMediaPathHierarchy Q
		WHERE Q.MediaPathId = ZMC.MediaPathId )'
													ELSE CASE
														WHEN @MediaPathId = -1
														THEN ' AND '+@WhereClause
														ELSE ' AND exists (select top 1 1 FROM ##GetMediaPathHierarchy Q
		WHERE Q.MediaPathId = ZMC.MediaPathId ) and  '+@WhereClause
														END
													END+' Order BY '+CASE
																		WHEN @Order_BY IS NULL
																				OR @Order_BY = ''
																		THEN ' MediaCategoryId DESC'
																		ELSE @Order_BY
																	END+' SELECT  @Count=ISNULL(Count(1),0) FROM  #MediaPathDetail  SELECT [MediaCategoryId],[MediaPathId],[Folder],[FileName],[Size],[Height],[Width],
			[MediaType],[CreatedDate],[ModifiedDate],[MediaId],[Path],ISNULL(MediaServerPath,'''') AS MediaServerPath, ISNULL(MediaServerThumbnailPath,'''') AS MediaServerThumbnailPath,
			[FamilyCode],[CreatedBy],[ShortDescription],[DisplayName],[Version]
		FROM #MediaPathDetail
		WHERE RowId BETWEEN '+@Rows_start+' AND '+@Rows_end+' Order BY '+CASE
																			WHEN @Order_BY IS NULL
																				OR @Order_BY = ''
																			THEN ' MediaCategoryId DESC '
																			ELSE @Order_BY
																		END;
		
		EXEC SP_executesql @SQL,
					  N'@Count INT OUT',
					  @Count = @RowsCount OUT;

	DROP TABLE IF EXISTS #GetMediaPathDetail;
	DROP TABLE IF EXISTS ##GetMediaPathHierarchy;

	END TRY
	BEGIN CATCH
		DECLARE @Status BIT;
		SET @Status = 0;

		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), 
				@ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), 
				@ErrorLine VARCHAR(100)= ERROR_LINE(),
				@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetMediaFolderDetails 
					@WhereClause = '''+ISNULL(@WhereClause,'''''')+''',
					@Rows='+ISNULL(CAST(@Rows AS VARCHAR(50)),'''''')+',
					@PageNo='+ISNULL(CAST(@PageNo AS VARCHAR(50)),'''')+',
					@Order_BY='''+ISNULL(@Order_BY,'''''')+''',
					@RowsCount='+ISNULL(CAST(@RowsCount AS VARCHAR(50)),'''')+',
					@MediaPathId='+ISNULL(CAST(@WhereClause AS VARCHAR(100)),'''')+',
					@LocaleId = '+ISNULL(CAST(@LocaleId AS VARCHAR(50)),'''');
             
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    

		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetMediaFolderDetails',
		@ErrorInProcedure = 'Znode_GetMediaFolderDetails',
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;                                
	END CATCH;
END;

GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'ErrorDescription' AND TABLE_NAME = 'ZnodeImportLog')
	AND (SELECT MAX(LEN(ErrorDescription)) FROM ZnodeImportLog)<=100
BEGIN
	ALTER TABLE ZnodeImportLog ALTER COLUMN ErrorDescription VARCHAR(100);
END

GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'NC_Idx_ZnodeImportLog_ImportProcessLogId' AND object_id = OBJECT_ID('ZnodeImportLog'))
	AND (SELECT MAX(LEN(ErrorDescription)) FROM ZnodeImportLog)<=100
BEGIN
	CREATE NONCLUSTERED INDEX NC_Idx_ZnodeImportLog_ImportProcessLogId
    ON dbo.ZnodeImportLog (ImportProcessLogId,ErrorDescription,ColumnName);
END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_PostSubmitOrderProcess')
	DROP PROC Znode_PostSubmitOrderProcess

GO

CREATE PROCEDURE [dbo].[Znode_PostSubmitOrderProcess]
(
	@PostOrderXml XML,
	@InventoryData XML,
	@UserId INT,
	@PortalId INT = 0,
	@Status BIT OUT
)
AS
BEGIN
BEGIN TRY
--BEGIN TRAN PostOrder
	DECLARE @OmsOrderDetailsId INT
	DECLARE @OmsOrderId INT = (SELECT Tbl.Col.value( 'OrderID[1]', 'NVARCHAR(2000)' ) AS OrderId FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	
	DECLARE @IsGuest BIT = (SELECT Tbl.Col.value( 'IsGuest[1]', 'NVARCHAR(2000)' ) AS IsGuest FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))

	DECLARE @OmsCookieMappingId INT = (SELECT Tbl.Col.value( 'CookieMappingId[1]', 'NVARCHAR(2000)' ) AS CookieMappingId FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	DECLARE @BillingAddressId INT = (SELECT Tbl.Col.value( 'BillingAddressId[1]', 'NVARCHAR(2000)' ) AS BillingAddressId FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	
	DECLARE @IsReferralCommission BIT = (SELECT Tbl.Col.value( 'IsReferralCommission[1]', 'NVARCHAR(2000)' ) AS IsReferralCommission FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	DECLARE @CommissionAmount NUMERIC(26,6) = (SELECT Tbl.Col.value( 'CommissionAmount[1]', 'NVARCHAR(2000)' ) AS CommissionAmount FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col))
	
	SET @OmsOrderDetailsId = (SELECT OmsOrderDetailsId from ZnodeOmsOrderDetails WHERE OmsOrderId = @OmsOrderId AND IsActive = 1)
	DECLARE @SetBillingShippingFlags BIT = (SELECT Tbl.Col.value( 'SetBillingShippingFlags[1]', 'NVARCHAR(2000)' ) AS SetBillingShippingFlags FROM @PostOrderXml.nodes('//PostOrderSubmitModel') AS Tbl(Col)) 
	DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
	
	--Fetching required user details 
	DECLARE @ReferralCommissionTypeId INT, @ReferralCommission NUMERIC(28,6) , @FirstName VARCHAR(100),@LastName VARCHAR(100)
	SELECT @FirstName = FirstName,@LastName = LastName, @ReferralCommission = CASE WHEN ReferralCommission IS NULL THEN 0 ELSE ReferralCommission END, @ReferralCommissionTypeId = ReferralCommissionTypeId
	FROM ZnodeUser WITH (NOLOCK) 
	WHERE UserId = @UserId
	
	---Voucher model fetch
	CREATE TABLE #TempVoucher
	(
		VoucherBalance NUMERIC(28,6),VoucherNumber NVARCHAR(600),VoucherMessage NVARCHAR(MAX),IsVoucherValid BIT,
		IsVoucherApplied BIT,VoucherAmountUsed NUMERIC(28,6),VoucherName NVARCHAR(600),ExpirationDate DATETIME,
		CultureCode NVARCHAR(600),PortalId INT,IsExistInOrder BIT,UserId INT,IsActive BIT,OrderVoucherAmount NUMERIC(28,6)
	)

	INSERT INTO #TempVoucher
	(
		VoucherBalance ,VoucherNumber,VoucherMessage ,IsVoucherValid ,
		IsVoucherApplied ,VoucherAmountUsed ,VoucherName ,ExpirationDate ,
		CultureCode ,PortalId ,IsExistInOrder ,UserId ,IsActive ,OrderVoucherAmount 
	)
	SELECT Tbl.Col.value( 'VoucherBalance[1]', 'NVARCHAR(2000)' ) AS VoucherBalance,
		Tbl.Col.value( 'VoucherNumber[1]', 'NVARCHAR(2000)' ) AS VoucherNumber,
		Tbl.Col.value( 'VoucherMessage[1]', 'NVARCHAR(2000)' ) AS VoucherMessage,
		Tbl.Col.value( 'IsVoucherValid[1]', 'NVARCHAR(2000)' ) AS IsVoucherValid,
		Tbl.Col.value( 'IsVoucherApplied[1]', 'NVARCHAR(2000)' ) AS IsVoucherApplied,
		Tbl.Col.value( 'VoucherAmountUsed[1]', 'NVARCHAR(2000)' ) AS VoucherAmountUsed,
		Tbl.Col.value( 'VoucherName[1]', 'NVARCHAR(2000)' ) AS VoucherName,
		Tbl.Col.value( 'ExpirationDate[1]', 'NVARCHAR(2000)' ) AS ExpirationDate,
		Tbl.Col.value( 'CultureCode[1]', 'NVARCHAR(2000)' ) AS CultureCode,
		Tbl.Col.value( 'PortalId[1]', 'NVARCHAR(2000)' ) AS PortalId,
		Tbl.Col.value( 'IsExistInOrder[1]', 'NVARCHAR(2000)' ) AS IsExistInOrder,
		Tbl.Col.value( 'UserId[1]', 'NVARCHAR(2000)' ) AS UserId,	
		Tbl.Col.value( 'IsActive[1]', 'NVARCHAR(2000)' ) AS IsActive,
		Tbl.Col.value( 'OrderVoucherAmount[1]', 'NVARCHAR(2000)' ) AS OrderVoucherAmount
	FROM @PostOrderXml.nodes('//PostOrderSubmitModel/Vouchers/VoucherModel') AS Tbl(Col)


	----Promotion coupon start
	DECLARE @TempPromotionCoupon DBO.PromotionCoupons

	INSERT INTO @TempPromotionCoupon
	SELECT Tbl.Col.value( 'Code[1]', 'NVARCHAR(2000)' ) AS Code,
		Tbl.Col.value( 'IsExistInOrder[1]', 'NVARCHAR(2000)' ) AS IsExistInOrder,@OmsOrderId AS OmsOrderId
	FROM @PostOrderXml.nodes('//PostOrderSubmitModel/Coupons/CouponModel') AS Tbl(Col)

	--Deduct promotion coupon count
	EXEC [Znode_PromotionCouponDeduct] @PromotionCoupons = @TempPromotionCoupon
	----Promotion coupon END
	
	--Deduct inventory quantity
	EXEC [Znode_UpdateInventoryPostOrder] @SkuXml = @InventoryData,@PortalId = @PortalId, @UserId= @UserId,@OmsOrderId=@OmsOrderId,@Status = 0

	----Voucher start
	IF EXISTS(SELECT * FROM #TempVoucher)
	BEGIN
		INSERT INTO ZnodeGiftCardHistory(GiftCardId,TransactionDate,TransactionAmount,OmsOrderDetailsId,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate,Notes,RemainingAmount)
		SELECT GC.GiftCardId, @GetDate, VoucherAmountUsed,@OmsOrderDetailsId,@UserId, @GetDate, @UserId, @GetDate, 'Voucher is used to make payments for the order' as Notes, NULL AS RemainingAmount
		FROM #TempVoucher V
		INNER JOIN ZnodeGiftCard GC WITH (NOLOCK) ON V.VoucherNumber = GC.CardNumber

		IF EXISTS(SELECT * FROM #TempVoucher WHERE IsExistInOrder IN ('TRUE','1'))
		BEGIN
			UPDATE GC SET GC.RemainingAmount = V.VoucherBalance
			FROM #TempVoucher V
			INNER JOIN ZnodeGiftCard GC ON V.VoucherNumber = GC.CardNumber
			WHERE IsExistInOrder IN ('TRUE','1')  			
		END

		IF EXISTS(SELECT * FROM #TempVoucher WHERE IsExistInOrder IN ('FALSE','0'))
		BEGIN
			UPDATE GC SET GC.RemainingAmount = GC.RemainingAmount - V.VoucherAmountUsed
			FROM #TempVoucher V
			INNER JOIN ZnodeGiftCard GC ON V.VoucherNumber = GC.CardNumber
			WHERE IsExistInOrder IN ('FALSE','0')			
		END
	END

		UPDATE GC SET GC.UserId=@UserId  
		FROM  ZnodeGiftCard GC 
		INNER JOIN #TempVoucher V ON V.VoucherNumber = GC.CardNumber
		WHERE  GC.Userid IS NULL

	----Voucher end
	
	--Update user details
	IF @FirstName IS NULL
	BEGIN
		DECLARE @FirstName1 VARCHAR(300), @LastName1 VARCHAR(300), @PhoneNumber VARCHAR(300)
		SELECT @FirstName1=FirstName, @LastName1 = LastName, @PhoneNumber=PhoneNumber
		FROM ZnodeAddress WITH (NOLOCK)  WHERE AddressId = @BillingAddressId

		UPDATE ZnodeUser 
		SET FirstName = @FirstName, LastName = @LastName, PhoneNumber = @PhoneNumber
		WHERE UserId = @UserId
	END

	--Update address details
	IF @SetBillingShippingFlags IN ('TRUE','1')
	BEGIN
		UPDATE ZnodeAddress
		SET IsBilling = 1, IsShipping = 1
		WHERE AddressId = @BillingAddressId
	END

	--ReferralCommission details
	IF @IsReferralCommission IN ('TRUE','1')
	BEGIN
		INSERT INTO ZnodeOmsReferralCommission
		(
			UserId,OmsOrderDetailsId,OrderCommission,TransactionId,Description,ReferralCommission,ReferralCommissionTypeId
			,CreatedBy,CreatedDate,ModifiedBy,ModifiedDate
		)
		SELECT @UserId,@OmsOrderDetailsId,CASE WHEN @ReferralCommissionTypeId =1 THEN ((@CommissionAmount * ISNULL(@ReferralCommission,0)) / 100) ELSE @ReferralCommission END AS OrderCommission,'' AS TransactionId,'' AS Description,@ReferralCommission,@ReferralCommissionTypeId
			,@UserId,@GetDate,@UserId,@GetDate
	END
	
	---OmsTaxOrderSummary details
	IF EXISTS(SELECT * FROM ZnodeOmsTaxOrderSummary WITH (NOLOCK)  WHERE OmsOrderDetailsId = @OmsOrderDetailsId)
	BEGIN
		DELETE FROM ZnodeOmsTaxOrderSummary WHERE OmsOrderDetailsId = @OmsOrderDetailsId
	END

	INSERT INTO ZnodeOmsTaxOrderSummary (OmsOrderDetailsId,Tax,Rate,TaxName,TaxTypeName)
	SELECT 	@OmsOrderDetailsId AS OmsOrderDetailsId,
		Tbl.Col.value( 'Tax[1]', 'NVARCHAR(2000)' ) AS Tax,
		Tbl.Col.value( 'Rate[1]', 'NVARCHAR(2000)' ) AS Rate,
		Tbl.Col.value( 'TaxName[1]', 'NVARCHAR(2000)' ) AS TaxName,
		Tbl.Col.value( 'TaxTypeName[1]', 'NVARCHAR(2000)' ) AS TaxTypeName
	FROM @PostOrderXml.nodes('//PostOrderSubmitModel/TaxSummaryList/TaxSummaryModel') AS Tbl(Col)
	WHERE Tbl.Col.value( 'Tax[1]', 'NVARCHAR(2000)' ) IS NOT NULL
	--------

	--Remove 
	EXEC [Znode_DeleteSavedCartItem] @OmsCookieMappingId = @OmsCookieMappingId, @UserId = @UserId,@PortalId = @PortalId,@Status = 0  

	SET @Status = 1
	--COMMIT TRAN PostOrder
END TRY
BEGIN CATCH
--ROLLBACK TRAN PostOrder
	SET @Status = 0
	
	DECLARE @ERROR_PROCEDURE VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), 
	@ErrorCall NVARCHAR(MAX)= 'EXEC Znode_PostSubmitOrderProcess @PostOrderXml ='+CAST(@PostOrderXml AS VARCHAR(MAX))+' , @InventoryData = '+CAST(@InventoryData AS VARCHAR(50))+',@UserId ='+CAST(@UserId AS VARCHAR(50))+',@PortalId ='+CAST(@PortalId AS VARCHAR(50))+',@Status ='+CAST(@Status AS VARCHAR(50));
	
	EXEC Znode_InsertProcedureErrorLog
	@ProcedureName    = 'Znode_PostSubmitOrderProcess',
	@ErrorInProcedure = @ERROR_PROCEDURE,
	@ErrorMessage     = @ErrorMessage,
	@ErrorLine        = @ErrorLine,
	@ErrorCall        = @ErrorCall;
END CATCH

END

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetCategoryFeedList')
	DROP PROC Znode_GetCategoryFeedList

GO

CREATE PROCEDURE [dbo].[Znode_GetCategoryFeedList]
( @PortalId         NVARCHAR(MAX) = NULL,
  @LocaleId         INT,
  --will be used for CategoryId
  @CommaSeparatedId NVARCHAR(MAX) = NULL 
)
AS
/*
 Summary:This procedure is used to get effective keyword feeding of category list
 Unit Testing:
 EXEC Znode_GetCategoryFeedList 1 

*/

	BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @DefaultLocaleId INT= dbo.Fn_GetDefaultValue('Locale');

		DECLARE @TBL_DomainName TABLE
		(PortalId   INT,
		DomainName NVARCHAR(300),
		RowId      INT
		);

		DECLARE @TBL_PortalIds TABLE(PortalId INT);
		DECLARE @TBL_SEODetails TABLE
		(loc                   NVARCHAR(MAX),
		lastmod               DATETIME,
		[g:condition]         VARCHAR(100),
		[description]         NVARCHAR(MAX),
		[g:id]                INT,
		link                  VARCHAR(100),
		[g:identifier_exists] VARCHAR(200),
		DomainName            NVARCHAR(300),
		PortalId              INT,
		SEOCode               NVARCHAR(4000),
		CanonicalURL        VARCHAR(200), 
		RobotTag            VARCHAR(50)
		);

		INSERT INTO @TBL_PortalIds(PortalId)
		SELECT Zp.PortalId
		FROM Znodeportal AS ZP
		INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)
		INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PimCatalogId = ZPC.PublishCatalogId)
		INNER JOIN ZnodePublishCategoryEntity AS ZPP ON(ZPP.ZnodeCatalogId = ZPPC.PimCatalogId)
		WHERE EXISTS
			(
			SELECT TOP 1 1
			FROM DBO.Split(@PortalID, ',') AS Sp
			WHERE(CAST(sp.Item AS INT) = ZP.PortalId
			OR @PortalID = '0' )
			)
		GROUP BY Zp.PortalId;
	
	
		INSERT INTO @TBL_DomainName(PortalId,DomainName,RowId)
		SELECT TOP 1 ZD.PortalId,ZD.DomainName,    
		ROW_NUMBER() OVER(Partition BY ZD.DomainName,ZD.PortalId ORDER BY ZD.DomainName,ZD.PortalId) RowId                               
		FROM ZnodeDomain ZD
		WHERE EXISTS
			(
			SELECT TOP 1 1
			FROM @TBL_PortalIds TBP
			WHERE TBP.PortalId = ZD.PortalId
			)
		AND ApplicationType = 'Webstore'
		AND IsActive =1 
		AND IsDefault = 1;

		If Not Exists (Select TOP 1 1 from @TBL_DomainName)
        Begin
            INSERT INTO @TBL_DomainName(PortalId,DomainName,RowId)
            SELECT TOP 1 ZD.PortalId,ZD.DomainName,    
            ROW_NUMBER() OVER(Partition BY ZD.DomainName,ZD.PortalId ORDER BY ZD.DomainName,ZD.PortalId) RowId                               
            FROM ZnodeDomain ZD
            WHERE EXISTS
                (
                SELECT TOP 1 1
                FROM @TBL_PortalIds TBP
                WHERE TBP.PortalId = ZD.PortalId
                )
            AND ApplicationType = 'Webstore'
            AND IsActive =1 
            AND IsDefault = 0;
        End

		;WITH Cte_SeoDetailsWithLocale
		AS (
			SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],
			ZCSDL.SEODescription AS [description],ZPCC.ZnodeCategoryId AS [g:id],'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId ,ZCSD.SEOCode, ZCSDL.CanonicalURL, ZCSDL.RobotTag
			FROM ZnodePublishCategoryEntity AS ZPCC 
			LEFT JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PimCatalogId = ZPCC.ZnodeCatalogId)
			LEFT JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPPC.PimCatalogId)
			LEFT JOIN @TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = ZPC.PortalId)
			LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.CategoryCode = ZCSD.SEOCode AND ZPC.PortalId = ZCSD.PortalId
			AND EXISTS (SELECT TOP 1 1 FROM ZnodeCMSSEOType AS ZCST
			WHERE ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId  AND ZCST.Name = 'Category')) 
			LEFT  JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId
			AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))
			WHERE EXISTS
					(
					SELECT TOP 1 1
					FROM @TBL_PortalIds TBP
					WHERE ZPC.PortalId = TBP.PortalId
					)
			AND EXISTS (SELECT TOP 1 1 FROM  dbo.split(@CommaSeparatedId,',' ) SP WHERE SP.Item = ZPCC.CategoryCode)
		),
		
		Cte_SeoDetailsWithFirstLocale
		AS (SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithLocale
		WHERE LocaleId = @LocaleId),

		Cte_SeoDetailsWithDefaultLocale
		AS (SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithFirstLocale
		UNION ALL
		SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithLocale AS CTSDWL
		WHERE LocaleId = @DefaultLocaleId
		AND NOT EXISTS
		(
		SELECT TOP 1 1
		FROM Cte_SeoDetailsWithFirstLocale AS CTSDWDL
		WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId
		))

		INSERT INTO @TBL_SEODetails (loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName
		,PortalId,SEOCode, CanonicalURL, RobotTag)
		SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,SEOCode, CanonicalURL, RobotTag
		FROM Cte_SeoDetailsWithDefaultLocale;
		
		SELECT DISTINCT loc,lastmod,DomainName,[g:id] AS id,PortalId,b.Name AS Name,SEOCode, CanonicalURL, RobotTag
		FROM @TBL_SEODetails a
		left JOIN ZnodePublishCategoryEntity b ON(b.ZnodeCategoryId = a.[g:id] AND b.LOcaleId = @LocaleId)
		WHERE DomainName IS NOT NULL
		
		END TRY
		BEGIN CATCH
		DECLARE @Status BIT ;
		SET @Status = 0;
		DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetCategoryFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(10))+',@CommaSeparatedId='+@CommaSeparatedId+',@Status='+CAST(@Status AS VARCHAR(10));
              			 
		SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                    
		   
		EXEC Znode_InsertProcedureErrorLog
		@ProcedureName = 'Znode_GetCategoryFeedList',
		@ErrorInProcedure = @Error_procedure,
		@ErrorMessage = @ErrorMessage,
		@ErrorLine = @ErrorLine,
		@ErrorCall = @ErrorCall;
		END CATCH;
     END;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetProductFeedList')
	DROP PROC Znode_GetProductFeedList

GO

CREATE PROCEDURE [dbo].[Znode_GetProductFeedList]  
		(
		@PortalId   VARCHAR(2000) = NULL,  
		@SKU  SelectColumnList READONLY,  
		@LocaleId   INT,  
		@FeedType   NVARCHAR(MAX) = NULL   
		)
		AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC [Znode_GetProductFeedList] @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
		*/  
		BEGIN  
		BEGIN TRY  
		SET NOCOUNT ON;        
           
		IF OBJECT_ID('tempdb..#TBL_DomainName') IS NOT NULL
		DROP TABLE #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') IS NOT NULL
		DROP TABLE #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') IS NOT NULL
		DROP TABLE #TBL_PortalIds

		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		CREATE TABLE #TBL_DomainName 
		(PortalId   INT,
		DomainName NVARCHAR(300),
		RowId      INT
		);  	
         
		CREATE TABLE #TBL_SEODetails   
		(loc                   NVARCHAR(MAX),  
		lastmod               DATETIME,  
		[g:condition]         VARCHAR(100),  
		[description]         NVARCHAR(MAX),  
		[g:id]                INT,  
		link                  VARCHAR(100),  
		[g:identifier_exists] VARCHAR(200),  
		DomainName            NVARCHAR(300),  
		PortalId              INT , 
		SEOCode             NVARCHAR(4000), 
		CanonicalURL        VARCHAR(200), 
		RobotTag            VARCHAR(50)
		);  
		--CREATE TABLE #TBL_CompleteDetailes   
		--(loc                   NVARCHAR(MAX),  
		--lastmod               DATETIME,  
		--[g:condition]         VARCHAR(100),  
		--[description]         NVARCHAR(MAX),  
		--[g:id]                INT,  
		--link                  VARCHAR(100),  
		--[g:identifier_exists] VARCHAR(200),  
		--DomainName            NVARCHAR(300),  
		--PortalId              INT,  
		--[g:availability]      NVARCHAR(1000),  
		--SKU                   NVARCHAR(1000),  
		--SEOCode               NVARCHAR(4000),
		--CanonicalURL        VARCHAR(200), 
		--RobotTag            VARCHAR(50) 
		--);  
		DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
		CREATE TABLE #TBL_PortalIds (PortalId INT);  
			
		select * into #SKU from @SKU
		create index IDX_#SKU on #SKU(StringColumn)

		INSERT INTO #TBL_PortalIds  
		SELECT Zp.PortalId   
		FROM Znodeportal AS ZP   
		INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
		INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PimCatalogId = ZPC.PublishCatalogId)
		INNER JOIN ZnodePublishProductEntity AS ZPPE ON (ZPPC.PimCatalogId  = ZPPE.ZnodeCatalogId)
		WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp WHERE sp.StringColumn  = ZPPE.SKU OR StringColumn = '0')  
		AND EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
		WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
		AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
		AND IsActive = 1 AND ApplicationType = 'Webstore' )  
		GROUP BY Zp.PortalId;   
		
		INSERT INTO #TBL_DomainName   
		SELECT  TOP 1  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
		FROM ZnodeDomain AS ZD   
		WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
		AND IsActive = 1 AND ApplicationType = 'Webstore' AND IsDefault = 1 

		if not exists (select top 1 1 from #TBL_DomainName)
		INSERT INTO #TBL_DomainName   
		SELECT  TOP 1 PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
		FROM ZnodeDomain AS ZD   
		WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
		AND IsActive = 1 AND ApplicationType = 'Webstore' AND IsDefault = 0 
 
		IF EXISTS(SELECT * FROM #SKU)
        BEGIN
		    --INSERT INTO #Cte_SeoDetailsWithLocale(CMSSEODetailId ,loc ,lastmod ,[g:condition] ,[description] ,[g:id] ,link ,[g:identifier_exists] ,DomainName ,PortalId,LocaleId ,SEOCode ,CanonicalURL ,RobotTag)
			SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.ZnodeProductId AS [g:id],  
            '' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
			INTO #Cte_SeoDetailsWithLocale
			FROM ZnodePublishProductEntity AS ZPCC   
			INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.ZnodeCatalogId)  
			--INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
			LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
			LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
			LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
			LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
			WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp  
			WHERE (sp.StringColumn  = ZPCC.SKU) )--OR StringColumn = '0')  
			AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId)  
			
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
			INTO #Cte_SeoDetailsWithFirstLocale
			FROM #Cte_SeoDetailsWithLocale   
			WHERE LocaleId = @LocaleId  
    
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
			INTO #Cte_SeoDetailsWithDefaultLocale
			FROM #Cte_SeoDetailsWithFirstLocale  
			
			INSERT INTO #Cte_SeoDetailsWithDefaultLocale 
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
			FROM #Cte_SeoDetailsWithLocale AS CTSDWL  
			WHERE LocaleId = @DefaultLocaleId   
			AND NOT EXISTS(SELECT TOP 1 1 FROM #Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId)  
          
			INSERT INTO #TBL_SEODetails  
			SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
			FROM #Cte_SeoDetailsWithDefaultLocale;  

			--CREATE INDEX Idx_#TBL_SEODetails ON #TBL_SEODetails([g:id])

			SELECT DISTINCT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
			CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
			END AS [g:availability],
			ZPP.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag
			INTO #TBL_CompleteDetailes  
			FROM ZnodePublishProductEntity AS ZPP   
			LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.ZnodeProductId = TBSD.[g:id] )  
			LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
			LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
			LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPP.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
			WHERE EXISTS(SELECT TOP 1 1 FROM #SKU AS Sp WHERE (sp.StringColumn  = ZPP.SKU))-- OR sp.StringColumn = '0')
			AND EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId)	
			GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPP.SKU,ZPP.LocaleId, TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag;    
			
			DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
			CREATE INDEX Idx_#TBL_CompleteDetailes ON #TBL_CompleteDetailes(PortalId,SKU)
	
	
			SELECT DISTINCT zp.PortalId,round(ZPS.RetailPrice,2) as RetailPrice,Zps.SKU,tbcd.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
			INTO #Cte_PortalList
			FROM ZnodePriceList AS ZPL   
			LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
			LEFT JOIN ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
			LEFT JOIN ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
			LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
			LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
			WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
			AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
			GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
 
			SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
			,CTPL.RetailPrice AS [g:price],@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode, TBCD.CanonicalURL, TBCD.RobotTag 
			FROM #TBL_CompleteDetailes AS TBCD   
			LEFT JOIN #Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
			WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  


		END
     	ELSE
		BEGIN
		    --INSERT INTO #Cte_SeoDetailsWithLocale(CMSSEODetailId ,loc ,lastmod ,[g:condition] ,[description] ,[g:id] ,link ,[g:identifier_exists] ,DomainName ,PortalId,LocaleId ,SEOCode ,CanonicalURL ,RobotTag)
			SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZPCC.ZnodeProductId AS [g:id],  
			'' AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
			INTO #Cte_SeoDetailsWithLocale1
			FROM ZnodePublishProductEntity AS ZPCC   
			INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.ZnodeCatalogId)  
			-- INNER JOIN @TBL_PortalIds TBLP ON (TBLP.PortalId = ZPC.PortalId)  
			LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
			LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
			LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
			LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId )   
			WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId)
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
			INTO #Cte_SeoDetailsWithFirstLocale1
			FROM #Cte_SeoDetailsWithLocale1   
			WHERE LocaleId = @LocaleId  
    
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
			INTO #Cte_SeoDetailsWithDefaultLocale1
			FROM #Cte_SeoDetailsWithFirstLocale1  
			
			INSERT INTO #Cte_SeoDetailsWithDefaultLocale1 
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
			FROM #Cte_SeoDetailsWithLocale1 AS CTSDWL  
			WHERE LocaleId = @DefaultLocaleId   
			AND NOT EXISTS(SELECT TOP 1 1 FROM #Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId)  
          
			INSERT INTO #TBL_SEODetails  
			SELECT DISTINCT loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
			FROM #Cte_SeoDetailsWithDefaultLocale1;  
		  
			SELECT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,  
			CASE WHEN SUM(ZI.Quantity) > 0 THEN 'In Stock' ELSE CASE WHEN @FeedType = 'Google' THEN 'Out Of Stock' ELSE 'Not In Stock' END  
			END AS [g:availability],
			ZPP.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag  
			INTO #TBL_CompleteDetailes1
			FROM ZnodePublishProductEntity AS ZPP   
			LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.ZnodeProductId = TBSD.[g:id] )  
			LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
			LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
			LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPP.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  
			WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBSD.PortalId )	
			GROUP BY loc,lastmod,[g:condition],[description],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPP.SKU,ZPP.LocaleId, TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag;    
			

			DECLARE @MediaConfiguration1 NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
			CREATE INDEX Idx_#TBL_CompleteDetailes1 ON #TBL_CompleteDetailes(PortalId,SKU)
	
	
			SELECT DISTINCT zp.PortalId,round(ZPS.RetailPrice,2) as RetailPrice,Zps.SKU,tbcd.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
			INTO #Cte_PortalList1
			FROM ZnodePriceList AS ZPL   
			LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
			LEFT JOIN ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
			LEFT JOIN ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
			LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
			LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
			WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
			AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
			GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SKU ,TBCD.SEOCode  
 
			SELECT loc,lastmod,[g:condition],[description],[g:id],link,[g:availability],[g:identifier_exists],DomainName,TBCD.PortalId  
			,CTPL.RetailPrice AS [g:price],@MediaConfiguration AS MediaConfiguration, TBCD.SEOCode, TBCD.CanonicalURL, TBCD.RobotTag 
			FROM #TBL_CompleteDetailes1 AS TBCD   
			LEFT JOIN #Cte_PortalList1 AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
			WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId )  

		END
 
		IF OBJECT_ID('tempdb..#TBL_DomainName') IS NOT NULL
		DROP TABLE #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') IS NOT NULL
		DROP TABLE #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') IS NOT NULL
		DROP TABLE #TBL_PortalIds
		
		END TRY  
		BEGIN CATCH  
			DECLARE @Status BIT ;  
			SET @Status = 0;  
			DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                 
			SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
     
			EXEC Znode_InsertProcedureErrorLog  
			@ProcedureName = 'Znode_GetProductFeedList',  
			@ErrorInProcedure = @Error_procedure,  
			@ErrorMessage = @ErrorMessage,  
			@ErrorLine = @ErrorLine,  
			@ErrorCall = @ErrorCall;  
		END CATCH  
		END
		;

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_GetXmlProductFeedList')
	DROP PROC Znode_GetXmlProductFeedList

GO

CREATE PROCEDURE [dbo].[Znode_GetXmlProductFeedList]  
(
	@PortalId   VARCHAR(2000) = NULL,   
	@LocaleId   INT,  
	@FeedType   NVARCHAR(MAX) = NULL   
)
AS  
/*  
Summary: This Procedure is used to get effective keyword feeding of Product list  
 SELECT * FROM ZnodePublishProductDetail  
 SELECT * FROM ZnodePublishProduct WHERE PublishCatalogId = 3  
 SELECT * FROM ZnodePortalCatalog   
 Unit Testing:  
 EXEC [Znode_GetXmlProductFeedList] @PortalId='0',@ProductIds = '116,117,118'  
 ,@LocaleId=1,@FeedType='Bing'   
  
*/  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON;        
           
		IF OBJECT_ID('tempdb..#TBL_DomainName') IS NOT NULL
		DROP TABLE #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') IS NOT NULL
		DROP TABLE #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') IS NOT NULL
		DROP TABLE #TBL_PortalIds

		IF OBJECT_ID('tempdb..#TBL_PricePrecedence') IS NOT NULL
		DROP TABLE #TBL_PricePrecedence

		DECLARE @GetDate DATETIME = dbo.Fn_GetDate();
		CREATE TABLE #TBL_DomainName 
		(PortalId   INT,
		DomainName NVARCHAR(300),
		RowId      INT
		);  	
         
		CREATE TABLE #TBL_SEODetails   
		(loc                   NVARCHAR(MAX),  
		lastmod               DATETIME,  
		[g:condition]         VARCHAR(1000),  
		[description]         NVARCHAR(MAX), 
		[SEOTitle]			  NVARCHAR(MAX),	
		[g:id]                INT,  
		link                  VARCHAR(1000),  
		[g:identifier_exists] VARCHAR(2000),  
		DomainName            NVARCHAR(3000),  
		PortalId              INT , 
		SEOCode             NVARCHAR(4000), 
		CanonicalURL        VARCHAR(2000), 
		RobotTag            VARCHAR(500)
		);  
		
		DECLARE @DefaultLocaleId INT=dbo.Fn_GetDefaultLocaleId()  ;
		CREATE TABLE #TBL_PortalIds (PortalId INT);  
		
		INSERT INTO #TBL_PortalIds  

		SELECT Zp.PortalId   
		FROM Znodeportal AS ZP   
		INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PortalId = Zp.PortalId)  
		INNER JOIN ZnodePublishCatalog AS ZPPC ON(ZPPC.PimCatalogId = ZPC.PublishCatalogId)
		INNER JOIN ZnodePublishProductEntity AS ZPPE ON (ZPPC.PimCatalogId  = ZPPE.ZnodeCatalogId)
		WHERE		
		EXISTS(SELECT TOP 1 1 FROM DBO.Split(@PortalId, ',') AS Sp  
		WHERE(CAST(sp.Item AS INT)) = Zp.PortalId  OR @PortalId = '0')  
		AND EXISTS (SELECT TOP 1 1 FROM ZnodeDomain ZD WHERE ZP.PortalId = ZD.PortalId  
		AND IsActive = 1 AND ApplicationType = 'Webstore')  
		GROUP BY Zp.PortalId;   
	
		INSERT INTO #TBL_DomainName   
		SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
		FROM ZnodeDomain AS ZD   
		WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
		AND IsActive = 1 AND ApplicationType = 'Webstore' AND IsDefault = 1 

		if not exists (select top 1 1 from #TBL_DomainName)
		INSERT INTO #TBL_DomainName   
		SELECT  PortalId,DomainName,ROW_NUMBER() OVER(PARTITION BY PortalId ORDER BY DomainName)   
		FROM ZnodeDomain AS ZD   
		WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZD.PortalId)  
		AND IsActive = 1 AND ApplicationType = 'Webstore'

	
		
	    	SELECT DISTINCT ZCSD.CMSSEODetailId,ZCSD.SEOURL AS loc,ZCSD.ModifiedDate AS lastmod,'new' AS [g:condition],ZCSDL.SEODescription AS [description],ZCSDL.SEOTitle AS [SEOTitle], ZPCC.ZnodeProductId AS [g:id],  
            ZCSD.SEOUrl AS link,'false' AS [g:identifier_exists],TBDN.DomainName,ZPC.PortalId,ISNULL(ZCSDL.LocaleId, @DefaultLocaleId) AS LocaleId , ZCSD.SEOCode , ZCSDL.CanonicalURL, ZCSDL.RobotTag 
			INTO #Cte_SeoDetailsWithLocale
			FROM ZnodePublishProductEntity AS ZPCC   
			INNER JOIN ZnodePortalCatalog AS ZPC ON(ZPC.PublishCatalogId = ZPCC.ZnodeCatalogId)  
			LEFT JOIN ZnodeCMSSEODetail AS ZCSD ON(ZPCC.SKU = ZCSD.SEOCode and ZCSD.PortalId = ZPC.PortalId)  
			LEFT JOIN ZnodeCMSSEOType AS ZCST ON(ZCST.CMSSEOTypeId = ZCSD.CMSSEOTypeId AND ZCST.Name = 'Product')  
			LEFT JOIN ZnodeCMSSEODetailLocale AS ZCSDL ON(ZCSDL.CMSSEODetailId = ZCSD.CMSSEODetailId AND ZCSDL.LocaleId IN(@LocaleId, @DefaultLocaleId))  
			LEFT JOIN #TBL_DomainName AS TBDN ON(TBDN.RowId = 1 AND TBDN.PortalId = zpc.PortalId)   
			WHERE EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPC.PortalId)  
			
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[SEOTitle],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
			INTO #Cte_SeoDetailsWithFirstLocale
			FROM #Cte_SeoDetailsWithLocale   
			WHERE LocaleId = @LocaleId  
    
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[SEOTitle],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode , CanonicalURL, RobotTag 
			INTO #Cte_SeoDetailsWithDefaultLocale
			FROM #Cte_SeoDetailsWithFirstLocale  
			
			INSERT INTO #Cte_SeoDetailsWithDefaultLocale 
			SELECT CMSSEODetailId,loc,lastmod,[g:condition],[description],[SEOTitle],[g:id],link,[g:identifier_exists],DomainName,PortalId,LocaleId,SEOCode, CanonicalURL, RobotTag  
			FROM #Cte_SeoDetailsWithLocale AS CTSDWL  
			WHERE LocaleId = @DefaultLocaleId   
			AND NOT EXISTS(SELECT TOP 1 1 FROM #Cte_SeoDetailsWithFirstLocale AS CTSDWDL WHERE CTSDWDL.CMSSEODetailId = CTSDWL.CMSSEODetailId)  
         
		 
			INSERT INTO #TBL_SEODetails  
			SELECT DISTINCT loc,lastmod,[g:condition],[description],[SEOTitle],[g:id],link,[g:identifier_exists],DomainName,PortalId ,SEOCode, CanonicalURL, RobotTag  
			FROM #Cte_SeoDetailsWithDefaultLocale;
			
			select DISTINCT a.ZnodeProductId, d.AttributeDefaultValueCode as OutOfStockOptions
			into #TempProduct_OutOfStockOptions
			from ZnodePublishProductEntity a
			inner join ZnodePimAttributeValue b on a.ZnodeProductId = b.PimProductId
			inner join ZnodePimProductAttributeDefaultValue c on b.PimAttributeValueId = c.PimAttributeValueId
			inner join ZnodePimAttributeDefaultValue d on c.PimAttributeDefaultValueId = d.PimAttributeDefaultValueId
			where EXISTS(select top 1 1 from ZnodePimAttribute ZPA where AttributeCode = 'OutOfStockOptions' AND b.PimAttributeId = ZPA.PimAttributeId)
			
			SELECT DISTINCT TBSD.loc,TBSD.lastmod,TBSD.[g:condition],TBSD.[description],TBSD.[SEOTitle],TBSD.[g:id],TBSD.link,TBSD.[g:identifier_exists],TBSD.DomainName,TBSD.PortalId,OOS.OutOfStockOptions,
			CASE WHEN SUM(ISNULL(ZI.Quantity,0)) > 0 THEN 'In Stock'
			     WHEN SUM(ISNULL(ZI.Quantity,0)) = 0 AND ISNULL(OOS.OutOfStockOptions,'') <> 'DisablePurchasing'  THEN 'In Stock'
                 WHEN @FeedType = 'Xml'THEN 'Out Of Stock' 
                 ELSE 'Not In Stock'  END AS [g:availability],
				 
			ZPP.SKU ,TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag, ZPP.ZnodeProductId,ZPP.Name As ProductName
			INTO #TBL_CompleteDetailes  
			FROM ZnodePublishProductEntity AS ZPP   
			inner join #TempProduct_OutOfStockOptions OOS ON ZPP.ZnodeProductId = OOS.ZnodeProductId
			LEFT JOIN #TBL_SEODetails AS TBSD ON(ZPP.ZnodeProductId = TBSD.[g:id] )  
			LEFT JOIN ZnodePortalWarehouse AS ZPW ON(ZPW.PortalId = TBSD.PortalId)  
			LEFT JOIN ZnodePortalAlternateWarehouse AS ZAPW ON(ZAPW.PortalWarehouseId = ZPW.PortalWarehouseId)  
			LEFT JOIN ZnodeInventory AS ZI ON(ZI.SKU = ZPP.SKU AND (ZI.WarehouseId = ZPW.WarehouseId OR ZI.WarehouseId = ZAPW.WarehouseId))  			
			WHERE  ZPP.LocaleId = @LocaleId
			GROUP BY loc,lastmod,[g:condition],[description],TBSD.[SEOTitle],[g:id],link,[g:identifier_exists],DomainName,TBSD.PortalId,ZPP.SKU,ZPP.LocaleId, TBSD.SEOCode, TBSD.CanonicalURL, TBSD.RobotTag, ZPP.ZnodeProductId,ZPP.Name ,OOS.OutOfStockOptions;    
			
			DECLARE @MediaConfiguration NVARCHAR(2000)=((SELECT TOP 1 ISNULL(CASE WHEN CDNURL = '' THEN NULL ELSE CDNURL END,URL) FROM ZnodeMediaConfiguration WHERE IsActive = 1));    
  
			CREATE INDEX Idx_#TBL_CompleteDetailes ON #TBL_CompleteDetailes(PortalId,SKU)
			
			select * into #TBL_PricePrecedence from(
			select ROW_NUMBER() OVER(PARTITION BY sku ORDER BY Precedence) rnk_min, sku, RetailPrice,SalesPrice,znodeprice.PriceListId,ZnodePriceList.ListCode,
			ZnodePriceListPortal.Precedence
			from znodeprice
			left join ZnodePriceList on ZnodePriceList.PriceListId = znodeprice.PriceListId
			left join  ZnodePriceListPortal on ZnodePriceList.PriceListId= ZnodePriceListPortal.PriceListId where PortalId = @PortalId 
			)a
			order by a.sku,Precedence
			delete from #TBL_PricePrecedence where rnk_min<>1 
	
			SELECT zp.PortalId,round(isnull(Zps.SalesPrice,Zps.RetailPrice),2) as Price,Zps.SKU,tbcd.SEOCode,ROW_NUMBER() OVER(PARTITION BY Zps.SKU,zp.PortalId ORDER BY ZPS.RetailPrice) AS RowId  
			INTO #Cte_PortalList
			FROM ZnodePriceList AS ZPL   
			LEFT JOIN ZnodePriceListPortal AS ZPLP ON ZPL.PriceListId = ZPLP.PriceListId  
			LEFT JOIN ZnodeCulture AS zc ON ZPL.CultureId = zc.CultureId
			LEFT JOIN ZnodePortal AS zp ON ZPLP.PortalId = zp.PortalId  
		    LEFT JOIN #TBL_PricePrecedence Zps ON(Zps.PriceListId = ZPL.PriceListId) 
			--LEFT JOIN ZnodePrice AS Zps ON(Zps.PriceListId = ZPL.PriceListId)   
			LEFT JOIN #TBL_CompleteDetailes AS TBCD ON(TBCD.PortalId = Zp.PortalId AND TBCD.SKU = Zps.Sku)   
			WHERE CAST(@GetDate AS DATE) BETWEEN ZPL.ActivationDate AND ZPL.ExpirationDate   
			AND EXISTS( SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = ZPLP.PortalId)   
			GROUP BY zp.PortalId,ZPS.RetailPrice,Zps.SalesPrice,Zps.SKU ,TBCD.SEOCode  
			
			SELECT D.ZnodeProductId,C.AttributeDefaultValueCode AS Brand
			INTO #BrandDetails
			FROM ZnodePimAttributeValue A
			INNER JOIN ZnodePimProductAttributeDefaultValue B ON B.PimAttributeValueId=A.PimAttributeValueId
			INNER JOIN ZnodePimAttributeDefaultValue C ON C.PimAttributeDefaultValueId=A.PimAttributeDefaultValueId	
			INNER JOIN ZnodepublishproductEntity D ON  A.PimProductId = D.ZnodeProductId 
			WHERE EXISTS(SELECT * FROM ZnodePimAttribute D WHERE D.PimAttributeId=A.PimAttributeId AND D.AttributeCode='Brand' )
			AND EXISTS(SELECT * FROM #TBL_CompleteDetailes E Where E.ZnodeProductId = D.ZnodeProductId)		
			
			SELECT A.CategoryName , A.ZnodeProductId AS PublishProductId, ROW_NUMBER() OVER(PARTITION BY A.ZnodeProductId ORDER BY A.ZnodeProductId) AS RowId
			INTO #ProductCategories
			FROM ZnodePublishProductEntity A 
			WHERE EXISTS(SELECT * FROM #TBL_CompleteDetailes B WHERE A.ZnodeProductId = B.ZnodeProductId)
			AND ISNULL(A.CategoryName,'') <> ''

			DELETE FROM #ProductCategories WHERE RowId <> 1
 
			SELECT SKU,SUM(cast(Quantity as numeric(28,0)))AS Inventory 
			into #InventotyDetails 
			FROM ZnodeInventory A 
			WHERE EXISTS(SELECT * FROM #TBL_CompleteDetailes B where A.SKU=B.SKU)
			GROUP BY SKU  

			SELECT F.ZnodeProductId,[Path] AS ImagePath
			INTO #ProductImage
			FROM ZnodePimAttributeValue a
			INNER JOIN ZnodePimProductAttributeMedia b on a.PimAttributeValueId = b.PimAttributeValueId
			INNER JOIN ZnodeMedia d on b.MediaId = d.MediaId
			INNER JOIN ZnodePublishProductEntity F ON  A.PimProductId = F.ZnodeProductId 
			WHERE EXISTS(SELECT * FROM ZnodePimAttribute C WHERE C.PimAttributeId=A.PimAttributeId AND C.AttributeCode='PRODUCTIMAGE' )
			AND EXISTS(SELECT * FROM #TBL_CompleteDetailes E Where E.ZnodeProductId = F.ZnodeProductId)		

						 
			SELECT 
			DomainName AS DomainName,
			isnull(ProductName,SEOTitle) as [Title],
			--lastmod,
			--[g:condition],
			[description] AS [Description],
			CAST([g:id] AS nvarchar(50) ) AS ProductID,
			[g:availability] AS [Availability],
			--[g:identifier_exists],	
			--TBCD.PortalId,
			Cast(CAST(CTPL.Price AS numeric(28,3))as nvarchar(100)) AS Price,
			@MediaConfiguration AS MediaConfiguration,
			--TBCD.SEOCode,
			--TBCD.CanonicalURL,
			--TBCD.RobotTag,
			PC.CategoryName AS Category,
			CAST(ID.Inventory AS nvarchar(50) ) AS Inventory,
			BD.Brand AS Brand,
			link AS Link,
			PM.IMAGEPATH AS Image_Link,
			CTPL.SKU AS ID
			FROM #TBL_CompleteDetailes AS TBCD   
			LEFT JOIN #Cte_PortalList AS CTPL ON(CTPL.PortalId = TBCD.PortalId AND CTPL.SKU = TBCD.SKU AND CTPL.RowID = 1)  
			LEFT JOIN #ProductCategories PC ON TBCD.ZnodeProductId = PC.PublishProductId
			LEFT JOIN #InventotyDetails ID ON TBCD.SKU = ID.SKU 
			LEFT JOIN #BrandDetails BD on TBCD.ZnodeProductId=BD.ZnodeProductId
			LEFT JOIN #ProductImage PM on TBCD.ZnodeProductId=PM.ZnodeProductId
			WHERE  EXISTS(SELECT TOP 1 1 FROM #TBL_PortalIds AS TBP WHERE TBP.PortalId = TBCD.PortalId)

		IF OBJECT_ID('tempdb..#TBL_DomainName') IS NOT NULL
		DROP TABLE #TBL_DomainName

		IF OBJECT_ID('tempdb..#TBL_SEODetails') IS NOT NULL
		DROP TABLE #TBL_SEODetails

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_CompleteDetailes') IS NOT NULL
		DROP TABLE #TBL_CompleteDetailes

		IF OBJECT_ID('tempdb..#TBL_PortalIds') IS NOT NULL
		DROP TABLE #TBL_PortalIds

		IF OBJECT_ID('tempdb..#TBL_PricePrecedence') IS NOT NULL
		DROP TABLE #TBL_PricePrecedence
		
END TRY  
BEGIN CATCH  
	DECLARE @Status BIT ;  
	SET @Status = 0;  
	DECLARE @Error_procedure VARCHAR(1000)= ERROR_PROCEDURE(), @ErrorMessage NVARCHAR(MAX)= ERROR_MESSAGE(), @ErrorLine VARCHAR(100)= ERROR_LINE(), @ErrorCall NVARCHAR(MAX)= 'EXEC Znode_GetXmlProductFeedList @PortalId = '+@PortalId+',@LocaleId='+CAST(@LocaleId AS VARCHAR(50))+',@FeedType='+CAST(@FeedType AS VARCHAR(50))+',@Status='+CAST(@Status AS VARCHAR(10));  
                 
	SELECT 0 AS ID,CAST(0 AS BIT) AS Status;                      
     
	EXEC Znode_InsertProcedureErrorLog  
	@ProcedureName = 'Znode_GetXmlProductFeedList',  
	@ErrorInProcedure = @Error_procedure,  
	@ErrorMessage = @ErrorMessage,  
	@ErrorLine = @ErrorLine,  
	@ErrorCall = @ErrorCall;  
END CATCH  
   
END;

GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_ZnodeOmsOrderDetails_PortalId_UserId_IsActive' AND object_id = OBJECT_ID('ZnodeOmsOrderDetails'))
BEGIN
	CREATE INDEX IX_ZnodeOmsOrderDetails_PortalId_UserId_IsActive
		ON ZnodeOmsOrderDetails (PortalId, UserId,IsActive);
END

GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_ZnodeOmsSavedCartLineItem_OmsSavedCartId_SKU_OrderLineItemRelationshipTypeId' AND object_id = OBJECT_ID('ZnodeOmsSavedCartLineItem'))
BEGIN
	CREATE INDEX IX_ZnodeOmsSavedCartLineItem_OmsSavedCartId_SKU_OrderLineItemRelationshipTypeId
		ON ZnodeOmsSavedCartLineItem (OmsSavedCartId,SKU ,OrderLineItemRelationshipTypeId);
END

GO
ALTER INDEX [PK_ZnodeOmsSavedCart] ON [dbo].[ZnodeOmsSavedCart] SET ( ALLOW_PAGE_LOCKS = OFF )
GO
ALTER INDEX [PK_ZnodeOmsSavedCartLineItem] ON [dbo].[ZnodeOmsSavedCartLineItem] SET ( ALLOW_PAGE_LOCKS = OFF )

GO

IF EXISTS(SELECT * FROM SYS.PROCEDURES WHERE NAME = 'Znode_DeleteOrderById')
	DROP PROC Znode_DeleteOrderById

GO

CREATE PROCEDURE [dbo].[Znode_DeleteOrderById]
(
	@OrderDetailId INT = 0 ,
	@Status   BIT OUT,
	@OmsOrderIds TransferId READONLY 
)
AS
/*
	begin tran
	exec Znode_DeleteOrderById 6
	rollback tran
*/
BEGIN
  SET NOCOUNT ON
   BEGIN  TRAN DeleteOrderById
  BEGIN TRY 
		   	DECLARE @OmsOrderId TABLE (OmsOrderId INT ) 
			DECLARE @OmsOrderDetailsId TABLE (OmsOrderDetailsId  INT ) 
			
			INSERT INTO  @OmsOrderId 
			SELECT Id 
			FROM  @OmsOrderIds


			Insert into @OmsOrderId
				Select OmsOrderId from ZnodeOmsOrderDetails a
				Where OmsOrderDetailsId = @OrderDetailId and not exists 
				(select * from @OmsOrderId b where b.OmsOrderId = a.OmsOrderId)


			INSERT INTO @OmsOrderDetailsId 
			SELECT OmsOrderDetailsId 
			FROM ZnodeOmsOrderDetails  ZP 
			WHERE (OmsOrderDetailsId = @OrderDetailId OR 
			EXISTS (SELECT TOP 1 1  FROM @OmsOrderId WHERE OmsOrderId = ZP.OmsOrderId)  ) 

			
			DECLARE @TBL_OmsOrderLineItems TABLE (OmsOrderLineItemsId INT,OmsOrderShipmentId INT, OmsOrderDetailsId INT)
			INSERT INTO @TBL_OmsOrderLineItems
			SELECT OmsOrderLineItemsId,OmsOrderShipmentId, OmsOrderDetailsId 
			FROM ZnodeOmsOrderLineItems S 
			WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId TR WHERE TR.OmsOrderDetailsId = S.OmsOrderDetailsId )
			DELETE FROM ZnodeOmsOrderAttribute WHERE EXISTS (SELECT OmsOrderLineItemsId FROM @TBL_OmsOrderLineItems TY WHERE TY.OmsOrderLineItemsId = ZnodeOmsOrderAttribute.OmsOrderLineItemsId)
			DELETE FROM ZnodeOmsOrderDiscount WHERE EXISTS (SELECT OmsOrderLineItemsId FROM @TBL_OmsOrderLineItems TY WHERE TY.OmsOrderDetailsId = ZnodeOmsOrderDiscount.OmsOrderDetailsId   or TY.OmsOrderLineItemsId = ZnodeOmsOrderDiscount.OmsOrderLineItemId  )
			DELETE FROM ZnodeOmsOrderWarehouse WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsOrderWarehouse.OmsOrderLineItemsId  )
			DELETE FROM ZnodeRmaRequestItem WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeRmaRequestItem.OmsOrderLineItemsId  )
			DELETE FROM ZnodeOmsOrderLineItemsAdditionalCost WHERE EXISTS ( SELECT TOP 1 1 FROM 
			ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)
			AND ZnodeOmsOrderLineItems.OmsOrderLineItemsId = ZnodeOmsOrderLineItemsAdditionalCost.OmsOrderLineItemsId)

			DELETE FROM ZnodeOmsDownloadableProductKey
			WHERE EXISTS(SELECT * FROM ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsOrderLineItems.OmsOrderDetailsId)
						AND ZnodeOmsDownloadableProductKey.OmsOrderLineItemsId = ZnodeOmsOrderLineItems.OmsOrderLineItemsId)

			DELETE FROM ZnodeOmsPersonalizeItem WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsPersonalizeItem.OmsOrderLineItemsId)
		   	DELETE FROM ZnodeOmsTaxOrderLineDetails WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderLineItemsId = ZnodeOmsTaxOrderLineDetails.OmsOrderLineItemsId)
		   	DELETE FROM znodeGiftCardHistory WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =znodeGiftCardHistory.OmsOrderDetailsId)
		   	DELETE FROM znodeOmsEmailHistory WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =znodeOmsEmailHistory.OmsOrderDetailsId)
		   	DELETE FROM ZnodeOmsReferralCommission WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsReferralCommission.OmsOrderDetailsId)
		   	DELETE FROM ZnodeOmsTaxOrderDetails WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsTaxOrderDetails.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsHistory   WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsHistory.OmsOrderDetailsId)
			DELETE FROM znodeOmsNotes WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =znodeOmsNotes.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsOrderLineItems WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId TBLOLI WHERE TBLOLI.OmsOrderDetailsId = ZnodeOmsOrderLineItems.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsOrderShipment WHERE EXISTS (SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderShipmentId = ZnodeOmsOrderShipment.OmsOrderShipmentId )
		   	DELETE FROM ZnodeOmsCustomerShipping WHERE EXISTS(SELECT TOP 1 1  FROM @TBL_OmsOrderLineItems TBLOLI WHERE TBLOLI.OmsOrderDetailsId =ZnodeOmsCustomerShipping.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsOrderDetails  WHERE EXISTS (SELECT TOP 1 1 FROM @OmsOrderDetailsId rt WHERE rt.OmsOrderDetailsId =ZnodeOmsOrderDetails.OmsOrderDetailsId)
			DELETE FROM ZnodeOmsTaxRule WHERE EXISTS (SELECT TOP 1 1  FROM @OmsOrderId T WHERE T.OmsOrderId = ZnodeOmsTaxRule.OmsOrderId)
            DELETE FROM ZnodeOrderPayment WHERE EXISTS (SELECT TOP 1 1  FROM @OmsOrderId T WHERE T.OmsOrderId = ZnodeOrderPayment.OmsOrderId)
		   	DELETE FROM ZnodeOmsOrder WHERE EXISTS (SELECT TOP 1 1  FROM @OmsOrderId T WHERE T.OmsOrderId = ZnodeOmsOrder.OmsOrderId)
            
		SELECT 1 AS ID , CAST(1 AS BIT) AS Status;

        SET @Status = 1;    
		 COMMIT  TRAN DeleteOrderById
	END TRY
	BEGIN CATCH
		SELECT ERROR_MESSAGE	()
		SELECT 0 AS ID , CAST(0 AS BIT) AS Status;

		SET @Status = 0;
		
		ROLLBACK TRAN DeleteOrderById
		SELECT ERROR_MESSAGE()
	END CATCH
END